{"id":"../../node_modules/@sentry/utils/esm/env.js","dependencies":[{"name":"/home/pi/ioBroker.atlas-scientific-ezo-i2c/node_modules/@sentry/utils/esm/env.js.map","includedInParent":true,"mtime":1681998077838},{"name":"/home/pi/ioBroker.atlas-scientific-ezo-i2c/package.json","includedInParent":true,"mtime":1681998828100},{"name":"/home/pi/ioBroker.atlas-scientific-ezo-i2c/node_modules/@sentry/utils/package.json","includedInParent":true,"mtime":1681998077302}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBrowserBundle = isBrowserBundle;\n/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These fags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nfunction isBrowserBundle() {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/env.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../../src/env.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":21,"column":0}},{"source":"../../src/env.ts","name":null,"original":{"line":23,"column":6},"generated":{"line":26,"column":0}},{"source":"../../src/env.ts","name":null,"original":{"line":23,"column":16},"generated":{"line":26,"column":9}},{"source":"../../src/env.ts","name":null,"original":{"line":23,"column":31},"generated":{"line":26,"column":24}},{"source":"../../src/env.ts","name":null,"original":{"line":23,"column":31},"generated":{"line":26,"column":25}},{"source":"../../src/env.ts","name":null,"original":{"line":23,"column":31},"generated":{"line":26,"column":27}},{"source":"../../src/env.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":27,"column":2}},{"source":"../../src/env.ts","name":null,"original":{"line":24,"column":9},"generated":{"line":27,"column":9}},{"source":"../../src/env.ts","name":null,"original":{"line":24,"column":16},"generated":{"line":27,"column":16}},{"source":"../../src/env.ts","name":null,"original":{"line":24,"column":41},"generated":{"line":27,"column":41}},{"source":"../../src/env.ts","name":null,"original":{"line":24,"column":46},"generated":{"line":27,"column":46}},{"source":"../../src/env.ts","name":null,"original":{"line":24,"column":57},"generated":{"line":27,"column":57}},{"source":"../../src/env.ts","name":null,"original":{"line":24,"column":61},"generated":{"line":27,"column":61}},{"source":"../../src/env.ts","name":null,"original":{"line":24,"column":62},"generated":{"line":27,"column":62}},{"source":"../../src/env.ts","name":null,"original":{"line":24,"column":63},"generated":{"line":27,"column":63}},{"source":"../../src/env.ts","name":null,"original":{"line":24,"column":88},"generated":{"line":27,"column":88}},{"source":"../../src/env.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":28,"column":0}}],"sources":{"../../src/env.ts":"/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These fags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\ndeclare const __SENTRY_BROWSER_BUNDLE__: boolean | undefined;\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nexport function isBrowserBundle(): boolean {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n"},"lineCount":null}},"error":null,"hash":"52119f937737607dc130808144ebb282","cacheData":{"env":{}}}