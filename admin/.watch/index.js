(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __decorateClass = (decorators, target, key, kind) => {
    var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
    for (var i = decorators.length - 1, decorator; i >= 0; i--)
      if (decorator = decorators[i])
        result = (kind ? decorator(target, key, result) : decorator(result)) || result;
    if (kind && result)
      __defProp(target, key, result);
    return result;
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component4(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component4.prototype.isReactComponent = {};
          Component4.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component4.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component4.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component4.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component4.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement45(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement11(element, config, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement8(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement8(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement8(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext3(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error2) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef40(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (render.displayName == null) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (type.displayName == null) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext4(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState12(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef18(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect18(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create2, deps);
          }
          function useLayoutEffect8(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create2, deps);
          }
          function useCallback14(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo3(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create2, deps);
          }
          function useImperativeHandle7(ref, create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create2, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component5) {
            var prototype = Component5.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement8(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement8(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement8(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement45.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement11.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              /* @__PURE__ */ new Map([[frozenObject, null]]);
              /* @__PURE__ */ new Set([frozenObject]);
            } catch (e) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children8 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children8;
          exports.Component = Component4;
          exports.PureComponent = PureComponent;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext3;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef40;
          exports.isValidElement = isValidElement8;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.useCallback = useCallback14;
          exports.useContext = useContext4;
          exports.useDebugValue = useDebugValue2;
          exports.useEffect = useEffect18;
          exports.useImperativeHandle = useImperativeHandle7;
          exports.useLayoutEffect = useLayoutEffect8;
          exports.useMemo = useMemo3;
          exports.useReducer = useReducer;
          exports.useRef = useRef18;
          exports.useState = useState12;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e) {
                  setTimeout(_flushCallback, 0);
                  throw e;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame2 = window.requestAnimationFrame;
              var cancelAnimationFrame = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            while (index < length) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: /* @__PURE__ */ new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = /* @__PURE__ */ new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = /* @__PURE__ */ new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React69 = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React69.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React69) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment6 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              name,
              null,
              false,
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref4) {
            var name = _ref4[0], attributeName = _ref4[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              name,
              null,
              false,
              false
            );
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              name,
              null,
              false,
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize2 = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              false,
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              true,
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component4) {
            var prototype = Component4.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React69.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React69.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray2) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty2 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty2) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles61) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles61) {
                if (!styles61.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles61[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles61) {
            var style2 = node.style;
            for (var styleName in styles61) {
              if (!styles61.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles61[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles61[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles61) {
            var expanded = {};
            for (var key in styles61) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn, a, b, c, d) {
            return fn(a, b, c, d);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn, a, b) {
            if (isBatchingEventUpdates) {
              return fn(a, b);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn, a, b);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn, a, b, c, d);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event2) {
                  error2 = event2.error;
                  didSetError = true;
                  if (error2 === null && event2.colno === 0 && event2.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event2.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot = 256;
          var Passive = 512;
          var PassiveUnmountPendingDev = 8192;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ForceUpdateForLegacySuspense = 16384;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a.alternate === b)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true;
              }
              node = node.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var eventPriorities = /* @__PURE__ */ new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            "focusout",
            "blur",
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i += 2) {
              var topEvent = eventTypes[i];
              var event2 = eventTypes[i + 1];
              var capitalizedEvent = event2[0].toUpperCase() + event2.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i++) {
              eventPriorities.set(eventTypes[i], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var SyncBatchedLane = 2;
          var InputDiscreteHydrationLane = 4;
          var InputDiscreteLanes = 24;
          var InputContinuousHydrationLane = 32;
          var InputContinuousLanes = 192;
          var DefaultHydrationLane = 256;
          var DefaultLanes = 3584;
          var TransitionHydrationLane = 4096;
          var TransitionLanes = 4186112;
          var RetryLanes = 62914560;
          var SomeRetryLane = 33554432;
          var SelectiveHydrationLane = 67108864;
          var NonIdleLanes = 134217727;
          var IdleHydrationLane = 134217728;
          var IdleLanes = 805306368;
          var OffscreenLane = 1073741824;
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root2.expiredLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index2 = 31 - clz32(lanes);
            return index2 < 0 ? NoLanes : 1 << index2;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root2.suspendedLanes &= higherPriorityLanes;
            root2.pingedLanes &= higherPriorityLanes;
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root2) {
            root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root2, updateLane) {
            root2.mutableReadLanes |= updateLane & root2.pendingLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = 0;
            root2.pingedLanes = 0;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(
                null,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              );
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event2 = this.nativeEvent;
                if (!event2) {
                  return;
                }
                if (event2.preventDefault) {
                  event2.preventDefault();
                } else if (typeof event2.returnValue !== "unknown") {
                  event2.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event2 = this.nativeEvent;
                if (!event2) {
                  return;
                }
                if (event2.stopPropagation) {
                  event2.stopPropagation();
                } else if (typeof event2.cancelBubble !== "unknown") {
                  event2.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event2) {
              return event2.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event2) {
            if (event2 !== lastMouseEvent) {
              if (lastMouseEvent && event2.type === "mousemove") {
                lastMovementX = event2.screenX - lastMouseEvent.screenX;
                lastMovementY = event2.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event2;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event2) {
              if (event2.relatedTarget === void 0)
                return event2.fromElement === event2.srcElement ? event2.toElement : event2.fromElement;
              return event2.relatedTarget;
            },
            movementX: function(event2) {
              if ("movementX" in event2) {
                return event2.movementX;
              }
              updateMouseMovementPolyfillState(event2);
              return lastMovementX;
            },
            movementY: function(event2) {
              if ("movementY" in event2) {
                return event2.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event2) {
              return "clipboardData" in event2 ? event2.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event2) {
              if (event2.type === "keypress") {
                return getEventCharCode(event2);
              }
              return 0;
            },
            keyCode: function(event2) {
              if (event2.type === "keydown" || event2.type === "keyup") {
                return event2.keyCode;
              }
              return 0;
            },
            which: function(event2) {
              if (event2.type === "keypress") {
                return getEventCharCode(event2);
              }
              if (event2.type === "keydown" || event2.type === "keyup") {
                return event2.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event2) {
              return "deltaX" in event2 ? event2.deltaX : "wheelDeltaX" in event2 ? -event2.wheelDeltaX : 0;
            },
            deltaY: function(event2) {
              return "deltaY" in event2 ? event2.deltaY : "wheelDeltaY" in event2 ? -event2.wheelDeltaY : "wheelDelta" in event2 ? -event2.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event2 = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: event2,
                listeners
              });
              if (fallbackData) {
                event2.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event2.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event2 = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: event2,
                listeners
              });
              event2.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event2 = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event: event2,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument2 = outerNode.ownerDocument;
            var win = ownerDocument2 && ownerDocument2.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection2(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event2 = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: event2,
                  listeners
                });
                event2.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event2, listener, currentTarget) {
            var type = event2.type || "unknown-event";
            event2.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event2);
            event2.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event2, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event2.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event2, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event2.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event2, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event2 = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event2, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event2, target, common2, inCapturePhase) {
            var registrationName = event2._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common2) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common2) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event: event2,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common2 = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common2, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common2, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement45(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument2.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument2.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument2.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument2.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement45(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display2 = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display2);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id;
              }
            };
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component4, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component4)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component4 = node.type;
                    if (isContextProvider(Component4)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i < _queue.length; i++) {
                      var callback = _queue[i];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error2) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error2;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component4, baseProps) {
            if (Component4 && Component4.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps = Component4.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray = Array.isArray;
          var emptyRefsObject = new React69.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment6) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment6: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject = typeof newChild === "object" && newChild !== null;
              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (!(c !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version) {
            {
              mutableSource._workInProgressVersionPrimary = version;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component4, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component4(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component4(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root2 = getWorkInProgressRoot();
            if (!(root2 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                }
                markRootEntangled(root2, root2.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                } catch (error2) {
                  latestSetSnapshot(function() {
                    throw error2;
                  });
                }
              };
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create2, destroy, deps) {
            var effect = {
              tag,
              create: create2,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create2, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, destroy, nextDeps);
          }
          function mountEffect(create2, deps) {
            {
              if ("undefined" !== typeof jest) {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create2, deps);
          }
          function updateEffect(create2, deps) {
            {
              if ("undefined" !== typeof jest) {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create2, deps);
          }
          function mountLayoutEffect(create2, deps) {
            return mountEffectImpl(Update, Layout, create2, deps);
          }
          function updateLayoutEffect(create2, deps) {
            return updateEffectImpl(Update, Layout, create2, deps);
          }
          function imperativeHandleEffect(create2, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create2();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create2();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id = updateState()[0];
            return id;
          }
          function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0];
            return id;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if ("undefined" !== typeof jest) {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component4, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component4.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentName(Component4)
                  );
                }
              }
            }
            var render2 = Component4.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component4, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component4.type;
              if (isSimpleFunctionComponent(type) && Component4.compare === null && Component4.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentName(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component4.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component4.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(_type)
                );
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component4.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component4, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      "prop",
                      getComponentName(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component4, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component4.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentName(Component4)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component4, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component4, nextProps, context, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component4, nextProps, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component4.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentName(Component4)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component4)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component4, nextProps);
              mountClassInstance(workInProgress2, Component4, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component4, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component4, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component4, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component4, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component4, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component4.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component4, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root2 = workInProgress2.stateNode;
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i];
                    var version = mutableSourceEagerHydrationData[i + 1];
                    setWorkInProgressVersion(mutableSource, version);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component4 = init(payload);
            workInProgress2.type = Component4;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component4);
            var resolvedProps = resolveDefaultProps(Component4, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component4);
                  workInProgress2.type = Component4 = resolveFunctionForHotReloading(Component4);
                }
                child = updateFunctionComponent(null, workInProgress2, Component4, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component4 = resolveClassForHotReloading(Component4);
                }
                child = updateClassComponent(null, workInProgress2, Component4, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component4 = resolveForwardRefForHotReloading(Component4);
                }
                child = updateForwardRef(null, workInProgress2, Component4, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component4.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        "prop",
                        getComponentName(Component4)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component4,
                  resolveDefaultProps(Component4.type, resolvedProps),
                  updateLanes,
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component4 !== null && typeof Component4 === "object" && Component4.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component4 + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component4, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component4)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component4, nextProps);
            mountClassInstance(workInProgress2, Component4, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component4, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component4, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component4, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component4.prototype && typeof Component4.prototype.render === "function") {
                var componentName = getComponentName(Component4) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component4, props, context, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component4) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentName(Component4) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component4)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component4.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component4, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component4, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component4, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component4, props, context, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component4);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component4) {
            {
              if (Component4) {
                if (Component4.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component4.displayName || Component4.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component4.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component4) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component4.contextType === "object" && Component4.contextType !== null) {
                var _componentName4 = getComponentName(Component4) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderLanes2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isArray2 = Array.isArray(childSlot);
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
              if (isArray2 || isIterable) {
                var type = isArray2 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    tail,
                    lastContentRow,
                    tailMode,
                    workInProgress2.lastEffect
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    _tail,
                    null,
                    tailMode,
                    workInProgress2.lastEffect
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    null,
                    null,
                    void 0,
                    workInProgress2.lastEffect
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component4 = workInProgress2.type;
                    if (isContextProvider(Component4)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment6:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        "prop",
                        getComponentName(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment6:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component4 = workInProgress2.type;
                if (isContextProvider(Component4)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component4 = workInProgress2.type;
                if (isContextProvider(Component4)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = /* @__PURE__ */ new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create2 = effect.create;
                  effect.destroy = create2();
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
              } while (effect !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node = root2;
            while (true) {
              commitUnmount(finishedRoot, node);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RetryAfterError = 64;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root2, lane, eventTime);
            if (root2 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root2, lane);
                performSyncWorkOnRoot(root2);
              } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Set([root2]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root2);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
            }
            mostRecentlyUpdatedRoot = root2;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root2.callbackNode = null;
                root2.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root2, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root2.hydrate) {
                  root2.hydrate = false;
                  clearContainer(root2.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root2);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root2, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              var finishedWork = root2.current.alternate;
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root2);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootCompleted: {
                commitRoot(root2);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root2, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root2, lanes);
                exitStatus = renderRootSync(root2, lanes);
              }
            } else {
              lanes = getNextLanes(root2, NoLanes);
              exitStatus = renderRootSync(root2, lanes);
            }
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root2) {
                markDiscreteUpdatesExpired(root2);
                ensureRootIsScheduled(root2, now());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn, a, b, c, d) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn, a) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn(a);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn) {
                  return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            workInProgress = createWorkInProgress(root2.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root2.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (!(finishedWork !== root2.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root2.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
                rootsWithPendingDiscreteUpdates.delete(root2);
              }
            }
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root2);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root2.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i = 0; i < expirationTimes.length; i++) {
                    scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root2, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root2, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root2, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create2 = effect.create;
            effect.destroy = create2();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i = 0; i < unmountEffects.length; i += 2) {
              var _effect = unmountEffects[i];
              var fiber = unmountEffects[i + 1];
              var destroy = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(fiber, error2);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect = root2.current.firstEffect;
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect;
              effect.nextEffect = null;
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect);
              }
              effect = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root2, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                    schedulePendingInteractions(root2, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error2, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root2, lane) {
            return lane * 1e3 + root2.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root2, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root2, lane) {
            scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root2, lanes) {
            var interactions = /* @__PURE__ */ new Set();
            root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root2.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedLanes) {
            var remainingLanesAfterCommit = root2.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedLanes);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component4) {
            var prototype = Component4.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component4) {
            if (typeof Component4 === "function") {
              return shouldConstruct$1(Component4) ? ClassComponent : FunctionComponent;
            } else if (Component4 !== void 0 && Component4 !== null) {
              var $$typeof = Component4.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment6, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = /* @__PURE__ */ new Set();
              this.pendingInteractionMap = /* @__PURE__ */ new Map();
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component4 = fiber.type;
              if (isContextProvider(Component4)) {
                return processChildContext(fiber, Component4, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if ("undefined" !== typeof jest) {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === path.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
          }
          function ReactDOMBlockingRoot(container, tag, options2) {
            this._internalRoot = createRootImpl(container, tag, options2);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            var container = root2.containerInfo;
            updateContainer(null, root2, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root2 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root2.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return root2;
          }
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root2 = container._reactRootContainer;
            var fiberRoot;
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode10(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode10;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/typeof.js
  var require_typeof = __commonJS({
    "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
      function _typeof3(obj) {
        "@babel/helpers - typeof";
        return module.exports = _typeof3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof3(obj);
      }
      module.exports = _typeof3, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/interopRequireWildcard.js
  var require_interopRequireWildcard = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireWildcard.js"(exports, module) {
      var _typeof3 = require_typeof()["default"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
          return {
            "default": obj
          };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@material-ui/utils/chainPropTypes.js
  var require_chainPropTypes = __commonJS({
    "node_modules/@material-ui/utils/chainPropTypes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = chainPropTypes6;
      function chainPropTypes6(propType1, propType2) {
        if (false) {
          return function() {
            return null;
          };
        }
        return function validate() {
          return propType1.apply(void 0, arguments) || propType2.apply(void 0, arguments);
        };
      }
    }
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
      function _extends2() {
        module.exports = _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        return _extends2.apply(this, arguments);
      }
      module.exports = _extends2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@material-ui/utils/deepmerge.js
  var require_deepmerge = __commonJS({
    "node_modules/@material-ui/utils/deepmerge.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isPlainObject = isPlainObject;
      exports.default = deepmerge4;
      var _extends2 = _interopRequireDefault(require_extends());
      var _typeof22 = _interopRequireDefault(require_typeof());
      function isPlainObject(item) {
        return item && (0, _typeof22.default)(item) === "object" && item.constructor === Object;
      }
      function deepmerge4(target, source) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
          clone: true
        };
        var output = options.clone ? (0, _extends2.default)({}, target) : target;
        if (isPlainObject(target) && isPlainObject(source)) {
          Object.keys(source).forEach(function(key) {
            if (key === "__proto__") {
              return;
            }
            if (isPlainObject(source[key]) && key in target) {
              output[key] = deepmerge4(target[key], source[key], options);
            } else {
              output[key] = source[key];
            }
          });
        }
        return output;
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment6 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment5(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment6;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment5;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement8, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement8(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement8(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/@material-ui/utils/elementAcceptingRef.js
  var require_elementAcceptingRef = __commonJS({
    "node_modules/@material-ui/utils/elementAcceptingRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes());
      function isClassComponent(elementType) {
        var _elementType$prototyp = elementType.prototype, prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
        return Boolean(prototype.isReactComponent);
      }
      function acceptingRef(props, propName, componentName, location, propFullName) {
        var element = props[propName];
        var safePropName = propFullName || propName;
        if (element == null) {
          return null;
        }
        var warningHint;
        var elementType = element.type;
        if (typeof elementType === "function" && !isClassComponent(elementType)) {
          warningHint = "Did you accidentally use a plain function component for an element instead?";
        }
        if (warningHint !== void 0) {
          return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element that can hold a ref. ".concat(warningHint, " ") + "For more information see https://mui.com/r/caveat-with-refs-guide");
        }
        return null;
      }
      var elementAcceptingRef2 = (0, _chainPropTypes.default)(_propTypes.default.element, acceptingRef);
      elementAcceptingRef2.isRequired = (0, _chainPropTypes.default)(_propTypes.default.element.isRequired, acceptingRef);
      var _default = elementAcceptingRef2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/utils/elementTypeAcceptingRef.js
  var require_elementTypeAcceptingRef = __commonJS({
    "node_modules/@material-ui/utils/elementTypeAcceptingRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var PropTypes43 = _interopRequireWildcard(require_prop_types());
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes());
      function isClassComponent(elementType) {
        var _elementType$prototyp = elementType.prototype, prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
        return Boolean(prototype.isReactComponent);
      }
      function elementTypeAcceptingRef3(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var safePropName = propFullName || propName;
        if (propValue == null) {
          return null;
        }
        var warningHint;
        if (typeof propValue === "function" && !isClassComponent(propValue)) {
          warningHint = "Did you accidentally provide a plain function component instead?";
        }
        if (warningHint !== void 0) {
          return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element type that can hold a ref. ".concat(warningHint, " ") + "For more information see https://mui.com/r/caveat-with-refs-guide");
        }
        return null;
      }
      var _default = (0, _chainPropTypes.default)(PropTypes43.elementType, elementTypeAcceptingRef3);
      exports.default = _default;
    }
  });

  // node_modules/@babel/runtime/helpers/toPrimitive.js
  var require_toPrimitive = __commonJS({
    "node_modules/@babel/runtime/helpers/toPrimitive.js"(exports, module) {
      var _typeof3 = require_typeof()["default"];
      function _toPrimitive2(input, hint) {
        if (_typeof3(input) !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (_typeof3(res) !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      module.exports = _toPrimitive2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/toPropertyKey.js
  var require_toPropertyKey = __commonJS({
    "node_modules/@babel/runtime/helpers/toPropertyKey.js"(exports, module) {
      var _typeof3 = require_typeof()["default"];
      var toPrimitive = require_toPrimitive();
      function _toPropertyKey2(arg) {
        var key = toPrimitive(arg, "string");
        return _typeof3(key) === "symbol" ? key : String(key);
      }
      module.exports = _toPropertyKey2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/defineProperty.js
  var require_defineProperty = __commonJS({
    "node_modules/@babel/runtime/helpers/defineProperty.js"(exports, module) {
      var toPropertyKey = require_toPropertyKey();
      function _defineProperty2(obj, key, value) {
        key = toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      module.exports = _defineProperty2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@material-ui/utils/exactProp.js
  var require_exactProp = __commonJS({
    "node_modules/@material-ui/utils/exactProp.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exactProp3;
      exports.specialProperty = void 0;
      var _defineProperty2 = _interopRequireDefault(require_defineProperty());
      var _extends3 = _interopRequireDefault(require_extends());
      var specialProperty = "exact-prop: \u200B";
      exports.specialProperty = specialProperty;
      function exactProp3(propTypes) {
        if (false) {
          return propTypes;
        }
        return (0, _extends3.default)({}, propTypes, (0, _defineProperty2.default)({}, specialProperty, function(props) {
          var unsupportedProps = Object.keys(props).filter(function(prop) {
            return !propTypes.hasOwnProperty(prop);
          });
          if (unsupportedProps.length > 0) {
            return new Error("The following props are not supported: ".concat(unsupportedProps.map(function(prop) {
              return "`".concat(prop, "`");
            }).join(", "), ". Please remove them."));
          }
          return null;
        }));
      }
    }
  });

  // node_modules/@material-ui/utils/formatMuiErrorMessage.js
  var require_formatMuiErrorMessage = __commonJS({
    "node_modules/@material-ui/utils/formatMuiErrorMessage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = formatMuiErrorMessage;
      function formatMuiErrorMessage(code) {
        var url = "https://mui.com/production-error/?code=" + code;
        for (var i = 1; i < arguments.length; i += 1) {
          url += "&args[]=" + encodeURIComponent(arguments[i]);
        }
        return "Minified Material-UI error #" + code + "; visit " + url + " for the full message.";
      }
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment6 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment5(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment6;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment5;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/@material-ui/utils/getDisplayName.js
  var require_getDisplayName = __commonJS({
    "node_modules/@material-ui/utils/getDisplayName.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getFunctionName = getFunctionName;
      exports.default = getDisplayName;
      var _typeof22 = _interopRequireDefault(require_typeof());
      var _reactIs = require_react_is2();
      var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
      function getFunctionName(fn) {
        var match = "".concat(fn).match(fnNameMatchRegex);
        var name = match && match[1];
        return name || "";
      }
      function getFunctionComponentName(Component4) {
        var fallback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
        return Component4.displayName || Component4.name || getFunctionName(Component4) || fallback;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = getFunctionComponentName(innerType);
        return outerType.displayName || (functionName !== "" ? "".concat(wrapperName, "(").concat(functionName, ")") : wrapperName);
      }
      function getDisplayName(Component4) {
        if (Component4 == null) {
          return void 0;
        }
        if (typeof Component4 === "string") {
          return Component4;
        }
        if (typeof Component4 === "function") {
          return getFunctionComponentName(Component4, "Component");
        }
        if ((0, _typeof22.default)(Component4) === "object") {
          switch (Component4.$$typeof) {
            case _reactIs.ForwardRef:
              return getWrappedName(Component4, Component4.render, "ForwardRef");
            case _reactIs.Memo:
              return getWrappedName(Component4, Component4.type, "memo");
            default:
              return void 0;
          }
        }
        return void 0;
      }
    }
  });

  // node_modules/@material-ui/utils/HTMLElementType.js
  var require_HTMLElementType = __commonJS({
    "node_modules/@material-ui/utils/HTMLElementType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = HTMLElementType5;
      function HTMLElementType5(props, propName, componentName, location, propFullName) {
        if (false) {
          return null;
        }
        var propValue = props[propName];
        var safePropName = propFullName || propName;
        if (propValue == null) {
          return null;
        }
        if (propValue && propValue.nodeType !== 1) {
          return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an HTMLElement.");
        }
        return null;
      }
    }
  });

  // node_modules/@material-ui/utils/ponyfillGlobal.js
  var require_ponyfillGlobal = __commonJS({
    "node_modules/@material-ui/utils/ponyfillGlobal.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/utils/refType.js
  var require_refType = __commonJS({
    "node_modules/@material-ui/utils/refType.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var refType13 = _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]);
      var _default = refType13;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/utils/index.js
  var require_utils = __commonJS({
    "node_modules/@material-ui/utils/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "chainPropTypes", {
        enumerable: true,
        get: function get() {
          return _chainPropTypes.default;
        }
      });
      Object.defineProperty(exports, "deepmerge", {
        enumerable: true,
        get: function get() {
          return _deepmerge.default;
        }
      });
      Object.defineProperty(exports, "elementAcceptingRef", {
        enumerable: true,
        get: function get() {
          return _elementAcceptingRef.default;
        }
      });
      Object.defineProperty(exports, "elementTypeAcceptingRef", {
        enumerable: true,
        get: function get() {
          return _elementTypeAcceptingRef.default;
        }
      });
      Object.defineProperty(exports, "exactProp", {
        enumerable: true,
        get: function get() {
          return _exactProp.default;
        }
      });
      Object.defineProperty(exports, "formatMuiErrorMessage", {
        enumerable: true,
        get: function get() {
          return _formatMuiErrorMessage2.default;
        }
      });
      Object.defineProperty(exports, "getDisplayName", {
        enumerable: true,
        get: function get() {
          return _getDisplayName.default;
        }
      });
      Object.defineProperty(exports, "HTMLElementType", {
        enumerable: true,
        get: function get() {
          return _HTMLElementType.default;
        }
      });
      Object.defineProperty(exports, "ponyfillGlobal", {
        enumerable: true,
        get: function get() {
          return _ponyfillGlobal.default;
        }
      });
      Object.defineProperty(exports, "refType", {
        enumerable: true,
        get: function get() {
          return _refType.default;
        }
      });
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes());
      var _deepmerge = _interopRequireDefault(require_deepmerge());
      var _elementAcceptingRef = _interopRequireDefault(require_elementAcceptingRef());
      var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef());
      var _exactProp = _interopRequireDefault(require_exactProp());
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage());
      var _getDisplayName = _interopRequireDefault(require_getDisplayName());
      var _HTMLElementType = _interopRequireDefault(require_HTMLElementType());
      var _ponyfillGlobal = _interopRequireDefault(require_ponyfillGlobal());
      var _refType = _interopRequireDefault(require_refType());
    }
  });

  // node_modules/@material-ui/core/styles/colorManipulator.js
  var require_colorManipulator = __commonJS({
    "node_modules/@material-ui/core/styles/colorManipulator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.hexToRgb = hexToRgb2;
      exports.rgbToHex = rgbToHex;
      exports.hslToRgb = hslToRgb2;
      exports.decomposeColor = decomposeColor2;
      exports.recomposeColor = recomposeColor2;
      exports.getContrastRatio = getContrastRatio2;
      exports.getLuminance = getLuminance2;
      exports.emphasize = emphasize;
      exports.fade = fade;
      exports.alpha = alpha2;
      exports.darken = darken2;
      exports.lighten = lighten2;
      var _utils = require_utils();
      function clamp2(value) {
        var min = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        var max = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
        if (true) {
          if (value < min || value > max) {
            console.error("Material-UI: The value provided ".concat(value, " is out of range [").concat(min, ", ").concat(max, "]."));
          }
        }
        return Math.min(Math.max(min, value), max);
      }
      function hexToRgb2(color) {
        color = color.substr(1);
        var re = new RegExp(".{1,".concat(color.length >= 6 ? 2 : 1, "}"), "g");
        var colors = color.match(re);
        if (colors && colors[0].length === 1) {
          colors = colors.map(function(n) {
            return n + n;
          });
        }
        return colors ? "rgb".concat(colors.length === 4 ? "a" : "", "(").concat(colors.map(function(n, index) {
          return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
        }).join(", "), ")") : "";
      }
      function intToHex(int) {
        var hex = int.toString(16);
        return hex.length === 1 ? "0".concat(hex) : hex;
      }
      function rgbToHex(color) {
        if (color.indexOf("#") === 0) {
          return color;
        }
        var _decomposeColor = decomposeColor2(color), values = _decomposeColor.values;
        return "#".concat(values.map(function(n) {
          return intToHex(n);
        }).join(""));
      }
      function hslToRgb2(color) {
        color = decomposeColor2(color);
        var _color = color, values = _color.values;
        var h = values[0];
        var s = values[1] / 100;
        var l = values[2] / 100;
        var a = s * Math.min(l, 1 - l);
        var f = function f2(n) {
          var k = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : (n + h / 30) % 12;
          return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        };
        var type = "rgb";
        var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
        if (color.type === "hsla") {
          type += "a";
          rgb.push(values[3]);
        }
        return recomposeColor2({
          type,
          values: rgb
        });
      }
      function decomposeColor2(color) {
        if (color.type) {
          return color;
        }
        if (color.charAt(0) === "#") {
          return decomposeColor2(hexToRgb2(color));
        }
        var marker = color.indexOf("(");
        var type = color.substring(0, marker);
        if (["rgb", "rgba", "hsl", "hsla"].indexOf(type) === -1) {
          throw new Error(true ? "Material-UI: Unsupported `".concat(color, "` color.\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().") : (0, _utils.formatMuiErrorMessage)(3, color));
        }
        var values = color.substring(marker + 1, color.length - 1).split(",");
        values = values.map(function(value) {
          return parseFloat(value);
        });
        return {
          type,
          values
        };
      }
      function recomposeColor2(color) {
        var type = color.type;
        var values = color.values;
        if (type.indexOf("rgb") !== -1) {
          values = values.map(function(n, i) {
            return i < 3 ? parseInt(n, 10) : n;
          });
        } else if (type.indexOf("hsl") !== -1) {
          values[1] = "".concat(values[1], "%");
          values[2] = "".concat(values[2], "%");
        }
        return "".concat(type, "(").concat(values.join(", "), ")");
      }
      function getContrastRatio2(foreground, background) {
        var lumA = getLuminance2(foreground);
        var lumB = getLuminance2(background);
        return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
      }
      function getLuminance2(color) {
        color = decomposeColor2(color);
        var rgb = color.type === "hsl" ? decomposeColor2(hslToRgb2(color)).values : color.values;
        rgb = rgb.map(function(val) {
          val /= 255;
          return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
        });
        return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
      }
      function emphasize(color) {
        var coefficient = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.15;
        return getLuminance2(color) > 0.5 ? darken2(color, coefficient) : lighten2(color, coefficient);
      }
      var warnedOnce2 = false;
      function fade(color, value) {
        if (true) {
          if (!warnedOnce2) {
            warnedOnce2 = true;
            console.error(["Material-UI: The `fade` color utility was renamed to `alpha` to better describe its functionality.", "", "You should use `import { alpha } from '@material-ui/core/styles'`"].join("\n"));
          }
        }
        return alpha2(color, value);
      }
      function alpha2(color, value) {
        color = decomposeColor2(color);
        value = clamp2(value);
        if (color.type === "rgb" || color.type === "hsl") {
          color.type += "a";
        }
        color.values[3] = value;
        return recomposeColor2(color);
      }
      function darken2(color, coefficient) {
        color = decomposeColor2(color);
        coefficient = clamp2(coefficient);
        if (color.type.indexOf("hsl") !== -1) {
          color.values[2] *= 1 - coefficient;
        } else if (color.type.indexOf("rgb") !== -1) {
          for (var i = 0; i < 3; i += 1) {
            color.values[i] *= 1 - coefficient;
          }
        }
        return recomposeColor2(color);
      }
      function lighten2(color, coefficient) {
        color = decomposeColor2(color);
        coefficient = clamp2(coefficient);
        if (color.type.indexOf("hsl") !== -1) {
          color.values[2] += (100 - color.values[2]) * coefficient;
        } else if (color.type.indexOf("rgb") !== -1) {
          for (var i = 0; i < 3; i += 1) {
            color.values[i] += (255 - color.values[i]) * coefficient;
          }
        }
        return recomposeColor2(color);
      }
    }
  });

  // node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
  var require_objectWithoutPropertiesLoose = __commonJS({
    "node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"(exports, module) {
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      module.exports = _objectWithoutPropertiesLoose2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/objectWithoutProperties.js
  var require_objectWithoutProperties = __commonJS({
    "node_modules/@babel/runtime/helpers/objectWithoutProperties.js"(exports, module) {
      var objectWithoutPropertiesLoose = require_objectWithoutPropertiesLoose();
      function _objectWithoutProperties2(source, excluded) {
        if (source == null)
          return {};
        var target = objectWithoutPropertiesLoose(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      module.exports = _objectWithoutProperties2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@material-ui/core/styles/createBreakpoints.js
  var require_createBreakpoints = __commonJS({
    "node_modules/@material-ui/core/styles/createBreakpoints.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createBreakpoints2;
      exports.keys = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var keys2 = ["xs", "sm", "md", "lg", "xl"];
      exports.keys = keys2;
      function createBreakpoints2(breakpoints) {
        var _breakpoints$values = breakpoints.values, values = _breakpoints$values === void 0 ? {
          xs: 0,
          sm: 600,
          md: 960,
          lg: 1280,
          xl: 1920
        } : _breakpoints$values, _breakpoints$unit = breakpoints.unit, unit = _breakpoints$unit === void 0 ? "px" : _breakpoints$unit, _breakpoints$step = breakpoints.step, step = _breakpoints$step === void 0 ? 5 : _breakpoints$step, other = (0, _objectWithoutProperties2.default)(breakpoints, ["values", "unit", "step"]);
        function up(key) {
          var value = typeof values[key] === "number" ? values[key] : key;
          return "@media (min-width:".concat(value).concat(unit, ")");
        }
        function down(key) {
          var endIndex = keys2.indexOf(key) + 1;
          var upperbound = values[keys2[endIndex]];
          if (endIndex === keys2.length) {
            return up("xs");
          }
          var value = typeof upperbound === "number" && endIndex > 0 ? upperbound : key;
          return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
        }
        function between(start, end) {
          var endIndex = keys2.indexOf(end);
          if (endIndex === keys2.length - 1) {
            return up(start);
          }
          return "@media (min-width:".concat(typeof values[start] === "number" ? values[start] : start).concat(unit, ") and ") + "(max-width:".concat((endIndex !== -1 && typeof values[keys2[endIndex + 1]] === "number" ? values[keys2[endIndex + 1]] : end) - step / 100).concat(unit, ")");
        }
        function only(key) {
          return between(key, key);
        }
        var warnedOnce2 = false;
        function width(key) {
          if (true) {
            if (!warnedOnce2) {
              warnedOnce2 = true;
              console.warn(["Material-UI: The `theme.breakpoints.width` utility is deprecated because it's redundant.", "Use the `theme.breakpoints.values` instead."].join("\n"));
            }
          }
          return values[key];
        }
        return (0, _extends2.default)({
          keys: keys2,
          values,
          up,
          down,
          between,
          only,
          width
        }, other);
      }
    }
  });

  // node_modules/@material-ui/core/styles/createMixins.js
  var require_createMixins = __commonJS({
    "node_modules/@material-ui/core/styles/createMixins.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createMixins2;
      var _defineProperty2 = _interopRequireDefault(require_defineProperty());
      var _extends3 = _interopRequireDefault(require_extends());
      function createMixins2(breakpoints, spacing2, mixins) {
        var _toolbar;
        return (0, _extends3.default)({
          gutters: function gutters() {
            var styles61 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            console.warn(["Material-UI: theme.mixins.gutters() is deprecated.", "You can use the source of the mixin directly:", "\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n      },\n      "].join("\n"));
            return (0, _extends3.default)({
              paddingLeft: spacing2(2),
              paddingRight: spacing2(2)
            }, styles61, (0, _defineProperty2.default)({}, breakpoints.up("sm"), (0, _extends3.default)({
              paddingLeft: spacing2(3),
              paddingRight: spacing2(3)
            }, styles61[breakpoints.up("sm")])));
          },
          toolbar: (_toolbar = {
            minHeight: 56
          }, (0, _defineProperty2.default)(_toolbar, "".concat(breakpoints.up("xs"), " and (orientation: landscape)"), {
            minHeight: 48
          }), (0, _defineProperty2.default)(_toolbar, breakpoints.up("sm"), {
            minHeight: 64
          }), _toolbar)
        }, mixins);
      }
    }
  });

  // node_modules/@material-ui/core/colors/common.js
  var require_common = __commonJS({
    "node_modules/@material-ui/core/colors/common.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var common2 = {
        black: "#000",
        white: "#fff"
      };
      var _default = common2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/colors/grey.js
  var require_grey = __commonJS({
    "node_modules/@material-ui/core/colors/grey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var grey2 = {
        50: "#fafafa",
        100: "#f5f5f5",
        200: "#eeeeee",
        300: "#e0e0e0",
        400: "#bdbdbd",
        500: "#9e9e9e",
        600: "#757575",
        700: "#616161",
        800: "#424242",
        900: "#212121",
        A100: "#d5d5d5",
        A200: "#aaaaaa",
        A400: "#303030",
        A700: "#616161"
      };
      var _default = grey2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/colors/indigo.js
  var require_indigo = __commonJS({
    "node_modules/@material-ui/core/colors/indigo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var indigo2 = {
        50: "#e8eaf6",
        100: "#c5cae9",
        200: "#9fa8da",
        300: "#7986cb",
        400: "#5c6bc0",
        500: "#3f51b5",
        600: "#3949ab",
        700: "#303f9f",
        800: "#283593",
        900: "#1a237e",
        A100: "#8c9eff",
        A200: "#536dfe",
        A400: "#3d5afe",
        A700: "#304ffe"
      };
      var _default = indigo2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/colors/pink.js
  var require_pink = __commonJS({
    "node_modules/@material-ui/core/colors/pink.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var pink2 = {
        50: "#fce4ec",
        100: "#f8bbd0",
        200: "#f48fb1",
        300: "#f06292",
        400: "#ec407a",
        500: "#e91e63",
        600: "#d81b60",
        700: "#c2185b",
        800: "#ad1457",
        900: "#880e4f",
        A100: "#ff80ab",
        A200: "#ff4081",
        A400: "#f50057",
        A700: "#c51162"
      };
      var _default = pink2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/colors/red.js
  var require_red = __commonJS({
    "node_modules/@material-ui/core/colors/red.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var red2 = {
        50: "#ffebee",
        100: "#ffcdd2",
        200: "#ef9a9a",
        300: "#e57373",
        400: "#ef5350",
        500: "#f44336",
        600: "#e53935",
        700: "#d32f2f",
        800: "#c62828",
        900: "#b71c1c",
        A100: "#ff8a80",
        A200: "#ff5252",
        A400: "#ff1744",
        A700: "#d50000"
      };
      var _default = red2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/colors/orange.js
  var require_orange = __commonJS({
    "node_modules/@material-ui/core/colors/orange.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var orange2 = {
        50: "#fff3e0",
        100: "#ffe0b2",
        200: "#ffcc80",
        300: "#ffb74d",
        400: "#ffa726",
        500: "#ff9800",
        600: "#fb8c00",
        700: "#f57c00",
        800: "#ef6c00",
        900: "#e65100",
        A100: "#ffd180",
        A200: "#ffab40",
        A400: "#ff9100",
        A700: "#ff6d00"
      };
      var _default = orange2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/colors/blue.js
  var require_blue = __commonJS({
    "node_modules/@material-ui/core/colors/blue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var blue2 = {
        50: "#e3f2fd",
        100: "#bbdefb",
        200: "#90caf9",
        300: "#64b5f6",
        400: "#42a5f5",
        500: "#2196f3",
        600: "#1e88e5",
        700: "#1976d2",
        800: "#1565c0",
        900: "#0d47a1",
        A100: "#82b1ff",
        A200: "#448aff",
        A400: "#2979ff",
        A700: "#2962ff"
      };
      var _default = blue2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/colors/green.js
  var require_green = __commonJS({
    "node_modules/@material-ui/core/colors/green.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var green2 = {
        50: "#e8f5e9",
        100: "#c8e6c9",
        200: "#a5d6a7",
        300: "#81c784",
        400: "#66bb6a",
        500: "#4caf50",
        600: "#43a047",
        700: "#388e3c",
        800: "#2e7d32",
        900: "#1b5e20",
        A100: "#b9f6ca",
        A200: "#69f0ae",
        A400: "#00e676",
        A700: "#00c853"
      };
      var _default = green2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/styles/createPalette.js
  var require_createPalette = __commonJS({
    "node_modules/@material-ui/core/styles/createPalette.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createPalette2;
      exports.dark = exports.light = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _utils = require_utils();
      var _common = _interopRequireDefault(require_common());
      var _grey = _interopRequireDefault(require_grey());
      var _indigo = _interopRequireDefault(require_indigo());
      var _pink = _interopRequireDefault(require_pink());
      var _red = _interopRequireDefault(require_red());
      var _orange = _interopRequireDefault(require_orange());
      var _blue = _interopRequireDefault(require_blue());
      var _green = _interopRequireDefault(require_green());
      var _colorManipulator = require_colorManipulator();
      var light2 = {
        text: {
          primary: "rgba(0, 0, 0, 0.87)",
          secondary: "rgba(0, 0, 0, 0.54)",
          disabled: "rgba(0, 0, 0, 0.38)",
          hint: "rgba(0, 0, 0, 0.38)"
        },
        divider: "rgba(0, 0, 0, 0.12)",
        background: {
          paper: _common.default.white,
          default: _grey.default[50]
        },
        action: {
          active: "rgba(0, 0, 0, 0.54)",
          hover: "rgba(0, 0, 0, 0.04)",
          hoverOpacity: 0.04,
          selected: "rgba(0, 0, 0, 0.08)",
          selectedOpacity: 0.08,
          disabled: "rgba(0, 0, 0, 0.26)",
          disabledBackground: "rgba(0, 0, 0, 0.12)",
          disabledOpacity: 0.38,
          focus: "rgba(0, 0, 0, 0.12)",
          focusOpacity: 0.12,
          activatedOpacity: 0.12
        }
      };
      exports.light = light2;
      var dark2 = {
        text: {
          primary: _common.default.white,
          secondary: "rgba(255, 255, 255, 0.7)",
          disabled: "rgba(255, 255, 255, 0.5)",
          hint: "rgba(255, 255, 255, 0.5)",
          icon: "rgba(255, 255, 255, 0.5)"
        },
        divider: "rgba(255, 255, 255, 0.12)",
        background: {
          paper: _grey.default[800],
          default: "#303030"
        },
        action: {
          active: _common.default.white,
          hover: "rgba(255, 255, 255, 0.08)",
          hoverOpacity: 0.08,
          selected: "rgba(255, 255, 255, 0.16)",
          selectedOpacity: 0.16,
          disabled: "rgba(255, 255, 255, 0.3)",
          disabledBackground: "rgba(255, 255, 255, 0.12)",
          disabledOpacity: 0.38,
          focus: "rgba(255, 255, 255, 0.12)",
          focusOpacity: 0.12,
          activatedOpacity: 0.24
        }
      };
      exports.dark = dark2;
      function addLightOrDark2(intent, direction, shade, tonalOffset) {
        var tonalOffsetLight = tonalOffset.light || tonalOffset;
        var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
        if (!intent[direction]) {
          if (intent.hasOwnProperty(shade)) {
            intent[direction] = intent[shade];
          } else if (direction === "light") {
            intent.light = (0, _colorManipulator.lighten)(intent.main, tonalOffsetLight);
          } else if (direction === "dark") {
            intent.dark = (0, _colorManipulator.darken)(intent.main, tonalOffsetDark);
          }
        }
      }
      function createPalette2(palette2) {
        var _palette$primary = palette2.primary, primary = _palette$primary === void 0 ? {
          light: _indigo.default[300],
          main: _indigo.default[500],
          dark: _indigo.default[700]
        } : _palette$primary, _palette$secondary = palette2.secondary, secondary = _palette$secondary === void 0 ? {
          light: _pink.default.A200,
          main: _pink.default.A400,
          dark: _pink.default.A700
        } : _palette$secondary, _palette$error = palette2.error, error = _palette$error === void 0 ? {
          light: _red.default[300],
          main: _red.default[500],
          dark: _red.default[700]
        } : _palette$error, _palette$warning = palette2.warning, warning = _palette$warning === void 0 ? {
          light: _orange.default[300],
          main: _orange.default[500],
          dark: _orange.default[700]
        } : _palette$warning, _palette$info = palette2.info, info = _palette$info === void 0 ? {
          light: _blue.default[300],
          main: _blue.default[500],
          dark: _blue.default[700]
        } : _palette$info, _palette$success = palette2.success, success = _palette$success === void 0 ? {
          light: _green.default[300],
          main: _green.default[500],
          dark: _green.default[700]
        } : _palette$success, _palette$type = palette2.type, type = _palette$type === void 0 ? "light" : _palette$type, _palette$contrastThre = palette2.contrastThreshold, contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre, _palette$tonalOffset = palette2.tonalOffset, tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset, other = (0, _objectWithoutProperties2.default)(palette2, ["primary", "secondary", "error", "warning", "info", "success", "type", "contrastThreshold", "tonalOffset"]);
        function getContrastText(background) {
          var contrastText = (0, _colorManipulator.getContrastRatio)(background, dark2.text.primary) >= contrastThreshold ? dark2.text.primary : light2.text.primary;
          if (true) {
            var contrast = (0, _colorManipulator.getContrastRatio)(background, contrastText);
            if (contrast < 3) {
              console.error(["Material-UI: The contrast ratio of ".concat(contrast, ":1 for ").concat(contrastText, " on ").concat(background), "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
            }
          }
          return contrastText;
        }
        var augmentColor = function augmentColor2(color) {
          var mainShade = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 500;
          var lightShade = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 300;
          var darkShade = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 700;
          color = (0, _extends2.default)({}, color);
          if (!color.main && color[mainShade]) {
            color.main = color[mainShade];
          }
          if (!color.main) {
            throw new Error(true ? "Material-UI: The color provided to augmentColor(color) is invalid.\nThe color object needs to have a `main` property or a `".concat(mainShade, "` property.") : (0, _utils.formatMuiErrorMessage)(4, mainShade));
          }
          if (typeof color.main !== "string") {
            throw new Error(true ? "Material-UI: The color provided to augmentColor(color) is invalid.\n`color.main` should be a string, but `".concat(JSON.stringify(color.main), '` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport {\xA0green } from "@material-ui/core/colors";\n\nconst theme1 = createTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createTheme({ palette: {\n  primary: { main: green[500] },\n} });') : _formatMuiErrorMessage(5, JSON.stringify(color.main)));
          }
          addLightOrDark2(color, "light", lightShade, tonalOffset);
          addLightOrDark2(color, "dark", darkShade, tonalOffset);
          if (!color.contrastText) {
            color.contrastText = getContrastText(color.main);
          }
          return color;
        };
        var types = {
          dark: dark2,
          light: light2
        };
        if (true) {
          if (!types[type]) {
            console.error("Material-UI: The palette type `".concat(type, "` is not supported."));
          }
        }
        var paletteOutput = (0, _utils.deepmerge)((0, _extends2.default)({
          common: _common.default,
          type,
          primary: augmentColor(primary),
          secondary: augmentColor(secondary, "A400", "A200", "A700"),
          error: augmentColor(error),
          warning: augmentColor(warning),
          info: augmentColor(info),
          success: augmentColor(success),
          grey: _grey.default,
          contrastThreshold,
          getContrastText,
          augmentColor,
          tonalOffset
        }, types[type]), other);
        return paletteOutput;
      }
    }
  });

  // node_modules/@material-ui/core/styles/createTypography.js
  var require_createTypography = __commonJS({
    "node_modules/@material-ui/core/styles/createTypography.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createTypography2;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _utils = require_utils();
      function round2(value) {
        return Math.round(value * 1e5) / 1e5;
      }
      var warnedOnce2 = false;
      function roundWithDeprecationWarning2(value) {
        if (true) {
          if (!warnedOnce2) {
            console.warn(["Material-UI: The `theme.typography.round` helper is deprecated.", "Head to https://mui.com/r/migration-v4/#theme for a migration path."].join("\n"));
            warnedOnce2 = true;
          }
        }
        return round2(value);
      }
      var caseAllCaps2 = {
        textTransform: "uppercase"
      };
      var defaultFontFamily2 = '"Roboto", "Helvetica", "Arial", sans-serif';
      function createTypography2(palette2, typography2) {
        var _ref4 = typeof typography2 === "function" ? typography2(palette2) : typography2, _ref$fontFamily = _ref4.fontFamily, fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily2 : _ref$fontFamily, _ref$fontSize = _ref4.fontSize, fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize, _ref$fontWeightLight = _ref4.fontWeightLight, fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight, _ref$fontWeightRegula = _ref4.fontWeightRegular, fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula, _ref$fontWeightMedium = _ref4.fontWeightMedium, fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium, _ref$fontWeightBold = _ref4.fontWeightBold, fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold, _ref$htmlFontSize = _ref4.htmlFontSize, htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize, allVariants = _ref4.allVariants, pxToRem2 = _ref4.pxToRem, other = (0, _objectWithoutProperties2.default)(_ref4, ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"]);
        if (true) {
          if (typeof fontSize !== "number") {
            console.error("Material-UI: `fontSize` is required to be a number.");
          }
          if (typeof htmlFontSize !== "number") {
            console.error("Material-UI: `htmlFontSize` is required to be a number.");
          }
        }
        var coef = fontSize / 14;
        var pxToRem = pxToRem2 || function(size) {
          return "".concat(size / htmlFontSize * coef, "rem");
        };
        var buildVariant = function buildVariant2(fontWeight, size, lineHeight, letterSpacing, casing) {
          return (0, _extends2.default)({
            fontFamily,
            fontWeight,
            fontSize: pxToRem(size),
            lineHeight
          }, fontFamily === defaultFontFamily2 ? {
            letterSpacing: "".concat(round2(letterSpacing / size), "em")
          } : {}, casing, allVariants);
        };
        var variants = {
          h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
          h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
          h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
          h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
          h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
          h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
          subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
          subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
          body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
          body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
          button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps2),
          caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
          overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps2)
        };
        return (0, _utils.deepmerge)((0, _extends2.default)({
          htmlFontSize,
          pxToRem,
          round: roundWithDeprecationWarning2,
          fontFamily,
          fontSize,
          fontWeightLight,
          fontWeightRegular,
          fontWeightMedium,
          fontWeightBold
        }, variants), other, {
          clone: false
        });
      }
    }
  });

  // node_modules/@material-ui/core/styles/shadows.js
  var require_shadows = __commonJS({
    "node_modules/@material-ui/core/styles/shadows.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var shadowKeyUmbraOpacity2 = 0.2;
      var shadowKeyPenumbraOpacity2 = 0.14;
      var shadowAmbientShadowOpacity2 = 0.12;
      function createShadow2() {
        return ["".concat(arguments.length <= 0 ? void 0 : arguments[0], "px ").concat(arguments.length <= 1 ? void 0 : arguments[1], "px ").concat(arguments.length <= 2 ? void 0 : arguments[2], "px ").concat(arguments.length <= 3 ? void 0 : arguments[3], "px rgba(0,0,0,").concat(shadowKeyUmbraOpacity2, ")"), "".concat(arguments.length <= 4 ? void 0 : arguments[4], "px ").concat(arguments.length <= 5 ? void 0 : arguments[5], "px ").concat(arguments.length <= 6 ? void 0 : arguments[6], "px ").concat(arguments.length <= 7 ? void 0 : arguments[7], "px rgba(0,0,0,").concat(shadowKeyPenumbraOpacity2, ")"), "".concat(arguments.length <= 8 ? void 0 : arguments[8], "px ").concat(arguments.length <= 9 ? void 0 : arguments[9], "px ").concat(arguments.length <= 10 ? void 0 : arguments[10], "px ").concat(arguments.length <= 11 ? void 0 : arguments[11], "px rgba(0,0,0,").concat(shadowAmbientShadowOpacity2, ")")].join(",");
      }
      var shadows3 = ["none", createShadow2(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow2(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow2(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow2(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow2(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow2(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow2(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow2(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow2(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow2(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow2(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow2(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow2(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow2(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow2(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow2(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow2(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow2(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow2(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow2(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow2(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow2(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow2(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow2(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
      var _default = shadows3;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/styles/shape.js
  var require_shape = __commonJS({
    "node_modules/@material-ui/core/styles/shape.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var shape2 = {
        borderRadius: 4
      };
      var _default = shape2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/responsivePropType.js
  var require_responsivePropType = __commonJS({
    "node_modules/@material-ui/system/responsivePropType.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var responsivePropType = true ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.object, _propTypes.default.array]) : {};
      var _default = responsivePropType;
      exports.default = _default;
    }
  });

  // node_modules/@babel/runtime/helpers/arrayLikeToArray.js
  var require_arrayLikeToArray = __commonJS({
    "node_modules/@babel/runtime/helpers/arrayLikeToArray.js"(exports, module) {
      function _arrayLikeToArray2(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++)
          arr2[i] = arr[i];
        return arr2;
      }
      module.exports = _arrayLikeToArray2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/arrayWithoutHoles.js
  var require_arrayWithoutHoles = __commonJS({
    "node_modules/@babel/runtime/helpers/arrayWithoutHoles.js"(exports, module) {
      var arrayLikeToArray = require_arrayLikeToArray();
      function _arrayWithoutHoles2(arr) {
        if (Array.isArray(arr))
          return arrayLikeToArray(arr);
      }
      module.exports = _arrayWithoutHoles2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/iterableToArray.js
  var require_iterableToArray = __commonJS({
    "node_modules/@babel/runtime/helpers/iterableToArray.js"(exports, module) {
      function _iterableToArray2(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
          return Array.from(iter);
      }
      module.exports = _iterableToArray2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js
  var require_unsupportedIterableToArray = __commonJS({
    "node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"(exports, module) {
      var arrayLikeToArray = require_arrayLikeToArray();
      function _unsupportedIterableToArray2(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return arrayLikeToArray(o, minLen);
      }
      module.exports = _unsupportedIterableToArray2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/nonIterableSpread.js
  var require_nonIterableSpread = __commonJS({
    "node_modules/@babel/runtime/helpers/nonIterableSpread.js"(exports, module) {
      function _nonIterableSpread2() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      module.exports = _nonIterableSpread2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/toConsumableArray.js
  var require_toConsumableArray = __commonJS({
    "node_modules/@babel/runtime/helpers/toConsumableArray.js"(exports, module) {
      var arrayWithoutHoles = require_arrayWithoutHoles();
      var iterableToArray = require_iterableToArray();
      var unsupportedIterableToArray = require_unsupportedIterableToArray();
      var nonIterableSpread = require_nonIterableSpread();
      function _toConsumableArray2(arr) {
        return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
      }
      module.exports = _toConsumableArray2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@material-ui/system/merge.js
  var require_merge = __commonJS({
    "node_modules/@material-ui/system/merge.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      function merge(acc, item) {
        if (!item) {
          return acc;
        }
        return (0, _utils.deepmerge)(acc, item, {
          clone: false
        });
      }
      var _default = merge;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/breakpoints.js
  var require_breakpoints = __commonJS({
    "node_modules/@material-ui/system/breakpoints.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.handleBreakpoints = handleBreakpoints;
      exports.default = void 0;
      var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
      var _extends2 = _interopRequireDefault(require_extends());
      var _typeof22 = _interopRequireDefault(require_typeof());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _merge = _interopRequireDefault(require_merge());
      var values = {
        xs: 0,
        sm: 600,
        md: 960,
        lg: 1280,
        xl: 1920
      };
      var defaultBreakpoints = {
        keys: ["xs", "sm", "md", "lg", "xl"],
        up: function up(key) {
          return "@media (min-width:".concat(values[key], "px)");
        }
      };
      function handleBreakpoints(props, propValue, styleFromPropValue) {
        if (true) {
          if (!props.theme) {
            console.error("Material-UI: You are calling a style function without a theme value.");
          }
        }
        if (Array.isArray(propValue)) {
          var themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
          return propValue.reduce(function(acc, item, index) {
            acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
            return acc;
          }, {});
        }
        if ((0, _typeof22.default)(propValue) === "object") {
          var _themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
          return Object.keys(propValue).reduce(function(acc, breakpoint) {
            acc[_themeBreakpoints.up(breakpoint)] = styleFromPropValue(propValue[breakpoint]);
            return acc;
          }, {});
        }
        var output = styleFromPropValue(propValue);
        return output;
      }
      function breakpoints(styleFunction2) {
        var newStyleFunction = function newStyleFunction2(props) {
          var base = styleFunction2(props);
          var themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
          var extended = themeBreakpoints.keys.reduce(function(acc, key) {
            if (props[key]) {
              acc = acc || {};
              acc[themeBreakpoints.up(key)] = styleFunction2((0, _extends2.default)({
                theme: props.theme
              }, props[key]));
            }
            return acc;
          }, null);
          return (0, _merge.default)(base, extended);
        };
        newStyleFunction.propTypes = true ? (0, _extends2.default)({}, styleFunction2.propTypes, {
          xs: _propTypes.default.object,
          sm: _propTypes.default.object,
          md: _propTypes.default.object,
          lg: _propTypes.default.object,
          xl: _propTypes.default.object
        }) : {};
        newStyleFunction.filterProps = ["xs", "sm", "md", "lg", "xl"].concat((0, _toConsumableArray2.default)(styleFunction2.filterProps));
        return newStyleFunction;
      }
      var _default = breakpoints;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/style.js
  var require_style = __commonJS({
    "node_modules/@material-ui/system/style.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _defineProperty2 = _interopRequireDefault(require_defineProperty());
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      function getPath(obj, path) {
        if (!path || typeof path !== "string") {
          return null;
        }
        return path.split(".").reduce(function(acc, item) {
          return acc && acc[item] ? acc[item] : null;
        }, obj);
      }
      function style(options) {
        var prop = options.prop, _options$cssProperty = options.cssProperty, cssProperty = _options$cssProperty === void 0 ? options.prop : _options$cssProperty, themeKey = options.themeKey, transform = options.transform;
        var fn = function fn2(props) {
          if (props[prop] == null) {
            return null;
          }
          var propValue = props[prop];
          var theme2 = props.theme;
          var themeMapping = getPath(theme2, themeKey) || {};
          var styleFromPropValue = function styleFromPropValue2(propValueFinal) {
            var value;
            if (typeof themeMapping === "function") {
              value = themeMapping(propValueFinal);
            } else if (Array.isArray(themeMapping)) {
              value = themeMapping[propValueFinal] || propValueFinal;
            } else {
              value = getPath(themeMapping, propValueFinal) || propValueFinal;
              if (transform) {
                value = transform(value);
              }
            }
            if (cssProperty === false) {
              return value;
            }
            return (0, _defineProperty2.default)({}, cssProperty, value);
          };
          return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
        };
        fn.propTypes = true ? (0, _defineProperty2.default)({}, prop, _responsivePropType.default) : {};
        fn.filterProps = [prop];
        return fn;
      }
      var _default = style;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/compose.js
  var require_compose = __commonJS({
    "node_modules/@material-ui/system/compose.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _merge = _interopRequireDefault(require_merge());
      function compose2() {
        for (var _len = arguments.length, styles61 = new Array(_len), _key = 0; _key < _len; _key++) {
          styles61[_key] = arguments[_key];
        }
        var fn = function fn2(props) {
          return styles61.reduce(function(acc, style) {
            var output = style(props);
            if (output) {
              return (0, _merge.default)(acc, output);
            }
            return acc;
          }, {});
        };
        fn.propTypes = true ? styles61.reduce(function(acc, style) {
          return (0, _extends2.default)(acc, style.propTypes);
        }, {}) : {};
        fn.filterProps = styles61.reduce(function(acc, style) {
          return acc.concat(style.filterProps);
        }, []);
        return fn;
      }
      var _default = compose2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/borders.js
  var require_borders = __commonJS({
    "node_modules/@material-ui/system/borders.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.borderRadius = exports.borderColor = exports.borderLeft = exports.borderBottom = exports.borderRight = exports.borderTop = exports.border = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      function getBorder(value) {
        if (typeof value !== "number") {
          return value;
        }
        return "".concat(value, "px solid");
      }
      var border = (0, _style.default)({
        prop: "border",
        themeKey: "borders",
        transform: getBorder
      });
      exports.border = border;
      var borderTop = (0, _style.default)({
        prop: "borderTop",
        themeKey: "borders",
        transform: getBorder
      });
      exports.borderTop = borderTop;
      var borderRight = (0, _style.default)({
        prop: "borderRight",
        themeKey: "borders",
        transform: getBorder
      });
      exports.borderRight = borderRight;
      var borderBottom = (0, _style.default)({
        prop: "borderBottom",
        themeKey: "borders",
        transform: getBorder
      });
      exports.borderBottom = borderBottom;
      var borderLeft = (0, _style.default)({
        prop: "borderLeft",
        themeKey: "borders",
        transform: getBorder
      });
      exports.borderLeft = borderLeft;
      var borderColor = (0, _style.default)({
        prop: "borderColor",
        themeKey: "palette"
      });
      exports.borderColor = borderColor;
      var borderRadius = (0, _style.default)({
        prop: "borderRadius",
        themeKey: "shape"
      });
      exports.borderRadius = borderRadius;
      var borders2 = (0, _compose.default)(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderRadius);
      var _default = borders2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/styleFunctionSx.js
  var require_styleFunctionSx = __commonJS({
    "node_modules/@material-ui/system/styleFunctionSx.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.css = css;
      exports.default = void 0;
      var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
      var _extends2 = _interopRequireDefault(require_extends());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _merge = _interopRequireDefault(require_merge());
      function omit(input, fields) {
        var output = {};
        Object.keys(input).forEach(function(prop) {
          if (fields.indexOf(prop) === -1) {
            output[prop] = input[prop];
          }
        });
        return output;
      }
      var warnedOnce2 = false;
      function styleFunctionSx2(styleFunction2) {
        var newStyleFunction = function newStyleFunction2(props) {
          var output = styleFunction2(props);
          if (props.css) {
            return (0, _extends2.default)({}, (0, _merge.default)(output, styleFunction2((0, _extends2.default)({
              theme: props.theme
            }, props.css))), omit(props.css, [styleFunction2.filterProps]));
          }
          if (props.sx) {
            return (0, _extends2.default)({}, (0, _merge.default)(output, styleFunction2((0, _extends2.default)({
              theme: props.theme
            }, props.sx))), omit(props.sx, [styleFunction2.filterProps]));
          }
          return output;
        };
        newStyleFunction.propTypes = true ? (0, _extends2.default)({}, styleFunction2.propTypes, {
          css: (0, _utils.chainPropTypes)(_propTypes.default.object, function(props) {
            if (!warnedOnce2 && props.css !== void 0) {
              warnedOnce2 = true;
              return new Error("Material-UI: The `css` prop is deprecated, please use the `sx` prop instead.");
            }
            return null;
          }),
          sx: _propTypes.default.object
        }) : {};
        newStyleFunction.filterProps = ["css", "sx"].concat((0, _toConsumableArray2.default)(styleFunction2.filterProps));
        return newStyleFunction;
      }
      function css(styleFunction2) {
        if (true) {
          console.warn("Material-UI: The `css` function is deprecated. Use the `styleFunctionSx` instead.");
        }
        return styleFunctionSx2(styleFunction2);
      }
      var _default = styleFunctionSx2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/display.js
  var require_display = __commonJS({
    "node_modules/@material-ui/system/display.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.whiteSpace = exports.visibility = exports.textOverflow = exports.overflow = exports.displayRaw = exports.displayPrint = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var displayPrint = (0, _style.default)({
        prop: "displayPrint",
        cssProperty: false,
        transform: function transform(value) {
          return {
            "@media print": {
              display: value
            }
          };
        }
      });
      exports.displayPrint = displayPrint;
      var displayRaw = (0, _style.default)({
        prop: "display"
      });
      exports.displayRaw = displayRaw;
      var overflow = (0, _style.default)({
        prop: "overflow"
      });
      exports.overflow = overflow;
      var textOverflow = (0, _style.default)({
        prop: "textOverflow"
      });
      exports.textOverflow = textOverflow;
      var visibility = (0, _style.default)({
        prop: "visibility"
      });
      exports.visibility = visibility;
      var whiteSpace = (0, _style.default)({
        prop: "whiteSpace"
      });
      exports.whiteSpace = whiteSpace;
      var _default = (0, _compose.default)(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/flexbox.js
  var require_flexbox = __commonJS({
    "node_modules/@material-ui/system/flexbox.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.justifySelf = exports.justifyItems = exports.alignSelf = exports.flexShrink = exports.flexGrow = exports.flex = exports.order = exports.alignContent = exports.alignItems = exports.justifyContent = exports.flexWrap = exports.flexDirection = exports.flexBasis = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var flexBasis = (0, _style.default)({
        prop: "flexBasis"
      });
      exports.flexBasis = flexBasis;
      var flexDirection = (0, _style.default)({
        prop: "flexDirection"
      });
      exports.flexDirection = flexDirection;
      var flexWrap = (0, _style.default)({
        prop: "flexWrap"
      });
      exports.flexWrap = flexWrap;
      var justifyContent = (0, _style.default)({
        prop: "justifyContent"
      });
      exports.justifyContent = justifyContent;
      var alignItems = (0, _style.default)({
        prop: "alignItems"
      });
      exports.alignItems = alignItems;
      var alignContent = (0, _style.default)({
        prop: "alignContent"
      });
      exports.alignContent = alignContent;
      var order = (0, _style.default)({
        prop: "order"
      });
      exports.order = order;
      var flex = (0, _style.default)({
        prop: "flex"
      });
      exports.flex = flex;
      var flexGrow = (0, _style.default)({
        prop: "flexGrow"
      });
      exports.flexGrow = flexGrow;
      var flexShrink = (0, _style.default)({
        prop: "flexShrink"
      });
      exports.flexShrink = flexShrink;
      var alignSelf = (0, _style.default)({
        prop: "alignSelf"
      });
      exports.alignSelf = alignSelf;
      var justifyItems = (0, _style.default)({
        prop: "justifyItems"
      });
      exports.justifyItems = justifyItems;
      var justifySelf = (0, _style.default)({
        prop: "justifySelf"
      });
      exports.justifySelf = justifySelf;
      var flexbox2 = (0, _compose.default)(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
      var _default = flexbox2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/grid.js
  var require_grid = __commonJS({
    "node_modules/@material-ui/system/grid.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.gridArea = exports.gridTemplateAreas = exports.gridTemplateRows = exports.gridTemplateColumns = exports.gridAutoRows = exports.gridAutoColumns = exports.gridAutoFlow = exports.gridRow = exports.gridColumn = exports.gridRowGap = exports.gridColumnGap = exports.gridGap = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var gridGap = (0, _style.default)({
        prop: "gridGap"
      });
      exports.gridGap = gridGap;
      var gridColumnGap = (0, _style.default)({
        prop: "gridColumnGap"
      });
      exports.gridColumnGap = gridColumnGap;
      var gridRowGap = (0, _style.default)({
        prop: "gridRowGap"
      });
      exports.gridRowGap = gridRowGap;
      var gridColumn = (0, _style.default)({
        prop: "gridColumn"
      });
      exports.gridColumn = gridColumn;
      var gridRow = (0, _style.default)({
        prop: "gridRow"
      });
      exports.gridRow = gridRow;
      var gridAutoFlow = (0, _style.default)({
        prop: "gridAutoFlow"
      });
      exports.gridAutoFlow = gridAutoFlow;
      var gridAutoColumns = (0, _style.default)({
        prop: "gridAutoColumns"
      });
      exports.gridAutoColumns = gridAutoColumns;
      var gridAutoRows = (0, _style.default)({
        prop: "gridAutoRows"
      });
      exports.gridAutoRows = gridAutoRows;
      var gridTemplateColumns = (0, _style.default)({
        prop: "gridTemplateColumns"
      });
      exports.gridTemplateColumns = gridTemplateColumns;
      var gridTemplateRows = (0, _style.default)({
        prop: "gridTemplateRows"
      });
      exports.gridTemplateRows = gridTemplateRows;
      var gridTemplateAreas = (0, _style.default)({
        prop: "gridTemplateAreas"
      });
      exports.gridTemplateAreas = gridTemplateAreas;
      var gridArea = (0, _style.default)({
        prop: "gridArea"
      });
      exports.gridArea = gridArea;
      var grid2 = (0, _compose.default)(gridGap, gridColumnGap, gridRowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
      var _default = grid2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/palette.js
  var require_palette = __commonJS({
    "node_modules/@material-ui/system/palette.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.bgcolor = exports.color = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var color = (0, _style.default)({
        prop: "color",
        themeKey: "palette"
      });
      exports.color = color;
      var bgcolor = (0, _style.default)({
        prop: "bgcolor",
        cssProperty: "backgroundColor",
        themeKey: "palette"
      });
      exports.bgcolor = bgcolor;
      var palette2 = (0, _compose.default)(color, bgcolor);
      var _default = palette2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/positions.js
  var require_positions = __commonJS({
    "node_modules/@material-ui/system/positions.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.left = exports.bottom = exports.right = exports.top = exports.zIndex = exports.position = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var position = (0, _style.default)({
        prop: "position"
      });
      exports.position = position;
      var zIndex2 = (0, _style.default)({
        prop: "zIndex",
        themeKey: "zIndex"
      });
      exports.zIndex = zIndex2;
      var top = (0, _style.default)({
        prop: "top"
      });
      exports.top = top;
      var right = (0, _style.default)({
        prop: "right"
      });
      exports.right = right;
      var bottom = (0, _style.default)({
        prop: "bottom"
      });
      exports.bottom = bottom;
      var left = (0, _style.default)({
        prop: "left"
      });
      exports.left = left;
      var _default = (0, _compose.default)(position, zIndex2, top, right, bottom, left);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/shadows.js
  var require_shadows2 = __commonJS({
    "node_modules/@material-ui/system/shadows.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _style = _interopRequireDefault(require_style());
      var boxShadow = (0, _style.default)({
        prop: "boxShadow",
        themeKey: "shadows"
      });
      var _default = boxShadow;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/sizing.js
  var require_sizing = __commonJS({
    "node_modules/@material-ui/system/sizing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.boxSizing = exports.sizeHeight = exports.sizeWidth = exports.minHeight = exports.maxHeight = exports.height = exports.minWidth = exports.maxWidth = exports.width = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      function transform(value) {
        return value <= 1 ? "".concat(value * 100, "%") : value;
      }
      var width = (0, _style.default)({
        prop: "width",
        transform
      });
      exports.width = width;
      var maxWidth = (0, _style.default)({
        prop: "maxWidth",
        transform
      });
      exports.maxWidth = maxWidth;
      var minWidth = (0, _style.default)({
        prop: "minWidth",
        transform
      });
      exports.minWidth = minWidth;
      var height = (0, _style.default)({
        prop: "height",
        transform
      });
      exports.height = height;
      var maxHeight = (0, _style.default)({
        prop: "maxHeight",
        transform
      });
      exports.maxHeight = maxHeight;
      var minHeight = (0, _style.default)({
        prop: "minHeight",
        transform
      });
      exports.minHeight = minHeight;
      var sizeWidth = (0, _style.default)({
        prop: "size",
        cssProperty: "width",
        transform
      });
      exports.sizeWidth = sizeWidth;
      var sizeHeight = (0, _style.default)({
        prop: "size",
        cssProperty: "height",
        transform
      });
      exports.sizeHeight = sizeHeight;
      var boxSizing = (0, _style.default)({
        prop: "boxSizing"
      });
      exports.boxSizing = boxSizing;
      var sizing2 = (0, _compose.default)(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
      var _default = sizing2;
      exports.default = _default;
    }
  });

  // node_modules/@babel/runtime/helpers/arrayWithHoles.js
  var require_arrayWithHoles = __commonJS({
    "node_modules/@babel/runtime/helpers/arrayWithHoles.js"(exports, module) {
      function _arrayWithHoles2(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      module.exports = _arrayWithHoles2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/iterableToArrayLimit.js
  var require_iterableToArrayLimit = __commonJS({
    "node_modules/@babel/runtime/helpers/iterableToArrayLimit.js"(exports, module) {
      function _iterableToArrayLimit2(arr, i) {
        var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
        if (null != _i) {
          var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
          try {
            if (_x = (_i = _i.call(arr)).next, 0 === i) {
              if (Object(_i) !== _i)
                return;
              _n = false;
            } else
              for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
                ;
          } catch (err) {
            _d = true, _e = err;
          } finally {
            try {
              if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r))
                return;
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
      }
      module.exports = _iterableToArrayLimit2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/nonIterableRest.js
  var require_nonIterableRest = __commonJS({
    "node_modules/@babel/runtime/helpers/nonIterableRest.js"(exports, module) {
      function _nonIterableRest2() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      module.exports = _nonIterableRest2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/slicedToArray.js
  var require_slicedToArray = __commonJS({
    "node_modules/@babel/runtime/helpers/slicedToArray.js"(exports, module) {
      var arrayWithHoles = require_arrayWithHoles();
      var iterableToArrayLimit = require_iterableToArrayLimit();
      var unsupportedIterableToArray = require_unsupportedIterableToArray();
      var nonIterableRest = require_nonIterableRest();
      function _slicedToArray2(arr, i) {
        return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
      }
      module.exports = _slicedToArray2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@material-ui/system/memoize.js
  var require_memoize = __commonJS({
    "node_modules/@material-ui/system/memoize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = memoize;
      function memoize(fn) {
        var cache = {};
        return function(arg) {
          if (cache[arg] === void 0) {
            cache[arg] = fn(arg);
          }
          return cache[arg];
        };
      }
    }
  });

  // node_modules/@material-ui/system/spacing.js
  var require_spacing = __commonJS({
    "node_modules/@material-ui/system/spacing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createUnarySpacing = createUnarySpacing2;
      exports.default = void 0;
      var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      var _merge = _interopRequireDefault(require_merge());
      var _memoize = _interopRequireDefault(require_memoize());
      var properties = {
        m: "margin",
        p: "padding"
      };
      var directions = {
        t: "Top",
        r: "Right",
        b: "Bottom",
        l: "Left",
        x: ["Left", "Right"],
        y: ["Top", "Bottom"]
      };
      var aliases = {
        marginX: "mx",
        marginY: "my",
        paddingX: "px",
        paddingY: "py"
      };
      var getCssProperties = (0, _memoize.default)(function(prop) {
        if (prop.length > 2) {
          if (aliases[prop]) {
            prop = aliases[prop];
          } else {
            return [prop];
          }
        }
        var _prop$split = prop.split(""), _prop$split2 = (0, _slicedToArray2.default)(_prop$split, 2), a = _prop$split2[0], b = _prop$split2[1];
        var property = properties[a];
        var direction = directions[b] || "";
        return Array.isArray(direction) ? direction.map(function(dir) {
          return property + dir;
        }) : [property + direction];
      });
      var spacingKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "p", "pt", "pr", "pb", "pl", "px", "py", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY"];
      function createUnarySpacing2(theme2) {
        var themeSpacing = theme2.spacing || 8;
        if (typeof themeSpacing === "number") {
          return function(abs) {
            if (true) {
              if (typeof abs !== "number") {
                console.error("Material-UI: Expected spacing argument to be a number, got ".concat(abs, "."));
              }
            }
            return themeSpacing * abs;
          };
        }
        if (Array.isArray(themeSpacing)) {
          return function(abs) {
            if (true) {
              if (abs > themeSpacing.length - 1) {
                console.error(["Material-UI: The value provided (".concat(abs, ") overflows."), "The supported values are: ".concat(JSON.stringify(themeSpacing), "."), "".concat(abs, " > ").concat(themeSpacing.length - 1, ", you need to add the missing values.")].join("\n"));
              }
            }
            return themeSpacing[abs];
          };
        }
        if (typeof themeSpacing === "function") {
          return themeSpacing;
        }
        if (true) {
          console.error(["Material-UI: The `theme.spacing` value (".concat(themeSpacing, ") is invalid."), "It should be a number, an array or a function."].join("\n"));
        }
        return function() {
          return void 0;
        };
      }
      function getValue(transformer, propValue) {
        if (typeof propValue === "string" || propValue == null) {
          return propValue;
        }
        var abs = Math.abs(propValue);
        var transformed = transformer(abs);
        if (propValue >= 0) {
          return transformed;
        }
        if (typeof transformed === "number") {
          return -transformed;
        }
        return "-".concat(transformed);
      }
      function getStyleFromPropValue(cssProperties, transformer) {
        return function(propValue) {
          return cssProperties.reduce(function(acc, cssProperty) {
            acc[cssProperty] = getValue(transformer, propValue);
            return acc;
          }, {});
        };
      }
      function spacing2(props) {
        var theme2 = props.theme;
        var transformer = createUnarySpacing2(theme2);
        return Object.keys(props).map(function(prop) {
          if (spacingKeys.indexOf(prop) === -1) {
            return null;
          }
          var cssProperties = getCssProperties(prop);
          var styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
          var propValue = props[prop];
          return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
        }).reduce(_merge.default, {});
      }
      spacing2.propTypes = true ? spacingKeys.reduce(function(obj, key) {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      spacing2.filterProps = spacingKeys;
      var _default = spacing2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/typography.js
  var require_typography = __commonJS({
    "node_modules/@material-ui/system/typography.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.textAlign = exports.lineHeight = exports.letterSpacing = exports.fontWeight = exports.fontStyle = exports.fontSize = exports.fontFamily = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var fontFamily = (0, _style.default)({
        prop: "fontFamily",
        themeKey: "typography"
      });
      exports.fontFamily = fontFamily;
      var fontSize = (0, _style.default)({
        prop: "fontSize",
        themeKey: "typography"
      });
      exports.fontSize = fontSize;
      var fontStyle = (0, _style.default)({
        prop: "fontStyle",
        themeKey: "typography"
      });
      exports.fontStyle = fontStyle;
      var fontWeight = (0, _style.default)({
        prop: "fontWeight",
        themeKey: "typography"
      });
      exports.fontWeight = fontWeight;
      var letterSpacing = (0, _style.default)({
        prop: "letterSpacing"
      });
      exports.letterSpacing = letterSpacing;
      var lineHeight = (0, _style.default)({
        prop: "lineHeight"
      });
      exports.lineHeight = lineHeight;
      var textAlign = (0, _style.default)({
        prop: "textAlign"
      });
      exports.textAlign = textAlign;
      var typography2 = (0, _compose.default)(fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);
      var _default = typography2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/system/index.js
  var require_system = __commonJS({
    "node_modules/@material-ui/system/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        borders: true,
        breakpoints: true,
        compose: true,
        styleFunctionSx: true,
        display: true,
        flexbox: true,
        grid: true,
        palette: true,
        positions: true,
        shadows: true,
        sizing: true,
        spacing: true,
        style: true,
        typography: true
      };
      Object.defineProperty(exports, "borders", {
        enumerable: true,
        get: function get() {
          return _borders.default;
        }
      });
      Object.defineProperty(exports, "breakpoints", {
        enumerable: true,
        get: function get() {
          return _breakpoints.default;
        }
      });
      Object.defineProperty(exports, "compose", {
        enumerable: true,
        get: function get() {
          return _compose.default;
        }
      });
      Object.defineProperty(exports, "styleFunctionSx", {
        enumerable: true,
        get: function get() {
          return _styleFunctionSx.default;
        }
      });
      Object.defineProperty(exports, "display", {
        enumerable: true,
        get: function get() {
          return _display.default;
        }
      });
      Object.defineProperty(exports, "flexbox", {
        enumerable: true,
        get: function get() {
          return _flexbox.default;
        }
      });
      Object.defineProperty(exports, "grid", {
        enumerable: true,
        get: function get() {
          return _grid.default;
        }
      });
      Object.defineProperty(exports, "palette", {
        enumerable: true,
        get: function get() {
          return _palette.default;
        }
      });
      Object.defineProperty(exports, "positions", {
        enumerable: true,
        get: function get() {
          return _positions.default;
        }
      });
      Object.defineProperty(exports, "shadows", {
        enumerable: true,
        get: function get() {
          return _shadows.default;
        }
      });
      Object.defineProperty(exports, "sizing", {
        enumerable: true,
        get: function get() {
          return _sizing.default;
        }
      });
      Object.defineProperty(exports, "spacing", {
        enumerable: true,
        get: function get() {
          return _spacing.default;
        }
      });
      Object.defineProperty(exports, "style", {
        enumerable: true,
        get: function get() {
          return _style.default;
        }
      });
      Object.defineProperty(exports, "typography", {
        enumerable: true,
        get: function get() {
          return _typography.default;
        }
      });
      var _borders = _interopRequireWildcard(require_borders());
      Object.keys(_borders).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _borders[key];
          }
        });
      });
      var _breakpoints = _interopRequireDefault(require_breakpoints());
      var _compose = _interopRequireDefault(require_compose());
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx());
      Object.keys(_styleFunctionSx).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _styleFunctionSx[key];
          }
        });
      });
      var _display = _interopRequireDefault(require_display());
      var _flexbox = _interopRequireWildcard(require_flexbox());
      Object.keys(_flexbox).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _flexbox[key];
          }
        });
      });
      var _grid = _interopRequireWildcard(require_grid());
      Object.keys(_grid).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _grid[key];
          }
        });
      });
      var _palette = _interopRequireWildcard(require_palette());
      Object.keys(_palette).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _palette[key];
          }
        });
      });
      var _positions = _interopRequireWildcard(require_positions());
      Object.keys(_positions).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _positions[key];
          }
        });
      });
      var _shadows = _interopRequireDefault(require_shadows2());
      var _sizing = _interopRequireWildcard(require_sizing());
      Object.keys(_sizing).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _sizing[key];
          }
        });
      });
      var _spacing = _interopRequireWildcard(require_spacing());
      Object.keys(_spacing).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _spacing[key];
          }
        });
      });
      var _style = _interopRequireDefault(require_style());
      var _typography = _interopRequireWildcard(require_typography());
      Object.keys(_typography).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _typography[key];
          }
        });
      });
    }
  });

  // node_modules/@material-ui/core/styles/createSpacing.js
  var require_createSpacing = __commonJS({
    "node_modules/@material-ui/core/styles/createSpacing.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createSpacing2;
      var _system = require_system();
      var warnOnce2;
      function createSpacing2() {
        var spacingInput = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8;
        if (spacingInput.mui) {
          return spacingInput;
        }
        var transform = (0, _system.createUnarySpacing)({
          spacing: spacingInput
        });
        var spacing2 = function spacing3() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (true) {
            if (!(args.length <= 4)) {
              console.error("Material-UI: Too many arguments provided, expected between 0 and 4, got ".concat(args.length));
            }
          }
          if (args.length === 0) {
            return transform(1);
          }
          if (args.length === 1) {
            return transform(args[0]);
          }
          return args.map(function(argument) {
            if (typeof argument === "string") {
              return argument;
            }
            var output = transform(argument);
            return typeof output === "number" ? "".concat(output, "px") : output;
          }).join(" ");
        };
        Object.defineProperty(spacing2, "unit", {
          get: function get() {
            if (true) {
              if (!warnOnce2 || false) {
                console.error(["Material-UI: theme.spacing.unit usage has been deprecated.", "It will be removed in v5.", "You can replace `theme.spacing.unit * y` with `theme.spacing(y)`.", "", "You can use the `https://github.com/mui-org/material-ui/tree/master/packages/material-ui-codemod/README.md#theme-spacing-api` migration helper to make the process smoother."].join("\n"));
              }
              warnOnce2 = true;
            }
            return spacingInput;
          }
        });
        spacing2.mui = true;
        return spacing2;
      }
    }
  });

  // node_modules/@material-ui/core/styles/transitions.js
  var require_transitions = __commonJS({
    "node_modules/@material-ui/core/styles/transitions.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.duration = exports.easing = void 0;
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var easing2 = {
        easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
        easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
        easeIn: "cubic-bezier(0.4, 0, 1, 1)",
        sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
      };
      exports.easing = easing2;
      var duration2 = {
        shortest: 150,
        shorter: 200,
        short: 250,
        standard: 300,
        complex: 375,
        enteringScreen: 225,
        leavingScreen: 195
      };
      exports.duration = duration2;
      function formatMs2(milliseconds) {
        return "".concat(Math.round(milliseconds), "ms");
      }
      var _default = {
        easing: easing2,
        duration: duration2,
        create: function create2() {
          var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["all"];
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var _options$duration = options.duration, durationOption = _options$duration === void 0 ? duration2.standard : _options$duration, _options$easing = options.easing, easingOption = _options$easing === void 0 ? easing2.easeInOut : _options$easing, _options$delay = options.delay, delay = _options$delay === void 0 ? 0 : _options$delay, other = (0, _objectWithoutProperties2.default)(options, ["duration", "easing", "delay"]);
          if (true) {
            var isString = function isString2(value) {
              return typeof value === "string";
            };
            var isNumber = function isNumber2(value) {
              return !isNaN(parseFloat(value));
            };
            if (!isString(props) && !Array.isArray(props)) {
              console.error('Material-UI: Argument "props" must be a string or Array.');
            }
            if (!isNumber(durationOption) && !isString(durationOption)) {
              console.error('Material-UI: Argument "duration" must be a number or a string but found '.concat(durationOption, "."));
            }
            if (!isString(easingOption)) {
              console.error('Material-UI: Argument "easing" must be a string.');
            }
            if (!isNumber(delay) && !isString(delay)) {
              console.error('Material-UI: Argument "delay" must be a number or a string.');
            }
            if (Object.keys(other).length !== 0) {
              console.error("Material-UI: Unrecognized argument(s) [".concat(Object.keys(other).join(","), "]."));
            }
          }
          return (Array.isArray(props) ? props : [props]).map(function(animatedProp) {
            return "".concat(animatedProp, " ").concat(typeof durationOption === "string" ? durationOption : formatMs2(durationOption), " ").concat(easingOption, " ").concat(typeof delay === "string" ? delay : formatMs2(delay));
          }).join(",");
        },
        getAutoHeightDuration: function getAutoHeightDuration2(height) {
          if (!height) {
            return 0;
          }
          var constant = height / 36;
          return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
        }
      };
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/styles/zIndex.js
  var require_zIndex = __commonJS({
    "node_modules/@material-ui/core/styles/zIndex.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var zIndex2 = {
        mobileStepper: 1e3,
        speedDial: 1050,
        appBar: 1100,
        drawer: 1200,
        modal: 1300,
        snackbar: 1400,
        tooltip: 1500
      };
      var _default = zIndex2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/styles/createTheme.js
  var require_createTheme = __commonJS({
    "node_modules/@material-ui/core/styles/createTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createMuiTheme = createMuiTheme;
      exports.default = void 0;
      var _defineProperty2 = _interopRequireDefault(require_defineProperty());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _utils = require_utils();
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _createMixins = _interopRequireDefault(require_createMixins());
      var _createPalette = _interopRequireDefault(require_createPalette());
      var _createTypography = _interopRequireDefault(require_createTypography());
      var _shadows = _interopRequireDefault(require_shadows());
      var _shape = _interopRequireDefault(require_shape());
      var _createSpacing = _interopRequireDefault(require_createSpacing());
      var _transitions = _interopRequireDefault(require_transitions());
      var _zIndex = _interopRequireDefault(require_zIndex());
      function createTheme2() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var _options$breakpoints = options.breakpoints, breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints, _options$mixins = options.mixins, mixinsInput = _options$mixins === void 0 ? {} : _options$mixins, _options$palette = options.palette, paletteInput = _options$palette === void 0 ? {} : _options$palette, spacingInput = options.spacing, _options$typography = options.typography, typographyInput = _options$typography === void 0 ? {} : _options$typography, other = (0, _objectWithoutProperties2.default)(options, ["breakpoints", "mixins", "palette", "spacing", "typography"]);
        var palette2 = (0, _createPalette.default)(paletteInput);
        var breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
        var spacing2 = (0, _createSpacing.default)(spacingInput);
        var muiTheme = (0, _utils.deepmerge)({
          breakpoints,
          direction: "ltr",
          mixins: (0, _createMixins.default)(breakpoints, spacing2, mixinsInput),
          overrides: {},
          palette: palette2,
          props: {},
          shadows: _shadows.default,
          typography: (0, _createTypography.default)(palette2, typographyInput),
          spacing: spacing2,
          shape: _shape.default,
          transitions: _transitions.default,
          zIndex: _zIndex.default
        }, other);
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        muiTheme = args.reduce(function(acc, argument) {
          return (0, _utils.deepmerge)(acc, argument);
        }, muiTheme);
        if (true) {
          var pseudoClasses = ["checked", "disabled", "error", "focused", "focusVisible", "required", "expanded", "selected"];
          var traverse = function traverse2(node, parentKey) {
            var depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
            var key;
            for (key in node) {
              var child = node[key];
              if (depth === 1) {
                if (key.indexOf("Mui") === 0 && child) {
                  traverse2(child, key, depth + 1);
                }
              } else if (pseudoClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
                if (true) {
                  console.error(["Material-UI: The `".concat(parentKey, "` component increases ") + "the CSS specificity of the `".concat(key, "` internal state."), "You can not override it like this: ", JSON.stringify(node, null, 2), "", "Instead, you need to use the $ruleName syntax:", JSON.stringify({
                    root: (0, _defineProperty2.default)({}, "&$".concat(key), child)
                  }, null, 2), "", "https://mui.com/r/pseudo-classes-guide"].join("\n"));
                }
                node[key] = {};
              }
            }
          };
          traverse(muiTheme.overrides);
        }
        return muiTheme;
      }
      var warnedOnce2 = false;
      function createMuiTheme() {
        if (true) {
          if (!warnedOnce2) {
            warnedOnce2 = true;
            console.error(["Material-UI: the createMuiTheme function was renamed to createTheme.", "", "You should use `import { createTheme } from '@material-ui/core/styles'`"].join("\n"));
          }
        }
        return createTheme2.apply(void 0, arguments);
      }
      var _default = createTheme2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/styles/createMuiStrictModeTheme.js
  var require_createMuiStrictModeTheme = __commonJS({
    "node_modules/@material-ui/core/styles/createMuiStrictModeTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createMuiStrictModeTheme;
      var _utils = require_utils();
      var _createTheme = _interopRequireDefault(require_createTheme());
      function createMuiStrictModeTheme(options) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return _createTheme.default.apply(void 0, [(0, _utils.deepmerge)({
          unstable_strictMode: true
        }, options)].concat(args));
      }
    }
  });

  // node_modules/@material-ui/styles/ThemeProvider/nested.js
  var require_nested = __commonJS({
    "node_modules/@material-ui/styles/ThemeProvider/nested.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var _default = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/styles/createGenerateClassName/createGenerateClassName.js
  var require_createGenerateClassName = __commonJS({
    "node_modules/@material-ui/styles/createGenerateClassName/createGenerateClassName.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createGenerateClassName;
      var _nested = _interopRequireDefault(require_nested());
      var pseudoClasses = ["checked", "disabled", "error", "focused", "focusVisible", "required", "expanded", "selected"];
      function createGenerateClassName() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var _options$disableGloba = options.disableGlobal, disableGlobal = _options$disableGloba === void 0 ? false : _options$disableGloba, _options$productionPr = options.productionPrefix, productionPrefix = _options$productionPr === void 0 ? "jss" : _options$productionPr, _options$seed = options.seed, seed = _options$seed === void 0 ? "" : _options$seed;
        var seedPrefix = seed === "" ? "" : "".concat(seed, "-");
        var ruleCounter = 0;
        var getNextCounterId = function getNextCounterId2() {
          ruleCounter += 1;
          if (true) {
            if (ruleCounter >= 1e10) {
              console.warn(["Material-UI: You might have a memory leak.", "The ruleCounter is not supposed to grow that much."].join(""));
            }
          }
          return ruleCounter;
        };
        return function(rule, styleSheet) {
          var name = styleSheet.options.name;
          if (name && name.indexOf("Mui") === 0 && !styleSheet.options.link && !disableGlobal) {
            if (pseudoClasses.indexOf(rule.key) !== -1) {
              return "Mui-".concat(rule.key);
            }
            var prefix = "".concat(seedPrefix).concat(name, "-").concat(rule.key);
            if (!styleSheet.options.theme[_nested.default] || seed !== "") {
              return prefix;
            }
            return "".concat(prefix, "-").concat(getNextCounterId());
          }
          if (false) {
            return "".concat(seedPrefix).concat(productionPrefix).concat(getNextCounterId());
          }
          var suffix = "".concat(rule.key, "-").concat(getNextCounterId());
          if (styleSheet.options.classNamePrefix) {
            return "".concat(seedPrefix).concat(styleSheet.options.classNamePrefix, "-").concat(suffix);
          }
          return "".concat(seedPrefix).concat(suffix);
        };
      }
    }
  });

  // node_modules/@material-ui/styles/createGenerateClassName/index.js
  var require_createGenerateClassName2 = __commonJS({
    "node_modules/@material-ui/styles/createGenerateClassName/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _createGenerateClassName.default;
        }
      });
      var _createGenerateClassName = _interopRequireDefault(require_createGenerateClassName());
    }
  });

  // node_modules/@material-ui/styles/createStyles/createStyles.js
  var require_createStyles = __commonJS({
    "node_modules/@material-ui/styles/createStyles/createStyles.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createStyles;
      function createStyles(styles61) {
        return styles61;
      }
    }
  });

  // node_modules/@material-ui/styles/createStyles/index.js
  var require_createStyles2 = __commonJS({
    "node_modules/@material-ui/styles/createStyles/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _createStyles.default;
        }
      });
      var _createStyles = _interopRequireDefault(require_createStyles());
    }
  });

  // node_modules/@material-ui/styles/getThemeProps/getThemeProps.js
  var require_getThemeProps = __commonJS({
    "node_modules/@material-ui/styles/getThemeProps/getThemeProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getThemeProps2;
      function getThemeProps2(params) {
        var theme2 = params.theme, name = params.name, props = params.props;
        if (!theme2 || !theme2.props || !theme2.props[name]) {
          return props;
        }
        var defaultProps = theme2.props[name];
        var propName;
        for (propName in defaultProps) {
          if (props[propName] === void 0) {
            props[propName] = defaultProps[propName];
          }
        }
        return props;
      }
    }
  });

  // node_modules/@material-ui/styles/getThemeProps/index.js
  var require_getThemeProps2 = __commonJS({
    "node_modules/@material-ui/styles/getThemeProps/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _getThemeProps.default;
        }
      });
      var _getThemeProps = _interopRequireDefault(require_getThemeProps());
    }
  });

  // node_modules/tiny-warning/dist/tiny-warning.cjs.js
  var require_tiny_warning_cjs = __commonJS({
    "node_modules/tiny-warning/dist/tiny-warning.cjs.js"(exports, module) {
      "use strict";
      var isProduction = false;
      function warning(condition, message) {
        if (!isProduction) {
          if (condition) {
            return;
          }
          var text = "Warning: " + message;
          if (typeof console !== "undefined") {
            console.warn(text);
          }
          try {
            throw Error(text);
          } catch (x) {
          }
        }
      }
      module.exports = warning;
    }
  });

  // node_modules/is-in-browser/dist/index.js
  var require_dist = __commonJS({
    "node_modules/is-in-browser/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _typeof3 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var isBrowser = exports.isBrowser = (typeof window === "undefined" ? "undefined" : _typeof3(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof3(document)) === "object" && document.nodeType === 9;
      exports.default = isBrowser;
    }
  });

  // node_modules/@babel/runtime/helpers/createClass.js
  var require_createClass = __commonJS({
    "node_modules/@babel/runtime/helpers/createClass.js"(exports, module) {
      var toPropertyKey = require_toPropertyKey();
      function _defineProperties2(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
        }
      }
      function _createClass2(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties2(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties2(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", {
          writable: false
        });
        return Constructor;
      }
      module.exports = _createClass2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/setPrototypeOf.js
  var require_setPrototypeOf = __commonJS({
    "node_modules/@babel/runtime/helpers/setPrototypeOf.js"(exports, module) {
      function _setPrototypeOf(o, p) {
        module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        return _setPrototypeOf(o, p);
      }
      module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/inheritsLoose.js
  var require_inheritsLoose = __commonJS({
    "node_modules/@babel/runtime/helpers/inheritsLoose.js"(exports, module) {
      var setPrototypeOf = require_setPrototypeOf();
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        setPrototypeOf(subClass, superClass);
      }
      module.exports = _inheritsLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/assertThisInitialized.js
  var require_assertThisInitialized = __commonJS({
    "node_modules/@babel/runtime/helpers/assertThisInitialized.js"(exports, module) {
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/jss/dist/jss.cjs.js
  var require_jss_cjs = __commonJS({
    "node_modules/jss/dist/jss.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var _extends2 = require_extends();
      var isInBrowser = require_dist();
      var warning = require_tiny_warning_cjs();
      var _createClass2 = require_createClass();
      var _inheritsLoose = require_inheritsLoose();
      var _assertThisInitialized = require_assertThisInitialized();
      var _objectWithoutPropertiesLoose2 = require_objectWithoutPropertiesLoose();
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      var _extends__default = /* @__PURE__ */ _interopDefaultLegacy(_extends2);
      var isInBrowser__default = /* @__PURE__ */ _interopDefaultLegacy(isInBrowser);
      var warning__default = /* @__PURE__ */ _interopDefaultLegacy(warning);
      var _createClass__default = /* @__PURE__ */ _interopDefaultLegacy(_createClass2);
      var _inheritsLoose__default = /* @__PURE__ */ _interopDefaultLegacy(_inheritsLoose);
      var _assertThisInitialized__default = /* @__PURE__ */ _interopDefaultLegacy(_assertThisInitialized);
      var _objectWithoutPropertiesLoose__default = /* @__PURE__ */ _interopDefaultLegacy(_objectWithoutPropertiesLoose2);
      var plainObjectConstrurctor = {}.constructor;
      function cloneStyle(style) {
        if (style == null || typeof style !== "object")
          return style;
        if (Array.isArray(style))
          return style.map(cloneStyle);
        if (style.constructor !== plainObjectConstrurctor)
          return style;
        var newStyle = {};
        for (var name in style) {
          newStyle[name] = cloneStyle(style[name]);
        }
        return newStyle;
      }
      function createRule(name, decl, options) {
        if (name === void 0) {
          name = "unnamed";
        }
        var jss = options.jss;
        var declCopy = cloneStyle(decl);
        var rule = jss.plugins.onCreateRule(name, declCopy, options);
        if (rule)
          return rule;
        if (name[0] === "@") {
          true ? warning__default["default"](false, "[JSS] Unknown rule " + name) : void 0;
        }
        return null;
      }
      var join = function join2(value, by) {
        var result = "";
        for (var i = 0; i < value.length; i++) {
          if (value[i] === "!important")
            break;
          if (result)
            result += by;
          result += value[i];
        }
        return result;
      };
      var toCssValue = function toCssValue2(value) {
        if (!Array.isArray(value))
          return value;
        var cssValue = "";
        if (Array.isArray(value[0])) {
          for (var i = 0; i < value.length; i++) {
            if (value[i] === "!important")
              break;
            if (cssValue)
              cssValue += ", ";
            cssValue += join(value[i], " ");
          }
        } else
          cssValue = join(value, ", ");
        if (value[value.length - 1] === "!important") {
          cssValue += " !important";
        }
        return cssValue;
      };
      function getWhitespaceSymbols(options) {
        if (options && options.format === false) {
          return {
            linebreak: "",
            space: ""
          };
        }
        return {
          linebreak: "\n",
          space: " "
        };
      }
      function indentStr(str, indent) {
        var result = "";
        for (var index2 = 0; index2 < indent; index2++) {
          result += "  ";
        }
        return result + str;
      }
      function toCss(selector, style, options) {
        if (options === void 0) {
          options = {};
        }
        var result = "";
        if (!style)
          return result;
        var _options = options, _options$indent = _options.indent, indent = _options$indent === void 0 ? 0 : _options$indent;
        var fallbacks = style.fallbacks;
        if (options.format === false) {
          indent = -Infinity;
        }
        var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak, space = _getWhitespaceSymbols.space;
        if (selector)
          indent++;
        if (fallbacks) {
          if (Array.isArray(fallbacks)) {
            for (var index2 = 0; index2 < fallbacks.length; index2++) {
              var fallback = fallbacks[index2];
              for (var prop in fallback) {
                var value = fallback[prop];
                if (value != null) {
                  if (result)
                    result += linebreak;
                  result += indentStr(prop + ":" + space + toCssValue(value) + ";", indent);
                }
              }
            }
          } else {
            for (var _prop in fallbacks) {
              var _value = fallbacks[_prop];
              if (_value != null) {
                if (result)
                  result += linebreak;
                result += indentStr(_prop + ":" + space + toCssValue(_value) + ";", indent);
              }
            }
          }
        }
        for (var _prop2 in style) {
          var _value2 = style[_prop2];
          if (_value2 != null && _prop2 !== "fallbacks") {
            if (result)
              result += linebreak;
            result += indentStr(_prop2 + ":" + space + toCssValue(_value2) + ";", indent);
          }
        }
        if (!result && !options.allowEmpty)
          return result;
        if (!selector)
          return result;
        indent--;
        if (result)
          result = "" + linebreak + result + linebreak;
        return indentStr("" + selector + space + "{" + result, indent) + indentStr("}", indent);
      }
      var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
      var nativeEscape = typeof CSS !== "undefined" && CSS.escape;
      var escape = function(str) {
        return nativeEscape ? nativeEscape(str) : str.replace(escapeRegex, "\\$1");
      };
      var BaseStyleRule = /* @__PURE__ */ function() {
        function BaseStyleRule2(key, style, options) {
          this.type = "style";
          this.isProcessed = false;
          var sheet = options.sheet, Renderer = options.Renderer;
          this.key = key;
          this.options = options;
          this.style = style;
          if (sheet)
            this.renderer = sheet.renderer;
          else if (Renderer)
            this.renderer = new Renderer();
        }
        var _proto = BaseStyleRule2.prototype;
        _proto.prop = function prop(name, value, options) {
          if (value === void 0)
            return this.style[name];
          var force = options ? options.force : false;
          if (!force && this.style[name] === value)
            return this;
          var newValue = value;
          if (!options || options.process !== false) {
            newValue = this.options.jss.plugins.onChangeValue(value, name, this);
          }
          var isEmpty2 = newValue == null || newValue === false;
          var isDefined = name in this.style;
          if (isEmpty2 && !isDefined && !force)
            return this;
          var remove = isEmpty2 && isDefined;
          if (remove)
            delete this.style[name];
          else
            this.style[name] = newValue;
          if (this.renderable && this.renderer) {
            if (remove)
              this.renderer.removeProperty(this.renderable, name);
            else
              this.renderer.setProperty(this.renderable, name, newValue);
            return this;
          }
          var sheet = this.options.sheet;
          if (sheet && sheet.attached) {
            true ? warning__default["default"](false, '[JSS] Rule is not linked. Missing sheet option "link: true".') : void 0;
          }
          return this;
        };
        return BaseStyleRule2;
      }();
      var StyleRule = /* @__PURE__ */ function(_BaseStyleRule) {
        _inheritsLoose__default["default"](StyleRule2, _BaseStyleRule);
        function StyleRule2(key, style, options) {
          var _this;
          _this = _BaseStyleRule.call(this, key, style, options) || this;
          var selector = options.selector, scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;
          if (selector) {
            _this.selectorText = selector;
          } else if (scoped !== false) {
            _this.id = generateId(_assertThisInitialized__default["default"](_assertThisInitialized__default["default"](_this)), sheet);
            _this.selectorText = "." + escape(_this.id);
          }
          return _this;
        }
        var _proto2 = StyleRule2.prototype;
        _proto2.applyTo = function applyTo(renderable) {
          var renderer = this.renderer;
          if (renderer) {
            var json = this.toJSON();
            for (var prop in json) {
              renderer.setProperty(renderable, prop, json[prop]);
            }
          }
          return this;
        };
        _proto2.toJSON = function toJSON() {
          var json = {};
          for (var prop in this.style) {
            var value = this.style[prop];
            if (typeof value !== "object")
              json[prop] = value;
            else if (Array.isArray(value))
              json[prop] = toCssValue(value);
          }
          return json;
        };
        _proto2.toString = function toString(options) {
          var sheet = this.options.sheet;
          var link = sheet ? sheet.options.link : false;
          var opts = link ? _extends__default["default"]({}, options, {
            allowEmpty: true
          }) : options;
          return toCss(this.selectorText, this.style, opts);
        };
        _createClass__default["default"](StyleRule2, [{
          key: "selector",
          set: function set(selector) {
            if (selector === this.selectorText)
              return;
            this.selectorText = selector;
            var renderer = this.renderer, renderable = this.renderable;
            if (!renderable || !renderer)
              return;
            var hasChanged = renderer.setSelector(renderable, selector);
            if (!hasChanged) {
              renderer.replaceRule(renderable, this);
            }
          },
          get: function get() {
            return this.selectorText;
          }
        }]);
        return StyleRule2;
      }(BaseStyleRule);
      var pluginStyleRule = {
        onCreateRule: function onCreateRule(key, style, options) {
          if (key[0] === "@" || options.parent && options.parent.type === "keyframes") {
            return null;
          }
          return new StyleRule(key, style, options);
        }
      };
      var defaultToStringOptions = {
        indent: 1,
        children: true
      };
      var atRegExp = /@([\w-]+)/;
      var ConditionalRule = /* @__PURE__ */ function() {
        function ConditionalRule2(key, styles61, options) {
          this.type = "conditional";
          this.isProcessed = false;
          this.key = key;
          var atMatch = key.match(atRegExp);
          this.at = atMatch ? atMatch[1] : "unknown";
          this.query = options.name || "@" + this.at;
          this.options = options;
          this.rules = new RuleList(_extends__default["default"]({}, options, {
            parent: this
          }));
          for (var name in styles61) {
            this.rules.add(name, styles61[name]);
          }
          this.rules.process();
        }
        var _proto = ConditionalRule2.prototype;
        _proto.getRule = function getRule(name) {
          return this.rules.get(name);
        };
        _proto.indexOf = function indexOf(rule) {
          return this.rules.indexOf(rule);
        };
        _proto.addRule = function addRule(name, style, options) {
          var rule = this.rules.add(name, style, options);
          if (!rule)
            return null;
          this.options.jss.plugins.onProcessRule(rule);
          return rule;
        };
        _proto.replaceRule = function replaceRule(name, style, options) {
          var newRule = this.rules.replace(name, style, options);
          if (newRule)
            this.options.jss.plugins.onProcessRule(newRule);
          return newRule;
        };
        _proto.toString = function toString(options) {
          if (options === void 0) {
            options = defaultToStringOptions;
          }
          var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
          if (options.indent == null)
            options.indent = defaultToStringOptions.indent;
          if (options.children == null)
            options.children = defaultToStringOptions.children;
          if (options.children === false) {
            return this.query + " {}";
          }
          var children = this.rules.toString(options);
          return children ? this.query + " {" + linebreak + children + linebreak + "}" : "";
        };
        return ConditionalRule2;
      }();
      var keyRegExp = /@container|@media|@supports\s+/;
      var pluginConditionalRule = {
        onCreateRule: function onCreateRule(key, styles61, options) {
          return keyRegExp.test(key) ? new ConditionalRule(key, styles61, options) : null;
        }
      };
      var defaultToStringOptions$1 = {
        indent: 1,
        children: true
      };
      var nameRegExp = /@keyframes\s+([\w-]+)/;
      var KeyframesRule = /* @__PURE__ */ function() {
        function KeyframesRule2(key, frames, options) {
          this.type = "keyframes";
          this.at = "@keyframes";
          this.isProcessed = false;
          var nameMatch = key.match(nameRegExp);
          if (nameMatch && nameMatch[1]) {
            this.name = nameMatch[1];
          } else {
            this.name = "noname";
            true ? warning__default["default"](false, "[JSS] Bad keyframes name " + key) : void 0;
          }
          this.key = this.type + "-" + this.name;
          this.options = options;
          var scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;
          this.id = scoped === false ? this.name : escape(generateId(this, sheet));
          this.rules = new RuleList(_extends__default["default"]({}, options, {
            parent: this
          }));
          for (var name in frames) {
            this.rules.add(name, frames[name], _extends__default["default"]({}, options, {
              parent: this
            }));
          }
          this.rules.process();
        }
        var _proto = KeyframesRule2.prototype;
        _proto.toString = function toString(options) {
          if (options === void 0) {
            options = defaultToStringOptions$1;
          }
          var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
          if (options.indent == null)
            options.indent = defaultToStringOptions$1.indent;
          if (options.children == null)
            options.children = defaultToStringOptions$1.children;
          if (options.children === false) {
            return this.at + " " + this.id + " {}";
          }
          var children = this.rules.toString(options);
          if (children)
            children = "" + linebreak + children + linebreak;
          return this.at + " " + this.id + " {" + children + "}";
        };
        return KeyframesRule2;
      }();
      var keyRegExp$1 = /@keyframes\s+/;
      var refRegExp = /\$([\w-]+)/g;
      var findReferencedKeyframe = function findReferencedKeyframe2(val, keyframes) {
        if (typeof val === "string") {
          return val.replace(refRegExp, function(match, name) {
            if (name in keyframes) {
              return keyframes[name];
            }
            true ? warning__default["default"](false, '[JSS] Referenced keyframes rule "' + name + '" is not defined.') : void 0;
            return match;
          });
        }
        return val;
      };
      var replaceRef = function replaceRef2(style, prop, keyframes) {
        var value = style[prop];
        var refKeyframe = findReferencedKeyframe(value, keyframes);
        if (refKeyframe !== value) {
          style[prop] = refKeyframe;
        }
      };
      var pluginKeyframesRule = {
        onCreateRule: function onCreateRule(key, frames, options) {
          return typeof key === "string" && keyRegExp$1.test(key) ? new KeyframesRule(key, frames, options) : null;
        },
        onProcessStyle: function onProcessStyle(style, rule, sheet) {
          if (rule.type !== "style" || !sheet)
            return style;
          if ("animation-name" in style)
            replaceRef(style, "animation-name", sheet.keyframes);
          if ("animation" in style)
            replaceRef(style, "animation", sheet.keyframes);
          return style;
        },
        onChangeValue: function onChangeValue(val, prop, rule) {
          var sheet = rule.options.sheet;
          if (!sheet) {
            return val;
          }
          switch (prop) {
            case "animation":
              return findReferencedKeyframe(val, sheet.keyframes);
            case "animation-name":
              return findReferencedKeyframe(val, sheet.keyframes);
            default:
              return val;
          }
        }
      };
      var KeyframeRule = /* @__PURE__ */ function(_BaseStyleRule) {
        _inheritsLoose__default["default"](KeyframeRule2, _BaseStyleRule);
        function KeyframeRule2() {
          return _BaseStyleRule.apply(this, arguments) || this;
        }
        var _proto = KeyframeRule2.prototype;
        _proto.toString = function toString(options) {
          var sheet = this.options.sheet;
          var link = sheet ? sheet.options.link : false;
          var opts = link ? _extends__default["default"]({}, options, {
            allowEmpty: true
          }) : options;
          return toCss(this.key, this.style, opts);
        };
        return KeyframeRule2;
      }(BaseStyleRule);
      var pluginKeyframeRule = {
        onCreateRule: function onCreateRule(key, style, options) {
          if (options.parent && options.parent.type === "keyframes") {
            return new KeyframeRule(key, style, options);
          }
          return null;
        }
      };
      var FontFaceRule = /* @__PURE__ */ function() {
        function FontFaceRule2(key, style, options) {
          this.type = "font-face";
          this.at = "@font-face";
          this.isProcessed = false;
          this.key = key;
          this.style = style;
          this.options = options;
        }
        var _proto = FontFaceRule2.prototype;
        _proto.toString = function toString(options) {
          var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
          if (Array.isArray(this.style)) {
            var str = "";
            for (var index2 = 0; index2 < this.style.length; index2++) {
              str += toCss(this.at, this.style[index2]);
              if (this.style[index2 + 1])
                str += linebreak;
            }
            return str;
          }
          return toCss(this.at, this.style, options);
        };
        return FontFaceRule2;
      }();
      var keyRegExp$2 = /@font-face/;
      var pluginFontFaceRule = {
        onCreateRule: function onCreateRule(key, style, options) {
          return keyRegExp$2.test(key) ? new FontFaceRule(key, style, options) : null;
        }
      };
      var ViewportRule = /* @__PURE__ */ function() {
        function ViewportRule2(key, style, options) {
          this.type = "viewport";
          this.at = "@viewport";
          this.isProcessed = false;
          this.key = key;
          this.style = style;
          this.options = options;
        }
        var _proto = ViewportRule2.prototype;
        _proto.toString = function toString(options) {
          return toCss(this.key, this.style, options);
        };
        return ViewportRule2;
      }();
      var pluginViewportRule = {
        onCreateRule: function onCreateRule(key, style, options) {
          return key === "@viewport" || key === "@-ms-viewport" ? new ViewportRule(key, style, options) : null;
        }
      };
      var SimpleRule = /* @__PURE__ */ function() {
        function SimpleRule2(key, value, options) {
          this.type = "simple";
          this.isProcessed = false;
          this.key = key;
          this.value = value;
          this.options = options;
        }
        var _proto = SimpleRule2.prototype;
        _proto.toString = function toString(options) {
          if (Array.isArray(this.value)) {
            var str = "";
            for (var index2 = 0; index2 < this.value.length; index2++) {
              str += this.key + " " + this.value[index2] + ";";
              if (this.value[index2 + 1])
                str += "\n";
            }
            return str;
          }
          return this.key + " " + this.value + ";";
        };
        return SimpleRule2;
      }();
      var keysMap = {
        "@charset": true,
        "@import": true,
        "@namespace": true
      };
      var pluginSimpleRule = {
        onCreateRule: function onCreateRule(key, value, options) {
          return key in keysMap ? new SimpleRule(key, value, options) : null;
        }
      };
      var plugins = [pluginStyleRule, pluginConditionalRule, pluginKeyframesRule, pluginKeyframeRule, pluginFontFaceRule, pluginViewportRule, pluginSimpleRule];
      var defaultUpdateOptions = {
        process: true
      };
      var forceUpdateOptions = {
        force: true,
        process: true
      };
      var RuleList = /* @__PURE__ */ function() {
        function RuleList2(options) {
          this.map = {};
          this.raw = {};
          this.index = [];
          this.counter = 0;
          this.options = options;
          this.classes = options.classes;
          this.keyframes = options.keyframes;
        }
        var _proto = RuleList2.prototype;
        _proto.add = function add(name, decl, ruleOptions) {
          var _this$options = this.options, parent = _this$options.parent, sheet = _this$options.sheet, jss = _this$options.jss, Renderer = _this$options.Renderer, generateId = _this$options.generateId, scoped = _this$options.scoped;
          var options = _extends__default["default"]({
            classes: this.classes,
            parent,
            sheet,
            jss,
            Renderer,
            generateId,
            scoped,
            name,
            keyframes: this.keyframes,
            selector: void 0
          }, ruleOptions);
          var key = name;
          if (name in this.raw) {
            key = name + "-d" + this.counter++;
          }
          this.raw[key] = decl;
          if (key in this.classes) {
            options.selector = "." + escape(this.classes[key]);
          }
          var rule = createRule(key, decl, options);
          if (!rule)
            return null;
          this.register(rule);
          var index2 = options.index === void 0 ? this.index.length : options.index;
          this.index.splice(index2, 0, rule);
          return rule;
        };
        _proto.replace = function replace(name, decl, ruleOptions) {
          var oldRule = this.get(name);
          var oldIndex = this.index.indexOf(oldRule);
          if (oldRule) {
            this.remove(oldRule);
          }
          var options = ruleOptions;
          if (oldIndex !== -1)
            options = _extends__default["default"]({}, ruleOptions, {
              index: oldIndex
            });
          return this.add(name, decl, options);
        };
        _proto.get = function get(nameOrSelector) {
          return this.map[nameOrSelector];
        };
        _proto.remove = function remove(rule) {
          this.unregister(rule);
          delete this.raw[rule.key];
          this.index.splice(this.index.indexOf(rule), 1);
        };
        _proto.indexOf = function indexOf(rule) {
          return this.index.indexOf(rule);
        };
        _proto.process = function process2() {
          var plugins2 = this.options.jss.plugins;
          this.index.slice(0).forEach(plugins2.onProcessRule, plugins2);
        };
        _proto.register = function register(rule) {
          this.map[rule.key] = rule;
          if (rule instanceof StyleRule) {
            this.map[rule.selector] = rule;
            if (rule.id)
              this.classes[rule.key] = rule.id;
          } else if (rule instanceof KeyframesRule && this.keyframes) {
            this.keyframes[rule.name] = rule.id;
          }
        };
        _proto.unregister = function unregister(rule) {
          delete this.map[rule.key];
          if (rule instanceof StyleRule) {
            delete this.map[rule.selector];
            delete this.classes[rule.key];
          } else if (rule instanceof KeyframesRule) {
            delete this.keyframes[rule.name];
          }
        };
        _proto.update = function update() {
          var name;
          var data;
          var options;
          if (typeof (arguments.length <= 0 ? void 0 : arguments[0]) === "string") {
            name = arguments.length <= 0 ? void 0 : arguments[0];
            data = arguments.length <= 1 ? void 0 : arguments[1];
            options = arguments.length <= 2 ? void 0 : arguments[2];
          } else {
            data = arguments.length <= 0 ? void 0 : arguments[0];
            options = arguments.length <= 1 ? void 0 : arguments[1];
            name = null;
          }
          if (name) {
            this.updateOne(this.get(name), data, options);
          } else {
            for (var index2 = 0; index2 < this.index.length; index2++) {
              this.updateOne(this.index[index2], data, options);
            }
          }
        };
        _proto.updateOne = function updateOne(rule, data, options) {
          if (options === void 0) {
            options = defaultUpdateOptions;
          }
          var _this$options2 = this.options, plugins2 = _this$options2.jss.plugins, sheet = _this$options2.sheet;
          if (rule.rules instanceof RuleList2) {
            rule.rules.update(data, options);
            return;
          }
          var style = rule.style;
          plugins2.onUpdate(data, rule, sheet, options);
          if (options.process && style && style !== rule.style) {
            plugins2.onProcessStyle(rule.style, rule, sheet);
            for (var prop in rule.style) {
              var nextValue = rule.style[prop];
              var prevValue = style[prop];
              if (nextValue !== prevValue) {
                rule.prop(prop, nextValue, forceUpdateOptions);
              }
            }
            for (var _prop in style) {
              var _nextValue = rule.style[_prop];
              var _prevValue = style[_prop];
              if (_nextValue == null && _nextValue !== _prevValue) {
                rule.prop(_prop, null, forceUpdateOptions);
              }
            }
          }
        };
        _proto.toString = function toString(options) {
          var str = "";
          var sheet = this.options.sheet;
          var link = sheet ? sheet.options.link : false;
          var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
          for (var index2 = 0; index2 < this.index.length; index2++) {
            var rule = this.index[index2];
            var css = rule.toString(options);
            if (!css && !link)
              continue;
            if (str)
              str += linebreak;
            str += css;
          }
          return str;
        };
        return RuleList2;
      }();
      var StyleSheet = /* @__PURE__ */ function() {
        function StyleSheet2(styles61, options) {
          this.attached = false;
          this.deployed = false;
          this.classes = {};
          this.keyframes = {};
          this.options = _extends__default["default"]({}, options, {
            sheet: this,
            parent: this,
            classes: this.classes,
            keyframes: this.keyframes
          });
          if (options.Renderer) {
            this.renderer = new options.Renderer(this);
          }
          this.rules = new RuleList(this.options);
          for (var name in styles61) {
            this.rules.add(name, styles61[name]);
          }
          this.rules.process();
        }
        var _proto = StyleSheet2.prototype;
        _proto.attach = function attach() {
          if (this.attached)
            return this;
          if (this.renderer)
            this.renderer.attach();
          this.attached = true;
          if (!this.deployed)
            this.deploy();
          return this;
        };
        _proto.detach = function detach() {
          if (!this.attached)
            return this;
          if (this.renderer)
            this.renderer.detach();
          this.attached = false;
          return this;
        };
        _proto.addRule = function addRule(name, decl, options) {
          var queue = this.queue;
          if (this.attached && !queue)
            this.queue = [];
          var rule = this.rules.add(name, decl, options);
          if (!rule)
            return null;
          this.options.jss.plugins.onProcessRule(rule);
          if (this.attached) {
            if (!this.deployed)
              return rule;
            if (queue)
              queue.push(rule);
            else {
              this.insertRule(rule);
              if (this.queue) {
                this.queue.forEach(this.insertRule, this);
                this.queue = void 0;
              }
            }
            return rule;
          }
          this.deployed = false;
          return rule;
        };
        _proto.replaceRule = function replaceRule(nameOrSelector, decl, options) {
          var oldRule = this.rules.get(nameOrSelector);
          if (!oldRule)
            return this.addRule(nameOrSelector, decl, options);
          var newRule = this.rules.replace(nameOrSelector, decl, options);
          if (newRule) {
            this.options.jss.plugins.onProcessRule(newRule);
          }
          if (this.attached) {
            if (!this.deployed)
              return newRule;
            if (this.renderer) {
              if (!newRule) {
                this.renderer.deleteRule(oldRule);
              } else if (oldRule.renderable) {
                this.renderer.replaceRule(oldRule.renderable, newRule);
              }
            }
            return newRule;
          }
          this.deployed = false;
          return newRule;
        };
        _proto.insertRule = function insertRule(rule) {
          if (this.renderer) {
            this.renderer.insertRule(rule);
          }
        };
        _proto.addRules = function addRules(styles61, options) {
          var added = [];
          for (var name in styles61) {
            var rule = this.addRule(name, styles61[name], options);
            if (rule)
              added.push(rule);
          }
          return added;
        };
        _proto.getRule = function getRule(nameOrSelector) {
          return this.rules.get(nameOrSelector);
        };
        _proto.deleteRule = function deleteRule(name) {
          var rule = typeof name === "object" ? name : this.rules.get(name);
          if (!rule || this.attached && !rule.renderable) {
            return false;
          }
          this.rules.remove(rule);
          if (this.attached && rule.renderable && this.renderer) {
            return this.renderer.deleteRule(rule.renderable);
          }
          return true;
        };
        _proto.indexOf = function indexOf(rule) {
          return this.rules.indexOf(rule);
        };
        _proto.deploy = function deploy() {
          if (this.renderer)
            this.renderer.deploy();
          this.deployed = true;
          return this;
        };
        _proto.update = function update() {
          var _this$rules;
          (_this$rules = this.rules).update.apply(_this$rules, arguments);
          return this;
        };
        _proto.updateOne = function updateOne(rule, data, options) {
          this.rules.updateOne(rule, data, options);
          return this;
        };
        _proto.toString = function toString(options) {
          return this.rules.toString(options);
        };
        return StyleSheet2;
      }();
      var PluginsRegistry = /* @__PURE__ */ function() {
        function PluginsRegistry2() {
          this.plugins = {
            internal: [],
            external: []
          };
          this.registry = {};
        }
        var _proto = PluginsRegistry2.prototype;
        _proto.onCreateRule = function onCreateRule(name, decl, options) {
          for (var i = 0; i < this.registry.onCreateRule.length; i++) {
            var rule = this.registry.onCreateRule[i](name, decl, options);
            if (rule)
              return rule;
          }
          return null;
        };
        _proto.onProcessRule = function onProcessRule(rule) {
          if (rule.isProcessed)
            return;
          var sheet = rule.options.sheet;
          for (var i = 0; i < this.registry.onProcessRule.length; i++) {
            this.registry.onProcessRule[i](rule, sheet);
          }
          if (rule.style)
            this.onProcessStyle(rule.style, rule, sheet);
          rule.isProcessed = true;
        };
        _proto.onProcessStyle = function onProcessStyle(style, rule, sheet) {
          for (var i = 0; i < this.registry.onProcessStyle.length; i++) {
            rule.style = this.registry.onProcessStyle[i](rule.style, rule, sheet);
          }
        };
        _proto.onProcessSheet = function onProcessSheet(sheet) {
          for (var i = 0; i < this.registry.onProcessSheet.length; i++) {
            this.registry.onProcessSheet[i](sheet);
          }
        };
        _proto.onUpdate = function onUpdate(data, rule, sheet, options) {
          for (var i = 0; i < this.registry.onUpdate.length; i++) {
            this.registry.onUpdate[i](data, rule, sheet, options);
          }
        };
        _proto.onChangeValue = function onChangeValue(value, prop, rule) {
          var processedValue = value;
          for (var i = 0; i < this.registry.onChangeValue.length; i++) {
            processedValue = this.registry.onChangeValue[i](processedValue, prop, rule);
          }
          return processedValue;
        };
        _proto.use = function use(newPlugin, options) {
          if (options === void 0) {
            options = {
              queue: "external"
            };
          }
          var plugins2 = this.plugins[options.queue];
          if (plugins2.indexOf(newPlugin) !== -1) {
            return;
          }
          plugins2.push(newPlugin);
          this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce(function(registry, plugin) {
            for (var name in plugin) {
              if (name in registry) {
                registry[name].push(plugin[name]);
              } else {
                true ? warning__default["default"](false, '[JSS] Unknown hook "' + name + '".') : void 0;
              }
            }
            return registry;
          }, {
            onCreateRule: [],
            onProcessRule: [],
            onProcessStyle: [],
            onProcessSheet: [],
            onChangeValue: [],
            onUpdate: []
          });
        };
        return PluginsRegistry2;
      }();
      var SheetsRegistry = /* @__PURE__ */ function() {
        function SheetsRegistry2() {
          this.registry = [];
        }
        var _proto = SheetsRegistry2.prototype;
        _proto.add = function add(sheet) {
          var registry = this.registry;
          var index2 = sheet.options.index;
          if (registry.indexOf(sheet) !== -1)
            return;
          if (registry.length === 0 || index2 >= this.index) {
            registry.push(sheet);
            return;
          }
          for (var i = 0; i < registry.length; i++) {
            if (registry[i].options.index > index2) {
              registry.splice(i, 0, sheet);
              return;
            }
          }
        };
        _proto.reset = function reset() {
          this.registry = [];
        };
        _proto.remove = function remove(sheet) {
          var index2 = this.registry.indexOf(sheet);
          this.registry.splice(index2, 1);
        };
        _proto.toString = function toString(_temp) {
          var _ref4 = _temp === void 0 ? {} : _temp, attached = _ref4.attached, options = _objectWithoutPropertiesLoose__default["default"](_ref4, ["attached"]);
          var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
          var css = "";
          for (var i = 0; i < this.registry.length; i++) {
            var sheet = this.registry[i];
            if (attached != null && sheet.attached !== attached) {
              continue;
            }
            if (css)
              css += linebreak;
            css += sheet.toString(options);
          }
          return css;
        };
        _createClass__default["default"](SheetsRegistry2, [{
          key: "index",
          get: function get() {
            return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
          }
        }]);
        return SheetsRegistry2;
      }();
      var sheets = new SheetsRegistry();
      var globalThis$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" && window.Math === Math ? window : typeof self !== "undefined" && self.Math === Math ? self : Function("return this")();
      var ns = "2f1acc6c3a606b082e5eef5e54414ffb";
      if (globalThis$1[ns] == null)
        globalThis$1[ns] = 0;
      var moduleId = globalThis$1[ns]++;
      var maxRules = 1e10;
      var createGenerateId = function createGenerateId2(options) {
        if (options === void 0) {
          options = {};
        }
        var ruleCounter = 0;
        var generateId = function generateId2(rule, sheet) {
          ruleCounter += 1;
          if (ruleCounter > maxRules) {
            true ? warning__default["default"](false, "[JSS] You might have a memory leak. Rule counter is at " + ruleCounter + ".") : void 0;
          }
          var jssId = "";
          var prefix = "";
          if (sheet) {
            if (sheet.options.classNamePrefix) {
              prefix = sheet.options.classNamePrefix;
            }
            if (sheet.options.jss.id != null) {
              jssId = String(sheet.options.jss.id);
            }
          }
          if (options.minify) {
            return "" + (prefix || "c") + moduleId + jssId + ruleCounter;
          }
          return prefix + rule.key + "-" + moduleId + (jssId ? "-" + jssId : "") + "-" + ruleCounter;
        };
        return generateId;
      };
      var memoize = function memoize2(fn) {
        var value;
        return function() {
          if (!value)
            value = fn();
          return value;
        };
      };
      var getPropertyValue = function getPropertyValue2(cssRule, prop) {
        try {
          if (cssRule.attributeStyleMap) {
            return cssRule.attributeStyleMap.get(prop);
          }
          return cssRule.style.getPropertyValue(prop);
        } catch (err) {
          return "";
        }
      };
      var setProperty = function setProperty2(cssRule, prop, value) {
        try {
          var cssValue = value;
          if (Array.isArray(value)) {
            cssValue = toCssValue(value);
          }
          if (cssRule.attributeStyleMap) {
            cssRule.attributeStyleMap.set(prop, cssValue);
          } else {
            var indexOfImportantFlag = cssValue ? cssValue.indexOf("!important") : -1;
            var cssValueWithoutImportantFlag = indexOfImportantFlag > -1 ? cssValue.substr(0, indexOfImportantFlag - 1) : cssValue;
            cssRule.style.setProperty(prop, cssValueWithoutImportantFlag, indexOfImportantFlag > -1 ? "important" : "");
          }
        } catch (err) {
          return false;
        }
        return true;
      };
      var removeProperty = function removeProperty2(cssRule, prop) {
        try {
          if (cssRule.attributeStyleMap) {
            cssRule.attributeStyleMap.delete(prop);
          } else {
            cssRule.style.removeProperty(prop);
          }
        } catch (err) {
          true ? warning__default["default"](false, '[JSS] DOMException "' + err.message + '" was thrown. Tried to remove property "' + prop + '".') : void 0;
        }
      };
      var setSelector = function setSelector2(cssRule, selectorText) {
        cssRule.selectorText = selectorText;
        return cssRule.selectorText === selectorText;
      };
      var getHead = memoize(function() {
        return document.querySelector("head");
      });
      function findHigherSheet(registry, options) {
        for (var i = 0; i < registry.length; i++) {
          var sheet = registry[i];
          if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {
            return sheet;
          }
        }
        return null;
      }
      function findHighestSheet(registry, options) {
        for (var i = registry.length - 1; i >= 0; i--) {
          var sheet = registry[i];
          if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
            return sheet;
          }
        }
        return null;
      }
      function findCommentNode(text) {
        var head = getHead();
        for (var i = 0; i < head.childNodes.length; i++) {
          var node = head.childNodes[i];
          if (node.nodeType === 8 && node.nodeValue.trim() === text) {
            return node;
          }
        }
        return null;
      }
      function findPrevNode(options) {
        var registry = sheets.registry;
        if (registry.length > 0) {
          var sheet = findHigherSheet(registry, options);
          if (sheet && sheet.renderer) {
            return {
              parent: sheet.renderer.element.parentNode,
              node: sheet.renderer.element
            };
          }
          sheet = findHighestSheet(registry, options);
          if (sheet && sheet.renderer) {
            return {
              parent: sheet.renderer.element.parentNode,
              node: sheet.renderer.element.nextSibling
            };
          }
        }
        var insertionPoint = options.insertionPoint;
        if (insertionPoint && typeof insertionPoint === "string") {
          var comment = findCommentNode(insertionPoint);
          if (comment) {
            return {
              parent: comment.parentNode,
              node: comment.nextSibling
            };
          }
          true ? warning__default["default"](false, '[JSS] Insertion point "' + insertionPoint + '" not found.') : void 0;
        }
        return false;
      }
      function insertStyle(style, options) {
        var insertionPoint = options.insertionPoint;
        var nextNode = findPrevNode(options);
        if (nextNode !== false && nextNode.parent) {
          nextNode.parent.insertBefore(style, nextNode.node);
          return;
        }
        if (insertionPoint && typeof insertionPoint.nodeType === "number") {
          var insertionPointElement = insertionPoint;
          var parentNode = insertionPointElement.parentNode;
          if (parentNode)
            parentNode.insertBefore(style, insertionPointElement.nextSibling);
          else
            true ? warning__default["default"](false, "[JSS] Insertion point is not in the DOM.") : void 0;
          return;
        }
        getHead().appendChild(style);
      }
      var getNonce = memoize(function() {
        var node = document.querySelector('meta[property="csp-nonce"]');
        return node ? node.getAttribute("content") : null;
      });
      var _insertRule = function insertRule(container, rule, index2) {
        try {
          if ("insertRule" in container) {
            container.insertRule(rule, index2);
          } else if ("appendRule" in container) {
            container.appendRule(rule);
          }
        } catch (err) {
          true ? warning__default["default"](false, "[JSS] " + err.message) : void 0;
          return false;
        }
        return container.cssRules[index2];
      };
      var getValidRuleInsertionIndex = function getValidRuleInsertionIndex2(container, index2) {
        var maxIndex = container.cssRules.length;
        if (index2 === void 0 || index2 > maxIndex) {
          return maxIndex;
        }
        return index2;
      };
      var createStyle = function createStyle2() {
        var el = document.createElement("style");
        el.textContent = "\n";
        return el;
      };
      var DomRenderer = /* @__PURE__ */ function() {
        function DomRenderer2(sheet) {
          this.getPropertyValue = getPropertyValue;
          this.setProperty = setProperty;
          this.removeProperty = removeProperty;
          this.setSelector = setSelector;
          this.hasInsertedRules = false;
          this.cssRules = [];
          if (sheet)
            sheets.add(sheet);
          this.sheet = sheet;
          var _ref4 = this.sheet ? this.sheet.options : {}, media = _ref4.media, meta = _ref4.meta, element = _ref4.element;
          this.element = element || createStyle();
          this.element.setAttribute("data-jss", "");
          if (media)
            this.element.setAttribute("media", media);
          if (meta)
            this.element.setAttribute("data-meta", meta);
          var nonce = getNonce();
          if (nonce)
            this.element.setAttribute("nonce", nonce);
        }
        var _proto = DomRenderer2.prototype;
        _proto.attach = function attach() {
          if (this.element.parentNode || !this.sheet)
            return;
          insertStyle(this.element, this.sheet.options);
          var deployed = Boolean(this.sheet && this.sheet.deployed);
          if (this.hasInsertedRules && deployed) {
            this.hasInsertedRules = false;
            this.deploy();
          }
        };
        _proto.detach = function detach() {
          if (!this.sheet)
            return;
          var parentNode = this.element.parentNode;
          if (parentNode)
            parentNode.removeChild(this.element);
          if (this.sheet.options.link) {
            this.cssRules = [];
            this.element.textContent = "\n";
          }
        };
        _proto.deploy = function deploy() {
          var sheet = this.sheet;
          if (!sheet)
            return;
          if (sheet.options.link) {
            this.insertRules(sheet.rules);
            return;
          }
          this.element.textContent = "\n" + sheet.toString() + "\n";
        };
        _proto.insertRules = function insertRules(rules, nativeParent) {
          for (var i = 0; i < rules.index.length; i++) {
            this.insertRule(rules.index[i], i, nativeParent);
          }
        };
        _proto.insertRule = function insertRule(rule, index2, nativeParent) {
          if (nativeParent === void 0) {
            nativeParent = this.element.sheet;
          }
          if (rule.rules) {
            var parent = rule;
            var latestNativeParent = nativeParent;
            if (rule.type === "conditional" || rule.type === "keyframes") {
              var _insertionIndex = getValidRuleInsertionIndex(nativeParent, index2);
              latestNativeParent = _insertRule(nativeParent, parent.toString({
                children: false
              }), _insertionIndex);
              if (latestNativeParent === false) {
                return false;
              }
              this.refCssRule(rule, _insertionIndex, latestNativeParent);
            }
            this.insertRules(parent.rules, latestNativeParent);
            return latestNativeParent;
          }
          var ruleStr = rule.toString();
          if (!ruleStr)
            return false;
          var insertionIndex = getValidRuleInsertionIndex(nativeParent, index2);
          var nativeRule = _insertRule(nativeParent, ruleStr, insertionIndex);
          if (nativeRule === false) {
            return false;
          }
          this.hasInsertedRules = true;
          this.refCssRule(rule, insertionIndex, nativeRule);
          return nativeRule;
        };
        _proto.refCssRule = function refCssRule(rule, index2, cssRule) {
          rule.renderable = cssRule;
          if (rule.options.parent instanceof StyleSheet) {
            this.cssRules.splice(index2, 0, cssRule);
          }
        };
        _proto.deleteRule = function deleteRule(cssRule) {
          var sheet = this.element.sheet;
          var index2 = this.indexOf(cssRule);
          if (index2 === -1)
            return false;
          sheet.deleteRule(index2);
          this.cssRules.splice(index2, 1);
          return true;
        };
        _proto.indexOf = function indexOf(cssRule) {
          return this.cssRules.indexOf(cssRule);
        };
        _proto.replaceRule = function replaceRule(cssRule, rule) {
          var index2 = this.indexOf(cssRule);
          if (index2 === -1)
            return false;
          this.element.sheet.deleteRule(index2);
          this.cssRules.splice(index2, 1);
          return this.insertRule(rule, index2);
        };
        _proto.getRules = function getRules() {
          return this.element.sheet.cssRules;
        };
        return DomRenderer2;
      }();
      var instanceCounter = 0;
      var Jss = /* @__PURE__ */ function() {
        function Jss2(options) {
          this.id = instanceCounter++;
          this.version = "10.10.0";
          this.plugins = new PluginsRegistry();
          this.options = {
            id: {
              minify: false
            },
            createGenerateId,
            Renderer: isInBrowser__default["default"] ? DomRenderer : null,
            plugins: []
          };
          this.generateId = createGenerateId({
            minify: false
          });
          for (var i = 0; i < plugins.length; i++) {
            this.plugins.use(plugins[i], {
              queue: "internal"
            });
          }
          this.setup(options);
        }
        var _proto = Jss2.prototype;
        _proto.setup = function setup(options) {
          if (options === void 0) {
            options = {};
          }
          if (options.createGenerateId) {
            this.options.createGenerateId = options.createGenerateId;
          }
          if (options.id) {
            this.options.id = _extends__default["default"]({}, this.options.id, options.id);
          }
          if (options.createGenerateId || options.id) {
            this.generateId = this.options.createGenerateId(this.options.id);
          }
          if (options.insertionPoint != null)
            this.options.insertionPoint = options.insertionPoint;
          if ("Renderer" in options) {
            this.options.Renderer = options.Renderer;
          }
          if (options.plugins)
            this.use.apply(this, options.plugins);
          return this;
        };
        _proto.createStyleSheet = function createStyleSheet(styles61, options) {
          if (options === void 0) {
            options = {};
          }
          var _options = options, index2 = _options.index;
          if (typeof index2 !== "number") {
            index2 = sheets.index === 0 ? 0 : sheets.index + 1;
          }
          var sheet = new StyleSheet(styles61, _extends__default["default"]({}, options, {
            jss: this,
            generateId: options.generateId || this.generateId,
            insertionPoint: this.options.insertionPoint,
            Renderer: this.options.Renderer,
            index: index2
          }));
          this.plugins.onProcessSheet(sheet);
          return sheet;
        };
        _proto.removeStyleSheet = function removeStyleSheet(sheet) {
          sheet.detach();
          sheets.remove(sheet);
          return this;
        };
        _proto.createRule = function createRule$1(name, style, options) {
          if (style === void 0) {
            style = {};
          }
          if (options === void 0) {
            options = {};
          }
          if (typeof name === "object") {
            return this.createRule(void 0, name, style);
          }
          var ruleOptions = _extends__default["default"]({}, options, {
            name,
            jss: this,
            Renderer: this.options.Renderer
          });
          if (!ruleOptions.generateId)
            ruleOptions.generateId = this.generateId;
          if (!ruleOptions.classes)
            ruleOptions.classes = {};
          if (!ruleOptions.keyframes)
            ruleOptions.keyframes = {};
          var rule = createRule(name, style, ruleOptions);
          if (rule)
            this.plugins.onProcessRule(rule);
          return rule;
        };
        _proto.use = function use() {
          var _this = this;
          for (var _len = arguments.length, plugins2 = new Array(_len), _key = 0; _key < _len; _key++) {
            plugins2[_key] = arguments[_key];
          }
          plugins2.forEach(function(plugin) {
            _this.plugins.use(plugin);
          });
          return this;
        };
        return Jss2;
      }();
      var createJss = function createJss2(options) {
        return new Jss(options);
      };
      var SheetsManager = /* @__PURE__ */ function() {
        function SheetsManager2() {
          this.length = 0;
          this.sheets = /* @__PURE__ */ new WeakMap();
        }
        var _proto = SheetsManager2.prototype;
        _proto.get = function get(key) {
          var entry = this.sheets.get(key);
          return entry && entry.sheet;
        };
        _proto.add = function add(key, sheet) {
          if (this.sheets.has(key))
            return;
          this.length++;
          this.sheets.set(key, {
            sheet,
            refs: 0
          });
        };
        _proto.manage = function manage(key) {
          var entry = this.sheets.get(key);
          if (entry) {
            if (entry.refs === 0) {
              entry.sheet.attach();
            }
            entry.refs++;
            return entry.sheet;
          }
          warning__default["default"](false, "[JSS] SheetsManager: can't find sheet to manage");
          return void 0;
        };
        _proto.unmanage = function unmanage(key) {
          var entry = this.sheets.get(key);
          if (entry) {
            if (entry.refs > 0) {
              entry.refs--;
              if (entry.refs === 0)
                entry.sheet.detach();
            }
          } else {
            warning__default["default"](false, "SheetsManager: can't find sheet to unmanage");
          }
        };
        _createClass__default["default"](SheetsManager2, [{
          key: "size",
          get: function get() {
            return this.length;
          }
        }]);
        return SheetsManager2;
      }();
      var hasCSSTOMSupport = typeof CSS === "object" && CSS != null && "number" in CSS;
      function getDynamicStyles(styles61) {
        var to = null;
        for (var key in styles61) {
          var value = styles61[key];
          var type = typeof value;
          if (type === "function") {
            if (!to)
              to = {};
            to[key] = value;
          } else if (type === "object" && value !== null && !Array.isArray(value)) {
            var extracted = getDynamicStyles(value);
            if (extracted) {
              if (!to)
                to = {};
              to[key] = extracted;
            }
          }
        }
        return to;
      }
      var index = createJss();
      exports.RuleList = RuleList;
      exports.SheetsManager = SheetsManager;
      exports.SheetsRegistry = SheetsRegistry;
      exports.create = createJss;
      exports.createGenerateId = createGenerateId;
      exports.createRule = createRule;
      exports.default = index;
      exports.getDynamicStyles = getDynamicStyles;
      exports.hasCSSTOMSupport = hasCSSTOMSupport;
      exports.sheets = sheets;
      exports.toCssValue = toCssValue;
    }
  });

  // node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.cjs.js
  var require_jss_plugin_rule_value_function_cjs = __commonJS({
    "node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var warning = require_tiny_warning_cjs();
      var jss = require_jss_cjs();
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      var warning__default = /* @__PURE__ */ _interopDefaultLegacy(warning);
      var now = Date.now();
      var fnValuesNs = "fnValues" + now;
      var fnRuleNs = "fnStyle" + ++now;
      var functionPlugin = function functionPlugin2() {
        return {
          onCreateRule: function onCreateRule(name, decl, options) {
            if (typeof decl !== "function")
              return null;
            var rule = jss.createRule(name, {}, options);
            rule[fnRuleNs] = decl;
            return rule;
          },
          onProcessStyle: function onProcessStyle(style, rule) {
            if (fnValuesNs in rule || fnRuleNs in rule)
              return style;
            var fnValues = {};
            for (var prop in style) {
              var value = style[prop];
              if (typeof value !== "function")
                continue;
              delete style[prop];
              fnValues[prop] = value;
            }
            rule[fnValuesNs] = fnValues;
            return style;
          },
          onUpdate: function onUpdate(data, rule, sheet, options) {
            var styleRule = rule;
            var fnRule = styleRule[fnRuleNs];
            if (fnRule) {
              styleRule.style = fnRule(data) || {};
              if (true) {
                for (var prop in styleRule.style) {
                  if (typeof styleRule.style[prop] === "function") {
                    true ? warning__default["default"](false, "[JSS] Function values inside function rules are not supported.") : void 0;
                    break;
                  }
                }
              }
            }
            var fnValues = styleRule[fnValuesNs];
            if (fnValues) {
              for (var _prop in fnValues) {
                styleRule.prop(_prop, fnValues[_prop](data), options);
              }
            }
          }
        };
      };
      exports.default = functionPlugin;
    }
  });

  // node_modules/jss-plugin-global/dist/jss-plugin-global.cjs.js
  var require_jss_plugin_global_cjs = __commonJS({
    "node_modules/jss-plugin-global/dist/jss-plugin-global.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var _extends2 = require_extends();
      var jss = require_jss_cjs();
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      var _extends__default = /* @__PURE__ */ _interopDefaultLegacy(_extends2);
      var at = "@global";
      var atPrefix = "@global ";
      var GlobalContainerRule = /* @__PURE__ */ function() {
        function GlobalContainerRule2(key, styles61, options) {
          this.type = "global";
          this.at = at;
          this.isProcessed = false;
          this.key = key;
          this.options = options;
          this.rules = new jss.RuleList(_extends__default["default"]({}, options, {
            parent: this
          }));
          for (var selector in styles61) {
            this.rules.add(selector, styles61[selector]);
          }
          this.rules.process();
        }
        var _proto = GlobalContainerRule2.prototype;
        _proto.getRule = function getRule(name) {
          return this.rules.get(name);
        };
        _proto.addRule = function addRule(name, style, options) {
          var rule = this.rules.add(name, style, options);
          if (rule)
            this.options.jss.plugins.onProcessRule(rule);
          return rule;
        };
        _proto.replaceRule = function replaceRule(name, style, options) {
          var newRule = this.rules.replace(name, style, options);
          if (newRule)
            this.options.jss.plugins.onProcessRule(newRule);
          return newRule;
        };
        _proto.indexOf = function indexOf(rule) {
          return this.rules.indexOf(rule);
        };
        _proto.toString = function toString(options) {
          return this.rules.toString(options);
        };
        return GlobalContainerRule2;
      }();
      var GlobalPrefixedRule = /* @__PURE__ */ function() {
        function GlobalPrefixedRule2(key, style, options) {
          this.type = "global";
          this.at = at;
          this.isProcessed = false;
          this.key = key;
          this.options = options;
          var selector = key.substr(atPrefix.length);
          this.rule = options.jss.createRule(selector, style, _extends__default["default"]({}, options, {
            parent: this
          }));
        }
        var _proto2 = GlobalPrefixedRule2.prototype;
        _proto2.toString = function toString(options) {
          return this.rule ? this.rule.toString(options) : "";
        };
        return GlobalPrefixedRule2;
      }();
      var separatorRegExp = /\s*,\s*/g;
      function addScope(selector, scope) {
        var parts = selector.split(separatorRegExp);
        var scoped = "";
        for (var i = 0; i < parts.length; i++) {
          scoped += scope + " " + parts[i].trim();
          if (parts[i + 1])
            scoped += ", ";
        }
        return scoped;
      }
      function handleNestedGlobalContainerRule(rule, sheet) {
        var options = rule.options, style = rule.style;
        var rules = style ? style[at] : null;
        if (!rules)
          return;
        for (var name in rules) {
          sheet.addRule(name, rules[name], _extends__default["default"]({}, options, {
            selector: addScope(name, rule.selector)
          }));
        }
        delete style[at];
      }
      function handlePrefixedGlobalRule(rule, sheet) {
        var options = rule.options, style = rule.style;
        for (var prop in style) {
          if (prop[0] !== "@" || prop.substr(0, at.length) !== at)
            continue;
          var selector = addScope(prop.substr(at.length), rule.selector);
          sheet.addRule(selector, style[prop], _extends__default["default"]({}, options, {
            selector
          }));
          delete style[prop];
        }
      }
      function jssGlobal() {
        function onCreateRule(name, styles61, options) {
          if (!name)
            return null;
          if (name === at) {
            return new GlobalContainerRule(name, styles61, options);
          }
          if (name[0] === "@" && name.substr(0, atPrefix.length) === atPrefix) {
            return new GlobalPrefixedRule(name, styles61, options);
          }
          var parent = options.parent;
          if (parent) {
            if (parent.type === "global" || parent.options.parent && parent.options.parent.type === "global") {
              options.scoped = false;
            }
          }
          if (!options.selector && options.scoped === false) {
            options.selector = name;
          }
          return null;
        }
        function onProcessRule(rule, sheet) {
          if (rule.type !== "style" || !sheet)
            return;
          handleNestedGlobalContainerRule(rule, sheet);
          handlePrefixedGlobalRule(rule, sheet);
        }
        return {
          onCreateRule,
          onProcessRule
        };
      }
      exports.default = jssGlobal;
    }
  });

  // node_modules/jss-plugin-nested/dist/jss-plugin-nested.cjs.js
  var require_jss_plugin_nested_cjs = __commonJS({
    "node_modules/jss-plugin-nested/dist/jss-plugin-nested.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var _extends2 = require_extends();
      var warning = require_tiny_warning_cjs();
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      var _extends__default = /* @__PURE__ */ _interopDefaultLegacy(_extends2);
      var warning__default = /* @__PURE__ */ _interopDefaultLegacy(warning);
      var separatorRegExp = /\s*,\s*/g;
      var parentRegExp = /&/g;
      var refRegExp = /\$([\w-]+)/g;
      function jssNested() {
        function getReplaceRef(container, sheet) {
          return function(match, key) {
            var rule = container.getRule(key) || sheet && sheet.getRule(key);
            if (rule) {
              return rule.selector;
            }
            true ? warning__default["default"](false, '[JSS] Could not find the referenced rule "' + key + '" in "' + (container.options.meta || container.toString()) + '".') : void 0;
            return key;
          };
        }
        function replaceParentRefs(nestedProp, parentProp) {
          var parentSelectors = parentProp.split(separatorRegExp);
          var nestedSelectors = nestedProp.split(separatorRegExp);
          var result = "";
          for (var i = 0; i < parentSelectors.length; i++) {
            var parent = parentSelectors[i];
            for (var j = 0; j < nestedSelectors.length; j++) {
              var nested = nestedSelectors[j];
              if (result)
                result += ", ";
              result += nested.indexOf("&") !== -1 ? nested.replace(parentRegExp, parent) : parent + " " + nested;
            }
          }
          return result;
        }
        function getOptions(rule, container, prevOptions) {
          if (prevOptions)
            return _extends__default["default"]({}, prevOptions, {
              index: prevOptions.index + 1
            });
          var nestingLevel = rule.options.nestingLevel;
          nestingLevel = nestingLevel === void 0 ? 1 : nestingLevel + 1;
          var options = _extends__default["default"]({}, rule.options, {
            nestingLevel,
            index: container.indexOf(rule) + 1
          });
          delete options.name;
          return options;
        }
        function onProcessStyle(style, rule, sheet) {
          if (rule.type !== "style")
            return style;
          var styleRule = rule;
          var container = styleRule.options.parent;
          var options;
          var replaceRef;
          for (var prop in style) {
            var isNested = prop.indexOf("&") !== -1;
            var isNestedConditional = prop[0] === "@";
            if (!isNested && !isNestedConditional)
              continue;
            options = getOptions(styleRule, container, options);
            if (isNested) {
              var selector = replaceParentRefs(prop, styleRule.selector);
              if (!replaceRef)
                replaceRef = getReplaceRef(container, sheet);
              selector = selector.replace(refRegExp, replaceRef);
              var name = styleRule.key + "-" + prop;
              if ("replaceRule" in container) {
                container.replaceRule(name, style[prop], _extends__default["default"]({}, options, {
                  selector
                }));
              } else {
                container.addRule(name, style[prop], _extends__default["default"]({}, options, {
                  selector
                }));
              }
            } else if (isNestedConditional) {
              container.addRule(prop, {}, options).addRule(styleRule.key, style[prop], {
                selector: styleRule.selector
              });
            }
            delete style[prop];
          }
          return style;
        }
        return {
          onProcessStyle
        };
      }
      exports.default = jssNested;
    }
  });

  // node_modules/hyphenate-style-name/index.cjs.js
  var require_index_cjs = __commonJS({
    "node_modules/hyphenate-style-name/index.cjs.js"(exports, module) {
      "use strict";
      var uppercasePattern = /[A-Z]/g;
      var msPattern = /^ms-/;
      var cache = {};
      function toHyphenLower(match) {
        return "-" + match.toLowerCase();
      }
      function hyphenateStyleName(name) {
        if (cache.hasOwnProperty(name)) {
          return cache[name];
        }
        var hName = name.replace(uppercasePattern, toHyphenLower);
        return cache[name] = msPattern.test(hName) ? "-" + hName : hName;
      }
      module.exports = hyphenateStyleName;
    }
  });

  // node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.cjs.js
  var require_jss_plugin_camel_case_cjs = __commonJS({
    "node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var hyphenate = require_index_cjs();
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      var hyphenate__default = /* @__PURE__ */ _interopDefaultLegacy(hyphenate);
      function convertCase(style) {
        var converted = {};
        for (var prop in style) {
          var key = prop.indexOf("--") === 0 ? prop : hyphenate__default["default"](prop);
          converted[key] = style[prop];
        }
        if (style.fallbacks) {
          if (Array.isArray(style.fallbacks))
            converted.fallbacks = style.fallbacks.map(convertCase);
          else
            converted.fallbacks = convertCase(style.fallbacks);
        }
        return converted;
      }
      function camelCase() {
        function onProcessStyle(style) {
          if (Array.isArray(style)) {
            for (var index = 0; index < style.length; index++) {
              style[index] = convertCase(style[index]);
            }
            return style;
          }
          return convertCase(style);
        }
        function onChangeValue(value, prop, rule) {
          if (prop.indexOf("--") === 0) {
            return value;
          }
          var hyphenatedProp = hyphenate__default["default"](prop);
          if (prop === hyphenatedProp)
            return value;
          rule.prop(hyphenatedProp, value);
          return null;
        }
        return {
          onProcessStyle,
          onChangeValue
        };
      }
      exports.default = camelCase;
    }
  });

  // node_modules/jss-plugin-default-unit/dist/jss-plugin-default-unit.cjs.js
  var require_jss_plugin_default_unit_cjs = __commonJS({
    "node_modules/jss-plugin-default-unit/dist/jss-plugin-default-unit.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var jss = require_jss_cjs();
      var px = jss.hasCSSTOMSupport && CSS ? CSS.px : "px";
      var ms = jss.hasCSSTOMSupport && CSS ? CSS.ms : "ms";
      var percent = jss.hasCSSTOMSupport && CSS ? CSS.percent : "%";
      var defaultUnits = {
        "animation-delay": ms,
        "animation-duration": ms,
        "background-position": px,
        "background-position-x": px,
        "background-position-y": px,
        "background-size": px,
        border: px,
        "border-bottom": px,
        "border-bottom-left-radius": px,
        "border-bottom-right-radius": px,
        "border-bottom-width": px,
        "border-left": px,
        "border-left-width": px,
        "border-radius": px,
        "border-right": px,
        "border-right-width": px,
        "border-top": px,
        "border-top-left-radius": px,
        "border-top-right-radius": px,
        "border-top-width": px,
        "border-width": px,
        "border-block": px,
        "border-block-end": px,
        "border-block-end-width": px,
        "border-block-start": px,
        "border-block-start-width": px,
        "border-block-width": px,
        "border-inline": px,
        "border-inline-end": px,
        "border-inline-end-width": px,
        "border-inline-start": px,
        "border-inline-start-width": px,
        "border-inline-width": px,
        "border-start-start-radius": px,
        "border-start-end-radius": px,
        "border-end-start-radius": px,
        "border-end-end-radius": px,
        margin: px,
        "margin-bottom": px,
        "margin-left": px,
        "margin-right": px,
        "margin-top": px,
        "margin-block": px,
        "margin-block-end": px,
        "margin-block-start": px,
        "margin-inline": px,
        "margin-inline-end": px,
        "margin-inline-start": px,
        padding: px,
        "padding-bottom": px,
        "padding-left": px,
        "padding-right": px,
        "padding-top": px,
        "padding-block": px,
        "padding-block-end": px,
        "padding-block-start": px,
        "padding-inline": px,
        "padding-inline-end": px,
        "padding-inline-start": px,
        "mask-position-x": px,
        "mask-position-y": px,
        "mask-size": px,
        height: px,
        width: px,
        "min-height": px,
        "max-height": px,
        "min-width": px,
        "max-width": px,
        bottom: px,
        left: px,
        top: px,
        right: px,
        inset: px,
        "inset-block": px,
        "inset-block-end": px,
        "inset-block-start": px,
        "inset-inline": px,
        "inset-inline-end": px,
        "inset-inline-start": px,
        "box-shadow": px,
        "text-shadow": px,
        "column-gap": px,
        "column-rule": px,
        "column-rule-width": px,
        "column-width": px,
        "font-size": px,
        "font-size-delta": px,
        "letter-spacing": px,
        "text-decoration-thickness": px,
        "text-indent": px,
        "text-stroke": px,
        "text-stroke-width": px,
        "word-spacing": px,
        motion: px,
        "motion-offset": px,
        outline: px,
        "outline-offset": px,
        "outline-width": px,
        perspective: px,
        "perspective-origin-x": percent,
        "perspective-origin-y": percent,
        "transform-origin": percent,
        "transform-origin-x": percent,
        "transform-origin-y": percent,
        "transform-origin-z": percent,
        "transition-delay": ms,
        "transition-duration": ms,
        "vertical-align": px,
        "flex-basis": px,
        "shape-margin": px,
        size: px,
        gap: px,
        grid: px,
        "grid-gap": px,
        "row-gap": px,
        "grid-row-gap": px,
        "grid-column-gap": px,
        "grid-template-rows": px,
        "grid-template-columns": px,
        "grid-auto-rows": px,
        "grid-auto-columns": px,
        "box-shadow-x": px,
        "box-shadow-y": px,
        "box-shadow-blur": px,
        "box-shadow-spread": px,
        "font-line-height": px,
        "text-shadow-x": px,
        "text-shadow-y": px,
        "text-shadow-blur": px
      };
      function addCamelCasedVersion(obj) {
        var regExp = /(-[a-z])/g;
        var replace = function replace2(str) {
          return str[1].toUpperCase();
        };
        var newObj = {};
        for (var key in obj) {
          newObj[key] = obj[key];
          newObj[key.replace(regExp, replace)] = obj[key];
        }
        return newObj;
      }
      var units = addCamelCasedVersion(defaultUnits);
      function iterate(prop, value, options) {
        if (value == null)
          return value;
        if (Array.isArray(value)) {
          for (var i = 0; i < value.length; i++) {
            value[i] = iterate(prop, value[i], options);
          }
        } else if (typeof value === "object") {
          if (prop === "fallbacks") {
            for (var innerProp in value) {
              value[innerProp] = iterate(innerProp, value[innerProp], options);
            }
          } else {
            for (var _innerProp in value) {
              value[_innerProp] = iterate(prop + "-" + _innerProp, value[_innerProp], options);
            }
          }
        } else if (typeof value === "number" && isNaN(value) === false) {
          var unit = options[prop] || units[prop];
          if (unit && !(value === 0 && unit === px)) {
            return typeof unit === "function" ? unit(value).toString() : "" + value + unit;
          }
          return value.toString();
        }
        return value;
      }
      function defaultUnit(options) {
        if (options === void 0) {
          options = {};
        }
        var camelCasedOptions = addCamelCasedVersion(options);
        function onProcessStyle(style, rule) {
          if (rule.type !== "style")
            return style;
          for (var prop in style) {
            style[prop] = iterate(prop, style[prop], camelCasedOptions);
          }
          return style;
        }
        function onChangeValue(value, prop) {
          return iterate(prop, value, camelCasedOptions);
        }
        return {
          onProcessStyle,
          onChangeValue
        };
      }
      exports.default = defaultUnit;
    }
  });

  // node_modules/css-vendor/dist/css-vendor.cjs.js
  var require_css_vendor_cjs = __commonJS({
    "node_modules/css-vendor/dist/css-vendor.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var isInBrowser = _interopDefault(require_dist());
      var _toConsumableArray2 = _interopDefault(require_toConsumableArray());
      var js = "";
      var css = "";
      var vendor = "";
      var browser = "";
      var isTouch = isInBrowser && "ontouchstart" in document.documentElement;
      if (isInBrowser) {
        jsCssMap = {
          Moz: "-moz-",
          ms: "-ms-",
          O: "-o-",
          Webkit: "-webkit-"
        };
        _document$createEleme = document.createElement("p"), style = _document$createEleme.style;
        testProp = "Transform";
        for (key in jsCssMap) {
          if (key + testProp in style) {
            js = key;
            css = jsCssMap[key];
            break;
          }
        }
        if (js === "Webkit" && "msHyphens" in style) {
          js = "ms";
          css = jsCssMap.ms;
          browser = "edge";
        }
        if (js === "Webkit" && "-apple-trailing-word" in style) {
          vendor = "apple";
        }
      }
      var jsCssMap;
      var _document$createEleme;
      var style;
      var testProp;
      var key;
      var prefix = {
        js,
        css,
        vendor,
        browser,
        isTouch
      };
      function supportedKeyframes(key2) {
        if (key2[1] === "-")
          return key2;
        if (prefix.js === "ms")
          return key2;
        return "@" + prefix.css + "keyframes" + key2.substr(10);
      }
      var appearence = {
        noPrefill: ["appearance"],
        supportedProperty: function supportedProperty2(prop) {
          if (prop !== "appearance")
            return false;
          if (prefix.js === "ms")
            return "-webkit-" + prop;
          return prefix.css + prop;
        }
      };
      var colorAdjust = {
        noPrefill: ["color-adjust"],
        supportedProperty: function supportedProperty2(prop) {
          if (prop !== "color-adjust")
            return false;
          if (prefix.js === "Webkit")
            return prefix.css + "print-" + prop;
          return prop;
        }
      };
      var regExp = /[-\s]+(.)?/g;
      function toUpper(match, c) {
        return c ? c.toUpperCase() : "";
      }
      function camelize(str) {
        return str.replace(regExp, toUpper);
      }
      function pascalize(str) {
        return camelize("-" + str);
      }
      var mask = {
        noPrefill: ["mask"],
        supportedProperty: function supportedProperty2(prop, style2) {
          if (!/^mask/.test(prop))
            return false;
          if (prefix.js === "Webkit") {
            var longhand = "mask-image";
            if (camelize(longhand) in style2) {
              return prop;
            }
            if (prefix.js + pascalize(longhand) in style2) {
              return prefix.css + prop;
            }
          }
          return prop;
        }
      };
      var textOrientation = {
        noPrefill: ["text-orientation"],
        supportedProperty: function supportedProperty2(prop) {
          if (prop !== "text-orientation")
            return false;
          if (prefix.vendor === "apple" && !prefix.isTouch) {
            return prefix.css + prop;
          }
          return prop;
        }
      };
      var transform = {
        noPrefill: ["transform"],
        supportedProperty: function supportedProperty2(prop, style2, options) {
          if (prop !== "transform")
            return false;
          if (options.transform) {
            return prop;
          }
          return prefix.css + prop;
        }
      };
      var transition = {
        noPrefill: ["transition"],
        supportedProperty: function supportedProperty2(prop, style2, options) {
          if (prop !== "transition")
            return false;
          if (options.transition) {
            return prop;
          }
          return prefix.css + prop;
        }
      };
      var writingMode = {
        noPrefill: ["writing-mode"],
        supportedProperty: function supportedProperty2(prop) {
          if (prop !== "writing-mode")
            return false;
          if (prefix.js === "Webkit" || prefix.js === "ms" && prefix.browser !== "edge") {
            return prefix.css + prop;
          }
          return prop;
        }
      };
      var userSelect = {
        noPrefill: ["user-select"],
        supportedProperty: function supportedProperty2(prop) {
          if (prop !== "user-select")
            return false;
          if (prefix.js === "Moz" || prefix.js === "ms" || prefix.vendor === "apple") {
            return prefix.css + prop;
          }
          return prop;
        }
      };
      var breakPropsOld = {
        supportedProperty: function supportedProperty2(prop, style2) {
          if (!/^break-/.test(prop))
            return false;
          if (prefix.js === "Webkit") {
            var jsProp = "WebkitColumn" + pascalize(prop);
            return jsProp in style2 ? prefix.css + "column-" + prop : false;
          }
          if (prefix.js === "Moz") {
            var _jsProp = "page" + pascalize(prop);
            return _jsProp in style2 ? "page-" + prop : false;
          }
          return false;
        }
      };
      var inlineLogicalOld = {
        supportedProperty: function supportedProperty2(prop, style2) {
          if (!/^(border|margin|padding)-inline/.test(prop))
            return false;
          if (prefix.js === "Moz")
            return prop;
          var newProp = prop.replace("-inline", "");
          return prefix.js + pascalize(newProp) in style2 ? prefix.css + newProp : false;
        }
      };
      var unprefixed = {
        supportedProperty: function supportedProperty2(prop, style2) {
          return camelize(prop) in style2 ? prop : false;
        }
      };
      var prefixed = {
        supportedProperty: function supportedProperty2(prop, style2) {
          var pascalized = pascalize(prop);
          if (prop[0] === "-")
            return prop;
          if (prop[0] === "-" && prop[1] === "-")
            return prop;
          if (prefix.js + pascalized in style2)
            return prefix.css + prop;
          if (prefix.js !== "Webkit" && "Webkit" + pascalized in style2)
            return "-webkit-" + prop;
          return false;
        }
      };
      var scrollSnap = {
        supportedProperty: function supportedProperty2(prop) {
          if (prop.substring(0, 11) !== "scroll-snap")
            return false;
          if (prefix.js === "ms") {
            return "" + prefix.css + prop;
          }
          return prop;
        }
      };
      var overscrollBehavior = {
        supportedProperty: function supportedProperty2(prop) {
          if (prop !== "overscroll-behavior")
            return false;
          if (prefix.js === "ms") {
            return prefix.css + "scroll-chaining";
          }
          return prop;
        }
      };
      var propMap = {
        "flex-grow": "flex-positive",
        "flex-shrink": "flex-negative",
        "flex-basis": "flex-preferred-size",
        "justify-content": "flex-pack",
        order: "flex-order",
        "align-items": "flex-align",
        "align-content": "flex-line-pack"
      };
      var flex2012 = {
        supportedProperty: function supportedProperty2(prop, style2) {
          var newProp = propMap[prop];
          if (!newProp)
            return false;
          return prefix.js + pascalize(newProp) in style2 ? prefix.css + newProp : false;
        }
      };
      var propMap$1 = {
        flex: "box-flex",
        "flex-grow": "box-flex",
        "flex-direction": ["box-orient", "box-direction"],
        order: "box-ordinal-group",
        "align-items": "box-align",
        "flex-flow": ["box-orient", "box-direction"],
        "justify-content": "box-pack"
      };
      var propKeys = Object.keys(propMap$1);
      var prefixCss = function prefixCss2(p) {
        return prefix.css + p;
      };
      var flex2009 = {
        supportedProperty: function supportedProperty2(prop, style2, _ref4) {
          var multiple = _ref4.multiple;
          if (propKeys.indexOf(prop) > -1) {
            var newProp = propMap$1[prop];
            if (!Array.isArray(newProp)) {
              return prefix.js + pascalize(newProp) in style2 ? prefix.css + newProp : false;
            }
            if (!multiple)
              return false;
            for (var i = 0; i < newProp.length; i++) {
              if (!(prefix.js + pascalize(newProp[0]) in style2)) {
                return false;
              }
            }
            return newProp.map(prefixCss);
          }
          return false;
        }
      };
      var plugins = [appearence, colorAdjust, mask, textOrientation, transform, transition, writingMode, userSelect, breakPropsOld, inlineLogicalOld, unprefixed, prefixed, scrollSnap, overscrollBehavior, flex2012, flex2009];
      var propertyDetectors = plugins.filter(function(p) {
        return p.supportedProperty;
      }).map(function(p) {
        return p.supportedProperty;
      });
      var noPrefill = plugins.filter(function(p) {
        return p.noPrefill;
      }).reduce(function(a, p) {
        a.push.apply(a, _toConsumableArray2(p.noPrefill));
        return a;
      }, []);
      var el;
      var cache = {};
      if (isInBrowser) {
        el = document.createElement("p");
        computed = window.getComputedStyle(document.documentElement, "");
        for (key$1 in computed) {
          if (!isNaN(key$1))
            cache[computed[key$1]] = computed[key$1];
        }
        noPrefill.forEach(function(x) {
          return delete cache[x];
        });
      }
      var computed;
      var key$1;
      function supportedProperty(prop, options) {
        if (options === void 0) {
          options = {};
        }
        if (!el)
          return prop;
        if (cache[prop] != null) {
          return cache[prop];
        }
        if (prop === "transition" || prop === "transform") {
          options[prop] = prop in el.style;
        }
        for (var i = 0; i < propertyDetectors.length; i++) {
          cache[prop] = propertyDetectors[i](prop, el.style, options);
          if (cache[prop])
            break;
        }
        try {
          el.style[prop] = "";
        } catch (err) {
          return false;
        }
        return cache[prop];
      }
      var cache$1 = {};
      var transitionProperties = {
        transition: 1,
        "transition-property": 1,
        "-webkit-transition": 1,
        "-webkit-transition-property": 1
      };
      var transPropsRegExp = /(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;
      var el$1;
      function prefixTransitionCallback(match, p1, p2) {
        if (p1 === "var")
          return "var";
        if (p1 === "all")
          return "all";
        if (p2 === "all")
          return ", all";
        var prefixedValue = p1 ? supportedProperty(p1) : ", " + supportedProperty(p2);
        if (!prefixedValue)
          return p1 || p2;
        return prefixedValue;
      }
      if (isInBrowser)
        el$1 = document.createElement("p");
      function supportedValue(property, value) {
        var prefixedValue = value;
        if (!el$1 || property === "content")
          return value;
        if (typeof prefixedValue !== "string" || !isNaN(parseInt(prefixedValue, 10))) {
          return prefixedValue;
        }
        var cacheKey = property + prefixedValue;
        if (cache$1[cacheKey] != null) {
          return cache$1[cacheKey];
        }
        try {
          el$1.style[property] = prefixedValue;
        } catch (err) {
          cache$1[cacheKey] = false;
          return false;
        }
        if (transitionProperties[property]) {
          prefixedValue = prefixedValue.replace(transPropsRegExp, prefixTransitionCallback);
        } else if (el$1.style[property] === "") {
          prefixedValue = prefix.css + prefixedValue;
          if (prefixedValue === "-ms-flex")
            el$1.style[property] = "-ms-flexbox";
          el$1.style[property] = prefixedValue;
          if (el$1.style[property] === "") {
            cache$1[cacheKey] = false;
            return false;
          }
        }
        el$1.style[property] = "";
        cache$1[cacheKey] = prefixedValue;
        return cache$1[cacheKey];
      }
      exports.prefix = prefix;
      exports.supportedKeyframes = supportedKeyframes;
      exports.supportedProperty = supportedProperty;
      exports.supportedValue = supportedValue;
    }
  });

  // node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.cjs.js
  var require_jss_plugin_vendor_prefixer_cjs = __commonJS({
    "node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var vendor = require_css_vendor_cjs();
      var jss = require_jss_cjs();
      function jssVendorPrefixer() {
        function onProcessRule(rule) {
          if (rule.type === "keyframes") {
            var atRule = rule;
            atRule.at = vendor.supportedKeyframes(atRule.at);
          }
        }
        function prefixStyle(style) {
          for (var prop in style) {
            var value = style[prop];
            if (prop === "fallbacks" && Array.isArray(value)) {
              style[prop] = value.map(prefixStyle);
              continue;
            }
            var changeProp = false;
            var supportedProp = vendor.supportedProperty(prop);
            if (supportedProp && supportedProp !== prop)
              changeProp = true;
            var changeValue = false;
            var supportedValue = vendor.supportedValue(supportedProp, jss.toCssValue(value));
            if (supportedValue && supportedValue !== value)
              changeValue = true;
            if (changeProp || changeValue) {
              if (changeProp)
                delete style[prop];
              style[supportedProp || prop] = supportedValue || value;
            }
          }
          return style;
        }
        function onProcessStyle(style, rule) {
          if (rule.type !== "style")
            return style;
          return prefixStyle(style);
        }
        function onChangeValue(value, prop) {
          return vendor.supportedValue(prop, jss.toCssValue(value)) || value;
        }
        return {
          onProcessRule,
          onProcessStyle,
          onChangeValue
        };
      }
      exports.default = jssVendorPrefixer;
    }
  });

  // node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.cjs.js
  var require_jss_plugin_props_sort_cjs = __commonJS({
    "node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function jssPropsSort() {
        var sort = function sort2(prop0, prop1) {
          if (prop0.length === prop1.length) {
            return prop0 > prop1 ? 1 : -1;
          }
          return prop0.length - prop1.length;
        };
        return {
          onProcessStyle: function onProcessStyle(style, rule) {
            if (rule.type !== "style")
              return style;
            var newStyle = {};
            var props = Object.keys(style).sort(sort);
            for (var i = 0; i < props.length; i++) {
              newStyle[props[i]] = style[props[i]];
            }
            return newStyle;
          }
        };
      }
      exports.default = jssPropsSort;
    }
  });

  // node_modules/@material-ui/styles/jssPreset/jssPreset.js
  var require_jssPreset = __commonJS({
    "node_modules/@material-ui/styles/jssPreset/jssPreset.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = jssPreset;
      var _jssPluginRuleValueFunction = _interopRequireDefault(require_jss_plugin_rule_value_function_cjs());
      var _jssPluginGlobal = _interopRequireDefault(require_jss_plugin_global_cjs());
      var _jssPluginNested = _interopRequireDefault(require_jss_plugin_nested_cjs());
      var _jssPluginCamelCase = _interopRequireDefault(require_jss_plugin_camel_case_cjs());
      var _jssPluginDefaultUnit = _interopRequireDefault(require_jss_plugin_default_unit_cjs());
      var _jssPluginVendorPrefixer = _interopRequireDefault(require_jss_plugin_vendor_prefixer_cjs());
      var _jssPluginPropsSort = _interopRequireDefault(require_jss_plugin_props_sort_cjs());
      function jssPreset() {
        return {
          plugins: [
            (0, _jssPluginRuleValueFunction.default)(),
            (0, _jssPluginGlobal.default)(),
            (0, _jssPluginNested.default)(),
            (0, _jssPluginCamelCase.default)(),
            (0, _jssPluginDefaultUnit.default)(),
            typeof window === "undefined" ? null : (0, _jssPluginVendorPrefixer.default)(),
            (0, _jssPluginPropsSort.default)()
          ]
        };
      }
    }
  });

  // node_modules/@material-ui/styles/jssPreset/index.js
  var require_jssPreset2 = __commonJS({
    "node_modules/@material-ui/styles/jssPreset/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _jssPreset.default;
        }
      });
      var _jssPreset = _interopRequireDefault(require_jssPreset());
    }
  });

  // node_modules/@material-ui/styles/mergeClasses/mergeClasses.js
  var require_mergeClasses = __commonJS({
    "node_modules/@material-ui/styles/mergeClasses/mergeClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = mergeClasses2;
      var _extends2 = _interopRequireDefault(require_extends());
      var _utils = require_utils();
      function mergeClasses2() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var baseClasses = options.baseClasses, newClasses = options.newClasses, Component4 = options.Component;
        if (!newClasses) {
          return baseClasses;
        }
        var nextClasses = (0, _extends2.default)({}, baseClasses);
        if (true) {
          if (typeof newClasses === "string") {
            console.error(["Material-UI: The value `".concat(newClasses, "` ") + "provided to the classes prop of ".concat((0, _utils.getDisplayName)(Component4), " is incorrect."), "You might want to use the className prop instead."].join("\n"));
            return baseClasses;
          }
        }
        Object.keys(newClasses).forEach(function(key) {
          if (true) {
            if (!baseClasses[key] && newClasses[key]) {
              console.error(["Material-UI: The key `".concat(key, "` ") + "provided to the classes prop is not implemented in ".concat((0, _utils.getDisplayName)(Component4), "."), "You can only override one of the following: ".concat(Object.keys(baseClasses).join(","), ".")].join("\n"));
            }
            if (newClasses[key] && typeof newClasses[key] !== "string") {
              console.error(["Material-UI: The key `".concat(key, "` ") + "provided to the classes prop is not valid for ".concat((0, _utils.getDisplayName)(Component4), "."), "You need to provide a non empty string instead of: ".concat(newClasses[key], ".")].join("\n"));
            }
          }
          if (newClasses[key]) {
            nextClasses[key] = "".concat(baseClasses[key], " ").concat(newClasses[key]);
          }
        });
        return nextClasses;
      }
    }
  });

  // node_modules/@material-ui/styles/mergeClasses/index.js
  var require_mergeClasses2 = __commonJS({
    "node_modules/@material-ui/styles/mergeClasses/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _mergeClasses.default;
        }
      });
      var _mergeClasses = _interopRequireDefault(require_mergeClasses());
    }
  });

  // node_modules/@material-ui/styles/makeStyles/multiKeyStore.js
  var require_multiKeyStore = __commonJS({
    "node_modules/@material-ui/styles/makeStyles/multiKeyStore.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var multiKeyStore = {
        set: function set(cache, key1, key2, value) {
          var subCache = cache.get(key1);
          if (!subCache) {
            subCache = /* @__PURE__ */ new Map();
            cache.set(key1, subCache);
          }
          subCache.set(key2, value);
        },
        get: function get(cache, key1, key2) {
          var subCache = cache.get(key1);
          return subCache ? subCache.get(key2) : void 0;
        },
        delete: function _delete(cache, key1, key2) {
          var subCache = cache.get(key1);
          subCache.delete(key2);
        }
      };
      var _default = multiKeyStore;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/styles/useTheme/ThemeContext.js
  var require_ThemeContext = __commonJS({
    "node_modules/@material-ui/styles/useTheme/ThemeContext.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _react = _interopRequireDefault(require_react());
      var ThemeContext = _react.default.createContext(null);
      if (true) {
        ThemeContext.displayName = "ThemeContext";
      }
      var _default = ThemeContext;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/styles/useTheme/useTheme.js
  var require_useTheme = __commonJS({
    "node_modules/@material-ui/styles/useTheme/useTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useTheme3;
      var _react = _interopRequireDefault(require_react());
      var _ThemeContext = _interopRequireDefault(require_ThemeContext());
      function useTheme3() {
        var theme2 = _react.default.useContext(_ThemeContext.default);
        if (true) {
          _react.default.useDebugValue(theme2);
        }
        return theme2;
      }
    }
  });

  // node_modules/@material-ui/styles/useTheme/index.js
  var require_useTheme2 = __commonJS({
    "node_modules/@material-ui/styles/useTheme/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _useTheme.default;
        }
      });
      var _useTheme = _interopRequireDefault(require_useTheme());
    }
  });

  // node_modules/@material-ui/styles/StylesProvider/StylesProvider.js
  var require_StylesProvider = __commonJS({
    "node_modules/@material-ui/styles/StylesProvider/StylesProvider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = StylesProvider;
      exports.StylesContext = exports.sheetsManager = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _createGenerateClassName = _interopRequireDefault(require_createGenerateClassName2());
      var _jss = require_jss_cjs();
      var _jssPreset = _interopRequireDefault(require_jssPreset2());
      var jss = (0, _jss.create)((0, _jssPreset.default)());
      var generateClassName = (0, _createGenerateClassName.default)();
      var sheetsManager = /* @__PURE__ */ new Map();
      exports.sheetsManager = sheetsManager;
      var defaultOptions = {
        disableGeneration: false,
        generateClassName,
        jss,
        sheetsCache: null,
        sheetsManager,
        sheetsRegistry: null
      };
      var StylesContext = _react.default.createContext(defaultOptions);
      exports.StylesContext = StylesContext;
      if (true) {
        StylesContext.displayName = "StylesContext";
      }
      var injectFirstNode;
      function StylesProvider(props) {
        var children = props.children, _props$injectFirst = props.injectFirst, injectFirst = _props$injectFirst === void 0 ? false : _props$injectFirst, _props$disableGenerat = props.disableGeneration, disableGeneration = _props$disableGenerat === void 0 ? false : _props$disableGenerat, localOptions = (0, _objectWithoutProperties2.default)(props, ["children", "injectFirst", "disableGeneration"]);
        var outerOptions = _react.default.useContext(StylesContext);
        var context = (0, _extends2.default)({}, outerOptions, {
          disableGeneration
        }, localOptions);
        if (true) {
          if (typeof window === "undefined" && !context.sheetsManager) {
            console.error("Material-UI: You need to use the ServerStyleSheets API when rendering on the server.");
          }
        }
        if (true) {
          if (context.jss.options.insertionPoint && injectFirst) {
            console.error("Material-UI: You cannot use a custom insertionPoint and <StylesContext injectFirst> at the same time.");
          }
        }
        if (true) {
          if (injectFirst && localOptions.jss) {
            console.error("Material-UI: You cannot use the jss and injectFirst props at the same time.");
          }
        }
        if (!context.jss.options.insertionPoint && injectFirst && typeof window !== "undefined") {
          if (!injectFirstNode) {
            var head = document.head;
            injectFirstNode = document.createComment("mui-inject-first");
            head.insertBefore(injectFirstNode, head.firstChild);
          }
          context.jss = (0, _jss.create)({
            plugins: (0, _jssPreset.default)().plugins,
            insertionPoint: injectFirstNode
          });
        }
        return /* @__PURE__ */ _react.default.createElement(StylesContext.Provider, {
          value: context
        }, children);
      }
      true ? StylesProvider.propTypes = {
        children: _propTypes.default.node.isRequired,
        disableGeneration: _propTypes.default.bool,
        generateClassName: _propTypes.default.func,
        injectFirst: _propTypes.default.bool,
        jss: _propTypes.default.object,
        serverGenerateClassName: _propTypes.default.func,
        sheetsCache: _propTypes.default.object,
        sheetsManager: _propTypes.default.object,
        sheetsRegistry: _propTypes.default.object
      } : void 0;
      if (true) {
        true ? StylesProvider.propTypes = (0, _utils.exactProp)(StylesProvider.propTypes) : void 0;
      }
    }
  });

  // node_modules/@material-ui/styles/StylesProvider/index.js
  var require_StylesProvider2 = __commonJS({
    "node_modules/@material-ui/styles/StylesProvider/index.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _StylesProvider.default;
        }
      });
      var _StylesProvider = _interopRequireWildcard(require_StylesProvider());
      Object.keys(_StylesProvider).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _StylesProvider[key];
          }
        });
      });
    }
  });

  // node_modules/@material-ui/styles/makeStyles/indexCounter.js
  var require_indexCounter = __commonJS({
    "node_modules/@material-ui/styles/makeStyles/indexCounter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.increment = increment;
      var indexCounter = -1e9;
      function increment() {
        indexCounter += 1;
        if (true) {
          if (indexCounter >= 0) {
            console.warn(["Material-UI: You might have a memory leak.", "The indexCounter is not supposed to grow that much."].join("\n"));
          }
        }
        return indexCounter;
      }
    }
  });

  // node_modules/@material-ui/styles/getStylesCreator/noopTheme.js
  var require_noopTheme = __commonJS({
    "node_modules/@material-ui/styles/getStylesCreator/noopTheme.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var noopTheme = {};
      var _default = noopTheme;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/styles/getStylesCreator/getStylesCreator.js
  var require_getStylesCreator = __commonJS({
    "node_modules/@material-ui/styles/getStylesCreator/getStylesCreator.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getStylesCreator;
      var _extends2 = _interopRequireDefault(require_extends());
      var _typeof22 = _interopRequireDefault(require_typeof());
      var _utils = require_utils();
      var _noopTheme = _interopRequireDefault(require_noopTheme());
      function getStylesCreator(stylesOrCreator) {
        var themingEnabled = typeof stylesOrCreator === "function";
        if (true) {
          if ((0, _typeof22.default)(stylesOrCreator) !== "object" && !themingEnabled) {
            console.error(["Material-UI: The `styles` argument provided is invalid.", "You need to provide a function generating the styles or a styles object."].join("\n"));
          }
        }
        return {
          create: function create2(theme2, name) {
            var styles61;
            try {
              styles61 = themingEnabled ? stylesOrCreator(theme2) : stylesOrCreator;
            } catch (err) {
              if (true) {
                if (themingEnabled === true && theme2 === _noopTheme.default) {
                  console.error(["Material-UI: The `styles` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
                }
              }
              throw err;
            }
            if (!name || !theme2.overrides || !theme2.overrides[name]) {
              return styles61;
            }
            var overrides = theme2.overrides[name];
            var stylesWithOverrides = (0, _extends2.default)({}, styles61);
            Object.keys(overrides).forEach(function(key) {
              if (true) {
                if (!stylesWithOverrides[key]) {
                  console.warn(["Material-UI: You are trying to override a style that does not exist.", "Fix the `".concat(key, "` key of `theme.overrides.").concat(name, "`.")].join("\n"));
                }
              }
              stylesWithOverrides[key] = (0, _utils.deepmerge)(stylesWithOverrides[key], overrides[key]);
            });
            return stylesWithOverrides;
          },
          options: {}
        };
      }
    }
  });

  // node_modules/@material-ui/styles/getStylesCreator/index.js
  var require_getStylesCreator2 = __commonJS({
    "node_modules/@material-ui/styles/getStylesCreator/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _getStylesCreator.default;
        }
      });
      var _getStylesCreator = _interopRequireDefault(require_getStylesCreator());
    }
  });

  // node_modules/@material-ui/styles/makeStyles/makeStyles.js
  var require_makeStyles = __commonJS({
    "node_modules/@material-ui/styles/makeStyles/makeStyles.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = makeStyles;
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _extends2 = _interopRequireDefault(require_extends());
      var _react = _interopRequireDefault(require_react());
      var _jss = require_jss_cjs();
      var _mergeClasses = _interopRequireDefault(require_mergeClasses2());
      var _multiKeyStore = _interopRequireDefault(require_multiKeyStore());
      var _useTheme = _interopRequireDefault(require_useTheme2());
      var _StylesProvider = require_StylesProvider2();
      var _indexCounter = require_indexCounter();
      var _getStylesCreator = _interopRequireDefault(require_getStylesCreator2());
      var _noopTheme = _interopRequireDefault(require_noopTheme());
      function getClasses(_ref4, classes, Component4) {
        var state = _ref4.state, stylesOptions = _ref4.stylesOptions;
        if (stylesOptions.disableGeneration) {
          return classes || {};
        }
        if (!state.cacheClasses) {
          state.cacheClasses = {
            value: null,
            lastProp: null,
            lastJSS: {}
          };
        }
        var generate = false;
        if (state.classes !== state.cacheClasses.lastJSS) {
          state.cacheClasses.lastJSS = state.classes;
          generate = true;
        }
        if (classes !== state.cacheClasses.lastProp) {
          state.cacheClasses.lastProp = classes;
          generate = true;
        }
        if (generate) {
          state.cacheClasses.value = (0, _mergeClasses.default)({
            baseClasses: state.cacheClasses.lastJSS,
            newClasses: classes,
            Component: Component4
          });
        }
        return state.cacheClasses.value;
      }
      function attach(_ref23, props) {
        var state = _ref23.state, theme2 = _ref23.theme, stylesOptions = _ref23.stylesOptions, stylesCreator = _ref23.stylesCreator, name = _ref23.name;
        if (stylesOptions.disableGeneration) {
          return;
        }
        var sheetManager = _multiKeyStore.default.get(stylesOptions.sheetsManager, stylesCreator, theme2);
        if (!sheetManager) {
          sheetManager = {
            refs: 0,
            staticSheet: null,
            dynamicStyles: null
          };
          _multiKeyStore.default.set(stylesOptions.sheetsManager, stylesCreator, theme2, sheetManager);
        }
        var options = (0, _extends2.default)({}, stylesCreator.options, stylesOptions, {
          theme: theme2,
          flip: typeof stylesOptions.flip === "boolean" ? stylesOptions.flip : theme2.direction === "rtl"
        });
        options.generateId = options.serverGenerateClassName || options.generateClassName;
        var sheetsRegistry = stylesOptions.sheetsRegistry;
        if (sheetManager.refs === 0) {
          var staticSheet;
          if (stylesOptions.sheetsCache) {
            staticSheet = _multiKeyStore.default.get(stylesOptions.sheetsCache, stylesCreator, theme2);
          }
          var styles61 = stylesCreator.create(theme2, name);
          if (!staticSheet) {
            staticSheet = stylesOptions.jss.createStyleSheet(styles61, (0, _extends2.default)({
              link: false
            }, options));
            staticSheet.attach();
            if (stylesOptions.sheetsCache) {
              _multiKeyStore.default.set(stylesOptions.sheetsCache, stylesCreator, theme2, staticSheet);
            }
          }
          if (sheetsRegistry) {
            sheetsRegistry.add(staticSheet);
          }
          sheetManager.staticSheet = staticSheet;
          sheetManager.dynamicStyles = (0, _jss.getDynamicStyles)(styles61);
        }
        if (sheetManager.dynamicStyles) {
          var dynamicSheet = stylesOptions.jss.createStyleSheet(sheetManager.dynamicStyles, (0, _extends2.default)({
            link: true
          }, options));
          dynamicSheet.update(props);
          dynamicSheet.attach();
          state.dynamicSheet = dynamicSheet;
          state.classes = (0, _mergeClasses.default)({
            baseClasses: sheetManager.staticSheet.classes,
            newClasses: dynamicSheet.classes
          });
          if (sheetsRegistry) {
            sheetsRegistry.add(dynamicSheet);
          }
        } else {
          state.classes = sheetManager.staticSheet.classes;
        }
        sheetManager.refs += 1;
      }
      function update(_ref32, props) {
        var state = _ref32.state;
        if (state.dynamicSheet) {
          state.dynamicSheet.update(props);
        }
      }
      function detach(_ref4) {
        var state = _ref4.state, theme2 = _ref4.theme, stylesOptions = _ref4.stylesOptions, stylesCreator = _ref4.stylesCreator;
        if (stylesOptions.disableGeneration) {
          return;
        }
        var sheetManager = _multiKeyStore.default.get(stylesOptions.sheetsManager, stylesCreator, theme2);
        sheetManager.refs -= 1;
        var sheetsRegistry = stylesOptions.sheetsRegistry;
        if (sheetManager.refs === 0) {
          _multiKeyStore.default.delete(stylesOptions.sheetsManager, stylesCreator, theme2);
          stylesOptions.jss.removeStyleSheet(sheetManager.staticSheet);
          if (sheetsRegistry) {
            sheetsRegistry.remove(sheetManager.staticSheet);
          }
        }
        if (state.dynamicSheet) {
          stylesOptions.jss.removeStyleSheet(state.dynamicSheet);
          if (sheetsRegistry) {
            sheetsRegistry.remove(state.dynamicSheet);
          }
        }
      }
      function useSynchronousEffect(func, values) {
        var key = _react.default.useRef([]);
        var output;
        var currentKey = _react.default.useMemo(function() {
          return {};
        }, values);
        if (key.current !== currentKey) {
          key.current = currentKey;
          output = func();
        }
        _react.default.useEffect(
          function() {
            return function() {
              if (output) {
                output();
              }
            };
          },
          [currentKey]
        );
      }
      function makeStyles(stylesOrCreator) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var name = options.name, classNamePrefixOption = options.classNamePrefix, Component4 = options.Component, _options$defaultTheme = options.defaultTheme, defaultTheme2 = _options$defaultTheme === void 0 ? _noopTheme.default : _options$defaultTheme, stylesOptions2 = (0, _objectWithoutProperties2.default)(options, ["name", "classNamePrefix", "Component", "defaultTheme"]);
        var stylesCreator = (0, _getStylesCreator.default)(stylesOrCreator);
        var classNamePrefix = name || classNamePrefixOption || "makeStyles";
        stylesCreator.options = {
          index: (0, _indexCounter.increment)(),
          name,
          meta: classNamePrefix,
          classNamePrefix
        };
        var useStyles = function useStyles2() {
          var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var theme2 = (0, _useTheme.default)() || defaultTheme2;
          var stylesOptions = (0, _extends2.default)({}, _react.default.useContext(_StylesProvider.StylesContext), stylesOptions2);
          var instance = _react.default.useRef();
          var shouldUpdate = _react.default.useRef();
          useSynchronousEffect(function() {
            var current = {
              name,
              state: {},
              stylesCreator,
              stylesOptions,
              theme: theme2
            };
            attach(current, props);
            shouldUpdate.current = false;
            instance.current = current;
            return function() {
              detach(current);
            };
          }, [theme2, stylesCreator]);
          _react.default.useEffect(function() {
            if (shouldUpdate.current) {
              update(instance.current, props);
            }
            shouldUpdate.current = true;
          });
          var classes = getClasses(instance.current, props.classes, Component4);
          if (true) {
            _react.default.useDebugValue(classes);
          }
          return classes;
        };
        return useStyles;
      }
    }
  });

  // node_modules/@material-ui/styles/makeStyles/index.js
  var require_makeStyles2 = __commonJS({
    "node_modules/@material-ui/styles/makeStyles/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _makeStyles.default;
        }
      });
      var _makeStyles = _interopRequireDefault(require_makeStyles());
    }
  });

  // node_modules/@babel/runtime/helpers/classCallCheck.js
  var require_classCallCheck = __commonJS({
    "node_modules/@babel/runtime/helpers/classCallCheck.js"(exports, module) {
      function _classCallCheck2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      module.exports = _classCallCheck2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@material-ui/styles/ServerStyleSheets/ServerStyleSheets.js
  var require_ServerStyleSheets = __commonJS({
    "node_modules/@material-ui/styles/ServerStyleSheets/ServerStyleSheets.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _react = _interopRequireDefault(require_react());
      var _jss = require_jss_cjs();
      var _StylesProvider = _interopRequireDefault(require_StylesProvider2());
      var _createGenerateClassName = _interopRequireDefault(require_createGenerateClassName2());
      var ServerStyleSheets = /* @__PURE__ */ function() {
        function ServerStyleSheets2() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          (0, _classCallCheck2.default)(this, ServerStyleSheets2);
          this.options = options;
        }
        (0, _createClass2.default)(ServerStyleSheets2, [{
          key: "collect",
          value: function collect(children) {
            var sheetsManager = /* @__PURE__ */ new Map();
            this.sheetsRegistry = new _jss.SheetsRegistry();
            var generateClassName = (0, _createGenerateClassName.default)();
            return /* @__PURE__ */ _react.default.createElement(_StylesProvider.default, (0, _extends2.default)({
              sheetsManager,
              serverGenerateClassName: generateClassName,
              sheetsRegistry: this.sheetsRegistry
            }, this.options), children);
          }
        }, {
          key: "toString",
          value: function toString() {
            return this.sheetsRegistry ? this.sheetsRegistry.toString() : "";
          }
        }, {
          key: "getStyleElement",
          value: function getStyleElement(props) {
            return /* @__PURE__ */ _react.default.createElement("style", (0, _extends2.default)({
              id: "jss-server-side",
              key: "jss-server-side",
              dangerouslySetInnerHTML: {
                __html: this.toString()
              }
            }, props));
          }
        }]);
        return ServerStyleSheets2;
      }();
      exports.default = ServerStyleSheets;
    }
  });

  // node_modules/@material-ui/styles/ServerStyleSheets/index.js
  var require_ServerStyleSheets2 = __commonJS({
    "node_modules/@material-ui/styles/ServerStyleSheets/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _ServerStyleSheets.default;
        }
      });
      var _ServerStyleSheets = _interopRequireDefault(require_ServerStyleSheets());
    }
  });

  // node_modules/clsx/dist/clsx.js
  var require_clsx = __commonJS({
    "node_modules/clsx/dist/clsx.js"(exports, module) {
      function e(r2) {
        var o, t, f = "";
        if ("string" == typeof r2 || "number" == typeof r2)
          f += r2;
        else if ("object" == typeof r2)
          if (Array.isArray(r2))
            for (o = 0; o < r2.length; o++)
              r2[o] && (t = e(r2[o])) && (f && (f += " "), f += t);
          else
            for (o in r2)
              r2[o] && (f && (f += " "), f += o);
        return f;
      }
      function r() {
        for (var r2, o, t = 0, f = ""; t < arguments.length; )
          (r2 = arguments[t++]) && (o = e(r2)) && (f && (f += " "), f += o);
        return f;
      }
      module.exports = r, module.exports.clsx = r;
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment6 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment5(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment6;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment5;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is3();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys2 = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys2.length; ++i) {
            var key = keys2[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/@material-ui/styles/styled/styled.js
  var require_styled = __commonJS({
    "node_modules/@material-ui/styles/styled/styled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = styled3;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _react = _interopRequireDefault(require_react());
      var _clsx = _interopRequireDefault(require_clsx());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _hoistNonReactStatics = _interopRequireDefault(require_hoist_non_react_statics_cjs());
      var _makeStyles = _interopRequireDefault(require_makeStyles2());
      function omit(input, fields) {
        var output = {};
        Object.keys(input).forEach(function(prop) {
          if (fields.indexOf(prop) === -1) {
            output[prop] = input[prop];
          }
        });
        return output;
      }
      function styled3(Component4) {
        var componentCreator = function componentCreator2(style) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var name = options.name, stylesOptions = (0, _objectWithoutProperties2.default)(options, ["name"]);
          if (Component4 === void 0) {
            throw new Error(["You are calling styled(Component)(style) with an undefined component.", "You may have forgotten to import it."].join("\n"));
          }
          var classNamePrefix = name;
          if (true) {
            if (!name) {
              var displayName = (0, _utils.getDisplayName)(Component4);
              if (displayName !== void 0) {
                classNamePrefix = displayName;
              }
            }
          }
          var stylesOrCreator = typeof style === "function" ? function(theme2) {
            return {
              root: function root(props) {
                return style((0, _extends2.default)({
                  theme: theme2
                }, props));
              }
            };
          } : {
            root: style
          };
          var useStyles = (0, _makeStyles.default)(stylesOrCreator, (0, _extends2.default)({
            Component: Component4,
            name: name || Component4.displayName,
            classNamePrefix
          }, stylesOptions));
          var filterProps;
          var propTypes = {};
          if (style.filterProps) {
            filterProps = style.filterProps;
            delete style.filterProps;
          }
          if (style.propTypes) {
            propTypes = style.propTypes;
            delete style.propTypes;
          }
          var StyledComponent = /* @__PURE__ */ _react.default.forwardRef(function StyledComponent2(props, ref) {
            var children = props.children, classNameProp = props.className, clone = props.clone, ComponentProp = props.component, other = (0, _objectWithoutProperties2.default)(props, ["children", "className", "clone", "component"]);
            var classes = useStyles(props);
            var className = (0, _clsx.default)(classes.root, classNameProp);
            var spread = other;
            if (filterProps) {
              spread = omit(spread, filterProps);
            }
            if (clone) {
              return /* @__PURE__ */ _react.default.cloneElement(children, (0, _extends2.default)({
                className: (0, _clsx.default)(children.props.className, className)
              }, spread));
            }
            if (typeof children === "function") {
              return children((0, _extends2.default)({
                className
              }, spread));
            }
            var FinalComponent = ComponentProp || Component4;
            return /* @__PURE__ */ _react.default.createElement(FinalComponent, (0, _extends2.default)({
              ref,
              className
            }, spread), children);
          });
          true ? StyledComponent.propTypes = (0, _extends2.default)({
            children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
            className: _propTypes.default.string,
            clone: (0, _utils.chainPropTypes)(_propTypes.default.bool, function(props) {
              if (props.clone && props.component) {
                return new Error("You can not use the clone and component prop at the same time.");
              }
              return null;
            }),
            component: _propTypes.default.elementType
          }, propTypes) : void 0;
          if (true) {
            StyledComponent.displayName = "Styled(".concat(classNamePrefix, ")");
          }
          (0, _hoistNonReactStatics.default)(StyledComponent, Component4);
          return StyledComponent;
        };
        return componentCreator;
      }
    }
  });

  // node_modules/@material-ui/styles/styled/index.js
  var require_styled2 = __commonJS({
    "node_modules/@material-ui/styles/styled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _styled.default;
        }
      });
      var _styled = _interopRequireDefault(require_styled());
    }
  });

  // node_modules/@material-ui/styles/ThemeProvider/ThemeProvider.js
  var require_ThemeProvider = __commonJS({
    "node_modules/@material-ui/styles/ThemeProvider/ThemeProvider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _ThemeContext = _interopRequireDefault(require_ThemeContext());
      var _useTheme = _interopRequireDefault(require_useTheme2());
      var _nested = _interopRequireDefault(require_nested());
      function mergeOuterLocalTheme(outerTheme, localTheme) {
        if (typeof localTheme === "function") {
          var mergedTheme = localTheme(outerTheme);
          if (true) {
            if (!mergedTheme) {
              console.error(["Material-UI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
            }
          }
          return mergedTheme;
        }
        return (0, _extends2.default)({}, outerTheme, localTheme);
      }
      function ThemeProvider(props) {
        var children = props.children, localTheme = props.theme;
        var outerTheme = (0, _useTheme.default)();
        if (true) {
          if (outerTheme === null && typeof localTheme === "function") {
            console.error(["Material-UI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
          }
        }
        var theme2 = _react.default.useMemo(function() {
          var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
          if (output != null) {
            output[_nested.default] = outerTheme !== null;
          }
          return output;
        }, [localTheme, outerTheme]);
        return /* @__PURE__ */ _react.default.createElement(_ThemeContext.default.Provider, {
          value: theme2
        }, children);
      }
      true ? ThemeProvider.propTypes = {
        children: _propTypes.default.node.isRequired,
        theme: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]).isRequired
      } : void 0;
      if (true) {
        true ? ThemeProvider.propTypes = (0, _utils.exactProp)(ThemeProvider.propTypes) : void 0;
      }
      var _default = ThemeProvider;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/styles/ThemeProvider/index.js
  var require_ThemeProvider2 = __commonJS({
    "node_modules/@material-ui/styles/ThemeProvider/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _ThemeProvider.default;
        }
      });
      var _ThemeProvider = _interopRequireDefault(require_ThemeProvider());
    }
  });

  // node_modules/@material-ui/styles/withStyles/withStyles.js
  var require_withStyles = __commonJS({
    "node_modules/@material-ui/styles/withStyles/withStyles.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _hoistNonReactStatics = _interopRequireDefault(require_hoist_non_react_statics_cjs());
      var _utils = require_utils();
      var _makeStyles = _interopRequireDefault(require_makeStyles2());
      var _getThemeProps = _interopRequireDefault(require_getThemeProps2());
      var _useTheme = _interopRequireDefault(require_useTheme2());
      var withStyles4 = function withStyles5(stylesOrCreator) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return function(Component4) {
          var defaultTheme2 = options.defaultTheme, _options$withTheme = options.withTheme, withTheme = _options$withTheme === void 0 ? false : _options$withTheme, name = options.name, stylesOptions = (0, _objectWithoutProperties2.default)(options, ["defaultTheme", "withTheme", "name"]);
          if (true) {
            if (Component4 === void 0) {
              throw new Error(["You are calling withStyles(styles)(Component) with an undefined component.", "You may have forgotten to import it."].join("\n"));
            }
          }
          var classNamePrefix = name;
          if (true) {
            if (!name) {
              var displayName = (0, _utils.getDisplayName)(Component4);
              if (displayName !== void 0) {
                classNamePrefix = displayName;
              }
            }
          }
          var useStyles = (0, _makeStyles.default)(stylesOrCreator, (0, _extends2.default)({
            defaultTheme: defaultTheme2,
            Component: Component4,
            name: name || Component4.displayName,
            classNamePrefix
          }, stylesOptions));
          var WithStyles = /* @__PURE__ */ _react.default.forwardRef(function WithStyles2(props, ref) {
            var classesProp = props.classes, innerRef = props.innerRef, other = (0, _objectWithoutProperties2.default)(props, ["classes", "innerRef"]);
            var classes = useStyles((0, _extends2.default)({}, Component4.defaultProps, props));
            var theme2;
            var more = other;
            if (typeof name === "string" || withTheme) {
              theme2 = (0, _useTheme.default)() || defaultTheme2;
              if (name) {
                more = (0, _getThemeProps.default)({
                  theme: theme2,
                  name,
                  props: other
                });
              }
              if (withTheme && !more.theme) {
                more.theme = theme2;
              }
            }
            return /* @__PURE__ */ _react.default.createElement(Component4, (0, _extends2.default)({
              ref: innerRef || ref,
              classes
            }, more));
          });
          true ? WithStyles.propTypes = {
            classes: _propTypes.default.object,
            innerRef: (0, _utils.chainPropTypes)(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]), function(props) {
              if (props.innerRef == null) {
                return null;
              }
              return null;
            })
          } : void 0;
          if (true) {
            WithStyles.displayName = "WithStyles(".concat((0, _utils.getDisplayName)(Component4), ")");
          }
          (0, _hoistNonReactStatics.default)(WithStyles, Component4);
          if (true) {
            WithStyles.Naked = Component4;
            WithStyles.options = options;
            WithStyles.useStyles = useStyles;
          }
          return WithStyles;
        };
      };
      var _default = withStyles4;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/styles/withStyles/index.js
  var require_withStyles2 = __commonJS({
    "node_modules/@material-ui/styles/withStyles/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _withStyles.default;
        }
      });
      var _withStyles = _interopRequireDefault(require_withStyles());
    }
  });

  // node_modules/@material-ui/styles/withTheme/withTheme.js
  var require_withTheme = __commonJS({
    "node_modules/@material-ui/styles/withTheme/withTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.withThemeCreator = withThemeCreator;
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _hoistNonReactStatics = _interopRequireDefault(require_hoist_non_react_statics_cjs());
      var _utils = require_utils();
      var _useTheme = _interopRequireDefault(require_useTheme2());
      function withThemeCreator() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var defaultTheme2 = options.defaultTheme;
        var withTheme2 = function withTheme3(Component4) {
          if (true) {
            if (Component4 === void 0) {
              throw new Error(["You are calling withTheme(Component) with an undefined component.", "You may have forgotten to import it."].join("\n"));
            }
          }
          var WithTheme = /* @__PURE__ */ _react.default.forwardRef(function WithTheme2(props, ref) {
            var innerRef = props.innerRef, other = (0, _objectWithoutProperties2.default)(props, ["innerRef"]);
            var theme2 = (0, _useTheme.default)() || defaultTheme2;
            return /* @__PURE__ */ _react.default.createElement(Component4, (0, _extends2.default)({
              theme: theme2,
              ref: innerRef || ref
            }, other));
          });
          true ? WithTheme.propTypes = {
            innerRef: (0, _utils.chainPropTypes)(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]), function(props) {
              if (props.innerRef == null) {
                return null;
              }
              return new Error("Material-UI: The `innerRef` prop is deprecated and will be removed in v5. Refs are now automatically forwarded to the inner component.");
            })
          } : void 0;
          if (true) {
            WithTheme.displayName = "WithTheme(".concat((0, _utils.getDisplayName)(Component4), ")");
          }
          (0, _hoistNonReactStatics.default)(WithTheme, Component4);
          if (true) {
            WithTheme.Naked = Component4;
          }
          return WithTheme;
        };
        return withTheme2;
      }
      var withTheme = withThemeCreator();
      var _default = withTheme;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/styles/withTheme/index.js
  var require_withTheme2 = __commonJS({
    "node_modules/@material-ui/styles/withTheme/index.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _withTheme.default;
        }
      });
      var _withTheme = _interopRequireWildcard(require_withTheme());
      Object.keys(_withTheme).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _withTheme[key];
          }
        });
      });
    }
  });

  // node_modules/@material-ui/styles/index.js
  var require_styles = __commonJS({
    "node_modules/@material-ui/styles/index.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        createGenerateClassName: true,
        createStyles: true,
        getThemeProps: true,
        jssPreset: true,
        makeStyles: true,
        mergeClasses: true,
        ServerStyleSheets: true,
        styled: true,
        StylesProvider: true,
        ThemeProvider: true,
        useTheme: true,
        withStyles: true,
        withTheme: true
      };
      Object.defineProperty(exports, "createGenerateClassName", {
        enumerable: true,
        get: function get() {
          return _createGenerateClassName.default;
        }
      });
      Object.defineProperty(exports, "createStyles", {
        enumerable: true,
        get: function get() {
          return _createStyles.default;
        }
      });
      Object.defineProperty(exports, "getThemeProps", {
        enumerable: true,
        get: function get() {
          return _getThemeProps.default;
        }
      });
      Object.defineProperty(exports, "jssPreset", {
        enumerable: true,
        get: function get() {
          return _jssPreset.default;
        }
      });
      Object.defineProperty(exports, "makeStyles", {
        enumerable: true,
        get: function get() {
          return _makeStyles.default;
        }
      });
      Object.defineProperty(exports, "mergeClasses", {
        enumerable: true,
        get: function get() {
          return _mergeClasses.default;
        }
      });
      Object.defineProperty(exports, "ServerStyleSheets", {
        enumerable: true,
        get: function get() {
          return _ServerStyleSheets.default;
        }
      });
      Object.defineProperty(exports, "styled", {
        enumerable: true,
        get: function get() {
          return _styled.default;
        }
      });
      Object.defineProperty(exports, "StylesProvider", {
        enumerable: true,
        get: function get() {
          return _StylesProvider.default;
        }
      });
      Object.defineProperty(exports, "ThemeProvider", {
        enumerable: true,
        get: function get() {
          return _ThemeProvider.default;
        }
      });
      Object.defineProperty(exports, "useTheme", {
        enumerable: true,
        get: function get() {
          return _useTheme.default;
        }
      });
      Object.defineProperty(exports, "withStyles", {
        enumerable: true,
        get: function get() {
          return _withStyles.default;
        }
      });
      Object.defineProperty(exports, "withTheme", {
        enumerable: true,
        get: function get() {
          return _withTheme.default;
        }
      });
      var _utils = require_utils();
      var _createGenerateClassName = _interopRequireWildcard(require_createGenerateClassName2());
      Object.keys(_createGenerateClassName).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _createGenerateClassName[key];
          }
        });
      });
      var _createStyles = _interopRequireWildcard(require_createStyles2());
      Object.keys(_createStyles).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _createStyles[key];
          }
        });
      });
      var _getThemeProps = _interopRequireWildcard(require_getThemeProps2());
      Object.keys(_getThemeProps).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _getThemeProps[key];
          }
        });
      });
      var _jssPreset = _interopRequireWildcard(require_jssPreset2());
      Object.keys(_jssPreset).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _jssPreset[key];
          }
        });
      });
      var _makeStyles = _interopRequireWildcard(require_makeStyles2());
      Object.keys(_makeStyles).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _makeStyles[key];
          }
        });
      });
      var _mergeClasses = _interopRequireWildcard(require_mergeClasses2());
      Object.keys(_mergeClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _mergeClasses[key];
          }
        });
      });
      var _ServerStyleSheets = _interopRequireWildcard(require_ServerStyleSheets2());
      Object.keys(_ServerStyleSheets).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _ServerStyleSheets[key];
          }
        });
      });
      var _styled = _interopRequireWildcard(require_styled2());
      Object.keys(_styled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _styled[key];
          }
        });
      });
      var _StylesProvider = _interopRequireWildcard(require_StylesProvider2());
      Object.keys(_StylesProvider).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _StylesProvider[key];
          }
        });
      });
      var _ThemeProvider = _interopRequireWildcard(require_ThemeProvider2());
      Object.keys(_ThemeProvider).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _ThemeProvider[key];
          }
        });
      });
      var _useTheme = _interopRequireWildcard(require_useTheme2());
      Object.keys(_useTheme).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _useTheme[key];
          }
        });
      });
      var _withStyles = _interopRequireWildcard(require_withStyles2());
      Object.keys(_withStyles).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _withStyles[key];
          }
        });
      });
      var _withTheme = _interopRequireWildcard(require_withTheme2());
      Object.keys(_withTheme).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _withTheme[key];
          }
        });
      });
      if (typeof window !== "undefined") {
        _utils.ponyfillGlobal["__@material-ui/styles-init__"] = _utils.ponyfillGlobal["__@material-ui/styles-init__"] || 0;
        if (_utils.ponyfillGlobal["__@material-ui/styles-init__"] === 1) {
          console.warn(["It looks like there are several instances of `@material-ui/styles` initialized in this application.", "This may cause theme propagation issues, broken class names, specificity issues, and makes your application bigger without a good reason.", "", "See https://mui.com/r/styles-instance-warning for more info."].join("\n"));
        }
        _utils.ponyfillGlobal["__@material-ui/styles-init__"] += 1;
      }
    }
  });

  // node_modules/@material-ui/core/styles/createStyles.js
  var require_createStyles3 = __commonJS({
    "node_modules/@material-ui/core/styles/createStyles.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createStyles;
      var _styles = require_styles();
      function createStyles(styles61) {
        return (0, _styles.createStyles)(styles61);
      }
    }
  });

  // node_modules/@material-ui/core/styles/defaultTheme.js
  var require_defaultTheme = __commonJS({
    "node_modules/@material-ui/core/styles/defaultTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createTheme = _interopRequireDefault(require_createTheme());
      var defaultTheme2 = (0, _createTheme.default)();
      var _default = defaultTheme2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/styles/makeStyles.js
  var require_makeStyles3 = __commonJS({
    "node_modules/@material-ui/core/styles/makeStyles.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _styles = require_styles();
      var _defaultTheme = _interopRequireDefault(require_defaultTheme());
      function makeStyles(stylesOrCreator) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return (0, _styles.makeStyles)(stylesOrCreator, (0, _extends2.default)({
          defaultTheme: _defaultTheme.default
        }, options));
      }
      var _default = makeStyles;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/styles/cssUtils.js
  var require_cssUtils = __commonJS({
    "node_modules/@material-ui/core/styles/cssUtils.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isUnitless = isUnitless;
      exports.getUnit = getUnit;
      exports.toUnitless = toUnitless;
      exports.convertLength = convertLength;
      exports.alignProperty = alignProperty;
      exports.fontGrid = fontGrid;
      exports.responsiveProperty = responsiveProperty;
      var _defineProperty2 = _interopRequireDefault(require_defineProperty());
      function isUnitless(value) {
        return String(parseFloat(value)).length === String(value).length;
      }
      function getUnit(input) {
        return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
      }
      function toUnitless(length) {
        return parseFloat(length);
      }
      function convertLength(baseFontSize) {
        return function(length, toUnit) {
          var fromUnit = getUnit(length);
          if (fromUnit === toUnit) {
            return length;
          }
          var pxLength = toUnitless(length);
          if (fromUnit !== "px") {
            if (fromUnit === "em") {
              pxLength = toUnitless(length) * toUnitless(baseFontSize);
            } else if (fromUnit === "rem") {
              pxLength = toUnitless(length) * toUnitless(baseFontSize);
              return length;
            }
          }
          var outputLength = pxLength;
          if (toUnit !== "px") {
            if (toUnit === "em") {
              outputLength = pxLength / toUnitless(baseFontSize);
            } else if (toUnit === "rem") {
              outputLength = pxLength / toUnitless(baseFontSize);
            } else {
              return length;
            }
          }
          return parseFloat(outputLength.toFixed(5)) + toUnit;
        };
      }
      function alignProperty(_ref4) {
        var size = _ref4.size, grid2 = _ref4.grid;
        var sizeBelow = size - size % grid2;
        var sizeAbove = sizeBelow + grid2;
        return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
      }
      function fontGrid(_ref23) {
        var lineHeight = _ref23.lineHeight, pixels = _ref23.pixels, htmlFontSize = _ref23.htmlFontSize;
        return pixels / (lineHeight * htmlFontSize);
      }
      function responsiveProperty(_ref32) {
        var cssProperty = _ref32.cssProperty, min = _ref32.min, max = _ref32.max, _ref3$unit = _ref32.unit, unit = _ref3$unit === void 0 ? "rem" : _ref3$unit, _ref3$breakpoints = _ref32.breakpoints, breakpoints = _ref3$breakpoints === void 0 ? [600, 960, 1280] : _ref3$breakpoints, _ref3$transform = _ref32.transform, transform = _ref3$transform === void 0 ? null : _ref3$transform;
        var output = (0, _defineProperty2.default)({}, cssProperty, "".concat(min).concat(unit));
        var factor = (max - min) / breakpoints[breakpoints.length - 1];
        breakpoints.forEach(function(breakpoint) {
          var value = min + factor * breakpoint;
          if (transform !== null) {
            value = transform(value);
          }
          output["@media (min-width:".concat(breakpoint, "px)")] = (0, _defineProperty2.default)({}, cssProperty, "".concat(Math.round(value * 1e4) / 1e4).concat(unit));
        });
        return output;
      }
    }
  });

  // node_modules/@material-ui/core/styles/responsiveFontSizes.js
  var require_responsiveFontSizes = __commonJS({
    "node_modules/@material-ui/core/styles/responsiveFontSizes.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = responsiveFontSizes;
      var _extends2 = _interopRequireDefault(require_extends());
      var _utils = require_utils();
      var _cssUtils = require_cssUtils();
      function responsiveFontSizes(themeInput) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$breakpoints = options.breakpoints, breakpoints = _options$breakpoints === void 0 ? ["sm", "md", "lg"] : _options$breakpoints, _options$disableAlign = options.disableAlign, disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign, _options$factor = options.factor, factor = _options$factor === void 0 ? 2 : _options$factor, _options$variants = options.variants, variants = _options$variants === void 0 ? ["h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "caption", "button", "overline"] : _options$variants;
        var theme2 = (0, _extends2.default)({}, themeInput);
        theme2.typography = (0, _extends2.default)({}, theme2.typography);
        var typography2 = theme2.typography;
        var convert = (0, _cssUtils.convertLength)(typography2.htmlFontSize);
        var breakpointValues = breakpoints.map(function(x) {
          return theme2.breakpoints.values[x];
        });
        variants.forEach(function(variant) {
          var style = typography2[variant];
          var remFontSize = parseFloat(convert(style.fontSize, "rem"));
          if (remFontSize <= 1) {
            return;
          }
          var maxFontSize = remFontSize;
          var minFontSize = 1 + (maxFontSize - 1) / factor;
          var lineHeight = style.lineHeight;
          if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {
            throw new Error(true ? "Material-UI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead." : (0, _utils.formatMuiErrorMessage)(6));
          }
          if (!(0, _cssUtils.isUnitless)(lineHeight)) {
            lineHeight = parseFloat(convert(lineHeight, "rem")) / parseFloat(remFontSize);
          }
          var transform = null;
          if (!disableAlign) {
            transform = function transform2(value) {
              return (0, _cssUtils.alignProperty)({
                size: value,
                grid: (0, _cssUtils.fontGrid)({
                  pixels: 4,
                  lineHeight,
                  htmlFontSize: typography2.htmlFontSize
                })
              });
            };
          }
          typography2[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({
            cssProperty: "fontSize",
            min: minFontSize,
            max: maxFontSize,
            unit: "rem",
            breakpoints: breakpointValues,
            transform
          }));
        });
        return theme2;
      }
    }
  });

  // node_modules/@material-ui/core/styles/styled.js
  var require_styled3 = __commonJS({
    "node_modules/@material-ui/core/styles/styled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _styles = require_styles();
      var _defaultTheme = _interopRequireDefault(require_defaultTheme());
      var styled3 = function styled4(Component4) {
        var componentCreator = (0, _styles.styled)(Component4);
        return function(style, options) {
          return componentCreator(style, (0, _extends2.default)({
            defaultTheme: _defaultTheme.default
          }, options));
        };
      };
      var _default = styled3;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/styles/useTheme.js
  var require_useTheme3 = __commonJS({
    "node_modules/@material-ui/core/styles/useTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useTheme3;
      var _styles = require_styles();
      var _react = _interopRequireDefault(require_react());
      var _defaultTheme = _interopRequireDefault(require_defaultTheme());
      function useTheme3() {
        var theme2 = (0, _styles.useTheme)() || _defaultTheme.default;
        if (true) {
          _react.default.useDebugValue(theme2);
        }
        return theme2;
      }
    }
  });

  // node_modules/@material-ui/core/styles/withStyles.js
  var require_withStyles3 = __commonJS({
    "node_modules/@material-ui/core/styles/withStyles.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _styles = require_styles();
      var _defaultTheme = _interopRequireDefault(require_defaultTheme());
      function withStyles4(stylesOrCreator, options) {
        return (0, _styles.withStyles)(stylesOrCreator, (0, _extends2.default)({
          defaultTheme: _defaultTheme.default
        }, options));
      }
      var _default = withStyles4;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/styles/withTheme.js
  var require_withTheme3 = __commonJS({
    "node_modules/@material-ui/core/styles/withTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _styles = require_styles();
      var _defaultTheme = _interopRequireDefault(require_defaultTheme());
      var withTheme = (0, _styles.withThemeCreator)({
        defaultTheme: _defaultTheme.default
      });
      var _default = withTheme;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/styles/index.js
  var require_styles2 = __commonJS({
    "node_modules/@material-ui/core/styles/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        createTheme: true,
        createMuiTheme: true,
        unstable_createMuiStrictModeTheme: true,
        createStyles: true,
        makeStyles: true,
        responsiveFontSizes: true,
        styled: true,
        useTheme: true,
        withStyles: true,
        withTheme: true,
        createGenerateClassName: true,
        jssPreset: true,
        ServerStyleSheets: true,
        StylesProvider: true,
        MuiThemeProvider: true,
        ThemeProvider: true
      };
      Object.defineProperty(exports, "createTheme", {
        enumerable: true,
        get: function get() {
          return _createTheme.default;
        }
      });
      Object.defineProperty(exports, "createMuiTheme", {
        enumerable: true,
        get: function get() {
          return _createTheme.createMuiTheme;
        }
      });
      Object.defineProperty(exports, "unstable_createMuiStrictModeTheme", {
        enumerable: true,
        get: function get() {
          return _createMuiStrictModeTheme.default;
        }
      });
      Object.defineProperty(exports, "createStyles", {
        enumerable: true,
        get: function get() {
          return _createStyles.default;
        }
      });
      Object.defineProperty(exports, "makeStyles", {
        enumerable: true,
        get: function get() {
          return _makeStyles.default;
        }
      });
      Object.defineProperty(exports, "responsiveFontSizes", {
        enumerable: true,
        get: function get() {
          return _responsiveFontSizes.default;
        }
      });
      Object.defineProperty(exports, "styled", {
        enumerable: true,
        get: function get() {
          return _styled.default;
        }
      });
      Object.defineProperty(exports, "useTheme", {
        enumerable: true,
        get: function get() {
          return _useTheme.default;
        }
      });
      Object.defineProperty(exports, "withStyles", {
        enumerable: true,
        get: function get() {
          return _withStyles.default;
        }
      });
      Object.defineProperty(exports, "withTheme", {
        enumerable: true,
        get: function get() {
          return _withTheme.default;
        }
      });
      Object.defineProperty(exports, "createGenerateClassName", {
        enumerable: true,
        get: function get() {
          return _styles.createGenerateClassName;
        }
      });
      Object.defineProperty(exports, "jssPreset", {
        enumerable: true,
        get: function get() {
          return _styles.jssPreset;
        }
      });
      Object.defineProperty(exports, "ServerStyleSheets", {
        enumerable: true,
        get: function get() {
          return _styles.ServerStyleSheets;
        }
      });
      Object.defineProperty(exports, "StylesProvider", {
        enumerable: true,
        get: function get() {
          return _styles.StylesProvider;
        }
      });
      Object.defineProperty(exports, "MuiThemeProvider", {
        enumerable: true,
        get: function get() {
          return _styles.ThemeProvider;
        }
      });
      Object.defineProperty(exports, "ThemeProvider", {
        enumerable: true,
        get: function get() {
          return _styles.ThemeProvider;
        }
      });
      var _colorManipulator = require_colorManipulator();
      Object.keys(_colorManipulator).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _colorManipulator[key];
          }
        });
      });
      var _createTheme = _interopRequireWildcard(require_createTheme());
      var _createMuiStrictModeTheme = _interopRequireDefault(require_createMuiStrictModeTheme());
      var _createStyles = _interopRequireDefault(require_createStyles3());
      var _makeStyles = _interopRequireDefault(require_makeStyles3());
      var _responsiveFontSizes = _interopRequireDefault(require_responsiveFontSizes());
      var _styled = _interopRequireDefault(require_styled3());
      var _transitions = require_transitions();
      Object.keys(_transitions).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _transitions[key];
          }
        });
      });
      var _useTheme = _interopRequireDefault(require_useTheme3());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _withTheme = _interopRequireDefault(require_withTheme3());
      var _styles = require_styles();
    }
  });

  // node_modules/@iobroker/adapter-react/Theme.js
  var require_Theme = __commonJS({
    "node_modules/@iobroker/adapter-react/Theme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _styles = require_styles2();
      var _orange = _interopRequireDefault(require_orange());
      var step = (16 - 5) / 23 / 100;
      function toInt(hex) {
        var rgb = {
          r: 0,
          g: 0,
          b: 0
        };
        if (hex.length === 7) {
          rgb.r = parseInt(hex.substr(1, 2), 16);
          rgb.g = parseInt(hex.substr(3, 2), 16);
          rgb.b = parseInt(hex.substr(5, 2), 16);
        } else if (hex.length === 4) {
          var r = hex.substr(1, 1);
          var g = hex.substr(2, 1);
          var b = hex.substr(3, 1);
          rgb.r = parseInt(r + r, 16);
          rgb.g = parseInt(g + g, 16);
          rgb.b = parseInt(b + b, 16);
        }
        return rgb;
      }
      function toHex(_int) {
        return "#" + Math.round(_int.r).toString(16) + Math.round(_int.g).toString(16) + Math.round(_int.b).toString(16);
      }
      function getElevation(color, overlayColor, elevation) {
        var rgb = toInt(color);
        var overlay = toInt(overlayColor);
        rgb.r += overlay.r * (0.05 + step * (elevation - 1));
        rgb.g += overlay.g * (0.05 + step * (elevation - 1));
        rgb.b += overlay.b * (0.05 + step * (elevation - 1));
        return toHex(rgb);
      }
      function getElevations(color, overlay) {
        var elevations = {};
        for (var i = 1; i <= 24; i++) {
          elevations["elevation" + i] = {
            backgroundColor: getElevation(color, overlay, i)
          };
        }
        return elevations;
      }
      var Theme3 = function Theme4(type) {
        var theme2;
        if (type === "dark") {
          theme2 = {
            name: type,
            palette: {
              type: "dark",
              background: {
                paper: "#121212",
                "default": "#121212"
              },
              primary: {
                main: "#4dabf5"
              },
              secondary: {
                main: "#436a93"
              },
              expert: "#14bb00",
              text: {
                primary: "#ffffff",
                secondary: "#ffffff"
              }
            },
            overrides: {
              MuiAppBar: {
                colorDefault: {
                  backgroundColor: "#272727"
                }
              },
              MuiLink: {
                root: {
                  textTransform: "uppercase",
                  transition: "color .3s ease",
                  color: _orange["default"][200],
                  "&:hover": {
                    color: _orange["default"][100]
                  }
                }
              },
              MuiPaper: getElevations("#121212", "#fff")
            }
          };
        } else if (type === "blue") {
          theme2 = {
            name: type,
            palette: {
              type: "dark",
              background: {
                paper: "#151d21",
                "default": "#151d21"
              },
              primary: {
                main: "#4dabf5"
              },
              secondary: {
                main: "#436a93"
              },
              expert: "#14bb00",
              text: {
                primary: "#ffffff",
                secondary: "#ffffff"
              }
            },
            overrides: {
              MuiAppBar: {
                colorDefault: {
                  backgroundColor: "#2a3135"
                }
              },
              MuiLink: {
                root: {
                  textTransform: "uppercase",
                  transition: "color .3s ease",
                  color: _orange["default"][200],
                  "&:hover": {
                    color: _orange["default"][100]
                  }
                }
              },
              MuiPaper: getElevations("#151d21", "#fff")
            }
          };
        } else if (type === "colored") {
          theme2 = {
            name: type,
            palette: {
              type: "light",
              primary: {
                main: "#3399CC"
              },
              secondary: {
                main: "#164477"
              },
              expert: "#96fc96"
            },
            overrides: {
              MuiAppBar: {
                colorDefault: {
                  backgroundColor: "#3399CC"
                }
              },
              MuiLink: {
                root: {
                  textTransform: "uppercase",
                  transition: "color .3s ease",
                  color: _orange["default"][400],
                  "&:hover": {
                    color: _orange["default"][300]
                  }
                }
              }
            }
          };
        } else if (type === "PT") {
          theme2 = {
            name: type,
            palette: {
              type: "light",
              primary: {
                main: "#0F99DE"
              },
              secondary: {
                main: "#88A536"
              },
              expert: "#BD1B24"
            },
            overrides: {
              MuiAppBar: {
                colorDefault: {
                  backgroundColor: "#0F99DE"
                }
              },
              MuiLink: {
                root: {
                  textTransform: "uppercase",
                  transition: "color .3s ease",
                  color: _orange["default"][400],
                  "&:hover": {
                    color: _orange["default"][300]
                  }
                }
              }
            }
          };
        } else if (type === "DX") {
          theme2 = {
            name: type,
            palette: {
              type: "light",
              primary: {
                main: "#F5F5F7"
              },
              secondary: {
                main: "#a9a9a9"
              },
              expert: "#BD1B24",
              text: {
                primary: "#007AFE",
                secondary: "#007AFE",
                disabled: "#007AFEAA"
              }
            },
            overrides: {
              MuiAppBar: {
                colorDefault: {
                  backgroundColor: "#a9a9a9"
                }
              },
              MuiLink: {
                root: {
                  textTransform: "uppercase",
                  transition: "color .3s ease",
                  color: _orange["default"][400],
                  "&:hover": {
                    color: _orange["default"][300]
                  }
                }
              }
            }
          };
        } else {
          theme2 = {
            name: type,
            palette: {
              type: "light",
              primary: {
                main: "#3399CC"
              },
              secondary: {
                main: "#164477"
              },
              expert: "#14bb00"
            },
            overrides: {
              MuiLink: {
                root: {
                  textTransform: "uppercase",
                  transition: "color .3s ease",
                  color: _orange["default"][400],
                  "&:hover": {
                    color: _orange["default"][300]
                  }
                }
              }
            }
          };
        }
        theme2.toolbar = {
          height: 48
        };
        theme2.saveToolbar = {
          background: theme2.palette.primary.main,
          button: {
            borderRadius: 3,
            height: 32
          }
        };
        return (0, _styles.createTheme)(theme2);
      };
      var _default = Theme3;
      exports["default"] = _default;
    }
  });

  // node_modules/@iobroker/adapter-react/i18n.js
  var require_i18n = __commonJS({
    "node_modules/@iobroker/adapter-react/i18n.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _defineProperty2 = _interopRequireDefault(require_defineProperty());
      var I18n11 = /* @__PURE__ */ function() {
        function I18n12() {
          (0, _classCallCheck2["default"])(this, I18n12);
        }
        (0, _createClass2["default"])(I18n12, null, [{
          key: "setLanguage",
          value: function setLanguage(lang) {
            if (lang) {
              I18n12.lang = lang;
            }
          }
        }, {
          key: "extendTranslations",
          value: function extendTranslations(words, lang) {
            try {
              if (!lang) {
                Object.keys(words).forEach(function(word) {
                  Object.keys(words[word]).forEach(function(lang2) {
                    if (!I18n12.translations[lang2]) {
                      console.warn("Used unknown language: ".concat(lang2));
                    }
                    if (!I18n12.translations[lang2][word]) {
                      I18n12.translations[lang2][word] = words[word][lang2];
                    } else if (I18n12.translations[lang2][word] !== words[word][lang2]) {
                      console.warn('Translation for word "'.concat(word, '" in "').concat(lang2, '" was ignored: existing = "').concat(I18n12.translations[lang2][word], '", new = ').concat(words[word][lang2]));
                    }
                  });
                });
              } else {
                if (!I18n12.translations[lang]) {
                  console.warn("Used unknown language: ".concat(lang));
                }
                I18n12.translations[lang] = I18n12.translations[lang] || {};
                Object.keys(words).forEach(function(word) {
                  if (!I18n12.translations[lang][word]) {
                    I18n12.translations[lang][word] = words[word];
                  } else if (I18n12.translations[lang][word] !== words[word]) {
                    console.warn('Translation for word "'.concat(word, '" in "').concat(lang, '" was ignored: existing = "').concat(I18n12.translations[lang][word], '", new = ').concat(words[word]));
                  }
                });
              }
            } catch (e) {
              console.error("Cannot apply translations: ".concat(e));
            }
          }
        }, {
          key: "setTranslations",
          value: function setTranslations(translations) {
            if (translations) {
              I18n12.translations = translations;
            }
          }
        }, {
          key: "getLanguage",
          value: function getLanguage() {
            return I18n12.lang;
          }
        }, {
          key: "t",
          value: function t(word) {
            var translation = I18n12.translations[I18n12.lang];
            if (translation) {
              var w = translation[word];
              if (w) {
                word = w;
              } else {
                console.log("Translate: ".concat(word));
              }
            }
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            for (var _i = 0, _args = args; _i < _args.length; _i++) {
              var arg = _args[_i];
              word = word.replace("%s", arg);
            }
            return word;
          }
        }]);
        return I18n12;
      }();
      (0, _defineProperty2["default"])(I18n11, "translations", {});
      (0, _defineProperty2["default"])(I18n11, "lang", window.sysLang || "en");
      var _default = I18n11;
      exports["default"] = _default;
    }
  });

  // node_modules/@iobroker/adapter-react/Components/Utils.js
  var require_Utils = __commonJS({
    "node_modules/@iobroker/adapter-react/Components/Utils.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
      var _typeof22 = _interopRequireDefault(require_typeof());
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _defineProperty2 = _interopRequireDefault(require_defineProperty());
      var _react = _interopRequireDefault(require_react());
      var _i18n = _interopRequireDefault(require_i18n());
      var NAMESPACE = "material";
      var days = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
      var months = ["Jan", "Feb", "Mar", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
      var QUALITY_BITS = {
        0: "0x00 - good",
        1: "0x01 - general problem",
        2: "0x02 - no connection problem",
        16: "0x10 - substitute value from controller",
        32: "0x20 - substitute initial value",
        64: "0x40 - substitute value from device or instance",
        128: "0x80 - substitute value from sensor",
        17: "0x11 - general problem by instance",
        65: "0x41 - general problem by device",
        129: "0x81 - general problem by sensor",
        18: "0x12 - instance not connected",
        66: "0x42 - device not connected",
        130: "0x82 - sensor not connected",
        68: "0x44 - device reports error",
        132: "0x84 - sensor reports error"
      };
      var Utils2 = /* @__PURE__ */ function() {
        function Utils3() {
          (0, _classCallCheck2["default"])(this, Utils3);
        }
        (0, _createClass2["default"])(Utils3, null, [{
          key: "CapitalWords",
          value: function CapitalWords(name) {
            return (name || "").split(/[\s_]/).filter(function(item) {
              return item;
            }).map(function(word) {
              return word ? word[0].toUpperCase() + word.substring(1).toLowerCase() : "";
            }).join(" ");
          }
        }, {
          key: "formatSeconds",
          value: function formatSeconds(seconds) {
            var days2 = Math.floor(seconds / (3600 * 24));
            seconds %= 3600 * 24;
            var hours = Math.floor(seconds / 3600);
            if (hours < 10) {
              hours = "0" + hours;
            }
            seconds %= 3600;
            var minutes = Math.floor(seconds / 60);
            if (minutes < 10) {
              minutes = "0" + minutes;
            }
            seconds %= 60;
            seconds = Math.floor(seconds);
            if (seconds < 10) {
              seconds = "0" + seconds;
            }
            var text = "";
            if (days2) {
              text += days2 + " " + _i18n["default"].t("daysShortText") + " ";
            }
            text += hours + ":" + minutes + ":" + seconds;
            return text;
          }
        }, {
          key: "getObjectName",
          value: function getObjectName(objects, id, settings, options, isDesc) {
            var item = objects[id];
            var text = id;
            var attr = isDesc ? "desc" : "name";
            if (typeof settings === "string" && !options) {
              options = {
                language: settings
              };
              settings = null;
            }
            options = options || {};
            if (!options.language) {
              options.language = objects["system.config"] && objects["system.config"].common && objects["system.config"].common.language || window.sysLang || "en";
            }
            if (settings && settings.name) {
              text = settings.name;
              if ((0, _typeof22["default"])(text) === "object") {
                text = text[options.language] || text.en;
              }
            } else if (item && item.common && item.common[attr]) {
              text = item.common[attr];
              if (attr !== "desc" && !text && item.common.desc) {
                text = item.common.desc;
              }
              if ((0, _typeof22["default"])(text) === "object") {
                text = text[options.language] || text.en || text.de || text.ru || "";
              }
              text = (text || "").toString().replace(/[_.]/g, " ");
              if (text === text.toUpperCase()) {
                text = text[0] + text.substring(1).toLowerCase();
              }
            } else {
              var pos = id.lastIndexOf(".");
              text = id.substring(pos + 1).replace(/[_.]/g, " ");
              text = Utils3.CapitalWords(text);
            }
            return text.trim();
          }
        }, {
          key: "getObjectNameFromObj",
          value: function getObjectNameFromObj(obj, settings, options, isDesc) {
            var item = obj;
            var text = obj && obj._id || "";
            var attr = isDesc ? "desc" : "name";
            if (typeof settings === "string" && !options) {
              options = {
                language: settings
              };
              settings = null;
            }
            options = options || {};
            if (settings && settings.name) {
              text = settings.name;
              if ((0, _typeof22["default"])(text) === "object") {
                text = text[options.language] || text.en;
              }
            } else if (item && item.common && item.common[attr]) {
              text = item.common[attr];
              if (attr !== "desc" && !text && item.common.desc) {
                text = item.common.desc;
              }
              if ((0, _typeof22["default"])(text) === "object") {
                text = text[options.language] || text.en;
              }
              text = (text || "").toString().replace(/[_.]/g, " ");
              if (text === text.toUpperCase()) {
                text = text[0] + text.substring(1).toLowerCase();
              }
            }
            return text.trim();
          }
        }, {
          key: "getSettingsOrder",
          value: function getSettingsOrder(obj, forEnumId, options) {
            if (obj && obj.hasOwnProperty("common")) {
              obj = obj.common;
            }
            var settings;
            if (obj && obj.custom) {
              settings = (obj.custom || {})[NAMESPACE];
              var user = options.user || "admin";
              if (settings && settings[user]) {
                if (forEnumId) {
                  if (settings[user].subOrder && settings[user].subOrder[forEnumId]) {
                    return JSON.parse(JSON.stringify(settings[user].subOrder[forEnumId]));
                  }
                } else {
                  if (settings[user].order) {
                    return JSON.parse(JSON.stringify(settings[user].order));
                  }
                }
              }
            }
            return null;
          }
        }, {
          key: "getSettingsCustomURLs",
          value: function getSettingsCustomURLs(obj, forEnumId, options) {
            if (obj && obj.hasOwnProperty("common")) {
              obj = obj.common;
            }
            var settings;
            if (obj && obj.custom) {
              settings = (obj.custom || {})[NAMESPACE];
              var user = options.user || "admin";
              if (settings && settings[user]) {
                if (forEnumId) {
                  if (settings[user].subURLs && settings[user].subURLs[forEnumId]) {
                    return JSON.parse(JSON.stringify(settings[user].subURLs[forEnumId]));
                  }
                } else {
                  if (settings[user].URLs) {
                    return JSON.parse(JSON.stringify(settings[user].URLs));
                  }
                }
              }
            }
            return null;
          }
        }, {
          key: "reorder",
          value: function reorder(list, source, dest) {
            var result = Array.from(list);
            var _result$splice = result.splice(source, 1), _result$splice2 = (0, _slicedToArray2["default"])(_result$splice, 1), removed = _result$splice2[0];
            result.splice(dest, 0, removed);
            return result;
          }
        }, {
          key: "getSettings",
          value: function getSettings(obj, options, defaultEnabling) {
            var settings;
            var id = obj && obj._id || options && options.id;
            if (obj && obj.hasOwnProperty("common")) {
              obj = obj.common;
            }
            if (obj && obj.custom) {
              settings = obj.custom || {};
              settings = settings[NAMESPACE] && settings[NAMESPACE][options.user || "admin"] ? JSON.parse(JSON.stringify(settings[NAMESPACE][options.user || "admin"])) : {
                enabled: true
              };
            } else {
              settings = {
                enabled: defaultEnabling === void 0 ? true : defaultEnabling,
                useCustom: false
              };
            }
            if (!settings.hasOwnProperty("enabled")) {
              settings.enabled = defaultEnabling === void 0 ? true : defaultEnabling;
            }
            if (false) {
              if (obj.color)
                settings.color = obj.color;
              if (obj.icon)
                settings.icon = obj.icon;
              if (obj.name)
                settings.name = obj.name;
            } else {
              if (options) {
                if (!settings.name && options.name)
                  settings.name = options.name;
                if (!settings.icon && options.icon)
                  settings.icon = options.icon;
                if (!settings.color && options.color)
                  settings.color = options.color;
              }
              if (obj) {
                if (!settings.color && obj.color)
                  settings.color = obj.color;
                if (!settings.icon && obj.icon)
                  settings.icon = obj.icon;
                if (!settings.name && obj.name)
                  settings.name = obj.name;
              }
            }
            if ((0, _typeof22["default"])(settings.name) === "object") {
              settings.name = settings.name[options.language] || settings.name.en;
              settings.name = (settings.name || "").toString().replace(/_/g, " ");
              if (settings.name === settings.name.toUpperCase()) {
                settings.name = settings.name[0] + settings.name.substring(1).toLowerCase();
              }
            }
            if (!settings.name && id) {
              var pos = id.lastIndexOf(".");
              settings.name = id.substring(pos + 1).replace(/[_.]/g, " ");
              settings.name = (settings.name || "").toString().replace(/_/g, " ");
              settings.name = Utils3.CapitalWords(settings.name);
            }
            return settings;
          }
        }, {
          key: "setSettings",
          value: function setSettings(obj, settings, options) {
            if (obj) {
              obj.common = obj.common || {};
              obj.common.custom = obj.common.custom || {};
              obj.common.custom[NAMESPACE] = obj.common.custom[NAMESPACE] || {};
              obj.common.custom[NAMESPACE][options.user || "admin"] = settings;
              var s = obj.common.custom[NAMESPACE][options.user || "admin"];
              if (s.useCommon) {
                if (s.color !== void 0) {
                  obj.common.color = s.color;
                  delete s.color;
                }
                if (s.icon !== void 0) {
                  obj.common.icon = s.icon;
                  delete s.icon;
                }
                if (s.name !== void 0) {
                  if ((0, _typeof22["default"])(obj.common.name) !== "object") {
                    obj.common.name = {};
                    obj.common.name[options.language] = s.name;
                  } else {
                    obj.common.name[options.language] = s.name;
                  }
                  delete s.name;
                }
              }
              return true;
            } else {
              return false;
            }
          }
        }, {
          key: "getIcon",
          value: function getIcon(settings, style) {
            if (settings && settings.icon) {
              if (settings.icon.length <= 2) {
                return /* @__PURE__ */ _react["default"].createElement("span", {
                  style: style || {}
                }, settings.icon);
              } else if (settings.icon.startsWith("data:image")) {
                return /* @__PURE__ */ _react["default"].createElement("img", {
                  alt: settings.name,
                  src: settings.icon,
                  style: style || {}
                });
              } else {
                return /* @__PURE__ */ _react["default"].createElement("img", {
                  alt: settings.name,
                  src: (settings.prefix || "") + settings.icon,
                  style: style || {}
                });
              }
            }
            return null;
          }
        }, {
          key: "getObjectIcon",
          value: function getObjectIcon(id, obj) {
            if ((0, _typeof22["default"])(id) === "object") {
              obj = id;
              id = obj._id;
            }
            if (obj && obj.common && obj.common.icon) {
              var icon = obj.common.icon;
              if (typeof icon === "string" && icon.length <= 2) {
                return icon;
              } else if (icon.startsWith("data:image")) {
                return icon;
              } else {
                var parts = id.split(".");
                if (parts[0] === "system") {
                  icon = "adapter/" + parts[2] + (icon.startsWith("/") ? "" : "/") + icon;
                } else {
                  icon = "adapter/" + parts[0] + (icon.startsWith("/") ? "" : "/") + icon;
                }
                if (window.location.pathname.match(/adapter\/[^/]+\/[^/]+\.html/)) {
                  icon = "../../" + icon;
                } else if (window.location.pathname.match(/material\/[.\d]+/)) {
                  icon = "../../" + icon;
                } else if (window.location.pathname.match(/material\//)) {
                  icon = "../" + icon;
                }
                return icon;
              }
            } else {
              return null;
            }
          }
        }, {
          key: "splitCamelCase",
          value: function splitCamelCase(text) {
            if (false) {
              var words = text.split(/\s+/);
              for (var i = 0; i < words.length; i++) {
                var word = words[i];
                if (word.toLowerCase() !== word && word.toUpperCase() !== word) {
                  var z = 0;
                  var ww = [];
                  var start = 0;
                  while (z < word.length) {
                    if (word[z].match(/[A-ZÜÄÖА-Я]/)) {
                      ww.push(word.substring(start, z));
                      start = z;
                    }
                    z++;
                  }
                  if (start !== z) {
                    ww.push(word.substring(start, z));
                  }
                  for (var k = 0; k < ww.length; k++) {
                    words.splice(i + k, 0, ww[k]);
                  }
                  i += ww.length;
                }
              }
              return words.map(function(w) {
                w = w.trim();
                if (w) {
                  return w[0].toUpperCase() + w.substring(1).toLowerCase();
                }
                return "";
              }).join(" ");
            } else {
              return Utils3.CapitalWords(text);
            }
          }
        }, {
          key: "isUseBright",
          value: function isUseBright(color, defaultValue) {
            if (color === null || color === void 0 || color === "") {
              return defaultValue === void 0 ? true : defaultValue;
            }
            color = color.toString();
            if (color.indexOf("#") === 0) {
              color = color.slice(1);
            }
            var r;
            var g;
            var b;
            var rgb = color.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
            if (rgb && rgb.length === 4) {
              r = parseInt(rgb[1], 10);
              g = parseInt(rgb[2], 10);
              b = parseInt(rgb[3], 10);
            } else {
              if (color.length === 3) {
                color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];
              }
              if (color.length !== 6) {
                return false;
              }
              r = parseInt(color.slice(0, 2), 16);
              g = parseInt(color.slice(2, 4), 16);
              b = parseInt(color.slice(4, 6), 16);
            }
            return r * 0.299 + g * 0.587 + b * 0.114 <= 186;
          }
        }, {
          key: "getTimeString",
          value: function getTimeString(seconds) {
            seconds = parseFloat(seconds);
            if (isNaN(seconds)) {
              return "--:--";
            }
            var hours = Math.floor(seconds / 3600);
            var minutes = Math.floor(seconds % 3600 / 60);
            var secs = seconds % 60;
            if (hours) {
              if (minutes < 10)
                minutes = "0" + minutes;
              if (secs < 10)
                secs = "0" + secs;
              return hours + ":" + minutes + ":" + secs;
            } else {
              if (secs < 10)
                secs = "0" + secs;
              return minutes + ":" + secs;
            }
          }
        }, {
          key: "getWindDirection",
          value: function getWindDirection(angle) {
            if (angle >= 0 && angle < 11.25) {
              return "N";
            } else if (angle >= 11.25 && angle < 33.75) {
              return "NNE";
            } else if (angle >= 33.75 && angle < 56.25) {
              return "NE";
            } else if (angle >= 56.25 && angle < 78.75) {
              return "ENE";
            } else if (angle >= 78.75 && angle < 101.25) {
              return "E";
            } else if (angle >= 101.25 && angle < 123.75) {
              return "ESE";
            } else if (angle >= 123.75 && angle < 146.25) {
              return "SE";
            } else if (angle >= 146.25 && angle < 168.75) {
              return "SSE";
            } else if (angle >= 168.75 && angle < 191.25) {
              return "S";
            } else if (angle >= 191.25 && angle < 213.75) {
              return "SSW";
            } else if (angle >= 213.75 && angle < 236.25) {
              return "SW";
            } else if (angle >= 236.25 && angle < 258.75) {
              return "WSW";
            } else if (angle >= 258.75 && angle < 281.25) {
              return "W";
            } else if (angle >= 281.25 && angle < 303.75) {
              return "WNW";
            } else if (angle >= 303.75 && angle < 326.25) {
              return "NW";
            } else if (angle >= 326.25 && angle < 348.75) {
              return "NNW";
            } else if (angle >= 348.75) {
              return "N";
            }
          }
        }, {
          key: "padding",
          value: function padding(num) {
            if (typeof num === "string") {
              if (num.length < 2) {
                return "0" + num;
              } else {
                return num;
              }
            } else if (num < 10) {
              return "0" + num;
            } else {
              return num;
            }
          }
        }, {
          key: "setDataFormat",
          value: function setDataFormat(format) {
            if (format) {
              Utils3.dateFormat = format.toUpperCase().split(/[.-/]/);
              Utils3.dateFormat.splice(Utils3.dateFormat.indexOf("YYYY"), 1);
            }
          }
        }, {
          key: "date2string",
          value: function date2string(now) {
            if (typeof now === "string") {
              now = now.trim();
              if (!now)
                return "";
              if (now.match(/^[\w\s]+$/)) {
                return now;
              }
              var m = now.match(/(\d{1,4})[-./](\d{1,2})[-./](\d{1,4})/);
              if (m) {
                var a = [parseInt(m[1], 10), parseInt(m[2], 10), parseInt(m[3], 10)];
                var year = a.find(function(y) {
                  return y > 31;
                });
                a.splice(a.indexOf(year), 1);
                var day = a.find(function(m2) {
                  return m2 > 12;
                });
                if (day) {
                  a.splice(a.indexOf(day), 1);
                  now = new Date(year, a[0] - 1, day);
                } else {
                  if (Utils3.dateFormat[0][0] === "M" && Utils3.dateFormat[1][0] === "D") {
                    now = new Date(year, a[0] - 1, a[1]);
                    if (Math.abs(now.getTime - Date.now()) > 36e5 * 24 * 10) {
                      now = new Date(year, a[1] - 1, a[0]);
                    }
                  } else if (Utils3.dateFormat[0][0] === "D" && Utils3.dateFormat[1][0] === "M") {
                    now = new Date(year, a[1] - 1, a[0]);
                    if (Math.abs(now.getTime - Date.now()) > 36e5 * 24 * 10) {
                      now = new Date(year, a[0] - 1, a[1]);
                    }
                  } else {
                    now = new Date(now);
                  }
                }
              } else {
                now = new Date(now);
              }
            } else {
              now = new Date(now);
            }
            var date = _i18n["default"].t("ra_dow_" + days[now.getDay()]).replace("ra_dow_", "");
            date += ". " + now.getDate() + " " + _i18n["default"].t("ra_month_" + months[now.getMonth()]).replace("ra_month_", "");
            return date;
          }
        }, {
          key: "renderTextWithA",
          value: function renderTextWithA(text) {
            var m = text.match(/<a [^<]+<\/a>|<br\/?>/);
            if (m) {
              var result = [];
              var key = 1;
              do {
                var p = text.split(m[0]);
                p[0] && result.push(/* @__PURE__ */ _react["default"].createElement("span", {
                  key: "a" + key++
                }, p[0]));
                if (m[0].startsWith("<br")) {
                  result.push(/* @__PURE__ */ _react["default"].createElement("br", {
                    key: "a" + key++
                  }));
                } else {
                  var href = m[0].match(/href="([^"]+)"/) || m[0].match(/href='([^']+)'/);
                  var target = m[0].match(/target="([^"]+)"/) || m[0].match(/target='([^']+)'/);
                  var rel = m[0].match(/rel="([^"]+)"/) || m[0].match(/rel='([^']+)'/);
                  var title = m[0].match(/>([^<]*)</);
                  result.push(/* @__PURE__ */ _react["default"].createElement("a", {
                    key: "a" + key++,
                    href: href ? href[1] : "",
                    target: target ? target[1] : "_blank",
                    rel: rel ? rel[1] : ""
                  }, title ? title[1] : ""));
                }
                text = p[1];
                m = text && text.match(/<a [^<]+<\/a>|<br\/?>/);
                if (!m) {
                  p[1] && result.push(/* @__PURE__ */ _react["default"].createElement("span", {
                    key: "a" + key++
                  }, p[1]));
                }
              } while (m);
              return result;
            } else {
              return text;
            }
          }
        }, {
          key: "getSmartName",
          value: function getSmartName(states, id, instanceId, noCommon) {
            if (!id) {
              if (!noCommon) {
                if (!states.common) {
                  return states.smartName;
                } else {
                  if (states && !states.common) {
                    return states.smartName;
                  } else {
                    return states.common.smartName;
                  }
                }
              } else {
                if (states && !states.common) {
                  return states.smartName;
                } else {
                  return states && states.common && states.common.custom && states.common.custom[instanceId] ? states.common.custom[instanceId].smartName : void 0;
                }
              }
            } else if (!noCommon) {
              return states[id].common.smartName;
            } else {
              return states[id] && states[id].common && states[id].common.custom && states[id].common.custom[instanceId] ? states[id].common.custom[instanceId].smartName || null : null;
            }
          }
        }, {
          key: "getSmartNameFromObj",
          value: function getSmartNameFromObj(obj, instanceId, noCommon) {
            if (!noCommon) {
              if (!obj.common) {
                return obj.smartName;
              } else {
                if (obj && !obj.common) {
                  return obj.smartName;
                } else {
                  return obj.common.smartName;
                }
              }
            } else {
              if (obj && !obj.common) {
                return obj.smartName;
              } else {
                return obj && obj.common && obj.common.custom && obj.common.custom[instanceId] ? obj.common.custom[instanceId].smartName : void 0;
              }
            }
          }
        }, {
          key: "enableSmartName",
          value: function enableSmartName(obj, instanceId, noCommon) {
            if (noCommon) {
              obj.common.custom = obj.common.custom || {};
              obj.common.custom[instanceId] = obj.common.custom[instanceId] || {};
              obj.common.custom[instanceId].smartName = {};
            } else {
              obj.common.smartName = {};
            }
          }
        }, {
          key: "removeSmartName",
          value: function removeSmartName(obj, instanceId, noCommon) {
            if (noCommon) {
              if (obj.common && obj.common.custom && obj.common.custom[instanceId]) {
                obj.common.custom[instanceId] = null;
              }
            } else {
              obj.common.smartName = null;
            }
          }
        }, {
          key: "updateSmartName",
          value: function updateSmartName(obj, newSmartName, byON, smartType, instanceId, noCommon) {
            var language = _i18n["default"].getLanguage();
            if (typeof obj.common.smartName === "string") {
              var nnn = obj.common.smartName;
              obj.common.smartName = {};
              obj.common.smartName[language] = nnn;
            }
            if (obj["native"] && obj["native"].byON) {
              delete obj["native"].byON;
              var _smartName = obj.common.smartName;
              if (!_smartName || (0, _typeof22["default"])(_smartName) !== "object") {
                _smartName = {
                  en: _smartName
                };
                _smartName[language] = _smartName.en;
              }
              obj.common.smartName = _smartName;
            }
            if (smartType !== void 0) {
              if (noCommon) {
                obj.common.custom = obj.common.custom || {};
                obj.common.custom[instanceId] = obj.common.custom[instanceId] || {};
                obj.common.custom[instanceId].smartName = obj.common.custom[instanceId].smartName || {};
                if (!smartType) {
                  delete obj.common.custom[instanceId].smartName.smartType;
                } else {
                  obj.common.custom[instanceId].smartName.smartType = smartType;
                }
              } else {
                obj.common.smartName = obj.common.smartName || {};
                if (!smartType) {
                  delete obj.common.smartName.smartType;
                } else {
                  obj.common.smartName.smartType = smartType;
                }
              }
            }
            if (byON !== void 0) {
              if (noCommon) {
                obj.common.custom = obj.common.custom || {};
                obj.common.custom[instanceId] = obj.common.custom[instanceId] || {};
                obj.common.custom[instanceId].smartName = obj.common.custom[instanceId].smartName || {};
                obj.common.custom[instanceId].smartName.byON = byON;
              } else {
                obj.common.smartName = obj.common.smartName || {};
                obj.common.smartName.byON = byON;
              }
            }
            if (newSmartName !== void 0) {
              var smartName;
              if (noCommon) {
                obj.common.custom = obj.common.custom || {};
                obj.common.custom[instanceId] = obj.common.custom[instanceId] || {};
                obj.common.custom[instanceId].smartName = obj.common.custom[instanceId].smartName || {};
                smartName = obj.common.custom[instanceId].smartName;
              } else {
                obj.common.smartName = obj.common.smartName || {};
                smartName = obj.common.smartName;
              }
              smartName[language] = newSmartName;
              if (smartName && (!smartName[language] || smartName[language] === obj.common.name && (!obj.common.role || obj.common.role.indexOf("button") >= 0))) {
                delete smartName[language];
                var empty = true;
                for (var key in smartName) {
                  if (smartName.hasOwnProperty(key)) {
                    empty = false;
                    break;
                  }
                }
                if (empty) {
                  if (noCommon) {
                    if (obj.common.custom[instanceId].smartName.byON === void 0) {
                      delete obj.common.custom[instanceId];
                    } else {
                      delete obj.common.custom[instanceId].en;
                      delete obj.common.custom[instanceId].de;
                      delete obj.common.custom[instanceId].ru;
                      delete obj.common.custom[instanceId].nl;
                      delete obj.common.custom[instanceId].pl;
                      delete obj.common.custom[instanceId].it;
                      delete obj.common.custom[instanceId].fr;
                      delete obj.common.custom[instanceId].pt;
                      delete obj.common.custom[instanceId].es;
                      delete obj.common.custom[instanceId]["zh-cn"];
                    }
                  } else {
                    if (obj.common.smartName.byON !== void 0) {
                      delete obj.common.smartName.en;
                      delete obj.common.smartName.de;
                      delete obj.common.smartName.ru;
                      delete obj.common.smartName.nl;
                      delete obj.common.smartName.pl;
                      delete obj.common.smartName.it;
                      delete obj.common.smartName.fr;
                      delete obj.common.smartName.pt;
                      delete obj.common.smartName.es;
                      delete obj.common.smartName["zh-cn"];
                    } else {
                      obj.common.smartName = null;
                    }
                  }
                }
              }
            }
          }
        }, {
          key: "disableSmartName",
          value: function disableSmartName(obj, instanceId, noCommon) {
            if (noCommon) {
              obj.common.custom = obj.common.custom || {};
              obj.common.custom[instanceId] = obj.common.custom[instanceId] || {};
              obj.common.custom[instanceId].smartName = false;
            } else {
              obj.common.smartName = false;
            }
          }
        }, {
          key: "copyToClipboard",
          value: function copyToClipboard(text, e) {
            var el = window.document.createElement("textarea");
            el.value = text;
            window.document.body.appendChild(el);
            el.select();
            window.document.execCommand("copy");
            window.document.body.removeChild(el);
            console.log(text);
            e && e.stopPropagation();
            e && e.preventDefault();
          }
        }, {
          key: "getFileExtension",
          value: function getFileExtension(fileName) {
            var pos = (fileName || "").lastIndexOf(".");
            if (pos !== -1) {
              return fileName.substring(pos + 1).toLowerCase();
            } else {
              return null;
            }
          }
        }, {
          key: "formatBytes",
          value: function formatBytes(bytes) {
            if (Math.abs(bytes) < 1024) {
              return bytes + " B";
            }
            var units = ["KB", "MB", "GB"];
            var u = -1;
            do {
              bytes /= 1024;
              ++u;
            } while (Math.abs(bytes) >= 1024 && u < units.length - 1);
            return bytes.toFixed(1) + " " + units[u];
          }
        }, {
          key: "getInvertedColor",
          value: function getInvertedColor(color, themeType, invert) {
            if (!color) {
              return void 0;
            } else {
              var invertedColor = Utils3.invertColor(color, true);
              if (invertedColor === "#FFFFFF" && (themeType === "dark" || invert && themeType === "light")) {
                return "#DDD";
              } else if (invertedColor === "#000000" && (themeType === "light" || invert && themeType === "dark")) {
                return "#222";
              } else {
                return void 0;
              }
            }
          }
        }, {
          key: "invertColor",
          value: function invertColor(hex, bw) {
            if (hex === void 0 || hex === null || hex === "" || typeof hex !== "string") {
              return "";
            }
            if (hex.startsWith("rgba")) {
              var m = hex.match(/rgba?\((\d+),\s*(\d+),\s*(\d+),\s*([.\d]+)\)/);
              if (m) {
                hex = parseInt(m[1], 10).toString(16).padStart(2, "0") + parseInt(m[2], 10).toString(16).padStart(2, "0") + parseInt(m[2], 10).toString(16).padStart(2, "0");
              }
            } else if (hex.startsWith("rgba")) {
              var _m = hex.match(/rgb?\((\d+),\s*(\d+),\s*(\d+)\)/);
              if (_m) {
                hex = parseInt(_m[1], 10).toString(16).padStart(2, "0") + parseInt(_m[2], 10).toString(16).padStart(2, "0") + parseInt(_m[2], 10).toString(16).padStart(2, "0");
              }
            } else if (hex.startsWith("#")) {
              hex = hex.slice(1);
            }
            if (hex.length === 3) {
              hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
            }
            if (hex.length !== 6) {
              console.warn("Cannot invert color: " + hex);
              return hex;
            }
            var r = parseInt(hex.slice(0, 2), 16);
            var g = parseInt(hex.slice(2, 4), 16);
            var b = parseInt(hex.slice(4, 6), 16);
            if (bw) {
              return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? "#000000" : "#FFFFFF";
            }
            r = (255 - r).toString(16);
            g = (255 - g).toString(16);
            b = (255 - b).toString(16);
            return "#" + r.padStart(2, "0") + g.padStart(2, "0") + b.padStart(2, "0");
          }
        }, {
          key: "_toVal",
          value: function _toVal(mix) {
            var k, y, str = "";
            if (typeof mix === "string" || typeof mix === "number") {
              str += mix;
            } else if ((0, _typeof22["default"])(mix) === "object") {
              if (Array.isArray(mix)) {
                for (k = 0; k < mix.length; k++) {
                  if (mix[k]) {
                    if (y = Utils3._toVal(mix[k])) {
                      str && (str += " ");
                      str += y;
                    }
                  }
                }
              } else {
                for (k in mix) {
                  if (mix[k]) {
                    str && (str += " ");
                    str += k;
                  }
                }
              }
            }
            return str;
          }
        }, {
          key: "clsx",
          value: function clsx33() {
            var i = 0;
            var tmp;
            var x;
            var str = "";
            while (i < arguments.length) {
              if (tmp = arguments[i++]) {
                if (x = Utils3._toVal(tmp)) {
                  str && (str += " ");
                  str += x;
                }
              }
            }
            return str;
          }
        }, {
          key: "getThemeName",
          value: function getThemeName() {
            var themeName2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
            if (window.vendorPrefix && window.vendorPrefix !== "@@vendorPrefix@@") {
              return window.vendorPrefix;
            }
            return themeName2 ? themeName2 : window.localStorage && window.localStorage.getItem("App.themeName") ? window.localStorage.getItem("App.themeName") : window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "colored";
          }
        }, {
          key: "getThemeType",
          value: function getThemeType() {
            var themeName2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
            if (window.vendorPrefix && window.vendorPrefix !== "@@vendorPrefix@@") {
              return "light";
            }
            themeName2 = themeName2 || window.localStorage && window.localStorage.getItem("App.themeName");
            return themeName2 === "dark" || themeName2 === "blue" ? "dark" : "light";
          }
        }, {
          key: "setThemeName",
          value: function setThemeName(themeName2) {
            if (window.vendorPrefix && window.vendorPrefix !== "@@vendorPrefix@@") {
              return;
            }
            window.localStorage.setItem("App.themeName", themeName2);
            window.localStorage.setItem("App.theme", themeName2 === "dark" || themeName2 === "blue" ? "dark" : "light");
          }
        }, {
          key: "toggleTheme",
          value: function toggleTheme(themeName2) {
            if (window.vendorPrefix && window.vendorPrefix !== "@@vendorPrefix@@") {
              return window.vendorPrefix;
            }
            themeName2 = themeName2 || window.localStorage && window.localStorage.getItem("App.themeName");
            var themes = Utils3.getThemeNames();
            var pos = themes.indexOf(themeName2);
            var newTheme;
            if (pos !== -1) {
              newTheme = themes[(pos + 1) % themes.length];
            } else {
              newTheme = themes[0];
            }
            Utils3.setThemeName(newTheme);
            return newTheme;
          }
        }, {
          key: "getThemeNames",
          value: function getThemeNames() {
            if (window.vendorPrefix && window.vendorPrefix !== "@@vendorPrefix@@") {
              return [window.vendorPrefix];
            }
            return ["light", "dark", "blue", "colored"];
          }
        }, {
          key: "parseQuery",
          value: function parseQuery(query) {
            query = (query || "").toString().replace(/^\?/, "");
            var result = {};
            query.split("&").forEach(function(part) {
              part = part.trim();
              if (part) {
                var parts = part.split("=");
                var attr = decodeURIComponent(parts[0]).trim();
                if (parts.length > 1) {
                  result[attr] = decodeURIComponent(parts[1]);
                  if (result[attr] === "true") {
                    result[attr] = true;
                  } else if (result[attr] === "false") {
                    result[attr] = false;
                  } else {
                    var f = parseFloat(result[attr]);
                    if (f.toString() === result[attr]) {
                      result[attr] = f;
                    }
                  }
                } else {
                  result[attr] = true;
                }
              }
            });
            return result;
          }
        }, {
          key: "getParentId",
          value: function getParentId(id) {
            var p = (id || "").toString().split(".");
            if (p.length > 1) {
              p.pop();
              return p.join(".");
            } else {
              return null;
            }
          }
        }, {
          key: "formatDate",
          value: function formatDate(dateObj, dateFormat) {
            if (!dateObj) {
              return "";
            }
            var text;
            var mm = dateObj.getMonth() + 1;
            if (mm < 10) {
              mm = "0" + mm;
            }
            var dd = dateObj.getDate();
            if (dd < 10) {
              dd = "0" + dd;
            }
            if (dateFormat === "MM/DD/YYYY") {
              text = mm + "/" + dd + "/" + dateObj.getFullYear();
            } else {
              text = dateObj.getFullYear() + "-" + mm + "-" + dd;
            }
            var v = dateObj.getHours();
            if (v < 10) {
              text += " 0" + v;
            } else {
              text += " " + v;
            }
            v = dateObj.getMinutes();
            if (v < 10) {
              text += ":0" + v;
            } else {
              text += ":" + v;
            }
            v = dateObj.getSeconds();
            if (v < 10) {
              text += ":0" + v;
            } else {
              text += ":" + v;
            }
            v = dateObj.getMilliseconds();
            if (v < 10) {
              text += ".00" + v;
            } else if (v < 100) {
              text += ".0" + v;
            } else {
              text += "." + v;
            }
            return text;
          }
        }, {
          key: "formatTime",
          value: function formatTime(seconds) {
            if (seconds) {
              seconds = Math.round(seconds);
              var d = Math.floor(seconds / (3600 * 24));
              var h = Math.floor(seconds % (3600 * 24) / 3600);
              var m = Math.floor(seconds % 3600 / 60);
              var s = seconds % 60;
              if (d) {
                return "".concat(d, ".").concat(h.toString().padStart(2, "0"), ":").concat(m.toString().padStart(2, "0"), ":").concat(s.toString().padStart(2, "0"));
              } else if (h) {
                return "".concat(h, ":").concat(m.toString().padStart(2, "0"), ":").concat(s.toString().padStart(2, "0"));
              } else {
                return "0:".concat(m.toString().padStart(2, "0"), ":").concat(s.toString().padStart(2, "0"));
              }
            } else {
              return "0:00:00";
            }
          }
        }, {
          key: "MDtext2link",
          value: function MDtext2link(text) {
            var m = text.match(/\d+\.\)\s/);
            if (m) {
              text = text.replace(m[0], m[0].replace(/\s/, "&nbsp;"));
            }
            return text.replace(/[^a-zA-Zа-яА-Я0-9]/g, "").trim().replace(/\s/g, "").toLowerCase();
          }
        }, {
          key: "openLink",
          value: function openLink(url, target) {
            url = url.replace(/\/\/([0-9a-f]*:[0-9a-f]*:[0-9a-f]*:[0-9a-f]*:[0-9a-f]*:[0-9a-f]*)(:\d+)?\//i, "//[$1]$2/");
            if (target === "this") {
              window.location = url;
            } else {
              window.open(url, target || "_blank");
            }
          }
        }, {
          key: "MDgetTitle",
          value: function MDgetTitle(text) {
            var _Utils$extractHeader = Utils3.extractHeader(text), body = _Utils$extractHeader.body, header = _Utils$extractHeader.header;
            if (!header.title) {
              body = body.replace(/{[^}]*}/g, "");
              body = body.trim();
              var lines = body.replace(/\r/g, "").split("\n");
              for (var i = 0; i < lines.length; i++) {
                if (lines[i].startsWith("# ")) {
                  return lines[i].substring(2).trim();
                }
              }
              return "";
            } else {
              return header.title;
            }
          }
        }, {
          key: "MDextractHeader",
          value: function MDextractHeader(text) {
            var attrs = {};
            if (text.substring(0, 3) === "---") {
              var pos = text.substring(3).indexOf("\n---");
              if (pos !== -1) {
                var _header = text.substring(3, pos + 3);
                var lines = _header.replace(/\r/g, "").split("\n");
                lines.forEach(function(line) {
                  if (!line.trim()) {
                    return;
                  }
                  var pos2 = line.indexOf(":");
                  if (pos2 !== -1) {
                    var attr = line.substring(0, pos2).trim();
                    attrs[attr] = line.substring(pos2 + 1).trim();
                    attrs[attr] = attrs[attr].replace(/^['"]|['"]$/g, "");
                    if (attrs[attr] === "true") {
                      attrs[attr] = true;
                    } else if (attrs[attr] === "false") {
                      attrs[attr] = false;
                    } else if (parseFloat(attrs[attr]).toString() === attrs[attr]) {
                      attrs[attr] = parseFloat(attrs[attr]);
                    }
                  } else {
                    attrs[line.trim()] = true;
                  }
                });
                text = text.substring(pos + 7);
              }
            }
            return {
              header: attrs,
              body: text
            };
          }
        }, {
          key: "MDremoveDocsify",
          value: function MDremoveDocsify(text) {
            var m = text.match(/{docsify-[^}]*}/g);
            if (m) {
              m.forEach(function(doc) {
                return text = text.replace(doc, "");
              });
            }
            return text;
          }
        }, {
          key: "generateFile",
          value: function generateFile(filename, json) {
            var el = document.createElement("a");
            el.setAttribute("href", "data:application/json;charset=utf-8," + encodeURIComponent(JSON.stringify(json, null, 2)));
            el.setAttribute("download", filename);
            el.style.display = "none";
            document.body.appendChild(el);
            el.click();
            document.body.removeChild(el);
          }
        }, {
          key: "quality2text",
          value: function quality2text(quality) {
            var custom = quality & 4294901760;
            var text = QUALITY_BITS[quality];
            var result;
            if (text) {
              result = [text];
            } else if (quality & 1) {
              result = [QUALITY_BITS[1], "0x" + (quality & (65535 & ~1)).toString(16)];
            } else if (quality & 2) {
              result = [QUALITY_BITS[2], "0x" + (quality & (65535 & ~2)).toString(16)];
            } else {
              result = ["0x" + quality.toString(16)];
            }
            if (custom) {
              result.push("0x" + (custom >> 16).toString(16).toUpperCase());
            }
            return result;
          }
        }, {
          key: "clone",
          value: function clone(object) {
            return JSON.parse(JSON.stringify(object));
          }
        }, {
          key: "getStates",
          value: function getStates(obj) {
            var _obj$common;
            var states = obj === null || obj === void 0 ? void 0 : (_obj$common = obj.common) === null || _obj$common === void 0 ? void 0 : _obj$common.states;
            if (states) {
              if (typeof states === "string" && states[0] === "{") {
                try {
                  states = JSON.parse(states);
                } catch (ex) {
                  console.error("Cannot parse states: ".concat(states));
                  states = null;
                }
              } else if (typeof states === "string") {
                var parts = states.split(";");
                states = {};
                for (var p = 0; p < parts.length; p++) {
                  var s = parts[p].split(":");
                  states[s[0]] = s[1];
                }
              } else if (Array.isArray(states)) {
                var result = {};
                states.forEach(function(value, key) {
                  return result[key] = value;
                });
                return result;
              }
            }
            return states;
          }
        }, {
          key: "getSvg",
          value: function getSvg(url) {
            return fetch(url).then(function(response) {
              return response.blob();
            }).then(function(blob) {
              return new Promise(function(resolve) {
                var reader = new FileReader();
                reader.onload = function() {
                  resolve(this.result);
                };
                reader.readAsDataURL(blob);
              });
            });
          }
        }]);
        return Utils3;
      }();
      (0, _defineProperty2["default"])(Utils2, "namespace", NAMESPACE);
      (0, _defineProperty2["default"])(Utils2, "INSTANCES", "instances");
      (0, _defineProperty2["default"])(Utils2, "dateFormat", ["DD", "MM"]);
      (0, _defineProperty2["default"])(Utils2, "FORBIDDEN_CHARS", /(?:(?![ !#-&\(\)\+\x2D-:=@-Z\^_a-~\xB5\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BC-\u01BF\u01C4\u01C6\u01C7\u01C9\u01CA\u01CC-\u01F1\u01F3-\u0293\u0295-\u02AF\u0370-\u0373\u0376\u0377\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0560-\u0588\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FD-\u10FF\u13A0-\u13F5\u13F8-\u13FD\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FBB\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCB\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFB\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C7B\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA620-\uA629\uA640-\uA66D\uA680-\uA69B\uA722-\uA76F\uA771-\uA787\uA78B-\uA78E\uA790-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F5\uA7F6\uA7FA\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uABF0-\uABF9\uFB00-\uFB06\uFB13-\uFB17\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A]|\uD801[\uDC00-\uDC4F\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2\uDD30-\uDD39]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDD50-\uDD59]|\uD807[\uDC50-\uDC59\uDD50-\uDD59\uDDA0-\uDDA9]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59]|\uD81B[\uDE40-\uDE7F]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDD00-\uDD43\uDD50-\uDD59]|\uD83E[\uDFF0-\uDFF9])[\s\S])+/g);
      var _default = Utils2;
      exports["default"] = _default;
    }
  });

  // node_modules/@babel/runtime/helpers/getPrototypeOf.js
  var require_getPrototypeOf = __commonJS({
    "node_modules/@babel/runtime/helpers/getPrototypeOf.js"(exports, module) {
      function _getPrototypeOf(o) {
        module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        return _getPrototypeOf(o);
      }
      module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/superPropBase.js
  var require_superPropBase = __commonJS({
    "node_modules/@babel/runtime/helpers/superPropBase.js"(exports, module) {
      var getPrototypeOf = require_getPrototypeOf();
      function _superPropBase(object, property) {
        while (!Object.prototype.hasOwnProperty.call(object, property)) {
          object = getPrototypeOf(object);
          if (object === null)
            break;
        }
        return object;
      }
      module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/get.js
  var require_get = __commonJS({
    "node_modules/@babel/runtime/helpers/get.js"(exports, module) {
      var superPropBase = require_superPropBase();
      function _get() {
        if (typeof Reflect !== "undefined" && Reflect.get) {
          module.exports = _get = Reflect.get.bind(), module.exports.__esModule = true, module.exports["default"] = module.exports;
        } else {
          module.exports = _get = function _get2(target, property, receiver) {
            var base = superPropBase(target, property);
            if (!base)
              return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
              return desc.get.call(arguments.length < 3 ? target : receiver);
            }
            return desc.value;
          }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        }
        return _get.apply(this, arguments);
      }
      module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/inherits.js
  var require_inherits = __commonJS({
    "node_modules/@babel/runtime/helpers/inherits.js"(exports, module) {
      var setPrototypeOf = require_setPrototypeOf();
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        Object.defineProperty(subClass, "prototype", {
          writable: false
        });
        if (superClass)
          setPrototypeOf(subClass, superClass);
      }
      module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
  var require_possibleConstructorReturn = __commonJS({
    "node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"(exports, module) {
      var _typeof3 = require_typeof()["default"];
      var assertThisInitialized = require_assertThisInitialized();
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof3(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return assertThisInitialized(self2);
      }
      module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@iobroker/adapter-react/Connection.js
  var require_Connection = __commonJS({
    "node_modules/@iobroker/adapter-react/Connection.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = exports.PROGRESS = exports.ERRORS = void 0;
      var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var PROGRESS = {
        CONNECTING: 0,
        CONNECTED: 1,
        OBJECTS_LOADED: 2,
        READY: 3
      };
      exports.PROGRESS = PROGRESS;
      var PERMISSION_ERROR = "permissionError";
      var NOT_CONNECTED = "notConnectedError";
      var TIMEOUT_FOR_ADMIN4 = 1300;
      var ERRORS = {
        PERMISSION_ERROR,
        NOT_CONNECTED
      };
      exports.ERRORS = ERRORS;
      function fixAdminUI(obj) {
        if (obj && obj.common && !obj.common.adminUI) {
          if (obj.common.noConfig) {
            obj.common.adminUI = obj.common.adminUI || {};
            obj.common.adminUI.config = "none";
          } else if (obj.common.jsonConfig) {
            obj.common.adminUI = obj.common.adminUI || {};
            obj.common.adminUI.config = "json";
          } else if (obj.common.materialize) {
            obj.common.adminUI = obj.common.adminUI || {};
            obj.common.adminUI.config = "materialize";
          } else {
            obj.common.adminUI = obj.common.adminUI || {};
            obj.common.adminUI.config = "html";
          }
          if (obj.common.jsonCustom) {
            obj.common.adminUI = obj.common.adminUI || {};
            obj.common.adminUI.custom = "json";
          } else if (obj.common.supportCustoms) {
            obj.common.adminUI = obj.common.adminUI || {};
            obj.common.adminUI.custom = "json";
          }
          if (obj.common.materializeTab && obj.common.adminTab) {
            obj.common.adminUI = obj.common.adminUI || {};
            obj.common.adminUI.tab = "materialize";
          } else if (obj.common.adminTab) {
            obj.common.adminUI = obj.common.adminUI || {};
            obj.common.adminUI.tab = "html";
          }
          obj.common.adminUI && console.debug('Please add to "'.concat(obj._id.replace(/\.\d+$/, ""), '" common.adminUI=').concat(JSON.stringify(obj.common.adminUI)));
        }
        return obj;
      }
      var Connection = /* @__PURE__ */ function() {
        function Connection2(props) {
          var _this = this;
          (0, _classCallCheck2["default"])(this, Connection2);
          props = props || {
            protocol: window.location.protocol,
            host: window.location.hostname
          };
          this.props = props;
          this.autoSubscribes = this.props.autoSubscribes || [];
          this.autoSubscribeLog = this.props.autoSubscribeLog;
          this.props.protocol = this.props.protocol || window.location.protocol;
          this.props.host = this.props.host || window.location.hostname;
          this.props.port = this.props.port || (window.location.port === "3000" ? Connection2.isWeb() ? 8082 : 8081 : window.location.port);
          this.props.ioTimeout = Math.max(this.props.ioTimeout || 2e4, 2e4);
          this.props.cmdTimeout = Math.max(this.props.cmdTimeout || 5e3, 5e3);
          this.doNotLoadAllObjects = this.props.doNotLoadAllObjects === void 0 ? true : this.props.doNotLoadAllObjects;
          this.doNotLoadACL = this.props.doNotLoadACL === void 0 ? true : this.props.doNotLoadACL;
          this.states = {};
          this.objects = null;
          this.acl = null;
          this.firstConnect = true;
          this.waitForRestart = false;
          this.systemLang = "en";
          this.connected = false;
          this._waitForFirstConnection = new Promise(function(resolve) {
            _this._waitForFirstConnectionResolve = resolve;
          });
          this.statesSubscribes = {};
          this.objectsSubscribes = {};
          this.onProgress = this.props.onProgress || function() {
          };
          this.onError = this.props.onError || function(err) {
            console.error(err);
          };
          this.loaded = false;
          this.loadTimer = null;
          this.loadCounter = 0;
          this.admin5only = this.props.admin5only || false;
          this.onConnectionHandlers = [];
          this.onLogHandlers = [];
          this._promises = {};
          this.startSocket();
        }
        (0, _createClass2["default"])(Connection2, [{
          key: "startSocket",
          value: function startSocket() {
            var _this2 = this;
            if (typeof window.io === "undefined") {
              if (typeof window.registerSocketOnLoad !== "function") {
                this.scriptLoadCounter = this.scriptLoadCounter || 0;
                this.scriptLoadCounter++;
                if (this.scriptLoadCounter < 30) {
                  setTimeout(function() {
                    return _this2.startSocket();
                  }, 100);
                  return;
                } else {
                  window.alert("Cannot load socket.io.js!");
                }
              } else {
                window.registerSocketOnLoad(function() {
                  return _this2.startSocket();
                });
              }
              return;
            } else {
              if (this._socket) {
                return;
              }
            }
            var host = this.props.host;
            var port = this.props.port;
            var protocol = this.props.protocol.replace(":", "");
            if (window.socketUrl) {
              var parts = window.socketUrl.split(":");
              host = parts[0] || host;
              port = parts[1] || port;
              if (host.includes("://")) {
                parts = host.split("://");
                protocol = parts[0];
                host = parts[1];
              }
            }
            var url = port ? "".concat(protocol, "://").concat(host, ":").concat(port) : "".concat(protocol, "://").concat(host);
            this._socket = window.io.connect(url, {
              query: "ws=true",
              name: this.props.name,
              timeout: this.props.ioTimeout
            });
            this._socket.on("connect", function(noTimeout) {
              if (noTimeout !== true) {
                setTimeout(function() {
                  return _this2.getVersion().then(function(info) {
                    var _info$version$split = info.version.split("."), _info$version$split2 = (0, _slicedToArray2["default"])(_info$version$split, 3), major = _info$version$split2[0], minor = _info$version$split2[1], patch = _info$version$split2[2];
                    var v = parseInt(major, 10) * 1e4 + parseInt(minor, 10) * 100 + parseInt(patch, 10);
                    if (v < 40102) {
                      _this2._authTimer = null;
                      _this2.onPreConnect(false, false);
                    } else {
                      _this2._socket.emit("authenticate", function(isOk, isSecure) {
                        return _this2.onPreConnect(isOk, isSecure);
                      });
                    }
                  });
                }, 500);
              } else {
                _this2._socket.emit("authenticate", function(isOk, isSecure) {
                  return _this2.onPreConnect(isOk, isSecure);
                });
              }
            });
            this._socket.on("reconnect", function() {
              _this2.onProgress(PROGRESS.READY);
              _this2.connected = true;
              if (_this2.waitForRestart) {
                window.location.reload(false);
              } else {
                _this2._subscribe(true);
                _this2.onConnectionHandlers.forEach(function(cb) {
                  return cb(true);
                });
              }
            });
            this._socket.on("disconnect", function() {
              _this2.connected = false;
              _this2.subscribed = false;
              _this2.onProgress(PROGRESS.CONNECTING);
              _this2.onConnectionHandlers.forEach(function(cb) {
                return cb(false);
              });
            });
            this._socket.on("reauthenticate", function() {
              return _this2.authenticate();
            });
            this._socket.on("log", function(message) {
              _this2.props.onLog && _this2.props.onLog(message);
              _this2.onLogHandlers.forEach(function(cb) {
                return cb(message);
              });
            });
            this._socket.on("error", function(err) {
              var _err = err || "";
              if (typeof _err.toString !== "function") {
                _err = JSON.stringify(_err);
                console.error("Received strange error: ".concat(_err));
              }
              _err = _err.toString();
              if (_err.includes("User not authorized")) {
                _this2.authenticate();
              } else {
                window.alert("Socket Error: ".concat(err));
              }
            });
            this._socket.on("connect_error", function(err) {
              return console.error("Connect error: ".concat(err));
            });
            this._socket.on("permissionError", function(err) {
              return _this2.onError({
                message: "no permission",
                operation: err.operation,
                type: err.type,
                id: err.id || ""
              });
            });
            this._socket.on("objectChange", function(id, obj) {
              return setTimeout(function() {
                return _this2.objectChange(id, obj);
              }, 0);
            });
            this._socket.on("stateChange", function(id, state) {
              return setTimeout(function() {
                return _this2.stateChange(id, state);
              }, 0);
            });
            this._socket.on("cmdStdout", function(id, text) {
              return _this2.onCmdStdoutHandler && _this2.onCmdStdoutHandler(id, text);
            });
            this._socket.on("cmdStderr", function(id, text) {
              return _this2.onCmdStderrHandler && _this2.onCmdStderrHandler(id, text);
            });
            this._socket.on("cmdExit", function(id, exitCode) {
              return _this2.onCmdExitHandler && _this2.onCmdExitHandler(id, exitCode);
            });
          }
        }, {
          key: "onPreConnect",
          value: function onPreConnect(isOk, isSecure) {
            var _this3 = this;
            if (this._authTimer) {
              clearTimeout(this._authTimer);
              this._authTimer = null;
            }
            this.connected = true;
            this.isSecure = isSecure;
            if (this.waitForRestart) {
              window.location.reload(false);
            } else {
              if (this.firstConnect) {
                this.loadTimer = setTimeout(function() {
                  _this3.loadTimer = null;
                  _this3.loadCounter++;
                  if (_this3.loadCounter < 10) {
                    _this3.onConnect();
                  }
                }, 1e3);
                if (!this.loaded) {
                  this.onConnect();
                }
              } else {
                this.onProgress(PROGRESS.READY);
              }
              this._subscribe(true);
              this.onConnectionHandlers.forEach(function(cb) {
                return cb(true);
              });
            }
            if (this._waitForFirstConnectionResolve) {
              this._waitForFirstConnectionResolve();
              this._waitForFirstConnectionResolve = null;
            }
          }
        }, {
          key: "isConnected",
          value: function isConnected() {
            return this.connected;
          }
        }, {
          key: "waitForFirstConnection",
          value: function waitForFirstConnection() {
            return this._waitForFirstConnection;
          }
        }, {
          key: "_getUserPermissions",
          value: function _getUserPermissions(cb) {
            if (this.doNotLoadACL) {
              return cb && cb();
            } else {
              this._socket.emit("getUserPermissions", cb);
            }
          }
        }, {
          key: "onConnect",
          value: function onConnect() {
            var _this4 = this;
            this._getUserPermissions(function(err, acl) {
              if (err) {
                return _this4.onError("Cannot read user permissions: " + err);
              } else if (!_this4.doNotLoadACL) {
                if (_this4.loaded) {
                  return;
                }
                _this4.loaded = true;
                clearTimeout(_this4.loadTimer);
                _this4.loadTimer = null;
                _this4.onProgress(PROGRESS.CONNECTED);
                _this4.firstConnect = false;
                _this4.acl = acl;
              }
              return (_this4.admin5only && !window.vendorPrefix ? _this4.getCompactSystemConfig() : _this4.getSystemConfig()).then(function(data) {
                if (_this4.doNotLoadACL) {
                  if (_this4.loaded) {
                    return void 0;
                  }
                  _this4.loaded = true;
                  clearTimeout(_this4.loadTimer);
                  _this4.loadTimer = null;
                  _this4.onProgress(PROGRESS.CONNECTED);
                  _this4.firstConnect = false;
                }
                _this4.systemConfig = data;
                if (_this4.systemConfig && _this4.systemConfig.common) {
                  _this4.systemLang = _this4.systemConfig.common.language;
                } else {
                  _this4.systemLang = window.navigator.userLanguage || window.navigator.language;
                  if (_this4.systemLang !== "en" && _this4.systemLang !== "de" && _this4.systemLang !== "ru") {
                    _this4.systemConfig.common.language = "en";
                    _this4.systemLang = "en";
                  }
                }
                _this4.props.onLanguage && _this4.props.onLanguage(_this4.systemLang);
                if (!_this4.doNotLoadAllObjects) {
                  return _this4.getObjects().then(function() {
                    _this4.onProgress(PROGRESS.READY);
                    _this4.props.onReady && _this4.props.onReady(_this4.objects);
                  });
                } else {
                  _this4.objects = _this4.admin5only ? {} : {
                    "system.config": data
                  };
                  _this4.onProgress(PROGRESS.READY);
                  _this4.props.onReady && _this4.props.onReady(_this4.objects);
                }
                return void 0;
              })["catch"](function(e) {
                return _this4.onError("Cannot read system config: " + e);
              });
            });
          }
        }, {
          key: "authenticate",
          value: function authenticate() {
            if (window.location.search.includes("&href=")) {
              window.location = "".concat(window.location.protocol, "//").concat(window.location.host).concat(window.location.pathname).concat(window.location.search).concat(window.location.hash);
            } else {
              window.location = "".concat(window.location.protocol, "//").concat(window.location.host).concat(window.location.pathname, "?login&href=").concat(window.location.search).concat(window.location.hash);
            }
          }
        }, {
          key: "subscribeState",
          value: function subscribeState(id, binary, cb) {
            if (typeof binary === "function") {
              cb = binary;
              binary = false;
            }
            if (!this.statesSubscribes[id]) {
              var reg = id.replace(/\./g, "\\.").replace(/\*/g, ".*").replace(/\(/g, "\\(").replace(/\)/g, "\\)").replace(/\+/g, "\\+").replace(/\[/g, "\\[");
              if (reg.indexOf("*") === -1) {
                reg += "$";
              }
              this.statesSubscribes[id] = {
                reg: new RegExp(reg),
                cbs: []
              };
              this.statesSubscribes[id].cbs.push(cb);
              if (this.connected) {
                this._socket.emit("subscribe", id);
              }
            } else {
              !this.statesSubscribes[id].cbs.includes(cb) && this.statesSubscribes[id].cbs.push(cb);
            }
            if (typeof cb === "function" && this.connected) {
              if (binary) {
                this.getBinaryState(id).then(function(base64) {
                  return cb(id, base64);
                })["catch"](function(e) {
                  return console.error('Cannot getForeignStates "'.concat(id, '": ').concat(JSON.stringify(e)));
                });
              } else {
                if (Connection2.isWeb()) {
                  this._socket.emit("getStates", id, function(err, states) {
                    err && console.error('Cannot getForeignStates "'.concat(id, '": ').concat(JSON.stringify(err)));
                    states && Object.keys(states).forEach(function(id2) {
                      return cb(id2, states[id2]);
                    });
                  });
                } else {
                  this._socket.emit("getForeignStates", id, function(err, states) {
                    err && console.error('Cannot getForeignStates "'.concat(id, '": ').concat(JSON.stringify(err)));
                    states && Object.keys(states).forEach(function(id2) {
                      return cb(id2, states[id2]);
                    });
                  });
                }
              }
            }
          }
        }, {
          key: "unsubscribeState",
          value: function unsubscribeState(id, cb) {
            if (this.statesSubscribes[id]) {
              if (cb) {
                var pos = this.statesSubscribes[id].cbs.indexOf(cb);
                pos !== -1 && this.statesSubscribes[id].cbs.splice(pos, 1);
              } else {
                this.statesSubscribes[id].cbs = [];
              }
              if (!this.statesSubscribes[id].cbs || !this.statesSubscribes[id].cbs.length) {
                delete this.statesSubscribes[id];
                this.connected && this._socket.emit("unsubscribe", id);
              }
            }
          }
        }, {
          key: "subscribeObject",
          value: function subscribeObject(id, cb) {
            if (!this.objectsSubscribes[id]) {
              var reg = id.replace(/\./g, "\\.").replace(/\*/g, ".*");
              if (!reg.includes("*")) {
                reg += "$";
              }
              this.objectsSubscribes[id] = {
                reg: new RegExp(reg),
                cbs: []
              };
              this.objectsSubscribes[id].cbs.push(cb);
              this.connected && this._socket.emit("subscribeObjects", id);
            } else {
              !this.objectsSubscribes[id].cbs.includes(cb) && this.objectsSubscribes[id].cbs.push(cb);
            }
            return Promise.resolve();
          }
        }, {
          key: "unsubscribeObject",
          value: function unsubscribeObject(id, cb) {
            if (this.objectsSubscribes[id]) {
              if (cb) {
                var pos = this.objectsSubscribes[id].cbs.indexOf(cb);
                pos !== -1 && this.objectsSubscribes[id].cbs.splice(pos, 1);
              } else {
                this.objectsSubscribes[id].cbs = [];
              }
              if (this.connected && (!this.objectsSubscribes[id].cbs || !this.objectsSubscribes[id].cbs.length)) {
                delete this.objectsSubscribes[id];
                this.connected && this._socket.emit("unsubscribeObjects", id);
              }
            }
            return Promise.resolve();
          }
        }, {
          key: "objectChange",
          value: function objectChange(id, obj) {
            var _this5 = this;
            if (!this.objects) {
              return;
            }
            var oldObj;
            var changed = false;
            if (obj) {
              if (obj._rev && this.objects[id]) {
                this.objects[id]._rev = obj._rev;
              }
              if (this.objects[id]) {
                oldObj = {
                  _id: id,
                  type: this.objects[id].type
                };
              }
              if (!this.objects[id] || JSON.stringify(this.objects[id]) !== JSON.stringify(obj)) {
                this.objects[id] = obj;
                changed = true;
              }
            } else if (this.objects[id]) {
              oldObj = {
                _id: id,
                type: this.objects[id].type
              };
              delete this.objects[id];
              changed = true;
            }
            Object.keys(this.objectsSubscribes).forEach(function(_id) {
              if (_id === id || _this5.objectsSubscribes[_id].reg.test(id)) {
                _this5.objectsSubscribes[_id].cbs.forEach(function(cb) {
                  return cb(id, obj, oldObj);
                });
              }
            });
            if (changed && this.props.onObjectChange) {
              this.props.onObjectChange(id, obj);
            }
          }
        }, {
          key: "stateChange",
          value: function stateChange(id, state) {
            for (var task in this.statesSubscribes) {
              if (this.statesSubscribes.hasOwnProperty(task) && this.statesSubscribes[task].reg.test(id)) {
                this.statesSubscribes[task].cbs.forEach(function(cb) {
                  return cb(id, state);
                });
              }
            }
          }
        }, {
          key: "getStates",
          value: function getStates(disableProgressUpdate) {
            var _this6 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this6._socket.emit("getStates", function(err, res) {
                _this6.states = res;
                !disableProgressUpdate && _this6.onProgress(PROGRESS.STATES_LOADED);
                return err ? reject(err) : resolve(_this6.states);
              });
            });
          }
        }, {
          key: "getState",
          value: function getState(id) {
            var _this7 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this7._socket.emit("getState", id, function(err, state) {
                return err ? reject(err) : resolve(state);
              });
            });
          }
        }, {
          key: "getBinaryState",
          value: function getBinaryState(id) {
            var _this8 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this8._socket.emit("getBinaryState", id, function(err, state) {
                return err ? reject(err) : resolve(state);
              });
            });
          }
        }, {
          key: "setBinaryState",
          value: function setBinaryState(id, base64) {
            var _this9 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this9._socket.emit("setBinaryState", id, base64, function(err) {
                return err ? reject(err) : resolve();
              });
            });
          }
        }, {
          key: "setState",
          value: function setState(id, val) {
            var _this10 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this10._socket.emit("setState", id, val, function(err) {
                return err ? reject(err) : resolve();
              });
            });
          }
        }, {
          key: "getObjects",
          value: function getObjects(update, disableProgressUpdate) {
            var _this11 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            } else {
              return new Promise(function(resolve, reject) {
                if (!update && _this11.objects) {
                  return resolve(_this11.objects);
                }
                _this11._socket.emit(Connection2.isWeb() ? "getObjects" : "getAllObjects", function(err, res) {
                  _this11.objects = res;
                  disableProgressUpdate && _this11.onProgress(PROGRESS.OBJECTS_LOADED);
                  err ? reject(err) : resolve(_this11.objects);
                });
              });
            }
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(isEnable) {
            var _this12 = this;
            if (isEnable && !this.subscribed) {
              this.subscribed = true;
              this.autoSubscribes.forEach(function(id) {
                return _this12._socket.emit("subscribeObjects", id);
              });
              Object.keys(this.objectsSubscribes).forEach(function(id) {
                return _this12._socket.emit("subscribeObjects", id);
              });
              this.autoSubscribeLog && this._socket.emit("requireLog", true);
              Object.keys(this.statesSubscribes).forEach(function(id) {
                return _this12._socket.emit("subscribe", id);
              });
            } else if (!isEnable && this.subscribed) {
              this.subscribed = false;
              this.autoSubscribes.forEach(function(id) {
                return _this12._socket.emit("unsubscribeObjects", id);
              });
              Object.keys(this.objectsSubscribes).forEach(function(id) {
                return _this12._socket.emit("unsubscribeObjects", id);
              });
              this.autoSubscribeLog && this._socket.emit("requireLog", false);
              Object.keys(this.statesSubscribes).forEach(function(id) {
                return _this12._socket.emit("unsubscribe", id);
              });
            }
          }
        }, {
          key: "requireLog",
          value: function requireLog(isEnabled) {
            var _this13 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this13._socket.emit("requireLog", isEnabled, function(err) {
                return err ? reject(err) : resolve();
              });
            });
          }
        }, {
          key: "delObject",
          value: function delObject(id, maintenance) {
            var _this14 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this14._socket.emit("delObject", id, {
                maintenance: !!maintenance
              }, function(err) {
                return err ? reject(err) : resolve();
              });
            });
          }
        }, {
          key: "delObjects",
          value: function delObjects(id, maintenance) {
            var _this15 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this15._socket.emit("delObjects", id, {
                maintenance: !!maintenance
              }, function(err) {
                return err ? reject(err) : resolve();
              });
            });
          }
        }, {
          key: "setObject",
          value: function setObject(id, obj) {
            var _this16 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            if (!obj) {
              return Promise.reject("Null object is not allowed");
            }
            obj = JSON.parse(JSON.stringify(obj));
            if (obj.hasOwnProperty("from")) {
              delete obj.from;
            }
            if (obj.hasOwnProperty("user")) {
              delete obj.user;
            }
            if (obj.hasOwnProperty("ts")) {
              delete obj.ts;
            }
            return new Promise(function(resolve, reject) {
              return _this16._socket.emit("setObject", id, obj, function(err) {
                return err ? reject(err) : resolve();
              });
            });
          }
        }, {
          key: "getObject",
          value: function getObject(id) {
            var _this17 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this17._socket.emit("getObject", id, function(err, obj) {
                return err ? reject(err) : resolve(obj);
              });
            });
          }
        }, {
          key: "getAdapterInstances",
          value: function getAdapterInstances(adapter, update) {
            var _this18 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (typeof adapter === "boolean") {
              update = adapter;
              adapter = "";
            }
            adapter = adapter || "";
            if (!update && this._promises["instances_" + adapter]) {
              return this._promises["instances_" + adapter];
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises["instances_" + adapter] = new Promise(function(resolve, reject) {
              var timeout = setTimeout(function() {
                timeout = null;
                _this18.getObjectView("system.adapter.".concat(adapter, "."), "system.adapter.".concat(adapter, ".\u9999"), "instance").then(function(items) {
                  return resolve(Object.keys(items).map(function(id) {
                    return fixAdminUI(items[id]);
                  }));
                })["catch"](function(e) {
                  return reject(e);
                });
              }, TIMEOUT_FOR_ADMIN4);
              _this18._socket.emit("getAdapterInstances", adapter, function(err, instances) {
                if (timeout) {
                  clearTimeout(timeout);
                  timeout = null;
                  return err ? reject(err) : resolve(instances);
                }
              });
            });
            return this._promises["instances_" + adapter];
          }
        }, {
          key: "getAdapters",
          value: function getAdapters(adapter, update) {
            var _this19 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (typeof adapter === "boolean") {
              update = adapter;
              adapter = "";
            }
            adapter = adapter || "";
            if (!update && this._promises["adapter_" + adapter]) {
              return this._promises["adapter_" + adapter];
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises["adapter_" + adapter] = new Promise(function(resolve, reject) {
              var timeout = setTimeout(function() {
                timeout = null;
                _this19.getObjectView("system.adapter.".concat(adapter, "."), "system.adapter.".concat(adapter, ".\u9999"), "adapter").then(function(items) {
                  return resolve(Object.keys(items).map(function(id) {
                    return fixAdminUI(items[id]);
                  }));
                })["catch"](function(e) {
                  return reject(e);
                });
              }, TIMEOUT_FOR_ADMIN4);
              _this19._socket.emit("getAdapters", adapter, function(err, adapters) {
                if (timeout) {
                  clearTimeout(timeout);
                  timeout = null;
                  return err ? reject(err) : resolve(adapters);
                }
              });
            });
            return this._promises["adapter_" + adapter];
          }
        }, {
          key: "_renameGroups",
          value: function _renameGroups(objs, cb) {
            var _this20 = this;
            if (!objs || !objs.length) {
              cb && cb();
            } else {
              var obj = objs.pop();
              var oldId = obj._id;
              obj._id = obj.newId;
              delete obj.newId;
              this.setObject(obj._id, obj).then(function() {
                return _this20.delObject(oldId);
              }).then(function() {
                return setTimeout(function() {
                  return _this20._renameGroups(objs, cb);
                }, 0);
              })["catch"](function(err) {
                return cb && cb(err);
              });
            }
          }
        }, {
          key: "renameGroup",
          value: function renameGroup(id, newId, newName) {
            var _this21 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            return this.getGroups(true).then(function(groups) {
              if (groups.length) {
                var groupsToRename = groups.filter(function(group) {
                  return group._id.startsWith(id + ".");
                });
                groupsToRename.forEach(function(group) {
                  return group.newId = newId + group._id.substring(id.length);
                });
                return new Promise(function(resolve, reject) {
                  return _this21._renameGroups(groupsToRename, function(err) {
                    return err ? reject(err) : resolve();
                  });
                }).then(function() {
                  var obj = groups.find(function(group) {
                    return group._id === id;
                  });
                  if (obj) {
                    obj._id = newId;
                    if (newName !== void 0) {
                      obj.common = obj.common || {};
                      obj.common.name = newName;
                    }
                    return _this21.setObject(obj._id, obj).then(function() {
                      return _this21.delObject(id);
                    });
                  }
                });
              }
            });
          }
        }, {
          key: "sendTo",
          value: function sendTo(instance, command, data) {
            var _this22 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve) {
              return _this22._socket.emit("sendTo", instance, command, data, function(result) {
                return resolve(result);
              });
            });
          }
        }, {
          key: "extendObject",
          value: function extendObject(id, obj) {
            var _this23 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            obj = JSON.parse(JSON.stringify(obj));
            if (obj.hasOwnProperty("from")) {
              delete obj.from;
            }
            if (obj.hasOwnProperty("user")) {
              delete obj.user;
            }
            if (obj.hasOwnProperty("ts")) {
              delete obj.ts;
            }
            return new Promise(function(resolve, reject) {
              return _this23._socket.emit("extendObject", id, obj, function(err) {
                return err ? reject(err) : resolve();
              });
            });
          }
        }, {
          key: "registerLogHandler",
          value: function registerLogHandler(handler) {
            !this.onLogHandlers.includes(handler) && this.onLogHandlers.push(handler);
          }
        }, {
          key: "unregisterLogHandler",
          value: function unregisterLogHandler(handler) {
            var pos = this.onLogHandlers.indexOf(handler);
            pos !== -1 && this.onLogHandlers.splice(pos, 1);
          }
        }, {
          key: "registerConnectionHandler",
          value: function registerConnectionHandler(handler) {
            !this.onConnectionHandlers.includes(handler) && this.onConnectionHandlers.push(handler);
          }
        }, {
          key: "unregisterConnectionHandler",
          value: function unregisterConnectionHandler(handler) {
            var pos = this.onConnectionHandlers.indexOf(handler);
            pos !== -1 && this.onConnectionHandlers.splice(pos, 1);
          }
        }, {
          key: "registerCmdStdoutHandler",
          value: function registerCmdStdoutHandler(handler) {
            this.onCmdStdoutHandler = handler;
          }
        }, {
          key: "unregisterCmdStdoutHandler",
          value: function unregisterCmdStdoutHandler(handler) {
            this.onCmdStdoutHandler = null;
          }
        }, {
          key: "registerCmdStderrHandler",
          value: function registerCmdStderrHandler(handler) {
            this.onCmdStderrHandler = handler;
          }
        }, {
          key: "unregisterCmdStderrHandler",
          value: function unregisterCmdStderrHandler(handler) {
            this.onCmdStderrHandler = null;
          }
        }, {
          key: "registerCmdExitHandler",
          value: function registerCmdExitHandler(handler) {
            this.onCmdExitHandler = handler;
          }
        }, {
          key: "unregisterCmdExitHandler",
          value: function unregisterCmdExitHandler(handler) {
            this.onCmdExitHandler = null;
          }
        }, {
          key: "getEnums",
          value: function getEnums(_enum, update) {
            var _this24 = this;
            if (!update && this._promises["enums_" + (_enum || "all")]) {
              return this._promises["enums_" + (_enum || "all")];
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises["enums_" + (_enum || "all")] = new Promise(function(resolve, reject) {
              _this24._socket.emit("getObjectView", "system", "enum", {
                startkey: "enum." + (_enum || ""),
                endkey: "enum." + (_enum ? _enum + "." : "") + "\u9999"
              }, function(err, res) {
                if (!err && res) {
                  var _res = {};
                  for (var i = 0; i < res.rows.length; i++) {
                    if (_enum && res.rows[i].id === "enum." + _enum) {
                      continue;
                    }
                    _res[res.rows[i].id] = res.rows[i].value;
                  }
                  resolve(_res);
                } else {
                  reject(err);
                }
              });
            });
            return this._promises["enums_" + (_enum || "all")];
          }
        }, {
          key: "getObjectView",
          value: function getObjectView(start, end, type) {
            var _this25 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            start = start || "";
            end = end || "\u9999";
            return new Promise(function(resolve, reject) {
              _this25._socket.emit("getObjectView", "system", type, {
                startkey: start,
                endkey: end
              }, function(err, res) {
                if (!err) {
                  var _res = {};
                  if (res && res.rows) {
                    for (var i = 0; i < res.rows.length; i++) {
                      _res[res.rows[i].id] = res.rows[i].value;
                    }
                  }
                  resolve(_res);
                } else {
                  reject(err);
                }
              });
            });
          }
        }, {
          key: "getCertificates",
          value: function getCertificates(update) {
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (this._promises.cert && !update) {
              return this._promises.cert;
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises.cert = this.getObject("system.certificates").then(function(res) {
              var certs = [];
              if (res && res["native"] && res["native"].certificates) {
                Object.keys(res["native"].certificates).forEach(function(c) {
                  var cert = res["native"].certificates[c];
                  if (!cert) {
                    return;
                  }
                  var _cert = {
                    name: c,
                    type: ""
                  };
                  if (cert.length < 700 && (cert.indexOf("/") !== -1 || cert.indexOf("\\") !== -1)) {
                    if (c.toLowerCase().includes("private")) {
                      _cert.type = "private";
                    } else if (cert.toLowerCase().includes("private")) {
                      _cert.type = "private";
                    } else if (c.toLowerCase().includes("public")) {
                      _cert.type = "public";
                    } else if (cert.toLowerCase().includes("public")) {
                      _cert.type = "public";
                    }
                    certs.push(_cert);
                  } else {
                    _cert.type = cert.substring(0, "-----BEGIN RSA PRIVATE KEY".length) === "-----BEGIN RSA PRIVATE KEY" || cert.substring(0, "-----BEGIN PRIVATE KEY".length) === "-----BEGIN PRIVATE KEY" ? "private" : "public";
                    if (_cert.type === "public") {
                      var m = cert.split("-----END CERTIFICATE-----");
                      if (m.filter(function(t) {
                        return t.replace(/\r\n|\r|\n/, "").trim();
                      }).length > 1) {
                        _cert.type = "chained";
                      }
                    }
                    certs.push(_cert);
                  }
                });
              }
              return certs;
            });
            return this._promises.cert;
          }
        }, {
          key: "getLogs",
          value: function getLogs(host, linesNumber) {
            var _this26 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve) {
              return _this26._socket.emit("sendToHost", host, "getLogs", linesNumber || 200, function(lines) {
                return resolve(lines);
              });
            });
          }
        }, {
          key: "getLogsFiles",
          value: function getLogsFiles(host) {
            var _this27 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this27._socket.emit("readLogs", host, function(err, files) {
                return err ? reject(err) : resolve(files);
              });
            });
          }
        }, {
          key: "delLogs",
          value: function delLogs(host) {
            var _this28 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this28._socket.emit("sendToHost", host, "delLogs", null, function(error) {
                return error ? reject(error) : resolve();
              });
            });
          }
        }, {
          key: "readMetaItems",
          value: function readMetaItems() {
            var _this29 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this29._socket.emit("getObjectView", "system", "meta", {
                startkey: "",
                endkey: "\u9999"
              }, function(err, objs) {
                return err ? reject(err) : resolve(objs.rows && objs.rows.map(function(obj) {
                  return obj.value;
                }));
              });
            });
          }
        }, {
          key: "readDir",
          value: function readDir(adapter, fileName) {
            var _this30 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this30._socket.emit("readDir", adapter, fileName, function(err, files) {
                return err ? reject(err) : resolve(files);
              });
            });
          }
        }, {
          key: "readFile",
          value: function readFile(adapter, fileName, base64) {
            var _this31 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              if (!base64) {
                _this31._socket.emit("readFile", adapter, fileName, function(err, data, type) {
                  err ? reject(err) : resolve(data, type);
                });
              } else {
                _this31._socket.emit("readFile64", adapter, fileName, base64, function(err, data) {
                  return err ? reject(err) : resolve(data);
                });
              }
            });
          }
        }, {
          key: "writeFile64",
          value: function writeFile64(adapter, fileName, data) {
            var _this32 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              if (typeof data === "string") {
                _this32._socket.emit("writeFile", adapter, fileName, data, function(err) {
                  return err ? reject(err) : resolve();
                });
              } else {
                var base64 = btoa(new Uint8Array(data).reduce(function(data2, _byte) {
                  return data2 + String.fromCharCode(_byte);
                }, ""));
                _this32._socket.emit("writeFile64", adapter, fileName, base64, function(err) {
                  return err ? reject(err) : resolve();
                });
              }
            });
          }
        }, {
          key: "rename",
          value: function rename(adapter, oldName, newName) {
            var _this33 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this33._socket.emit("rename", adapter, oldName, newName, function(err) {
                return err ? reject(err) : resolve();
              });
            });
          }
        }, {
          key: "deleteFile",
          value: function deleteFile(adapter, fileName) {
            var _this34 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this34._socket.emit("unlink", adapter, fileName, function(err) {
                return err ? reject(err) : resolve();
              });
            });
          }
        }, {
          key: "deleteFolder",
          value: function deleteFolder(adapter, folderName) {
            var _this35 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this35._socket.emit("deleteFolder", adapter, folderName, function(err) {
                return err ? reject(err) : resolve();
              });
            });
          }
        }, {
          key: "getHosts",
          value: function getHosts(update) {
            var _this36 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!update && this._promises.hosts) {
              return this._promises.hosts;
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises.hosts = new Promise(function(resolve, reject) {
              return _this36._socket.emit("getObjectView", "system", "host", {
                startkey: "system.host.",
                endkey: "system.host.\u9999"
              }, function(err, doc) {
                if (err) {
                  reject(err);
                } else {
                  resolve(doc.rows.map(function(item) {
                    return item.value;
                  }));
                }
              });
            });
            return this._promises.hosts;
          }
        }, {
          key: "getUsers",
          value: function getUsers(update) {
            var _this37 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!update && this._promises.users) {
              return this._promises.users;
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises.users = new Promise(function(resolve, reject) {
              return _this37._socket.emit("getObjectView", "system", "user", {
                startkey: "system.user.",
                endkey: "system.user.\u9999"
              }, function(err, doc) {
                if (err) {
                  reject(err);
                } else {
                  resolve(doc.rows.map(function(item) {
                    return item.value;
                  }));
                }
              });
            });
            return this._promises.users;
          }
        }, {
          key: "getGroups",
          value: function getGroups(update) {
            var _this38 = this;
            if (!update && this._promises.groups) {
              return this._promises.groups;
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises.groups = new Promise(function(resolve, reject) {
              return _this38._socket.emit("getObjectView", "system", "group", {
                startkey: "system.group.",
                endkey: "system.group.\u9999"
              }, function(err, doc) {
                if (err) {
                  reject(err);
                } else {
                  resolve(doc.rows.map(function(item) {
                    return item.value;
                  }));
                }
              });
            });
            return this._promises.groups;
          }
        }, {
          key: "getHostInfo",
          value: function getHostInfo(host, update, timeoutMs) {
            var _this39 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!host.startsWith("system.host.")) {
              host += "system.host." + host;
            }
            if (!update && this._promises["hostInfo" + host]) {
              return this._promises["hostInfo" + host];
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises["hostInfo" + host] = new Promise(function(resolve, reject) {
              var timeout = setTimeout(function() {
                if (timeout) {
                  timeout = null;
                  reject("getHostInfo timeout");
                }
              }, timeoutMs || _this39.props.cmdTimeout);
              _this39._socket.emit("sendToHost", host, "getHostInfo", null, function(data) {
                if (timeout) {
                  clearTimeout(timeout);
                  timeout = null;
                  if (data === PERMISSION_ERROR) {
                    reject('May not read "getHostInfo"');
                  } else if (!data) {
                    reject('Cannot read "getHostInfo"');
                  } else {
                    resolve(data);
                  }
                }
              });
            });
            return this._promises["hostInfo" + host];
          }
        }, {
          key: "getHostInfoShort",
          value: function getHostInfoShort(host, update, timeoutMs) {
            var _this40 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!host.startsWith("system.host.")) {
              host += "system.host." + host;
            }
            if (!update && this._promises["hostInfoShort" + host]) {
              return this._promises["hostInfoShort" + host];
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises["hostInfoShort" + host] = new Promise(function(resolve, reject) {
              var timeout = setTimeout(function() {
                if (timeout) {
                  timeout = null;
                  reject("hostInfoShort timeout");
                }
              }, timeoutMs || _this40.props.cmdTimeout);
              _this40._socket.emit("sendToHost", host, "getHostInfoShort", null, function(data) {
                if (timeout) {
                  clearTimeout(timeout);
                  timeout = null;
                  if (data === PERMISSION_ERROR) {
                    reject('May not read "getHostInfoShort"');
                  } else if (!data) {
                    reject('Cannot read "getHostInfoShort"');
                  } else {
                    resolve(data);
                  }
                }
              });
            });
            return this._promises["hostInfoShort" + host];
          }
        }, {
          key: "getRepository",
          value: function getRepository(host, args, update, timeoutMs) {
            var _this41 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!update && this._promises.repo) {
              return this._promises.repo;
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            if (!host.startsWith("system.host.")) {
              host += "system.host." + host;
            }
            this._promises.repo = new Promise(function(resolve, reject) {
              var timeout = setTimeout(function() {
                if (timeout) {
                  timeout = null;
                  reject("getRepository timeout");
                }
              }, timeoutMs || _this41.props.cmdTimeout);
              _this41._socket.emit("sendToHost", host, "getRepository", args, function(data) {
                if (timeout) {
                  clearTimeout(timeout);
                  timeout = null;
                  if (data === PERMISSION_ERROR) {
                    reject('May not read "getRepository"');
                  } else if (!data) {
                    reject('Cannot read "getRepository"');
                  } else {
                    resolve(data);
                  }
                }
              });
            });
            return this._promises.repo;
          }
        }, {
          key: "getInstalled",
          value: function getInstalled(host, update, cmdTimeout) {
            var _this42 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            this._promises.installed = this._promises.installed || {};
            if (!update && this._promises.installed[host]) {
              return this._promises.installed[host];
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            if (!host.startsWith("system.host.")) {
              host += "system.host." + host;
            }
            this._promises.installed[host] = new Promise(function(resolve, reject) {
              var timeout = setTimeout(function() {
                if (timeout) {
                  timeout = null;
                  reject("getInstalled timeout");
                }
              }, cmdTimeout || _this42.props.cmdTimeout);
              _this42._socket.emit("sendToHost", host, "getInstalled", null, function(data) {
                if (timeout) {
                  clearTimeout(timeout);
                  timeout = null;
                  if (data === PERMISSION_ERROR) {
                    reject('May not read "getInstalled"');
                  } else if (!data) {
                    reject('Cannot read "getInstalled"');
                  } else {
                    resolve(data);
                  }
                }
              });
            });
            return this._promises.installed[host];
          }
        }, {
          key: "cmdExec",
          value: function cmdExec(host, cmd, cmdId, cmdTimeout) {
            var _this43 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            if (!host.startsWith(host)) {
              host += "system.host." + host;
            }
            return new Promise(function(resolve, reject) {
              var timeout = cmdTimeout && setTimeout(function() {
                if (timeout) {
                  timeout = null;
                  reject("cmdExec timeout");
                }
              }, cmdTimeout);
              _this43._socket.emit("cmdExec", host, cmdId, cmd, null, function(err) {
                if (!cmdTimeout || timeout) {
                  timeout && clearTimeout(timeout);
                  timeout = null;
                  if (err) {
                    reject(err);
                  } else {
                    resolve();
                  }
                }
              });
            });
          }
        }, {
          key: "checkFeatureSupported",
          value: function checkFeatureSupported(feature, update) {
            var _this44 = this;
            if (!update && this._promises["supportedFeatures_" + feature]) {
              return this._promises["supportedFeatures_" + feature];
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises["supportedFeatures_" + feature] = new Promise(function(resolve, reject) {
              return _this44._socket.emit("checkFeatureSupported", feature, function(err, features) {
                err ? reject(err) : resolve(features);
              });
            });
            return this._promises["supportedFeatures_" + feature];
          }
        }, {
          key: "readBaseSettings",
          value: function readBaseSettings(host) {
            var _this45 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            return this.checkFeatureSupported("CONTROLLER_READWRITE_BASE_SETTINGS").then(function(result) {
              if (result) {
                if (!_this45.connected) {
                  return Promise.reject(NOT_CONNECTED);
                }
                return new Promise(function(resolve, reject) {
                  var timeout = setTimeout(function() {
                    if (timeout) {
                      timeout = null;
                      reject("readBaseSettings timeout");
                    }
                  }, _this45.props.cmdTimeout);
                  if (host.startsWith("system.host.")) {
                    host = host.replace(/^system\.host\./, "");
                  }
                  _this45._socket.emit("sendToHost", host, "readBaseSettings", null, function(data) {
                    if (timeout) {
                      clearTimeout(timeout);
                      timeout = null;
                      if (data === PERMISSION_ERROR) {
                        reject('May not read "BaseSettings"');
                      } else if (!data) {
                        reject('Cannot read "BaseSettings"');
                      } else {
                        resolve(data);
                      }
                    }
                  });
                });
              } else {
                return Promise.reject("Not supported");
              }
            });
          }
        }, {
          key: "writeBaseSettings",
          value: function writeBaseSettings(host, config) {
            var _this46 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            return this.checkFeatureSupported("CONTROLLER_READWRITE_BASE_SETTINGS").then(function(result) {
              if (result) {
                if (!_this46.connected) {
                  return Promise.reject(NOT_CONNECTED);
                }
                return new Promise(function(resolve, reject) {
                  var timeout = setTimeout(function() {
                    if (timeout) {
                      timeout = null;
                      reject("writeBaseSettings timeout");
                    }
                  }, _this46.props.cmdTimeout);
                  _this46._socket.emit("sendToHost", host, "writeBaseSettings", config, function(data) {
                    if (timeout) {
                      clearTimeout(timeout);
                      timeout = null;
                      if (data === PERMISSION_ERROR) {
                        reject('May not write "BaseSettings"');
                      } else if (!data) {
                        reject('Cannot write "BaseSettings"');
                      } else {
                        resolve(data);
                      }
                    }
                  });
                });
              } else {
                return Promise.reject("Not supported");
              }
            });
          }
        }, {
          key: "restartController",
          value: function restartController(host) {
            var _this47 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            return new Promise(function(resolve, reject) {
              _this47._socket.emit("sendToHost", host, "restartController", null, function(error) {
                error ? reject(error) : resolve(true);
              });
            });
          }
        }, {
          key: "getDiagData",
          value: function getDiagData(host, typeOfDiag) {
            var _this48 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            return new Promise(function(resolve) {
              _this48._socket.emit("sendToHost", host, "getDiagData", typeOfDiag, function(result) {
                return resolve(result);
              });
            });
          }
        }, {
          key: "getForeignStates",
          value: function getForeignStates(pattern) {
            var _this49 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            if (Connection2.isWeb()) {
              return new Promise(function(resolve, reject) {
                return _this49._socket.emit("getStates", pattern || "*", function(err, states) {
                  return err ? reject(err) : resolve(states);
                });
              });
            } else {
              return new Promise(function(resolve, reject) {
                return _this49._socket.emit("getForeignStates", pattern || "*", function(err, states) {
                  return err ? reject(err) : resolve(states);
                });
              });
            }
          }
        }, {
          key: "getForeignObjects",
          value: function getForeignObjects(pattern, type) {
            var _this50 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this50._socket.emit("getForeignObjects", pattern || "*", type, function(err, states) {
                return err ? reject(err) : resolve(states);
              });
            });
          }
        }, {
          key: "getSystemConfig",
          value: function getSystemConfig(update) {
            if (!update && this._promises.systemConfig) {
              return this._promises.systemConfig;
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises.systemConfig = this.getObject("system.config").then(function(systemConfig) {
              systemConfig = systemConfig || {};
              systemConfig.common = systemConfig.common || {};
              systemConfig["native"] = systemConfig["native"] || {};
              return systemConfig;
            });
            return this._promises.systemConfig;
          }
        }, {
          key: "setSystemConfig",
          value: function setSystemConfig(obj) {
            var _this51 = this;
            return this.setObject("system.config", obj).then(function() {
              return _this51._promises.systemConfig = Promise.resolve(obj);
            });
          }
        }, {
          key: "getRawSocket",
          value: function getRawSocket() {
            return this._socket;
          }
        }, {
          key: "getHistory",
          value: function getHistory(id, options) {
            var _this52 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this52._socket.emit("getHistory", id, options, function(err, values) {
                return err ? reject(err) : resolve(values);
              });
            });
          }
        }, {
          key: "getHistoryEx",
          value: function getHistoryEx(id, options) {
            var _this53 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this53._socket.emit("getHistory", id, options, function(err, values, stepIgnore, sessionId) {
                return err ? reject(err) : resolve({
                  values,
                  sessionId,
                  stepIgnore
                });
              });
            });
          }
        }, {
          key: "changePassword",
          value: function changePassword(user, password) {
            var _this54 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            return new Promise(function(resolve, reject) {
              return _this54._socket.emit("changePassword", user, password, function(err) {
                return err ? reject(err) : resolve();
              });
            });
          }
        }, {
          key: "getIpAddresses",
          value: function getIpAddresses(host, update) {
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!host.startsWith("system.host.")) {
              host = "system.host." + host;
            }
            if (!update && this._promises["IPs_" + host]) {
              return this._promises["IPs_" + host];
            }
            this._promises["IPs_" + host] = this.getObject(host).then(function(obj) {
              return obj && obj.common ? obj.common.address || [] : [];
            });
            return this._promises["IPs_" + host];
          }
        }, {
          key: "getHostByIp",
          value: function getHostByIp(ipOrHostName, update) {
            var _this55 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (ipOrHostName.startsWith("system.host.")) {
              ipOrHostName = ipOrHostName.replace(/^system\.host\./, "");
            }
            if (!update && this._promises["rIPs_" + ipOrHostName]) {
              return this._promises["rIPs_" + ipOrHostName];
            }
            this._promises["rIPs_" + ipOrHostName] = new Promise(function(resolve) {
              return _this55._socket.emit("getHostByIp", ipOrHostName, function(ip, host) {
                var _host$native, _host$native$hardware;
                var IPs4 = [{
                  name: "[IPv4] 0.0.0.0 - Listen on all IPs",
                  address: "0.0.0.0",
                  family: "ipv4"
                }];
                var IPs6 = [{
                  name: "[IPv6] :: - Listen on all IPs",
                  address: "::",
                  family: "ipv6"
                }];
                if ((_host$native = host["native"]) !== null && _host$native !== void 0 && (_host$native$hardware = _host$native.hardware) !== null && _host$native$hardware !== void 0 && _host$native$hardware.networkInterfaces) {
                  for (var eth in host["native"].hardware.networkInterfaces) {
                    if (!host["native"].hardware.networkInterfaces.hasOwnProperty(eth)) {
                      continue;
                    }
                    for (var num = 0; num < host["native"].hardware.networkInterfaces[eth].length; num++) {
                      if (host["native"].hardware.networkInterfaces[eth][num].family !== "IPv6") {
                        IPs4.push({
                          name: "[".concat(host["native"].hardware.networkInterfaces[eth][num].family, "] ").concat(host["native"].hardware.networkInterfaces[eth][num].address, " - ").concat(eth),
                          address: host["native"].hardware.networkInterfaces[eth][num].address,
                          family: "ipv4"
                        });
                      } else {
                        IPs6.push({
                          name: "[".concat(host["native"].hardware.networkInterfaces[eth][num].family, "] ").concat(host["native"].hardware.networkInterfaces[eth][num].address, " - ").concat(eth),
                          address: host["native"].hardware.networkInterfaces[eth][num].address,
                          family: "ipv6"
                        });
                      }
                    }
                  }
                }
                for (var i = 0; i < IPs6.length; i++) {
                  IPs4.push(IPs6[i]);
                }
                resolve(IPs4);
              });
            });
            return this._promises["rIPs_" + ipOrHostName];
          }
        }, {
          key: "encrypt",
          value: function encrypt(text) {
            var _this56 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            return new Promise(function(resolve, reject) {
              return _this56._socket.emit("encrypt", text, function(err, text2) {
                return err ? reject(err) : resolve(text2);
              });
            });
          }
        }, {
          key: "decrypt",
          value: function decrypt(encryptedText) {
            var _this57 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            return new Promise(function(resolve, reject) {
              return _this57._socket.emit("decrypt", encryptedText, function(err, text) {
                return err ? reject(err) : resolve(text);
              });
            });
          }
        }, {
          key: "getVersion",
          value: function getVersion() {
            var _this58 = this;
            this._promises.version = this._promises.version || new Promise(function(resolve, reject) {
              return _this58._socket.emit("getVersion", function(err, version, serverName) {
                if (err && !version && typeof err === "string" && err.match(/\d+\.\d+\.\d+/)) {
                  resolve({
                    version: err,
                    serverName: "socketio"
                  });
                } else {
                  return err ? reject(err) : resolve({
                    version,
                    serverName
                  });
                }
              });
            });
            return this._promises.version;
          }
        }, {
          key: "getWebServerName",
          value: function getWebServerName() {
            var _this59 = this;
            this._promises.webName = this._promises.webName || new Promise(function(resolve, reject) {
              return _this59._socket.emit("getAdapterName", function(err, name) {
                return err ? reject(err) : resolve(name);
              });
            });
            return this._promises.webName;
          }
        }, {
          key: "getAdminVersion",
          value: function getAdminVersion() {
            console.log("Deprecated: use getVersion");
            return this.getVersion();
          }
        }, {
          key: "chmodFile",
          value: function chmodFile(adapter, filename, options) {
            var _this60 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this60._socket.emit("chmodFile", adapter, filename, options, function(err, entries, id) {
                return err ? reject(err) : resolve({
                  entries,
                  id
                });
              });
            });
          }
        }, {
          key: "chownFile",
          value: function chownFile(adapter, filename, options) {
            var _this61 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this61._socket.emit("chownFile", adapter, filename, options, function(err, entries, id) {
                return err ? reject(err) : resolve({
                  entries,
                  id
                });
              });
            });
          }
        }, {
          key: "fileExists",
          value: function fileExists(adapter, filename) {
            var _this62 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this62._socket.emit("fileExists", adapter, filename, function(err, exists) {
                return err ? reject(err) : resolve(exists);
              });
            });
          }
        }, {
          key: "getNotifications",
          value: function getNotifications(host, category) {
            var _this63 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve) {
              return _this63._socket.emit("sendToHost", host, "getNotifications", {
                category
              }, function(notifications) {
                return resolve(notifications);
              });
            });
          }
        }, {
          key: "clearNotifications",
          value: function clearNotifications(host, category) {
            var _this64 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve) {
              return _this64._socket.emit("sendToHost", host, "clearNotifications", {
                category
              }, function(notifications) {
                return resolve(notifications);
              });
            });
          }
        }, {
          key: "getIsEasyModeStrict",
          value: function getIsEasyModeStrict() {
            var _this65 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this65._socket.emit("getIsEasyModeStrict", function(error, isStrict) {
                return error ? reject(error) : resolve(isStrict);
              });
            });
          }
        }, {
          key: "getEasyMode",
          value: function getEasyMode() {
            var _this66 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this66._socket.emit("getEasyMode", function(error, config) {
                return error ? reject(error) : resolve(config);
              });
            });
          }
        }, {
          key: "getCurrentUser",
          value: function getCurrentUser() {
            var _this67 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve) {
              return _this67._socket.emit("authEnabled", function(isSecure, user) {
                return resolve(user);
              });
            });
          }
        }, {
          key: "getCurrentSession",
          value: function getCurrentSession(cmdTimeout) {
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              var controller = new AbortController();
              var timeout = setTimeout(function() {
                if (timeout) {
                  timeout = null;
                  controller.abort();
                  reject("getCurrentSession timeout");
                }
              }, cmdTimeout || 5e3);
              return fetch("./session", {
                signal: controller.signal
              }).then(function(res) {
                return res.json();
              }).then(function(json) {
                if (timeout) {
                  clearTimeout(timeout);
                  timeout = null;
                  resolve(json);
                }
              })["catch"](function(e) {
                reject("getCurrentSession: " + e);
              });
            });
          }
        }, {
          key: "getRatings",
          value: function getRatings(update) {
            var _this68 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this68._socket.emit("getRatings", update, function(err, ratings) {
                return err ? reject(err) : resolve(ratings);
              });
            });
          }
        }, {
          key: "getCurrentInstance",
          value: function getCurrentInstance() {
            var _this69 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises.currentInstance = this._promises.currentInstance || new Promise(function(resolve, reject) {
              return _this69._socket.emit("getCurrentInstance", function(err, namespace) {
                return err ? reject(err) : resolve(namespace);
              });
            });
            return this._promises.currentInstance;
          }
        }, {
          key: "getCompactAdapters",
          value: function getCompactAdapters(update) {
            var _this70 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!update && this._promises.compactAdapters) {
              return this._promises.compactAdapters;
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises.compactAdapters = new Promise(function(resolve, reject) {
              return _this70._socket.emit("getCompactAdapters", function(err, adapters) {
                return err ? reject(err) : resolve(adapters);
              });
            });
            return this._promises.compactAdapters;
          }
        }, {
          key: "getCompactInstances",
          value: function getCompactInstances(update) {
            var _this71 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!update && this._promises.compactInstances) {
              return this._promises.compactInstances;
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises.compactInstances = new Promise(function(resolve, reject) {
              return _this71._socket.emit("getCompactInstances", function(err, instances) {
                return err ? reject(err) : resolve(instances);
              });
            });
            return this._promises.compactInstances;
          }
        }, {
          key: "getCompactInstalled",
          value: function getCompactInstalled(host, update, cmdTimeout) {
            var _this72 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            this._promises.installedCompact = this._promises.installedCompact || {};
            if (!update && this._promises.installedCompact[host]) {
              return this._promises.installedCompact[host];
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            if (!host.startsWith("system.host.")) {
              host += "system.host." + host;
            }
            this._promises.installedCompact[host] = new Promise(function(resolve, reject) {
              var timeout = setTimeout(function() {
                if (timeout) {
                  timeout = null;
                  reject("getCompactInstalled timeout");
                }
              }, cmdTimeout || _this72.props.cmdTimeout);
              _this72._socket.emit("getCompactInstalled", host, function(data) {
                if (timeout) {
                  clearTimeout(timeout);
                  timeout = null;
                  if (data === PERMISSION_ERROR) {
                    reject('May not read "getCompactInstalled"');
                  } else if (!data) {
                    reject('Cannot read "getCompactInstalled"');
                  } else {
                    resolve(data);
                  }
                }
              });
            });
            return this._promises.installedCompact[host];
          }
        }, {
          key: "getCompactSystemConfig",
          value: function getCompactSystemConfig(update) {
            var _this73 = this;
            if (!update && this._promises.systemConfigCommon) {
              return this._promises.systemConfigCommon;
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises.systemConfigCommon = new Promise(function(resolve, reject) {
              return _this73._socket.emit("getCompactSystemConfig", function(err, systemConfig) {
                return err ? reject(err) : resolve(systemConfig);
              });
            });
            return this._promises.systemConfigCommon;
          }
        }, {
          key: "getCompactRepository",
          value: function getCompactRepository(host, update, timeoutMs) {
            var _this74 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!update && this._promises.repoCompact) {
              return this._promises.repoCompact;
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            if (!host.startsWith("system.host.")) {
              host += "system.host." + host;
            }
            this._promises.repoCompact = new Promise(function(resolve, reject) {
              var timeout = setTimeout(function() {
                if (timeout) {
                  timeout = null;
                  reject("getCompactRepository timeout");
                }
              }, timeoutMs || _this74.props.cmdTimeout);
              _this74._socket.emit("getCompactRepository", host, function(data) {
                if (timeout) {
                  clearTimeout(timeout);
                  timeout = null;
                  if (data === PERMISSION_ERROR) {
                    reject('May not read "getCompactRepository"');
                  } else if (!data) {
                    reject('Cannot read "getCompactRepository"');
                  } else {
                    resolve(data);
                  }
                }
              });
            });
            return this._promises.repoCompact;
          }
        }, {
          key: "getCompactHosts",
          value: function getCompactHosts(update) {
            var _this75 = this;
            if (Connection2.isWeb()) {
              return Promise.reject("Allowed only in admin");
            }
            if (!update && this._promises.hostsCompact) {
              return this._promises.hostsCompact;
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises.hostsCompact = new Promise(function(resolve, reject) {
              return _this75._socket.emit("getCompactHosts", function(err, hosts) {
                return err ? reject(err) : resolve(hosts);
              });
            });
            return this._promises.hostsCompact;
          }
        }, {
          key: "getUuid",
          value: function getUuid() {
            if (this._promises.uuid) {
              return this._promises.uuid;
            }
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            this._promises.uuid = this.getObject("system.meta.uuid").then(function(obj) {
              var _obj$native;
              return obj === null || obj === void 0 ? void 0 : (_obj$native = obj["native"]) === null || _obj$native === void 0 ? void 0 : _obj$native.uuid;
            });
            return this._promises.uuid;
          }
        }, {
          key: "logout",
          value: function logout() {
            var _this76 = this;
            if (!this.connected) {
              return Promise.reject(NOT_CONNECTED);
            }
            return new Promise(function(resolve, reject) {
              return _this76._socket.emit("logout", function(err) {
                return err ? reject(err) : resolve(null);
              });
            });
          }
        }], [{
          key: "isWeb",
          value: function isWeb() {
            return window.adapterName === "material" || window.adapterName === "vis" || window.socketUrl !== void 0;
          }
        }]);
        return Connection2;
      }();
      Connection.Connection = {
        onLog: _propTypes["default"].func,
        onReady: _propTypes["default"].func,
        onProgress: _propTypes["default"].func
      };
      var _default = Connection;
      exports["default"] = _default;
    }
  });

  // node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "node_modules/tslib/tslib.js"(exports, module) {
      var __extends;
      var __assign;
      var __rest;
      var __decorate;
      var __param;
      var __metadata;
      var __awaiter;
      var __generator;
      var __exportStar;
      var __values;
      var __read;
      var __spread;
      var __spreadArrays;
      var __await;
      var __asyncGenerator;
      var __asyncDelegator;
      var __asyncValues;
      var __makeTemplateObject;
      var __importStar;
      var __importDefault;
      var __classPrivateFieldGet;
      var __classPrivateFieldSet;
      var __createBinding;
      (function(factory) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root, createExporter(module.exports)));
        } else {
          factory(createExporter(root));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v) {
            return exports2[id] = previous ? previous(id, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b)
            if (b.hasOwnProperty(p))
              d[p] = b[p];
        };
        __extends = function(d, b) {
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        __rest = function(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
            }
          return t;
        };
        __decorate = function(decorators, target, key, desc) {
          var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator = function(thisArg, body) {
          var _ = { label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __createBinding = function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __exportStar = function(m, exports2) {
          for (var p in m)
            if (p !== "default" && !exports2.hasOwnProperty(p))
              exports2[p] = m[p];
        };
        __values = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
          return ar;
        };
        __spreadArrays = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };
        __await = function(v) {
          return this instanceof __await ? (this.v = v, this) : new __await(v);
        };
        __asyncGenerator = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        __importStar = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (Object.hasOwnProperty.call(mod, k))
                result[k] = mod[k];
          }
          result["default"] = mod;
          return result;
        };
        __importDefault = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet = function(receiver, privateMap) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
          }
          return privateMap.get(receiver);
        };
        __classPrivateFieldSet = function(receiver, privateMap, value) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
          }
          privateMap.set(receiver, value);
          return value;
        };
        exporter("__extends", __extends);
        exporter("__assign", __assign);
        exporter("__rest", __rest);
        exporter("__decorate", __decorate);
        exporter("__param", __param);
        exporter("__metadata", __metadata);
        exporter("__awaiter", __awaiter);
        exporter("__generator", __generator);
        exporter("__exportStar", __exportStar);
        exporter("__createBinding", __createBinding);
        exporter("__values", __values);
        exporter("__read", __read);
        exporter("__spread", __spread);
        exporter("__spreadArrays", __spreadArrays);
        exporter("__await", __await);
        exporter("__asyncGenerator", __asyncGenerator);
        exporter("__asyncDelegator", __asyncDelegator);
        exporter("__asyncValues", __asyncValues);
        exporter("__makeTemplateObject", __makeTemplateObject);
        exporter("__importStar", __importStar);
        exporter("__importDefault", __importDefault);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      });
    }
  });

  // node_modules/@sentry/types/dist/severity.js
  var require_severity = __commonJS({
    "node_modules/@sentry/types/dist/severity.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var Severity;
      (function(Severity2) {
        Severity2["Fatal"] = "fatal";
        Severity2["Error"] = "error";
        Severity2["Warning"] = "warning";
        Severity2["Log"] = "log";
        Severity2["Info"] = "info";
        Severity2["Debug"] = "debug";
        Severity2["Critical"] = "critical";
      })(Severity = exports.Severity || (exports.Severity = {}));
      exports.SeverityLevels = ["fatal", "error", "warning", "log", "info", "debug", "critical"];
    }
  });

  // node_modules/@sentry/types/dist/index.js
  var require_dist2 = __commonJS({
    "node_modules/@sentry/types/dist/index.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var severity_1 = require_severity();
      exports.Severity = severity_1.Severity;
      var severity_2 = require_severity();
      exports.SeverityLevels = severity_2.SeverityLevels;
    }
  });

  // node_modules/@sentry/utils/dist/async.js
  var require_async = __commonJS({
    "node_modules/@sentry/utils/dist/async.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      function forget(promise) {
        void promise.then(null, function(e) {
          console.error(e);
        });
      }
      exports.forget = forget;
    }
  });

  // node_modules/@sentry/utils/dist/env.js
  var require_env = __commonJS({
    "node_modules/@sentry/utils/dist/env.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      function isBrowserBundle() {
        return typeof __SENTRY_BROWSER_BUNDLE__ !== "undefined" && !!__SENTRY_BROWSER_BUNDLE__;
      }
      exports.isBrowserBundle = isBrowserBundle;
    }
  });

  // node_modules/@sentry/utils/dist/node.js
  var require_node = __commonJS({
    "node_modules/@sentry/utils/dist/node.js"(exports, module) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var env_1 = require_env();
      function isNodeEnv() {
        return !env_1.isBrowserBundle() && Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]";
      }
      exports.isNodeEnv = isNodeEnv;
      function dynamicRequire(mod, request) {
        return mod.require(request);
      }
      exports.dynamicRequire = dynamicRequire;
      function loadModule(moduleName) {
        var mod;
        try {
          mod = dynamicRequire(module, moduleName);
        } catch (e) {
        }
        try {
          var cwd = dynamicRequire(module, "process").cwd;
          mod = dynamicRequire(module, cwd() + "/node_modules/" + moduleName);
        } catch (e) {
        }
        return mod;
      }
      exports.loadModule = loadModule;
    }
  });

  // node_modules/@sentry/utils/dist/global.js
  var require_global = __commonJS({
    "node_modules/@sentry/utils/dist/global.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var node_1 = require_node();
      var fallbackGlobalObject = {};
      function getGlobalObject() {
        return node_1.isNodeEnv() ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : fallbackGlobalObject;
      }
      exports.getGlobalObject = getGlobalObject;
      function getGlobalSingleton(name, creator, obj) {
        var global2 = obj || getGlobalObject();
        var __SENTRY__ = global2.__SENTRY__ = global2.__SENTRY__ || {};
        var singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());
        return singleton;
      }
      exports.getGlobalSingleton = getGlobalSingleton;
    }
  });

  // node_modules/@sentry/utils/dist/is.js
  var require_is = __commonJS({
    "node_modules/@sentry/utils/dist/is.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var objectToString = Object.prototype.toString;
      function isError(wat) {
        switch (objectToString.call(wat)) {
          case "[object Error]":
          case "[object Exception]":
          case "[object DOMException]":
            return true;
          default:
            return isInstanceOf(wat, Error);
        }
      }
      exports.isError = isError;
      function isBuiltin(wat, ty) {
        return objectToString.call(wat) === "[object " + ty + "]";
      }
      function isErrorEvent(wat) {
        return isBuiltin(wat, "ErrorEvent");
      }
      exports.isErrorEvent = isErrorEvent;
      function isDOMError(wat) {
        return isBuiltin(wat, "DOMError");
      }
      exports.isDOMError = isDOMError;
      function isDOMException(wat) {
        return isBuiltin(wat, "DOMException");
      }
      exports.isDOMException = isDOMException;
      function isString(wat) {
        return isBuiltin(wat, "String");
      }
      exports.isString = isString;
      function isPrimitive(wat) {
        return wat === null || typeof wat !== "object" && typeof wat !== "function";
      }
      exports.isPrimitive = isPrimitive;
      function isPlainObject(wat) {
        return isBuiltin(wat, "Object");
      }
      exports.isPlainObject = isPlainObject;
      function isEvent(wat) {
        return typeof Event !== "undefined" && isInstanceOf(wat, Event);
      }
      exports.isEvent = isEvent;
      function isElement(wat) {
        return typeof Element !== "undefined" && isInstanceOf(wat, Element);
      }
      exports.isElement = isElement;
      function isRegExp(wat) {
        return isBuiltin(wat, "RegExp");
      }
      exports.isRegExp = isRegExp;
      function isThenable(wat) {
        return Boolean(wat && wat.then && typeof wat.then === "function");
      }
      exports.isThenable = isThenable;
      function isSyntheticEvent(wat) {
        return isPlainObject(wat) && "nativeEvent" in wat && "preventDefault" in wat && "stopPropagation" in wat;
      }
      exports.isSyntheticEvent = isSyntheticEvent;
      function isNaN2(wat) {
        return typeof wat === "number" && wat !== wat;
      }
      exports.isNaN = isNaN2;
      function isInstanceOf(wat, base) {
        try {
          return wat instanceof base;
        } catch (_e) {
          return false;
        }
      }
      exports.isInstanceOf = isInstanceOf;
    }
  });

  // node_modules/@sentry/utils/dist/browser.js
  var require_browser = __commonJS({
    "node_modules/@sentry/utils/dist/browser.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var global_1 = require_global();
      var is_1 = require_is();
      function htmlTreeAsString(elem, keyAttrs) {
        try {
          var currentElem = elem;
          var MAX_TRAVERSE_HEIGHT = 5;
          var MAX_OUTPUT_LEN = 80;
          var out = [];
          var height = 0;
          var len = 0;
          var separator = " > ";
          var sepLength = separator.length;
          var nextStr = void 0;
          while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {
            nextStr = _htmlElementAsString(currentElem, keyAttrs);
            if (nextStr === "html" || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {
              break;
            }
            out.push(nextStr);
            len += nextStr.length;
            currentElem = currentElem.parentNode;
          }
          return out.reverse().join(separator);
        } catch (_oO) {
          return "<unknown>";
        }
      }
      exports.htmlTreeAsString = htmlTreeAsString;
      function _htmlElementAsString(el, keyAttrs) {
        var elem = el;
        var out = [];
        var className;
        var classes;
        var key;
        var attr;
        var i;
        if (!elem || !elem.tagName) {
          return "";
        }
        out.push(elem.tagName.toLowerCase());
        var keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter(function(keyAttr) {
          return elem.getAttribute(keyAttr);
        }).map(function(keyAttr) {
          return [keyAttr, elem.getAttribute(keyAttr)];
        }) : null;
        if (keyAttrPairs && keyAttrPairs.length) {
          keyAttrPairs.forEach(function(keyAttrPair) {
            out.push("[" + keyAttrPair[0] + '="' + keyAttrPair[1] + '"]');
          });
        } else {
          if (elem.id) {
            out.push("#" + elem.id);
          }
          className = elem.className;
          if (className && is_1.isString(className)) {
            classes = className.split(/\s+/);
            for (i = 0; i < classes.length; i++) {
              out.push("." + classes[i]);
            }
          }
        }
        var allowedAttrs = ["type", "name", "title", "alt"];
        for (i = 0; i < allowedAttrs.length; i++) {
          key = allowedAttrs[i];
          attr = elem.getAttribute(key);
          if (attr) {
            out.push("[" + key + '="' + attr + '"]');
          }
        }
        return out.join("");
      }
      function getLocationHref() {
        var global2 = global_1.getGlobalObject();
        try {
          return global2.document.location.href;
        } catch (oO) {
          return "";
        }
      }
      exports.getLocationHref = getLocationHref;
    }
  });

  // node_modules/@sentry/utils/dist/polyfill.js
  var require_polyfill = __commonJS({
    "node_modules/@sentry/utils/dist/polyfill.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.setPrototypeOf = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);
      function setProtoOf(obj, proto) {
        obj.__proto__ = proto;
        return obj;
      }
      function mixinProperties(obj, proto) {
        for (var prop in proto) {
          if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
            obj[prop] = proto[prop];
          }
        }
        return obj;
      }
    }
  });

  // node_modules/@sentry/utils/dist/error.js
  var require_error = __commonJS({
    "node_modules/@sentry/utils/dist/error.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var polyfill_1 = require_polyfill();
      var SentryError = function(_super) {
        tslib_1.__extends(SentryError2, _super);
        function SentryError2(message) {
          var _newTarget = this.constructor;
          var _this = _super.call(this, message) || this;
          _this.message = message;
          _this.name = _newTarget.prototype.constructor.name;
          polyfill_1.setPrototypeOf(_this, _newTarget.prototype);
          return _this;
        }
        return SentryError2;
      }(Error);
      exports.SentryError = SentryError;
    }
  });

  // node_modules/@sentry/utils/dist/flags.js
  var require_flags = __commonJS({
    "node_modules/@sentry/utils/dist/flags.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === "undefined" ? true : __SENTRY_DEBUG__;
    }
  });

  // node_modules/@sentry/utils/dist/dsn.js
  var require_dsn = __commonJS({
    "node_modules/@sentry/utils/dist/dsn.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var error_1 = require_error();
      var flags_1 = require_flags();
      var DSN_REGEX = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w.-]+)(?::(\d+))?\/(.+)/;
      function isValidProtocol(protocol) {
        return protocol === "http" || protocol === "https";
      }
      function dsnToString(dsn, withPassword) {
        if (withPassword === void 0) {
          withPassword = false;
        }
        var host = dsn.host, path = dsn.path, pass = dsn.pass, port = dsn.port, projectId = dsn.projectId, protocol = dsn.protocol, publicKey = dsn.publicKey;
        return protocol + "://" + publicKey + (withPassword && pass ? ":" + pass : "") + ("@" + host + (port ? ":" + port : "") + "/" + (path ? path + "/" : path) + projectId);
      }
      exports.dsnToString = dsnToString;
      function dsnFromString(str) {
        var match = DSN_REGEX.exec(str);
        if (!match) {
          throw new error_1.SentryError("Invalid Sentry Dsn: " + str);
        }
        var _a = tslib_1.__read(match.slice(1), 6), protocol = _a[0], publicKey = _a[1], _b = _a[2], pass = _b === void 0 ? "" : _b, host = _a[3], _c = _a[4], port = _c === void 0 ? "" : _c, lastPath = _a[5];
        var path = "";
        var projectId = lastPath;
        var split = projectId.split("/");
        if (split.length > 1) {
          path = split.slice(0, -1).join("/");
          projectId = split.pop();
        }
        if (projectId) {
          var projectMatch = projectId.match(/^\d+/);
          if (projectMatch) {
            projectId = projectMatch[0];
          }
        }
        return dsnFromComponents({ host, pass, path, projectId, port, protocol, publicKey });
      }
      function dsnFromComponents(components) {
        if ("user" in components && !("publicKey" in components)) {
          components.publicKey = components.user;
        }
        return {
          user: components.publicKey || "",
          protocol: components.protocol,
          publicKey: components.publicKey || "",
          pass: components.pass || "",
          host: components.host,
          port: components.port || "",
          path: components.path || "",
          projectId: components.projectId
        };
      }
      function validateDsn(dsn) {
        if (!flags_1.IS_DEBUG_BUILD) {
          return;
        }
        var port = dsn.port, projectId = dsn.projectId, protocol = dsn.protocol;
        var requiredComponents = ["protocol", "publicKey", "host", "projectId"];
        requiredComponents.forEach(function(component) {
          if (!dsn[component]) {
            throw new error_1.SentryError("Invalid Sentry Dsn: " + component + " missing");
          }
        });
        if (!projectId.match(/^\d+$/)) {
          throw new error_1.SentryError("Invalid Sentry Dsn: Invalid projectId " + projectId);
        }
        if (!isValidProtocol(protocol)) {
          throw new error_1.SentryError("Invalid Sentry Dsn: Invalid protocol " + protocol);
        }
        if (port && isNaN(parseInt(port, 10))) {
          throw new error_1.SentryError("Invalid Sentry Dsn: Invalid port " + port);
        }
        return true;
      }
      function makeDsn(from) {
        var components = typeof from === "string" ? dsnFromString(from) : dsnFromComponents(from);
        validateDsn(components);
        return components;
      }
      exports.makeDsn = makeDsn;
    }
  });

  // node_modules/@sentry/utils/dist/enums.js
  var require_enums = __commonJS({
    "node_modules/@sentry/utils/dist/enums.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeverityLevels = ["fatal", "error", "warning", "log", "info", "debug", "critical"];
    }
  });

  // node_modules/@sentry/utils/dist/logger.js
  var require_logger = __commonJS({
    "node_modules/@sentry/utils/dist/logger.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var flags_1 = require_flags();
      var global_1 = require_global();
      var global2 = global_1.getGlobalObject();
      var PREFIX = "Sentry Logger ";
      exports.CONSOLE_LEVELS = ["debug", "info", "warn", "error", "log", "assert"];
      function consoleSandbox(callback) {
        var global3 = global_1.getGlobalObject();
        if (!("console" in global3)) {
          return callback();
        }
        var originalConsole = global3.console;
        var wrappedLevels = {};
        exports.CONSOLE_LEVELS.forEach(function(level) {
          var originalWrappedFunc = originalConsole[level] && originalConsole[level].__sentry_original__;
          if (level in global3.console && originalWrappedFunc) {
            wrappedLevels[level] = originalConsole[level];
            originalConsole[level] = originalWrappedFunc;
          }
        });
        try {
          return callback();
        } finally {
          Object.keys(wrappedLevels).forEach(function(level) {
            originalConsole[level] = wrappedLevels[level];
          });
        }
      }
      exports.consoleSandbox = consoleSandbox;
      function makeLogger() {
        var enabled = false;
        var logger2 = {
          enable: function() {
            enabled = true;
          },
          disable: function() {
            enabled = false;
          }
        };
        if (flags_1.IS_DEBUG_BUILD) {
          exports.CONSOLE_LEVELS.forEach(function(name) {
            logger2[name] = function() {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              if (enabled) {
                consoleSandbox(function() {
                  var _a;
                  (_a = global2.console)[name].apply(_a, tslib_1.__spread([PREFIX + "[" + name + "]:"], args));
                });
              }
            };
          });
        } else {
          exports.CONSOLE_LEVELS.forEach(function(name) {
            logger2[name] = function() {
              return void 0;
            };
          });
        }
        return logger2;
      }
      var logger;
      exports.logger = logger;
      if (flags_1.IS_DEBUG_BUILD) {
        exports.logger = logger = global_1.getGlobalSingleton("logger", makeLogger);
      } else {
        exports.logger = logger = makeLogger();
      }
    }
  });

  // node_modules/@sentry/utils/dist/string.js
  var require_string = __commonJS({
    "node_modules/@sentry/utils/dist/string.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var is_1 = require_is();
      function truncate(str, max) {
        if (max === void 0) {
          max = 0;
        }
        if (typeof str !== "string" || max === 0) {
          return str;
        }
        return str.length <= max ? str : str.substr(0, max) + "...";
      }
      exports.truncate = truncate;
      function snipLine(line, colno) {
        var newLine = line;
        var lineLength = newLine.length;
        if (lineLength <= 150) {
          return newLine;
        }
        if (colno > lineLength) {
          colno = lineLength;
        }
        var start = Math.max(colno - 60, 0);
        if (start < 5) {
          start = 0;
        }
        var end = Math.min(start + 140, lineLength);
        if (end > lineLength - 5) {
          end = lineLength;
        }
        if (end === lineLength) {
          start = Math.max(end - 140, 0);
        }
        newLine = newLine.slice(start, end);
        if (start > 0) {
          newLine = "'{snip} " + newLine;
        }
        if (end < lineLength) {
          newLine += " {snip}";
        }
        return newLine;
      }
      exports.snipLine = snipLine;
      function safeJoin(input, delimiter) {
        if (!Array.isArray(input)) {
          return "";
        }
        var output = [];
        for (var i = 0; i < input.length; i++) {
          var value = input[i];
          try {
            output.push(String(value));
          } catch (e) {
            output.push("[value cannot be serialized]");
          }
        }
        return output.join(delimiter);
      }
      exports.safeJoin = safeJoin;
      function isMatchingPattern(value, pattern) {
        if (!is_1.isString(value)) {
          return false;
        }
        if (is_1.isRegExp(pattern)) {
          return pattern.test(value);
        }
        if (typeof pattern === "string") {
          return value.indexOf(pattern) !== -1;
        }
        return false;
      }
      exports.isMatchingPattern = isMatchingPattern;
      function escapeStringForRegex(regexString) {
        return regexString.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
      }
      exports.escapeStringForRegex = escapeStringForRegex;
    }
  });

  // node_modules/@sentry/utils/dist/object.js
  var require_object = __commonJS({
    "node_modules/@sentry/utils/dist/object.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var browser_1 = require_browser();
      var is_1 = require_is();
      var string_1 = require_string();
      function fill(source, name, replacementFactory) {
        if (!(name in source)) {
          return;
        }
        var original = source[name];
        var wrapped = replacementFactory(original);
        if (typeof wrapped === "function") {
          try {
            markFunctionWrapped(wrapped, original);
          } catch (_Oo) {
          }
        }
        source[name] = wrapped;
      }
      exports.fill = fill;
      function addNonEnumerableProperty(obj, name, value) {
        Object.defineProperty(obj, name, {
          value,
          writable: true,
          configurable: true
        });
      }
      exports.addNonEnumerableProperty = addNonEnumerableProperty;
      function markFunctionWrapped(wrapped, original) {
        var proto = original.prototype || {};
        wrapped.prototype = original.prototype = proto;
        addNonEnumerableProperty(wrapped, "__sentry_original__", original);
      }
      exports.markFunctionWrapped = markFunctionWrapped;
      function getOriginalFunction(func) {
        return func.__sentry_original__;
      }
      exports.getOriginalFunction = getOriginalFunction;
      function urlEncode(object) {
        return Object.keys(object).map(function(key) {
          return encodeURIComponent(key) + "=" + encodeURIComponent(object[key]);
        }).join("&");
      }
      exports.urlEncode = urlEncode;
      function convertToPlainObject(value) {
        var newObj = value;
        if (is_1.isError(value)) {
          newObj = tslib_1.__assign({ message: value.message, name: value.name, stack: value.stack }, getOwnProperties(value));
        } else if (is_1.isEvent(value)) {
          var event_1 = value;
          newObj = tslib_1.__assign({ type: event_1.type, target: serializeEventTarget(event_1.target), currentTarget: serializeEventTarget(event_1.currentTarget) }, getOwnProperties(event_1));
          if (typeof CustomEvent !== "undefined" && is_1.isInstanceOf(value, CustomEvent)) {
            newObj.detail = event_1.detail;
          }
        }
        return newObj;
      }
      exports.convertToPlainObject = convertToPlainObject;
      function serializeEventTarget(target) {
        try {
          return is_1.isElement(target) ? browser_1.htmlTreeAsString(target) : Object.prototype.toString.call(target);
        } catch (_oO) {
          return "<unknown>";
        }
      }
      function getOwnProperties(obj) {
        var extractedProps = {};
        for (var property in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, property)) {
            extractedProps[property] = obj[property];
          }
        }
        return extractedProps;
      }
      function extractExceptionKeysForMessage(exception, maxLength) {
        if (maxLength === void 0) {
          maxLength = 40;
        }
        var keys2 = Object.keys(convertToPlainObject(exception));
        keys2.sort();
        if (!keys2.length) {
          return "[object has no keys]";
        }
        if (keys2[0].length >= maxLength) {
          return string_1.truncate(keys2[0], maxLength);
        }
        for (var includedKeys = keys2.length; includedKeys > 0; includedKeys--) {
          var serialized = keys2.slice(0, includedKeys).join(", ");
          if (serialized.length > maxLength) {
            continue;
          }
          if (includedKeys === keys2.length) {
            return serialized;
          }
          return string_1.truncate(serialized, maxLength);
        }
        return "";
      }
      exports.extractExceptionKeysForMessage = extractExceptionKeysForMessage;
      function dropUndefinedKeys(val) {
        var e_1, _a;
        if (is_1.isPlainObject(val)) {
          var rv = {};
          try {
            for (var _b = tslib_1.__values(Object.keys(val)), _c = _b.next(); !_c.done; _c = _b.next()) {
              var key = _c.value;
              if (typeof val[key] !== "undefined") {
                rv[key] = dropUndefinedKeys(val[key]);
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return))
                _a.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return rv;
        }
        if (Array.isArray(val)) {
          return val.map(dropUndefinedKeys);
        }
        return val;
      }
      exports.dropUndefinedKeys = dropUndefinedKeys;
      function objectify(wat) {
        var objectified;
        switch (true) {
          case (wat === void 0 || wat === null):
            objectified = new String(wat);
            break;
          case (typeof wat === "symbol" || typeof wat === "bigint"):
            objectified = Object(wat);
            break;
          case is_1.isPrimitive(wat):
            objectified = new wat.constructor(wat);
            break;
          default:
            objectified = wat;
            break;
        }
        return objectified;
      }
      exports.objectify = objectify;
    }
  });

  // node_modules/@sentry/utils/dist/stacktrace.js
  var require_stacktrace = __commonJS({
    "node_modules/@sentry/utils/dist/stacktrace.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var STACKTRACE_LIMIT = 50;
      function createStackParser() {
        var parsers = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          parsers[_i] = arguments[_i];
        }
        var sortedParsers = parsers.sort(function(a, b) {
          return a[0] - b[0];
        }).map(function(p) {
          return p[1];
        });
        return function(stack, skipFirst) {
          var e_1, _a, e_2, _b;
          if (skipFirst === void 0) {
            skipFirst = 0;
          }
          var frames = [];
          try {
            for (var _c = tslib_1.__values(stack.split("\n").slice(skipFirst)), _d = _c.next(); !_d.done; _d = _c.next()) {
              var line = _d.value;
              try {
                for (var sortedParsers_1 = (e_2 = void 0, tslib_1.__values(sortedParsers)), sortedParsers_1_1 = sortedParsers_1.next(); !sortedParsers_1_1.done; sortedParsers_1_1 = sortedParsers_1.next()) {
                  var parser = sortedParsers_1_1.value;
                  var frame = parser(line);
                  if (frame) {
                    frames.push(frame);
                    break;
                  }
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (sortedParsers_1_1 && !sortedParsers_1_1.done && (_b = sortedParsers_1.return))
                    _b.call(sortedParsers_1);
                } finally {
                  if (e_2)
                    throw e_2.error;
                }
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_d && !_d.done && (_a = _c.return))
                _a.call(_c);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return stripSentryFramesAndReverse(frames);
        };
      }
      exports.createStackParser = createStackParser;
      function stripSentryFramesAndReverse(stack) {
        if (!stack.length) {
          return [];
        }
        var localStack = stack;
        var firstFrameFunction = localStack[0].function || "";
        var lastFrameFunction = localStack[localStack.length - 1].function || "";
        if (firstFrameFunction.indexOf("captureMessage") !== -1 || firstFrameFunction.indexOf("captureException") !== -1) {
          localStack = localStack.slice(1);
        }
        if (lastFrameFunction.indexOf("sentryWrapped") !== -1) {
          localStack = localStack.slice(0, -1);
        }
        return localStack.slice(0, STACKTRACE_LIMIT).map(function(frame) {
          return tslib_1.__assign(tslib_1.__assign({}, frame), { filename: frame.filename || localStack[0].filename, function: frame.function || "?" });
        }).reverse();
      }
      exports.stripSentryFramesAndReverse = stripSentryFramesAndReverse;
      var defaultFunctionName = "<anonymous>";
      function getFunctionName(fn) {
        try {
          if (!fn || typeof fn !== "function") {
            return defaultFunctionName;
          }
          return fn.name || defaultFunctionName;
        } catch (e) {
          return defaultFunctionName;
        }
      }
      exports.getFunctionName = getFunctionName;
    }
  });

  // node_modules/@sentry/utils/dist/supports.js
  var require_supports = __commonJS({
    "node_modules/@sentry/utils/dist/supports.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var flags_1 = require_flags();
      var global_1 = require_global();
      var logger_1 = require_logger();
      function supportsErrorEvent() {
        try {
          new ErrorEvent("");
          return true;
        } catch (e) {
          return false;
        }
      }
      exports.supportsErrorEvent = supportsErrorEvent;
      function supportsDOMError() {
        try {
          new DOMError("");
          return true;
        } catch (e) {
          return false;
        }
      }
      exports.supportsDOMError = supportsDOMError;
      function supportsDOMException() {
        try {
          new DOMException("");
          return true;
        } catch (e) {
          return false;
        }
      }
      exports.supportsDOMException = supportsDOMException;
      function supportsFetch() {
        if (!("fetch" in global_1.getGlobalObject())) {
          return false;
        }
        try {
          new Headers();
          new Request("");
          new Response();
          return true;
        } catch (e) {
          return false;
        }
      }
      exports.supportsFetch = supportsFetch;
      function isNativeFetch(func) {
        return func && /^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(func.toString());
      }
      exports.isNativeFetch = isNativeFetch;
      function supportsNativeFetch() {
        if (!supportsFetch()) {
          return false;
        }
        var global2 = global_1.getGlobalObject();
        if (isNativeFetch(global2.fetch)) {
          return true;
        }
        var result = false;
        var doc = global2.document;
        if (doc && typeof doc.createElement === "function") {
          try {
            var sandbox = doc.createElement("iframe");
            sandbox.hidden = true;
            doc.head.appendChild(sandbox);
            if (sandbox.contentWindow && sandbox.contentWindow.fetch) {
              result = isNativeFetch(sandbox.contentWindow.fetch);
            }
            doc.head.removeChild(sandbox);
          } catch (err) {
            flags_1.IS_DEBUG_BUILD && logger_1.logger.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ", err);
          }
        }
        return result;
      }
      exports.supportsNativeFetch = supportsNativeFetch;
      function supportsReportingObserver() {
        return "ReportingObserver" in global_1.getGlobalObject();
      }
      exports.supportsReportingObserver = supportsReportingObserver;
      function supportsReferrerPolicy() {
        if (!supportsFetch()) {
          return false;
        }
        try {
          new Request("_", {
            referrerPolicy: "origin"
          });
          return true;
        } catch (e) {
          return false;
        }
      }
      exports.supportsReferrerPolicy = supportsReferrerPolicy;
      function supportsHistory() {
        var global2 = global_1.getGlobalObject();
        var chrome = global2.chrome;
        var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;
        var hasHistoryApi = "history" in global2 && !!global2.history.pushState && !!global2.history.replaceState;
        return !isChromePackagedApp && hasHistoryApi;
      }
      exports.supportsHistory = supportsHistory;
    }
  });

  // node_modules/@sentry/utils/dist/instrument.js
  var require_instrument = __commonJS({
    "node_modules/@sentry/utils/dist/instrument.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var flags_1 = require_flags();
      var global_1 = require_global();
      var is_1 = require_is();
      var logger_1 = require_logger();
      var object_1 = require_object();
      var stacktrace_1 = require_stacktrace();
      var supports_1 = require_supports();
      var global2 = global_1.getGlobalObject();
      var handlers = {};
      var instrumented = {};
      function instrument(type) {
        if (instrumented[type]) {
          return;
        }
        instrumented[type] = true;
        switch (type) {
          case "console":
            instrumentConsole();
            break;
          case "dom":
            instrumentDOM();
            break;
          case "xhr":
            instrumentXHR();
            break;
          case "fetch":
            instrumentFetch();
            break;
          case "history":
            instrumentHistory();
            break;
          case "error":
            instrumentError();
            break;
          case "unhandledrejection":
            instrumentUnhandledRejection();
            break;
          default:
            flags_1.IS_DEBUG_BUILD && logger_1.logger.warn("unknown instrumentation type:", type);
            return;
        }
      }
      function addInstrumentationHandler(type, callback) {
        handlers[type] = handlers[type] || [];
        handlers[type].push(callback);
        instrument(type);
      }
      exports.addInstrumentationHandler = addInstrumentationHandler;
      function triggerHandlers(type, data) {
        var e_1, _a;
        if (!type || !handlers[type]) {
          return;
        }
        try {
          for (var _b = tslib_1.__values(handlers[type] || []), _c = _b.next(); !_c.done; _c = _b.next()) {
            var handler = _c.value;
            try {
              handler(data);
            } catch (e) {
              flags_1.IS_DEBUG_BUILD && logger_1.logger.error("Error while triggering instrumentation handler.\nType: " + type + "\nName: " + stacktrace_1.getFunctionName(handler) + "\nError:", e);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
      function instrumentConsole() {
        if (!("console" in global2)) {
          return;
        }
        logger_1.CONSOLE_LEVELS.forEach(function(level) {
          if (!(level in global2.console)) {
            return;
          }
          object_1.fill(global2.console, level, function(originalConsoleMethod) {
            return function() {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              triggerHandlers("console", { args, level });
              if (originalConsoleMethod) {
                originalConsoleMethod.apply(global2.console, args);
              }
            };
          });
        });
      }
      function instrumentFetch() {
        if (!supports_1.supportsNativeFetch()) {
          return;
        }
        object_1.fill(global2, "fetch", function(originalFetch) {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            var handlerData = {
              args,
              fetchData: {
                method: getFetchMethod(args),
                url: getFetchUrl(args)
              },
              startTimestamp: Date.now()
            };
            triggerHandlers("fetch", tslib_1.__assign({}, handlerData));
            return originalFetch.apply(global2, args).then(function(response) {
              triggerHandlers("fetch", tslib_1.__assign(tslib_1.__assign({}, handlerData), { endTimestamp: Date.now(), response }));
              return response;
            }, function(error) {
              triggerHandlers("fetch", tslib_1.__assign(tslib_1.__assign({}, handlerData), { endTimestamp: Date.now(), error }));
              throw error;
            });
          };
        });
      }
      function getFetchMethod(fetchArgs) {
        if (fetchArgs === void 0) {
          fetchArgs = [];
        }
        if ("Request" in global2 && is_1.isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {
          return String(fetchArgs[0].method).toUpperCase();
        }
        if (fetchArgs[1] && fetchArgs[1].method) {
          return String(fetchArgs[1].method).toUpperCase();
        }
        return "GET";
      }
      function getFetchUrl(fetchArgs) {
        if (fetchArgs === void 0) {
          fetchArgs = [];
        }
        if (typeof fetchArgs[0] === "string") {
          return fetchArgs[0];
        }
        if ("Request" in global2 && is_1.isInstanceOf(fetchArgs[0], Request)) {
          return fetchArgs[0].url;
        }
        return String(fetchArgs[0]);
      }
      function instrumentXHR() {
        if (!("XMLHttpRequest" in global2)) {
          return;
        }
        var xhrproto = XMLHttpRequest.prototype;
        object_1.fill(xhrproto, "open", function(originalOpen) {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            var xhr = this;
            var url = args[1];
            var xhrInfo = xhr.__sentry_xhr__ = {
              method: is_1.isString(args[0]) ? args[0].toUpperCase() : args[0],
              url: args[1]
            };
            if (is_1.isString(url) && xhrInfo.method === "POST" && url.match(/sentry_key/)) {
              xhr.__sentry_own_request__ = true;
            }
            var onreadystatechangeHandler = function() {
              if (xhr.readyState === 4) {
                try {
                  xhrInfo.status_code = xhr.status;
                } catch (e) {
                }
                triggerHandlers("xhr", {
                  args,
                  endTimestamp: Date.now(),
                  startTimestamp: Date.now(),
                  xhr
                });
              }
            };
            if ("onreadystatechange" in xhr && typeof xhr.onreadystatechange === "function") {
              object_1.fill(xhr, "onreadystatechange", function(original) {
                return function() {
                  var readyStateArgs = [];
                  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
                    readyStateArgs[_i2] = arguments[_i2];
                  }
                  onreadystatechangeHandler();
                  return original.apply(xhr, readyStateArgs);
                };
              });
            } else {
              xhr.addEventListener("readystatechange", onreadystatechangeHandler);
            }
            return originalOpen.apply(xhr, args);
          };
        });
        object_1.fill(xhrproto, "send", function(originalSend) {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            if (this.__sentry_xhr__ && args[0] !== void 0) {
              this.__sentry_xhr__.body = args[0];
            }
            triggerHandlers("xhr", {
              args,
              startTimestamp: Date.now(),
              xhr: this
            });
            return originalSend.apply(this, args);
          };
        });
      }
      var lastHref;
      function instrumentHistory() {
        if (!supports_1.supportsHistory()) {
          return;
        }
        var oldOnPopState = global2.onpopstate;
        global2.onpopstate = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var to = global2.location.href;
          var from = lastHref;
          lastHref = to;
          triggerHandlers("history", {
            from,
            to
          });
          if (oldOnPopState) {
            try {
              return oldOnPopState.apply(this, args);
            } catch (_oO) {
            }
          }
        };
        function historyReplacementFunction(originalHistoryFunction) {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            var url = args.length > 2 ? args[2] : void 0;
            if (url) {
              var from = lastHref;
              var to = String(url);
              lastHref = to;
              triggerHandlers("history", {
                from,
                to
              });
            }
            return originalHistoryFunction.apply(this, args);
          };
        }
        object_1.fill(global2.history, "pushState", historyReplacementFunction);
        object_1.fill(global2.history, "replaceState", historyReplacementFunction);
      }
      var debounceDuration = 1e3;
      var debounceTimerID;
      var lastCapturedEvent;
      function shouldShortcircuitPreviousDebounce(previous, current) {
        if (!previous) {
          return true;
        }
        if (previous.type !== current.type) {
          return true;
        }
        try {
          if (previous.target !== current.target) {
            return true;
          }
        } catch (e) {
        }
        return false;
      }
      function shouldSkipDOMEvent(event2) {
        if (event2.type !== "keypress") {
          return false;
        }
        try {
          var target = event2.target;
          if (!target || !target.tagName) {
            return true;
          }
          if (target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.isContentEditable) {
            return false;
          }
        } catch (e) {
        }
        return true;
      }
      function makeDOMEventHandler(handler, globalListener) {
        if (globalListener === void 0) {
          globalListener = false;
        }
        return function(event2) {
          if (!event2 || lastCapturedEvent === event2) {
            return;
          }
          if (shouldSkipDOMEvent(event2)) {
            return;
          }
          var name = event2.type === "keypress" ? "input" : event2.type;
          if (debounceTimerID === void 0) {
            handler({
              event: event2,
              name,
              global: globalListener
            });
            lastCapturedEvent = event2;
          } else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event2)) {
            handler({
              event: event2,
              name,
              global: globalListener
            });
            lastCapturedEvent = event2;
          }
          clearTimeout(debounceTimerID);
          debounceTimerID = global2.setTimeout(function() {
            debounceTimerID = void 0;
          }, debounceDuration);
        };
      }
      function instrumentDOM() {
        if (!("document" in global2)) {
          return;
        }
        var triggerDOMHandler = triggerHandlers.bind(null, "dom");
        var globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);
        global2.document.addEventListener("click", globalDOMEventHandler, false);
        global2.document.addEventListener("keypress", globalDOMEventHandler, false);
        ["EventTarget", "Node"].forEach(function(target) {
          var proto = global2[target] && global2[target].prototype;
          if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty("addEventListener")) {
            return;
          }
          object_1.fill(proto, "addEventListener", function(originalAddEventListener) {
            return function(type, listener, options) {
              if (type === "click" || type == "keypress") {
                try {
                  var el = this;
                  var handlers_1 = el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {};
                  var handlerForType = handlers_1[type] = handlers_1[type] || { refCount: 0 };
                  if (!handlerForType.handler) {
                    var handler = makeDOMEventHandler(triggerDOMHandler);
                    handlerForType.handler = handler;
                    originalAddEventListener.call(this, type, handler, options);
                  }
                  handlerForType.refCount += 1;
                } catch (e) {
                }
              }
              return originalAddEventListener.call(this, type, listener, options);
            };
          });
          object_1.fill(proto, "removeEventListener", function(originalRemoveEventListener) {
            return function(type, listener, options) {
              if (type === "click" || type == "keypress") {
                try {
                  var el = this;
                  var handlers_2 = el.__sentry_instrumentation_handlers__ || {};
                  var handlerForType = handlers_2[type];
                  if (handlerForType) {
                    handlerForType.refCount -= 1;
                    if (handlerForType.refCount <= 0) {
                      originalRemoveEventListener.call(this, type, handlerForType.handler, options);
                      handlerForType.handler = void 0;
                      delete handlers_2[type];
                    }
                    if (Object.keys(handlers_2).length === 0) {
                      delete el.__sentry_instrumentation_handlers__;
                    }
                  }
                } catch (e) {
                }
              }
              return originalRemoveEventListener.call(this, type, listener, options);
            };
          });
        });
      }
      var _oldOnErrorHandler = null;
      function instrumentError() {
        _oldOnErrorHandler = global2.onerror;
        global2.onerror = function(msg, url, line, column, error) {
          triggerHandlers("error", {
            column,
            error,
            line,
            msg,
            url
          });
          if (_oldOnErrorHandler) {
            return _oldOnErrorHandler.apply(this, arguments);
          }
          return false;
        };
      }
      var _oldOnUnhandledRejectionHandler = null;
      function instrumentUnhandledRejection() {
        _oldOnUnhandledRejectionHandler = global2.onunhandledrejection;
        global2.onunhandledrejection = function(e) {
          triggerHandlers("unhandledrejection", e);
          if (_oldOnUnhandledRejectionHandler) {
            return _oldOnUnhandledRejectionHandler.apply(this, arguments);
          }
          return true;
        };
      }
    }
  });

  // node_modules/@sentry/utils/dist/memo.js
  var require_memo = __commonJS({
    "node_modules/@sentry/utils/dist/memo.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      function memoBuilder() {
        var hasWeakSet = typeof WeakSet === "function";
        var inner = hasWeakSet ? /* @__PURE__ */ new WeakSet() : [];
        function memoize(obj) {
          if (hasWeakSet) {
            if (inner.has(obj)) {
              return true;
            }
            inner.add(obj);
            return false;
          }
          for (var i = 0; i < inner.length; i++) {
            var value = inner[i];
            if (value === obj) {
              return true;
            }
          }
          inner.push(obj);
          return false;
        }
        function unmemoize(obj) {
          if (hasWeakSet) {
            inner.delete(obj);
          } else {
            for (var i = 0; i < inner.length; i++) {
              if (inner[i] === obj) {
                inner.splice(i, 1);
                break;
              }
            }
          }
        }
        return [memoize, unmemoize];
      }
      exports.memoBuilder = memoBuilder;
    }
  });

  // node_modules/@sentry/utils/dist/misc.js
  var require_misc = __commonJS({
    "node_modules/@sentry/utils/dist/misc.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var global_1 = require_global();
      var object_1 = require_object();
      var string_1 = require_string();
      function uuid4() {
        var global2 = global_1.getGlobalObject();
        var crypto = global2.crypto || global2.msCrypto;
        if (!(crypto === void 0) && crypto.getRandomValues) {
          var arr = new Uint16Array(8);
          crypto.getRandomValues(arr);
          arr[3] = arr[3] & 4095 | 16384;
          arr[4] = arr[4] & 16383 | 32768;
          var pad = function(num) {
            var v = num.toString(16);
            while (v.length < 4) {
              v = "0" + v;
            }
            return v;
          };
          return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]);
        }
        return "xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g, function(c) {
          var r = Math.random() * 16 | 0;
          var v = c === "x" ? r : r & 3 | 8;
          return v.toString(16);
        });
      }
      exports.uuid4 = uuid4;
      function parseUrl(url) {
        if (!url) {
          return {};
        }
        var match = url.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
        if (!match) {
          return {};
        }
        var query = match[6] || "";
        var fragment = match[8] || "";
        return {
          host: match[4],
          path: match[5],
          protocol: match[2],
          relative: match[5] + query + fragment
        };
      }
      exports.parseUrl = parseUrl;
      function getFirstException(event2) {
        return event2.exception && event2.exception.values ? event2.exception.values[0] : void 0;
      }
      function getEventDescription(event2) {
        var message = event2.message, eventId = event2.event_id;
        if (message) {
          return message;
        }
        var firstException = getFirstException(event2);
        if (firstException) {
          if (firstException.type && firstException.value) {
            return firstException.type + ": " + firstException.value;
          }
          return firstException.type || firstException.value || eventId || "<unknown>";
        }
        return eventId || "<unknown>";
      }
      exports.getEventDescription = getEventDescription;
      function addExceptionTypeValue(event2, value, type) {
        var exception = event2.exception = event2.exception || {};
        var values = exception.values = exception.values || [];
        var firstException = values[0] = values[0] || {};
        if (!firstException.value) {
          firstException.value = value || "";
        }
        if (!firstException.type) {
          firstException.type = type || "Error";
        }
      }
      exports.addExceptionTypeValue = addExceptionTypeValue;
      function addExceptionMechanism(event2, newMechanism) {
        var firstException = getFirstException(event2);
        if (!firstException) {
          return;
        }
        var defaultMechanism = { type: "generic", handled: true };
        var currentMechanism = firstException.mechanism;
        firstException.mechanism = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, defaultMechanism), currentMechanism), newMechanism);
        if (newMechanism && "data" in newMechanism) {
          var mergedData = tslib_1.__assign(tslib_1.__assign({}, currentMechanism && currentMechanism.data), newMechanism.data);
          firstException.mechanism.data = mergedData;
        }
      }
      exports.addExceptionMechanism = addExceptionMechanism;
      var SEMVER_REGEXP = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
      function parseSemver(input) {
        var match = input.match(SEMVER_REGEXP) || [];
        var major = parseInt(match[1], 10);
        var minor = parseInt(match[2], 10);
        var patch = parseInt(match[3], 10);
        return {
          buildmetadata: match[5],
          major: isNaN(major) ? void 0 : major,
          minor: isNaN(minor) ? void 0 : minor,
          patch: isNaN(patch) ? void 0 : patch,
          prerelease: match[4]
        };
      }
      exports.parseSemver = parseSemver;
      function addContextToFrame(lines, frame, linesOfContext) {
        if (linesOfContext === void 0) {
          linesOfContext = 5;
        }
        var lineno = frame.lineno || 0;
        var maxLines = lines.length;
        var sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);
        frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map(function(line) {
          return string_1.snipLine(line, 0);
        });
        frame.context_line = string_1.snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);
        frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map(function(line) {
          return string_1.snipLine(line, 0);
        });
      }
      exports.addContextToFrame = addContextToFrame;
      function stripUrlQueryAndFragment(urlPath) {
        return urlPath.split(/[\?#]/, 1)[0];
      }
      exports.stripUrlQueryAndFragment = stripUrlQueryAndFragment;
      function checkOrSetAlreadyCaught(exception) {
        if (exception && exception.__sentry_captured__) {
          return true;
        }
        try {
          object_1.addNonEnumerableProperty(exception, "__sentry_captured__", true);
        } catch (err) {
        }
        return false;
      }
      exports.checkOrSetAlreadyCaught = checkOrSetAlreadyCaught;
    }
  });

  // node_modules/@sentry/utils/dist/normalize.js
  var require_normalize = __commonJS({
    "node_modules/@sentry/utils/dist/normalize.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var is_1 = require_is();
      var memo_1 = require_memo();
      var object_1 = require_object();
      var stacktrace_1 = require_stacktrace();
      function normalize(input, depth, maxProperties) {
        if (depth === void 0) {
          depth = Infinity;
        }
        if (maxProperties === void 0) {
          maxProperties = Infinity;
        }
        try {
          return visit("", input, depth, maxProperties);
        } catch (err) {
          return { ERROR: "**non-serializable** (" + err + ")" };
        }
      }
      exports.normalize = normalize;
      function normalizeToSize(object, depth, maxSize) {
        if (depth === void 0) {
          depth = 3;
        }
        if (maxSize === void 0) {
          maxSize = 100 * 1024;
        }
        var normalized = normalize(object, depth);
        if (jsonSize(normalized) > maxSize) {
          return normalizeToSize(object, depth - 1, maxSize);
        }
        return normalized;
      }
      exports.normalizeToSize = normalizeToSize;
      function visit(key, value, depth, maxProperties, memo2) {
        if (depth === void 0) {
          depth = Infinity;
        }
        if (maxProperties === void 0) {
          maxProperties = Infinity;
        }
        if (memo2 === void 0) {
          memo2 = memo_1.memoBuilder();
        }
        var _a = tslib_1.__read(memo2, 2), memoize = _a[0], unmemoize = _a[1];
        var valueWithToJSON = value;
        if (valueWithToJSON && typeof valueWithToJSON.toJSON === "function") {
          try {
            return valueWithToJSON.toJSON();
          } catch (err) {
          }
        }
        if (value === null || ["number", "boolean", "string"].includes(typeof value) && !is_1.isNaN(value)) {
          return value;
        }
        var stringified = stringifyValue(key, value);
        if (!stringified.startsWith("[object ")) {
          return stringified;
        }
        if (depth === 0) {
          return stringified.replace("object ", "");
        }
        if (memoize(value)) {
          return "[Circular ~]";
        }
        var normalized = Array.isArray(value) ? [] : {};
        var numAdded = 0;
        var visitable = is_1.isError(value) || is_1.isEvent(value) ? object_1.convertToPlainObject(value) : value;
        for (var visitKey in visitable) {
          if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {
            continue;
          }
          if (numAdded >= maxProperties) {
            normalized[visitKey] = "[MaxProperties ~]";
            break;
          }
          var visitValue = visitable[visitKey];
          normalized[visitKey] = visit(visitKey, visitValue, depth - 1, maxProperties, memo2);
          numAdded += 1;
        }
        unmemoize(value);
        return normalized;
      }
      exports.walk = visit;
      function stringifyValue(key, value) {
        try {
          if (key === "domain" && value && typeof value === "object" && value._events) {
            return "[Domain]";
          }
          if (key === "domainEmitter") {
            return "[DomainEmitter]";
          }
          if (typeof global !== "undefined" && value === global) {
            return "[Global]";
          }
          if (typeof window !== "undefined" && value === window) {
            return "[Window]";
          }
          if (typeof document !== "undefined" && value === document) {
            return "[Document]";
          }
          if (is_1.isSyntheticEvent(value)) {
            return "[SyntheticEvent]";
          }
          if (typeof value === "number" && value !== value) {
            return "[NaN]";
          }
          if (value === void 0) {
            return "[undefined]";
          }
          if (typeof value === "function") {
            return "[Function: " + stacktrace_1.getFunctionName(value) + "]";
          }
          if (typeof value === "symbol") {
            return "[" + String(value) + "]";
          }
          if (typeof value === "bigint") {
            return "[BigInt: " + String(value) + "]";
          }
          return "[object " + Object.getPrototypeOf(value).constructor.name + "]";
        } catch (err) {
          return "**non-serializable** (" + err + ")";
        }
      }
      function utf8Length(value) {
        return ~-encodeURI(value).split(/%..|./).length;
      }
      function jsonSize(value) {
        return utf8Length(JSON.stringify(value));
      }
    }
  });

  // node_modules/@sentry/utils/dist/path.js
  var require_path = __commonJS({
    "node_modules/@sentry/utils/dist/path.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      function normalizeArray(parts, allowAboveRoot) {
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === ".") {
            parts.splice(i, 1);
          } else if (last === "..") {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift("..");
          }
        }
        return parts;
      }
      var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^/]+?|)(\.[^./]*|))(?:[/]*)$/;
      function splitPath(filename) {
        var parts = splitPathRe.exec(filename);
        return parts ? parts.slice(1) : [];
      }
      function resolve() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var resolvedPath = "";
        var resolvedAbsolute = false;
        for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = i >= 0 ? args[i] : "/";
          if (!path) {
            continue;
          }
          resolvedPath = path + "/" + resolvedPath;
          resolvedAbsolute = path.charAt(0) === "/";
        }
        resolvedPath = normalizeArray(resolvedPath.split("/").filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join("/");
        return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
      }
      exports.resolve = resolve;
      function trim(arr) {
        var start = 0;
        for (; start < arr.length; start++) {
          if (arr[start] !== "") {
            break;
          }
        }
        var end = arr.length - 1;
        for (; end >= 0; end--) {
          if (arr[end] !== "") {
            break;
          }
        }
        if (start > end) {
          return [];
        }
        return arr.slice(start, end - start + 1);
      }
      function relative(from, to) {
        from = resolve(from).substr(1);
        to = resolve(to).substr(1);
        var fromParts = trim(from.split("/"));
        var toParts = trim(to.split("/"));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push("..");
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join("/");
      }
      exports.relative = relative;
      function normalizePath(path) {
        var isPathAbsolute = isAbsolute(path);
        var trailingSlash = path.substr(-1) === "/";
        var normalizedPath = normalizeArray(path.split("/").filter(function(p) {
          return !!p;
        }), !isPathAbsolute).join("/");
        if (!normalizedPath && !isPathAbsolute) {
          normalizedPath = ".";
        }
        if (normalizedPath && trailingSlash) {
          normalizedPath += "/";
        }
        return (isPathAbsolute ? "/" : "") + normalizedPath;
      }
      exports.normalizePath = normalizePath;
      function isAbsolute(path) {
        return path.charAt(0) === "/";
      }
      exports.isAbsolute = isAbsolute;
      function join() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return normalizePath(args.join("/"));
      }
      exports.join = join;
      function dirname(path) {
        var result = splitPath(path);
        var root = result[0];
        var dir = result[1];
        if (!root && !dir) {
          return ".";
        }
        if (dir) {
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      }
      exports.dirname = dirname;
      function basename(path, ext) {
        var f = splitPath(path)[2];
        if (ext && f.substr(ext.length * -1) === ext) {
          f = f.substr(0, f.length - ext.length);
        }
        return f;
      }
      exports.basename = basename;
    }
  });

  // node_modules/@sentry/utils/dist/syncpromise.js
  var require_syncpromise = __commonJS({
    "node_modules/@sentry/utils/dist/syncpromise.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var is_1 = require_is();
      function resolvedSyncPromise(value) {
        return new SyncPromise(function(resolve) {
          resolve(value);
        });
      }
      exports.resolvedSyncPromise = resolvedSyncPromise;
      function rejectedSyncPromise(reason) {
        return new SyncPromise(function(_, reject) {
          reject(reason);
        });
      }
      exports.rejectedSyncPromise = rejectedSyncPromise;
      var SyncPromise = function() {
        function SyncPromise2(executor) {
          var _this = this;
          this._state = 0;
          this._handlers = [];
          this._resolve = function(value) {
            _this._setResult(1, value);
          };
          this._reject = function(reason) {
            _this._setResult(2, reason);
          };
          this._setResult = function(state, value) {
            if (_this._state !== 0) {
              return;
            }
            if (is_1.isThenable(value)) {
              void value.then(_this._resolve, _this._reject);
              return;
            }
            _this._state = state;
            _this._value = value;
            _this._executeHandlers();
          };
          this._executeHandlers = function() {
            if (_this._state === 0) {
              return;
            }
            var cachedHandlers = _this._handlers.slice();
            _this._handlers = [];
            cachedHandlers.forEach(function(handler) {
              if (handler[0]) {
                return;
              }
              if (_this._state === 1) {
                handler[1](_this._value);
              }
              if (_this._state === 2) {
                handler[2](_this._value);
              }
              handler[0] = true;
            });
          };
          try {
            executor(this._resolve, this._reject);
          } catch (e) {
            this._reject(e);
          }
        }
        SyncPromise2.prototype.then = function(onfulfilled, onrejected) {
          var _this = this;
          return new SyncPromise2(function(resolve, reject) {
            _this._handlers.push([
              false,
              function(result) {
                if (!onfulfilled) {
                  resolve(result);
                } else {
                  try {
                    resolve(onfulfilled(result));
                  } catch (e) {
                    reject(e);
                  }
                }
              },
              function(reason) {
                if (!onrejected) {
                  reject(reason);
                } else {
                  try {
                    resolve(onrejected(reason));
                  } catch (e) {
                    reject(e);
                  }
                }
              }
            ]);
            _this._executeHandlers();
          });
        };
        SyncPromise2.prototype.catch = function(onrejected) {
          return this.then(function(val) {
            return val;
          }, onrejected);
        };
        SyncPromise2.prototype.finally = function(onfinally) {
          var _this = this;
          return new SyncPromise2(function(resolve, reject) {
            var val;
            var isRejected;
            return _this.then(function(value) {
              isRejected = false;
              val = value;
              if (onfinally) {
                onfinally();
              }
            }, function(reason) {
              isRejected = true;
              val = reason;
              if (onfinally) {
                onfinally();
              }
            }).then(function() {
              if (isRejected) {
                reject(val);
                return;
              }
              resolve(val);
            });
          });
        };
        return SyncPromise2;
      }();
      exports.SyncPromise = SyncPromise;
    }
  });

  // node_modules/@sentry/utils/dist/promisebuffer.js
  var require_promisebuffer = __commonJS({
    "node_modules/@sentry/utils/dist/promisebuffer.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var error_1 = require_error();
      var syncpromise_1 = require_syncpromise();
      function makePromiseBuffer(limit) {
        var buffer = [];
        function isReady() {
          return limit === void 0 || buffer.length < limit;
        }
        function remove(task) {
          return buffer.splice(buffer.indexOf(task), 1)[0];
        }
        function add(taskProducer) {
          if (!isReady()) {
            return syncpromise_1.rejectedSyncPromise(new error_1.SentryError("Not adding Promise due to buffer limit reached."));
          }
          var task = taskProducer();
          if (buffer.indexOf(task) === -1) {
            buffer.push(task);
          }
          void task.then(function() {
            return remove(task);
          }).then(null, function() {
            return remove(task).then(null, function() {
            });
          });
          return task;
        }
        function drain(timeout) {
          return new syncpromise_1.SyncPromise(function(resolve, reject) {
            var counter = buffer.length;
            if (!counter) {
              return resolve(true);
            }
            var capturedSetTimeout = setTimeout(function() {
              if (timeout && timeout > 0) {
                resolve(false);
              }
            }, timeout);
            buffer.forEach(function(item) {
              void syncpromise_1.resolvedSyncPromise(item).then(function() {
                if (!--counter) {
                  clearTimeout(capturedSetTimeout);
                  resolve(true);
                }
              }, reject);
            });
          });
        }
        return {
          $: buffer,
          add,
          drain
        };
      }
      exports.makePromiseBuffer = makePromiseBuffer;
    }
  });

  // node_modules/@sentry/utils/dist/severity.js
  var require_severity2 = __commonJS({
    "node_modules/@sentry/utils/dist/severity.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var types_1 = require_dist2();
      var enums_1 = require_enums();
      function isSupportedSeverity(level) {
        return enums_1.SeverityLevels.indexOf(level) !== -1;
      }
      function severityFromString(level) {
        if (level === "warn")
          return types_1.Severity.Warning;
        if (isSupportedSeverity(level)) {
          return level;
        }
        return types_1.Severity.Log;
      }
      exports.severityFromString = severityFromString;
    }
  });

  // node_modules/@sentry/utils/dist/status.js
  var require_status = __commonJS({
    "node_modules/@sentry/utils/dist/status.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      function eventStatusFromHttpCode(code) {
        if (code >= 200 && code < 300) {
          return "success";
        }
        if (code === 429) {
          return "rate_limit";
        }
        if (code >= 400 && code < 500) {
          return "invalid";
        }
        if (code >= 500) {
          return "failed";
        }
        return "unknown";
      }
      exports.eventStatusFromHttpCode = eventStatusFromHttpCode;
    }
  });

  // node_modules/@sentry/utils/dist/time.js
  var require_time = __commonJS({
    "node_modules/@sentry/utils/dist/time.js"(exports, module) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var global_1 = require_global();
      var node_1 = require_node();
      var dateTimestampSource = {
        nowSeconds: function() {
          return Date.now() / 1e3;
        }
      };
      function getBrowserPerformance() {
        var performance2 = global_1.getGlobalObject().performance;
        if (!performance2 || !performance2.now) {
          return void 0;
        }
        var timeOrigin = Date.now() - performance2.now();
        return {
          now: function() {
            return performance2.now();
          },
          timeOrigin
        };
      }
      function getNodePerformance() {
        try {
          var perfHooks = node_1.dynamicRequire(module, "perf_hooks");
          return perfHooks.performance;
        } catch (_) {
          return void 0;
        }
      }
      var platformPerformance = node_1.isNodeEnv() ? getNodePerformance() : getBrowserPerformance();
      var timestampSource = platformPerformance === void 0 ? dateTimestampSource : {
        nowSeconds: function() {
          return (platformPerformance.timeOrigin + platformPerformance.now()) / 1e3;
        }
      };
      exports.dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);
      exports.timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);
      exports.timestampWithMs = exports.timestampInSeconds;
      exports.usingPerformanceAPI = platformPerformance !== void 0;
      exports.browserPerformanceTimeOrigin = function() {
        var performance2 = global_1.getGlobalObject().performance;
        if (!performance2 || !performance2.now) {
          exports._browserPerformanceTimeOriginMode = "none";
          return void 0;
        }
        var threshold = 3600 * 1e3;
        var performanceNow = performance2.now();
        var dateNow = Date.now();
        var timeOriginDelta = performance2.timeOrigin ? Math.abs(performance2.timeOrigin + performanceNow - dateNow) : threshold;
        var timeOriginIsReliable = timeOriginDelta < threshold;
        var navigationStart = performance2.timing && performance2.timing.navigationStart;
        var hasNavigationStart = typeof navigationStart === "number";
        var navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;
        var navigationStartIsReliable = navigationStartDelta < threshold;
        if (timeOriginIsReliable || navigationStartIsReliable) {
          if (timeOriginDelta <= navigationStartDelta) {
            exports._browserPerformanceTimeOriginMode = "timeOrigin";
            return performance2.timeOrigin;
          } else {
            exports._browserPerformanceTimeOriginMode = "navigationStart";
            return navigationStart;
          }
        }
        exports._browserPerformanceTimeOriginMode = "dateNow";
        return dateNow;
      }();
    }
  });

  // node_modules/@sentry/utils/dist/tracing.js
  var require_tracing2 = __commonJS({
    "node_modules/@sentry/utils/dist/tracing.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TRACEPARENT_REGEXP = new RegExp("^[ \\t]*([0-9a-f]{32})?-?([0-9a-f]{16})?-?([01])?[ \\t]*$");
      function extractTraceparentData(traceparent) {
        var matches = traceparent.match(exports.TRACEPARENT_REGEXP);
        if (matches) {
          var parentSampled = void 0;
          if (matches[3] === "1") {
            parentSampled = true;
          } else if (matches[3] === "0") {
            parentSampled = false;
          }
          return {
            traceId: matches[1],
            parentSampled,
            parentSpanId: matches[2]
          };
        }
        return void 0;
      }
      exports.extractTraceparentData = extractTraceparentData;
    }
  });

  // node_modules/@sentry/utils/dist/envelope.js
  var require_envelope = __commonJS({
    "node_modules/@sentry/utils/dist/envelope.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var is_1 = require_is();
      function createEnvelope(headers, items) {
        if (items === void 0) {
          items = [];
        }
        return [headers, items];
      }
      exports.createEnvelope = createEnvelope;
      function addItemToEnvelope(envelope, newItem) {
        var _a = tslib_1.__read(envelope, 2), headers = _a[0], items = _a[1];
        return [headers, tslib_1.__spread(items, [newItem])];
      }
      exports.addItemToEnvelope = addItemToEnvelope;
      function getEnvelopeType(envelope) {
        var _a = tslib_1.__read(envelope, 2), _b = tslib_1.__read(_a[1], 1), _c = tslib_1.__read(_b[0], 1), firstItemHeader = _c[0];
        return firstItemHeader.type;
      }
      exports.getEnvelopeType = getEnvelopeType;
      function serializeEnvelope(envelope) {
        var _a = tslib_1.__read(envelope, 2), headers = _a[0], items = _a[1];
        var serializedHeaders = JSON.stringify(headers);
        return items.reduce(function(acc, item) {
          var _a2 = tslib_1.__read(item, 2), itemHeaders = _a2[0], payload = _a2[1];
          var serializedPayload = is_1.isPrimitive(payload) ? String(payload) : JSON.stringify(payload);
          return acc + "\n" + JSON.stringify(itemHeaders) + "\n" + serializedPayload;
        }, serializedHeaders);
      }
      exports.serializeEnvelope = serializeEnvelope;
    }
  });

  // node_modules/@sentry/utils/dist/clientreport.js
  var require_clientreport = __commonJS({
    "node_modules/@sentry/utils/dist/clientreport.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var envelope_1 = require_envelope();
      var time_1 = require_time();
      function createClientReportEnvelope(discarded_events, dsn, timestamp) {
        var clientReportItem = [
          { type: "client_report" },
          {
            timestamp: timestamp || time_1.dateTimestampInSeconds(),
            discarded_events
          }
        ];
        return envelope_1.createEnvelope(dsn ? { dsn } : {}, [clientReportItem]);
      }
      exports.createClientReportEnvelope = createClientReportEnvelope;
    }
  });

  // node_modules/@sentry/utils/dist/ratelimit.js
  var require_ratelimit = __commonJS({
    "node_modules/@sentry/utils/dist/ratelimit.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      exports.DEFAULT_RETRY_AFTER = 60 * 1e3;
      function parseRetryAfterHeader(header, now) {
        if (now === void 0) {
          now = Date.now();
        }
        var headerDelay = parseInt("" + header, 10);
        if (!isNaN(headerDelay)) {
          return headerDelay * 1e3;
        }
        var headerDate = Date.parse("" + header);
        if (!isNaN(headerDate)) {
          return headerDate - now;
        }
        return exports.DEFAULT_RETRY_AFTER;
      }
      exports.parseRetryAfterHeader = parseRetryAfterHeader;
      function disabledUntil(limits, category) {
        return limits[category] || limits.all || 0;
      }
      exports.disabledUntil = disabledUntil;
      function isRateLimited(limits, category, now) {
        if (now === void 0) {
          now = Date.now();
        }
        return disabledUntil(limits, category) > now;
      }
      exports.isRateLimited = isRateLimited;
      function updateRateLimits(limits, headers, now) {
        var e_1, _a, e_2, _b;
        if (now === void 0) {
          now = Date.now();
        }
        var updatedRateLimits = tslib_1.__assign({}, limits);
        var rateLimitHeader = headers["x-sentry-rate-limits"];
        var retryAfterHeader = headers["retry-after"];
        if (rateLimitHeader) {
          try {
            for (var _c = tslib_1.__values(rateLimitHeader.trim().split(",")), _d = _c.next(); !_d.done; _d = _c.next()) {
              var limit = _d.value;
              var parameters = limit.split(":", 2);
              var headerDelay = parseInt(parameters[0], 10);
              var delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1e3;
              if (!parameters[1]) {
                updatedRateLimits.all = now + delay;
              } else {
                try {
                  for (var _e = (e_2 = void 0, tslib_1.__values(parameters[1].split(";"))), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var category = _f.value;
                    updatedRateLimits[category] = now + delay;
                  }
                } catch (e_2_1) {
                  e_2 = { error: e_2_1 };
                } finally {
                  try {
                    if (_f && !_f.done && (_b = _e.return))
                      _b.call(_e);
                  } finally {
                    if (e_2)
                      throw e_2.error;
                  }
                }
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_d && !_d.done && (_a = _c.return))
                _a.call(_c);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        } else if (retryAfterHeader) {
          updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);
        }
        return updatedRateLimits;
      }
      exports.updateRateLimits = updateRateLimits;
    }
  });

  // node_modules/@sentry/utils/dist/index.js
  var require_dist3 = __commonJS({
    "node_modules/@sentry/utils/dist/index.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      tslib_1.__exportStar(require_async(), exports);
      tslib_1.__exportStar(require_browser(), exports);
      tslib_1.__exportStar(require_dsn(), exports);
      tslib_1.__exportStar(require_enums(), exports);
      tslib_1.__exportStar(require_error(), exports);
      tslib_1.__exportStar(require_global(), exports);
      tslib_1.__exportStar(require_instrument(), exports);
      tslib_1.__exportStar(require_is(), exports);
      tslib_1.__exportStar(require_logger(), exports);
      tslib_1.__exportStar(require_memo(), exports);
      tslib_1.__exportStar(require_misc(), exports);
      tslib_1.__exportStar(require_node(), exports);
      tslib_1.__exportStar(require_normalize(), exports);
      tslib_1.__exportStar(require_object(), exports);
      tslib_1.__exportStar(require_path(), exports);
      tslib_1.__exportStar(require_promisebuffer(), exports);
      tslib_1.__exportStar(require_severity2(), exports);
      tslib_1.__exportStar(require_stacktrace(), exports);
      tslib_1.__exportStar(require_status(), exports);
      tslib_1.__exportStar(require_string(), exports);
      tslib_1.__exportStar(require_supports(), exports);
      tslib_1.__exportStar(require_syncpromise(), exports);
      tslib_1.__exportStar(require_time(), exports);
      tslib_1.__exportStar(require_tracing2(), exports);
      tslib_1.__exportStar(require_env(), exports);
      tslib_1.__exportStar(require_envelope(), exports);
      tslib_1.__exportStar(require_clientreport(), exports);
      tslib_1.__exportStar(require_ratelimit(), exports);
    }
  });

  // node_modules/@sentry/hub/dist/scope.js
  var require_scope = __commonJS({
    "node_modules/@sentry/hub/dist/scope.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var MAX_BREADCRUMBS = 100;
      var Scope = function() {
        function Scope2() {
          this._notifyingListeners = false;
          this._scopeListeners = [];
          this._eventProcessors = [];
          this._breadcrumbs = [];
          this._user = {};
          this._tags = {};
          this._extra = {};
          this._contexts = {};
          this._sdkProcessingMetadata = {};
        }
        Scope2.clone = function(scope) {
          var newScope = new Scope2();
          if (scope) {
            newScope._breadcrumbs = tslib_1.__spread(scope._breadcrumbs);
            newScope._tags = tslib_1.__assign({}, scope._tags);
            newScope._extra = tslib_1.__assign({}, scope._extra);
            newScope._contexts = tslib_1.__assign({}, scope._contexts);
            newScope._user = scope._user;
            newScope._level = scope._level;
            newScope._span = scope._span;
            newScope._session = scope._session;
            newScope._transactionName = scope._transactionName;
            newScope._fingerprint = scope._fingerprint;
            newScope._eventProcessors = tslib_1.__spread(scope._eventProcessors);
            newScope._requestSession = scope._requestSession;
          }
          return newScope;
        };
        Scope2.prototype.addScopeListener = function(callback) {
          this._scopeListeners.push(callback);
        };
        Scope2.prototype.addEventProcessor = function(callback) {
          this._eventProcessors.push(callback);
          return this;
        };
        Scope2.prototype.setUser = function(user) {
          this._user = user || {};
          if (this._session) {
            this._session.update({ user });
          }
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.getUser = function() {
          return this._user;
        };
        Scope2.prototype.getRequestSession = function() {
          return this._requestSession;
        };
        Scope2.prototype.setRequestSession = function(requestSession) {
          this._requestSession = requestSession;
          return this;
        };
        Scope2.prototype.setTags = function(tags) {
          this._tags = tslib_1.__assign(tslib_1.__assign({}, this._tags), tags);
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.setTag = function(key, value) {
          var _a;
          this._tags = tslib_1.__assign(tslib_1.__assign({}, this._tags), (_a = {}, _a[key] = value, _a));
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.setExtras = function(extras) {
          this._extra = tslib_1.__assign(tslib_1.__assign({}, this._extra), extras);
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.setExtra = function(key, extra) {
          var _a;
          this._extra = tslib_1.__assign(tslib_1.__assign({}, this._extra), (_a = {}, _a[key] = extra, _a));
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.setFingerprint = function(fingerprint) {
          this._fingerprint = fingerprint;
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.setLevel = function(level) {
          this._level = level;
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.setTransactionName = function(name) {
          this._transactionName = name;
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.setTransaction = function(name) {
          return this.setTransactionName(name);
        };
        Scope2.prototype.setContext = function(key, context) {
          var _a;
          if (context === null) {
            delete this._contexts[key];
          } else {
            this._contexts = tslib_1.__assign(tslib_1.__assign({}, this._contexts), (_a = {}, _a[key] = context, _a));
          }
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.setSpan = function(span) {
          this._span = span;
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.getSpan = function() {
          return this._span;
        };
        Scope2.prototype.getTransaction = function() {
          var span = this.getSpan();
          return span && span.transaction;
        };
        Scope2.prototype.setSession = function(session) {
          if (!session) {
            delete this._session;
          } else {
            this._session = session;
          }
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.getSession = function() {
          return this._session;
        };
        Scope2.prototype.update = function(captureContext) {
          if (!captureContext) {
            return this;
          }
          if (typeof captureContext === "function") {
            var updatedScope = captureContext(this);
            return updatedScope instanceof Scope2 ? updatedScope : this;
          }
          if (captureContext instanceof Scope2) {
            this._tags = tslib_1.__assign(tslib_1.__assign({}, this._tags), captureContext._tags);
            this._extra = tslib_1.__assign(tslib_1.__assign({}, this._extra), captureContext._extra);
            this._contexts = tslib_1.__assign(tslib_1.__assign({}, this._contexts), captureContext._contexts);
            if (captureContext._user && Object.keys(captureContext._user).length) {
              this._user = captureContext._user;
            }
            if (captureContext._level) {
              this._level = captureContext._level;
            }
            if (captureContext._fingerprint) {
              this._fingerprint = captureContext._fingerprint;
            }
            if (captureContext._requestSession) {
              this._requestSession = captureContext._requestSession;
            }
          } else if (utils_1.isPlainObject(captureContext)) {
            captureContext = captureContext;
            this._tags = tslib_1.__assign(tslib_1.__assign({}, this._tags), captureContext.tags);
            this._extra = tslib_1.__assign(tslib_1.__assign({}, this._extra), captureContext.extra);
            this._contexts = tslib_1.__assign(tslib_1.__assign({}, this._contexts), captureContext.contexts);
            if (captureContext.user) {
              this._user = captureContext.user;
            }
            if (captureContext.level) {
              this._level = captureContext.level;
            }
            if (captureContext.fingerprint) {
              this._fingerprint = captureContext.fingerprint;
            }
            if (captureContext.requestSession) {
              this._requestSession = captureContext.requestSession;
            }
          }
          return this;
        };
        Scope2.prototype.clear = function() {
          this._breadcrumbs = [];
          this._tags = {};
          this._extra = {};
          this._user = {};
          this._contexts = {};
          this._level = void 0;
          this._transactionName = void 0;
          this._fingerprint = void 0;
          this._requestSession = void 0;
          this._span = void 0;
          this._session = void 0;
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.addBreadcrumb = function(breadcrumb, maxBreadcrumbs) {
          var maxCrumbs = typeof maxBreadcrumbs === "number" ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS;
          if (maxCrumbs <= 0) {
            return this;
          }
          var mergedBreadcrumb = tslib_1.__assign({ timestamp: utils_1.dateTimestampInSeconds() }, breadcrumb);
          this._breadcrumbs = tslib_1.__spread(this._breadcrumbs, [mergedBreadcrumb]).slice(-maxCrumbs);
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.clearBreadcrumbs = function() {
          this._breadcrumbs = [];
          this._notifyScopeListeners();
          return this;
        };
        Scope2.prototype.applyToEvent = function(event2, hint) {
          if (this._extra && Object.keys(this._extra).length) {
            event2.extra = tslib_1.__assign(tslib_1.__assign({}, this._extra), event2.extra);
          }
          if (this._tags && Object.keys(this._tags).length) {
            event2.tags = tslib_1.__assign(tslib_1.__assign({}, this._tags), event2.tags);
          }
          if (this._user && Object.keys(this._user).length) {
            event2.user = tslib_1.__assign(tslib_1.__assign({}, this._user), event2.user);
          }
          if (this._contexts && Object.keys(this._contexts).length) {
            event2.contexts = tslib_1.__assign(tslib_1.__assign({}, this._contexts), event2.contexts);
          }
          if (this._level) {
            event2.level = this._level;
          }
          if (this._transactionName) {
            event2.transaction = this._transactionName;
          }
          if (this._span) {
            event2.contexts = tslib_1.__assign({ trace: this._span.getTraceContext() }, event2.contexts);
            var transactionName = this._span.transaction && this._span.transaction.name;
            if (transactionName) {
              event2.tags = tslib_1.__assign({ transaction: transactionName }, event2.tags);
            }
          }
          this._applyFingerprint(event2);
          event2.breadcrumbs = tslib_1.__spread(event2.breadcrumbs || [], this._breadcrumbs);
          event2.breadcrumbs = event2.breadcrumbs.length > 0 ? event2.breadcrumbs : void 0;
          event2.sdkProcessingMetadata = this._sdkProcessingMetadata;
          return this._notifyEventProcessors(tslib_1.__spread(getGlobalEventProcessors(), this._eventProcessors), event2, hint);
        };
        Scope2.prototype.setSDKProcessingMetadata = function(newData) {
          this._sdkProcessingMetadata = tslib_1.__assign(tslib_1.__assign({}, this._sdkProcessingMetadata), newData);
          return this;
        };
        Scope2.prototype._notifyEventProcessors = function(processors, event2, hint, index) {
          var _this = this;
          if (index === void 0) {
            index = 0;
          }
          return new utils_1.SyncPromise(function(resolve, reject) {
            var processor = processors[index];
            if (event2 === null || typeof processor !== "function") {
              resolve(event2);
            } else {
              var result = processor(tslib_1.__assign({}, event2), hint);
              if (utils_1.isThenable(result)) {
                void result.then(function(final) {
                  return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);
                }).then(null, reject);
              } else {
                void _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);
              }
            }
          });
        };
        Scope2.prototype._notifyScopeListeners = function() {
          var _this = this;
          if (!this._notifyingListeners) {
            this._notifyingListeners = true;
            this._scopeListeners.forEach(function(callback) {
              callback(_this);
            });
            this._notifyingListeners = false;
          }
        };
        Scope2.prototype._applyFingerprint = function(event2) {
          event2.fingerprint = event2.fingerprint ? Array.isArray(event2.fingerprint) ? event2.fingerprint : [event2.fingerprint] : [];
          if (this._fingerprint) {
            event2.fingerprint = event2.fingerprint.concat(this._fingerprint);
          }
          if (event2.fingerprint && !event2.fingerprint.length) {
            delete event2.fingerprint;
          }
        };
        return Scope2;
      }();
      exports.Scope = Scope;
      function getGlobalEventProcessors() {
        return utils_1.getGlobalSingleton("globalEventProcessors", function() {
          return [];
        });
      }
      function addGlobalEventProcessor(callback) {
        getGlobalEventProcessors().push(callback);
      }
      exports.addGlobalEventProcessor = addGlobalEventProcessor;
    }
  });

  // node_modules/@sentry/hub/dist/session.js
  var require_session = __commonJS({
    "node_modules/@sentry/hub/dist/session.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_dist3();
      var Session = function() {
        function Session2(context) {
          this.errors = 0;
          this.sid = utils_1.uuid4();
          this.duration = 0;
          this.status = "ok";
          this.init = true;
          this.ignoreDuration = false;
          var startingTime = utils_1.timestampInSeconds();
          this.timestamp = startingTime;
          this.started = startingTime;
          if (context) {
            this.update(context);
          }
        }
        Session2.prototype.update = function(context) {
          if (context === void 0) {
            context = {};
          }
          if (context.user) {
            if (!this.ipAddress && context.user.ip_address) {
              this.ipAddress = context.user.ip_address;
            }
            if (!this.did && !context.did) {
              this.did = context.user.id || context.user.email || context.user.username;
            }
          }
          this.timestamp = context.timestamp || utils_1.timestampInSeconds();
          if (context.ignoreDuration) {
            this.ignoreDuration = context.ignoreDuration;
          }
          if (context.sid) {
            this.sid = context.sid.length === 32 ? context.sid : utils_1.uuid4();
          }
          if (context.init !== void 0) {
            this.init = context.init;
          }
          if (!this.did && context.did) {
            this.did = "" + context.did;
          }
          if (typeof context.started === "number") {
            this.started = context.started;
          }
          if (this.ignoreDuration) {
            this.duration = void 0;
          } else if (typeof context.duration === "number") {
            this.duration = context.duration;
          } else {
            var duration2 = this.timestamp - this.started;
            this.duration = duration2 >= 0 ? duration2 : 0;
          }
          if (context.release) {
            this.release = context.release;
          }
          if (context.environment) {
            this.environment = context.environment;
          }
          if (!this.ipAddress && context.ipAddress) {
            this.ipAddress = context.ipAddress;
          }
          if (!this.userAgent && context.userAgent) {
            this.userAgent = context.userAgent;
          }
          if (typeof context.errors === "number") {
            this.errors = context.errors;
          }
          if (context.status) {
            this.status = context.status;
          }
        };
        Session2.prototype.close = function(status) {
          if (status) {
            this.update({ status });
          } else if (this.status === "ok") {
            this.update({ status: "exited" });
          } else {
            this.update();
          }
        };
        Session2.prototype.toJSON = function() {
          return utils_1.dropUndefinedKeys({
            sid: "" + this.sid,
            init: this.init,
            started: new Date(this.started * 1e3).toISOString(),
            timestamp: new Date(this.timestamp * 1e3).toISOString(),
            status: this.status,
            errors: this.errors,
            did: typeof this.did === "number" || typeof this.did === "string" ? "" + this.did : void 0,
            duration: this.duration,
            attrs: {
              release: this.release,
              environment: this.environment,
              ip_address: this.ipAddress,
              user_agent: this.userAgent
            }
          });
        };
        return Session2;
      }();
      exports.Session = Session;
    }
  });

  // node_modules/@sentry/hub/dist/flags.js
  var require_flags2 = __commonJS({
    "node_modules/@sentry/hub/dist/flags.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === "undefined" ? true : __SENTRY_DEBUG__;
    }
  });

  // node_modules/@sentry/hub/dist/hub.js
  var require_hub = __commonJS({
    "node_modules/@sentry/hub/dist/hub.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var flags_1 = require_flags2();
      var scope_1 = require_scope();
      var session_1 = require_session();
      exports.API_VERSION = 4;
      var DEFAULT_BREADCRUMBS = 100;
      var Hub = function() {
        function Hub2(client, scope, _version) {
          if (scope === void 0) {
            scope = new scope_1.Scope();
          }
          if (_version === void 0) {
            _version = exports.API_VERSION;
          }
          this._version = _version;
          this._stack = [{}];
          this.getStackTop().scope = scope;
          if (client) {
            this.bindClient(client);
          }
        }
        Hub2.prototype.isOlderThan = function(version) {
          return this._version < version;
        };
        Hub2.prototype.bindClient = function(client) {
          var top = this.getStackTop();
          top.client = client;
          if (client && client.setupIntegrations) {
            client.setupIntegrations();
          }
        };
        Hub2.prototype.pushScope = function() {
          var scope = scope_1.Scope.clone(this.getScope());
          this.getStack().push({
            client: this.getClient(),
            scope
          });
          return scope;
        };
        Hub2.prototype.popScope = function() {
          if (this.getStack().length <= 1)
            return false;
          return !!this.getStack().pop();
        };
        Hub2.prototype.withScope = function(callback) {
          var scope = this.pushScope();
          try {
            callback(scope);
          } finally {
            this.popScope();
          }
        };
        Hub2.prototype.getClient = function() {
          return this.getStackTop().client;
        };
        Hub2.prototype.getScope = function() {
          return this.getStackTop().scope;
        };
        Hub2.prototype.getStack = function() {
          return this._stack;
        };
        Hub2.prototype.getStackTop = function() {
          return this._stack[this._stack.length - 1];
        };
        Hub2.prototype.captureException = function(exception, hint) {
          var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : utils_1.uuid4();
          var finalHint = hint;
          if (!hint) {
            var syntheticException = void 0;
            try {
              throw new Error("Sentry syntheticException");
            } catch (exception2) {
              syntheticException = exception2;
            }
            finalHint = {
              originalException: exception,
              syntheticException
            };
          }
          this._invokeClient("captureException", exception, tslib_1.__assign(tslib_1.__assign({}, finalHint), { event_id: eventId }));
          return eventId;
        };
        Hub2.prototype.captureMessage = function(message, level, hint) {
          var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : utils_1.uuid4();
          var finalHint = hint;
          if (!hint) {
            var syntheticException = void 0;
            try {
              throw new Error(message);
            } catch (exception) {
              syntheticException = exception;
            }
            finalHint = {
              originalException: message,
              syntheticException
            };
          }
          this._invokeClient("captureMessage", message, level, tslib_1.__assign(tslib_1.__assign({}, finalHint), { event_id: eventId }));
          return eventId;
        };
        Hub2.prototype.captureEvent = function(event2, hint) {
          var eventId = hint && hint.event_id ? hint.event_id : utils_1.uuid4();
          if (event2.type !== "transaction") {
            this._lastEventId = eventId;
          }
          this._invokeClient("captureEvent", event2, tslib_1.__assign(tslib_1.__assign({}, hint), { event_id: eventId }));
          return eventId;
        };
        Hub2.prototype.lastEventId = function() {
          return this._lastEventId;
        };
        Hub2.prototype.addBreadcrumb = function(breadcrumb, hint) {
          var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
          if (!scope || !client)
            return;
          var _b = client.getOptions && client.getOptions() || {}, _c = _b.beforeBreadcrumb, beforeBreadcrumb = _c === void 0 ? null : _c, _d = _b.maxBreadcrumbs, maxBreadcrumbs = _d === void 0 ? DEFAULT_BREADCRUMBS : _d;
          if (maxBreadcrumbs <= 0)
            return;
          var timestamp = utils_1.dateTimestampInSeconds();
          var mergedBreadcrumb = tslib_1.__assign({ timestamp }, breadcrumb);
          var finalBreadcrumb = beforeBreadcrumb ? utils_1.consoleSandbox(function() {
            return beforeBreadcrumb(mergedBreadcrumb, hint);
          }) : mergedBreadcrumb;
          if (finalBreadcrumb === null)
            return;
          scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);
        };
        Hub2.prototype.setUser = function(user) {
          var scope = this.getScope();
          if (scope)
            scope.setUser(user);
        };
        Hub2.prototype.setTags = function(tags) {
          var scope = this.getScope();
          if (scope)
            scope.setTags(tags);
        };
        Hub2.prototype.setExtras = function(extras) {
          var scope = this.getScope();
          if (scope)
            scope.setExtras(extras);
        };
        Hub2.prototype.setTag = function(key, value) {
          var scope = this.getScope();
          if (scope)
            scope.setTag(key, value);
        };
        Hub2.prototype.setExtra = function(key, extra) {
          var scope = this.getScope();
          if (scope)
            scope.setExtra(key, extra);
        };
        Hub2.prototype.setContext = function(name, context) {
          var scope = this.getScope();
          if (scope)
            scope.setContext(name, context);
        };
        Hub2.prototype.configureScope = function(callback) {
          var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
          if (scope && client) {
            callback(scope);
          }
        };
        Hub2.prototype.run = function(callback) {
          var oldHub = makeMain(this);
          try {
            callback(this);
          } finally {
            makeMain(oldHub);
          }
        };
        Hub2.prototype.getIntegration = function(integration) {
          var client = this.getClient();
          if (!client)
            return null;
          try {
            return client.getIntegration(integration);
          } catch (_oO) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Cannot retrieve integration " + integration.id + " from the current Hub");
            return null;
          }
        };
        Hub2.prototype.startSpan = function(context) {
          return this._callExtensionMethod("startSpan", context);
        };
        Hub2.prototype.startTransaction = function(context, customSamplingContext) {
          return this._callExtensionMethod("startTransaction", context, customSamplingContext);
        };
        Hub2.prototype.traceHeaders = function() {
          return this._callExtensionMethod("traceHeaders");
        };
        Hub2.prototype.captureSession = function(endSession) {
          if (endSession === void 0) {
            endSession = false;
          }
          if (endSession) {
            return this.endSession();
          }
          this._sendSessionUpdate();
        };
        Hub2.prototype.endSession = function() {
          var layer = this.getStackTop();
          var scope = layer && layer.scope;
          var session = scope && scope.getSession();
          if (session) {
            session.close();
          }
          this._sendSessionUpdate();
          if (scope) {
            scope.setSession();
          }
        };
        Hub2.prototype.startSession = function(context) {
          var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
          var _b = client && client.getOptions() || {}, release = _b.release, environment = _b.environment;
          var global2 = utils_1.getGlobalObject();
          var userAgent = (global2.navigator || {}).userAgent;
          var session = new session_1.Session(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({
            release,
            environment
          }, scope && { user: scope.getUser() }), userAgent && { userAgent }), context));
          if (scope) {
            var currentSession = scope.getSession && scope.getSession();
            if (currentSession && currentSession.status === "ok") {
              currentSession.update({ status: "exited" });
            }
            this.endSession();
            scope.setSession(session);
          }
          return session;
        };
        Hub2.prototype._sendSessionUpdate = function() {
          var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
          if (!scope)
            return;
          var session = scope.getSession && scope.getSession();
          if (session) {
            if (client && client.captureSession) {
              client.captureSession(session);
            }
          }
        };
        Hub2.prototype._invokeClient = function(method) {
          var _a;
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }
          var _b = this.getStackTop(), scope = _b.scope, client = _b.client;
          if (client && client[method]) {
            (_a = client)[method].apply(_a, tslib_1.__spread(args, [scope]));
          }
        };
        Hub2.prototype._callExtensionMethod = function(method) {
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }
          var carrier = getMainCarrier();
          var sentry = carrier.__SENTRY__;
          if (sentry && sentry.extensions && typeof sentry.extensions[method] === "function") {
            return sentry.extensions[method].apply(this, args);
          }
          flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Extension method " + method + " couldn't be found, doing nothing.");
        };
        return Hub2;
      }();
      exports.Hub = Hub;
      function getMainCarrier() {
        var carrier = utils_1.getGlobalObject();
        carrier.__SENTRY__ = carrier.__SENTRY__ || {
          extensions: {},
          hub: void 0
        };
        return carrier;
      }
      exports.getMainCarrier = getMainCarrier;
      function makeMain(hub) {
        var registry = getMainCarrier();
        var oldHub = getHubFromCarrier(registry);
        setHubOnCarrier(registry, hub);
        return oldHub;
      }
      exports.makeMain = makeMain;
      function getCurrentHub() {
        var registry = getMainCarrier();
        if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(exports.API_VERSION)) {
          setHubOnCarrier(registry, new Hub());
        }
        if (utils_1.isNodeEnv()) {
          return getHubFromActiveDomain(registry);
        }
        return getHubFromCarrier(registry);
      }
      exports.getCurrentHub = getCurrentHub;
      function getActiveDomain() {
        flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Function `getActiveDomain` is deprecated and will be removed in a future version.");
        var sentry = getMainCarrier().__SENTRY__;
        return sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;
      }
      exports.getActiveDomain = getActiveDomain;
      function getHubFromActiveDomain(registry) {
        try {
          var sentry = getMainCarrier().__SENTRY__;
          var activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;
          if (!activeDomain) {
            return getHubFromCarrier(registry);
          }
          if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(exports.API_VERSION)) {
            var registryHubTopStack = getHubFromCarrier(registry).getStackTop();
            setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, scope_1.Scope.clone(registryHubTopStack.scope)));
          }
          return getHubFromCarrier(activeDomain);
        } catch (_Oo) {
          return getHubFromCarrier(registry);
        }
      }
      function hasHubOnCarrier(carrier) {
        return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);
      }
      function getHubFromCarrier(carrier) {
        return utils_1.getGlobalSingleton("hub", function() {
          return new Hub();
        }, carrier);
      }
      exports.getHubFromCarrier = getHubFromCarrier;
      function setHubOnCarrier(carrier, hub) {
        if (!carrier)
          return false;
        var __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};
        __SENTRY__.hub = hub;
        return true;
      }
      exports.setHubOnCarrier = setHubOnCarrier;
    }
  });

  // node_modules/@sentry/hub/dist/sessionflusher.js
  var require_sessionflusher = __commonJS({
    "node_modules/@sentry/hub/dist/sessionflusher.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_dist3();
      var flags_1 = require_flags2();
      var hub_1 = require_hub();
      var SessionFlusher = function() {
        function SessionFlusher2(transport, attrs) {
          var _this = this;
          this.flushTimeout = 60;
          this._pendingAggregates = {};
          this._isEnabled = true;
          this._transport = transport;
          this._intervalId = setInterval(function() {
            return _this.flush();
          }, this.flushTimeout * 1e3);
          this._sessionAttrs = attrs;
        }
        SessionFlusher2.prototype.sendSessionAggregates = function(sessionAggregates) {
          if (!this._transport.sendSession) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Dropping session because custom transport doesn't implement sendSession");
            return;
          }
          void this._transport.sendSession(sessionAggregates).then(null, function(reason) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.error("Error while sending session:", reason);
          });
        };
        SessionFlusher2.prototype.flush = function() {
          var sessionAggregates = this.getSessionAggregates();
          if (sessionAggregates.aggregates.length === 0) {
            return;
          }
          this._pendingAggregates = {};
          this.sendSessionAggregates(sessionAggregates);
        };
        SessionFlusher2.prototype.getSessionAggregates = function() {
          var _this = this;
          var aggregates = Object.keys(this._pendingAggregates).map(function(key) {
            return _this._pendingAggregates[parseInt(key)];
          });
          var sessionAggregates = {
            attrs: this._sessionAttrs,
            aggregates
          };
          return utils_1.dropUndefinedKeys(sessionAggregates);
        };
        SessionFlusher2.prototype.close = function() {
          clearInterval(this._intervalId);
          this._isEnabled = false;
          this.flush();
        };
        SessionFlusher2.prototype.incrementSessionStatusCount = function() {
          if (!this._isEnabled) {
            return;
          }
          var scope = hub_1.getCurrentHub().getScope();
          var requestSession = scope && scope.getRequestSession();
          if (requestSession && requestSession.status) {
            this._incrementSessionStatusCount(requestSession.status, new Date());
            if (scope) {
              scope.setRequestSession(void 0);
            }
          }
        };
        SessionFlusher2.prototype._incrementSessionStatusCount = function(status, date) {
          var sessionStartedTrunc = new Date(date).setSeconds(0, 0);
          this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};
          var aggregationCounts = this._pendingAggregates[sessionStartedTrunc];
          if (!aggregationCounts.started) {
            aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();
          }
          switch (status) {
            case "errored":
              aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;
              return aggregationCounts.errored;
            case "ok":
              aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;
              return aggregationCounts.exited;
            default:
              aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;
              return aggregationCounts.crashed;
          }
        };
        return SessionFlusher2;
      }();
      exports.SessionFlusher = SessionFlusher;
    }
  });

  // node_modules/@sentry/hub/dist/index.js
  var require_dist4 = __commonJS({
    "node_modules/@sentry/hub/dist/index.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var scope_1 = require_scope();
      exports.addGlobalEventProcessor = scope_1.addGlobalEventProcessor;
      exports.Scope = scope_1.Scope;
      var session_1 = require_session();
      exports.Session = session_1.Session;
      var sessionflusher_1 = require_sessionflusher();
      exports.SessionFlusher = sessionflusher_1.SessionFlusher;
      var hub_1 = require_hub();
      exports.getActiveDomain = hub_1.getActiveDomain;
      exports.getCurrentHub = hub_1.getCurrentHub;
      exports.getHubFromCarrier = hub_1.getHubFromCarrier;
      exports.getMainCarrier = hub_1.getMainCarrier;
      exports.Hub = hub_1.Hub;
      exports.makeMain = hub_1.makeMain;
      exports.setHubOnCarrier = hub_1.setHubOnCarrier;
    }
  });

  // node_modules/@sentry/minimal/dist/index.js
  var require_dist5 = __commonJS({
    "node_modules/@sentry/minimal/dist/index.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var hub_1 = require_dist4();
      function callOnHub(method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        var hub = hub_1.getCurrentHub();
        if (hub && hub[method]) {
          return hub[method].apply(hub, tslib_1.__spread(args));
        }
        throw new Error("No hub defined or " + method + " was not found on the hub, please open a bug report.");
      }
      function captureException(exception, captureContext) {
        var syntheticException = new Error("Sentry syntheticException");
        return callOnHub("captureException", exception, {
          captureContext,
          originalException: exception,
          syntheticException
        });
      }
      exports.captureException = captureException;
      function captureMessage(message, captureContext) {
        var syntheticException = new Error(message);
        var level = typeof captureContext === "string" ? captureContext : void 0;
        var context = typeof captureContext !== "string" ? { captureContext } : void 0;
        return callOnHub("captureMessage", message, level, tslib_1.__assign({ originalException: message, syntheticException }, context));
      }
      exports.captureMessage = captureMessage;
      function captureEvent(event2) {
        return callOnHub("captureEvent", event2);
      }
      exports.captureEvent = captureEvent;
      function configureScope(callback) {
        callOnHub("configureScope", callback);
      }
      exports.configureScope = configureScope;
      function addBreadcrumb(breadcrumb) {
        callOnHub("addBreadcrumb", breadcrumb);
      }
      exports.addBreadcrumb = addBreadcrumb;
      function setContext(name, context) {
        callOnHub("setContext", name, context);
      }
      exports.setContext = setContext;
      function setExtras(extras) {
        callOnHub("setExtras", extras);
      }
      exports.setExtras = setExtras;
      function setTags(tags) {
        callOnHub("setTags", tags);
      }
      exports.setTags = setTags;
      function setExtra(key, extra) {
        callOnHub("setExtra", key, extra);
      }
      exports.setExtra = setExtra;
      function setTag(key, value) {
        callOnHub("setTag", key, value);
      }
      exports.setTag = setTag;
      function setUser(user) {
        callOnHub("setUser", user);
      }
      exports.setUser = setUser;
      function withScope(callback) {
        callOnHub("withScope", callback);
      }
      exports.withScope = withScope;
      function _callOnClient(method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        callOnHub.apply(void 0, tslib_1.__spread(["_invokeClient", method], args));
      }
      exports._callOnClient = _callOnClient;
      function startTransaction(context, customSamplingContext) {
        return callOnHub("startTransaction", tslib_1.__assign({}, context), customSamplingContext);
      }
      exports.startTransaction = startTransaction;
    }
  });

  // node_modules/@sentry/core/dist/api.js
  var require_api = __commonJS({
    "node_modules/@sentry/core/dist/api.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_dist3();
      var SENTRY_API_VERSION = "7";
      var API = function() {
        function API2(dsn, metadata, tunnel) {
          if (metadata === void 0) {
            metadata = {};
          }
          this.dsn = dsn;
          this._dsnObject = utils_1.makeDsn(dsn);
          this.metadata = metadata;
          this._tunnel = tunnel;
        }
        API2.prototype.getDsn = function() {
          return this._dsnObject;
        };
        API2.prototype.forceEnvelope = function() {
          return !!this._tunnel;
        };
        API2.prototype.getBaseApiEndpoint = function() {
          return getBaseApiEndpoint(this._dsnObject);
        };
        API2.prototype.getStoreEndpoint = function() {
          return getStoreEndpoint(this._dsnObject);
        };
        API2.prototype.getStoreEndpointWithUrlEncodedAuth = function() {
          return getStoreEndpointWithUrlEncodedAuth(this._dsnObject);
        };
        API2.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function() {
          return getEnvelopeEndpointWithUrlEncodedAuth(this._dsnObject, this._tunnel);
        };
        return API2;
      }();
      exports.API = API;
      function initAPIDetails(dsn, metadata, tunnel) {
        return {
          initDsn: dsn,
          metadata: metadata || {},
          dsn: utils_1.makeDsn(dsn),
          tunnel
        };
      }
      exports.initAPIDetails = initAPIDetails;
      function getBaseApiEndpoint(dsn) {
        var protocol = dsn.protocol ? dsn.protocol + ":" : "";
        var port = dsn.port ? ":" + dsn.port : "";
        return protocol + "//" + dsn.host + port + (dsn.path ? "/" + dsn.path : "") + "/api/";
      }
      function _getIngestEndpoint(dsn, target) {
        return "" + getBaseApiEndpoint(dsn) + dsn.projectId + "/" + target + "/";
      }
      function _encodedAuth(dsn) {
        return utils_1.urlEncode({
          sentry_key: dsn.publicKey,
          sentry_version: SENTRY_API_VERSION
        });
      }
      function getStoreEndpoint(dsn) {
        return _getIngestEndpoint(dsn, "store");
      }
      function getStoreEndpointWithUrlEncodedAuth(dsn) {
        return getStoreEndpoint(dsn) + "?" + _encodedAuth(dsn);
      }
      exports.getStoreEndpointWithUrlEncodedAuth = getStoreEndpointWithUrlEncodedAuth;
      function _getEnvelopeEndpoint(dsn) {
        return _getIngestEndpoint(dsn, "envelope");
      }
      function getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel) {
        return tunnel ? tunnel : _getEnvelopeEndpoint(dsn) + "?" + _encodedAuth(dsn);
      }
      exports.getEnvelopeEndpointWithUrlEncodedAuth = getEnvelopeEndpointWithUrlEncodedAuth;
      function getRequestHeaders(dsn, clientName, clientVersion) {
        var header = ["Sentry sentry_version=" + SENTRY_API_VERSION];
        header.push("sentry_client=" + clientName + "/" + clientVersion);
        header.push("sentry_key=" + dsn.publicKey);
        if (dsn.pass) {
          header.push("sentry_secret=" + dsn.pass);
        }
        return {
          "Content-Type": "application/json",
          "X-Sentry-Auth": header.join(", ")
        };
      }
      exports.getRequestHeaders = getRequestHeaders;
      function getReportDialogEndpoint(dsnLike, dialogOptions) {
        var dsn = utils_1.makeDsn(dsnLike);
        var endpoint = getBaseApiEndpoint(dsn) + "embed/error-page/";
        var encodedOptions = "dsn=" + utils_1.dsnToString(dsn);
        for (var key in dialogOptions) {
          if (key === "dsn") {
            continue;
          }
          if (key === "user") {
            if (!dialogOptions.user) {
              continue;
            }
            if (dialogOptions.user.name) {
              encodedOptions += "&name=" + encodeURIComponent(dialogOptions.user.name);
            }
            if (dialogOptions.user.email) {
              encodedOptions += "&email=" + encodeURIComponent(dialogOptions.user.email);
            }
          } else {
            encodedOptions += "&" + encodeURIComponent(key) + "=" + encodeURIComponent(dialogOptions[key]);
          }
        }
        return endpoint + "?" + encodedOptions;
      }
      exports.getReportDialogEndpoint = getReportDialogEndpoint;
    }
  });

  // node_modules/@sentry/core/dist/flags.js
  var require_flags3 = __commonJS({
    "node_modules/@sentry/core/dist/flags.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === "undefined" ? true : __SENTRY_DEBUG__;
    }
  });

  // node_modules/@sentry/core/dist/integration.js
  var require_integration = __commonJS({
    "node_modules/@sentry/core/dist/integration.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var hub_1 = require_dist4();
      var utils_1 = require_dist3();
      var flags_1 = require_flags3();
      exports.installedIntegrations = [];
      function filterDuplicates(integrations) {
        return integrations.reduce(function(acc, integrations2) {
          if (acc.every(function(accIntegration) {
            return integrations2.name !== accIntegration.name;
          })) {
            acc.push(integrations2);
          }
          return acc;
        }, []);
      }
      function getIntegrationsToSetup(options) {
        var defaultIntegrations = options.defaultIntegrations && tslib_1.__spread(options.defaultIntegrations) || [];
        var userIntegrations = options.integrations;
        var integrations = tslib_1.__spread(filterDuplicates(defaultIntegrations));
        if (Array.isArray(userIntegrations)) {
          integrations = tslib_1.__spread(integrations.filter(function(integrations2) {
            return userIntegrations.every(function(userIntegration) {
              return userIntegration.name !== integrations2.name;
            });
          }), filterDuplicates(userIntegrations));
        } else if (typeof userIntegrations === "function") {
          integrations = userIntegrations(integrations);
          integrations = Array.isArray(integrations) ? integrations : [integrations];
        }
        var integrationsNames = integrations.map(function(i) {
          return i.name;
        });
        var alwaysLastToRun = "Debug";
        if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {
          integrations.push.apply(integrations, tslib_1.__spread(integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1)));
        }
        return integrations;
      }
      exports.getIntegrationsToSetup = getIntegrationsToSetup;
      function setupIntegration(integration) {
        if (exports.installedIntegrations.indexOf(integration.name) !== -1) {
          return;
        }
        integration.setupOnce(hub_1.addGlobalEventProcessor, hub_1.getCurrentHub);
        exports.installedIntegrations.push(integration.name);
        flags_1.IS_DEBUG_BUILD && utils_1.logger.log("Integration installed: " + integration.name);
      }
      exports.setupIntegration = setupIntegration;
      function setupIntegrations(options) {
        var integrations = {};
        getIntegrationsToSetup(options).forEach(function(integration) {
          integrations[integration.name] = integration;
          setupIntegration(integration);
        });
        utils_1.addNonEnumerableProperty(integrations, "initialized", true);
        return integrations;
      }
      exports.setupIntegrations = setupIntegrations;
    }
  });

  // node_modules/@sentry/core/dist/baseclient.js
  var require_baseclient = __commonJS({
    "node_modules/@sentry/core/dist/baseclient.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var hub_1 = require_dist4();
      var utils_1 = require_dist3();
      var flags_1 = require_flags3();
      var integration_1 = require_integration();
      var ALREADY_SEEN_ERROR = "Not capturing exception because it's already been captured.";
      var BaseClient = function() {
        function BaseClient2(backendClass, options) {
          this._integrations = {};
          this._numProcessing = 0;
          this._backend = new backendClass(options);
          this._options = options;
          if (options.dsn) {
            this._dsn = utils_1.makeDsn(options.dsn);
          }
        }
        BaseClient2.prototype.captureException = function(exception, hint, scope) {
          var _this = this;
          if (utils_1.checkOrSetAlreadyCaught(exception)) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.log(ALREADY_SEEN_ERROR);
            return;
          }
          var eventId = hint && hint.event_id;
          this._process(this._getBackend().eventFromException(exception, hint).then(function(event2) {
            return _this._captureEvent(event2, hint, scope);
          }).then(function(result) {
            eventId = result;
          }));
          return eventId;
        };
        BaseClient2.prototype.captureMessage = function(message, level, hint, scope) {
          var _this = this;
          var eventId = hint && hint.event_id;
          var promisedEvent = utils_1.isPrimitive(message) ? this._getBackend().eventFromMessage(String(message), level, hint) : this._getBackend().eventFromException(message, hint);
          this._process(promisedEvent.then(function(event2) {
            return _this._captureEvent(event2, hint, scope);
          }).then(function(result) {
            eventId = result;
          }));
          return eventId;
        };
        BaseClient2.prototype.captureEvent = function(event2, hint, scope) {
          if (hint && hint.originalException && utils_1.checkOrSetAlreadyCaught(hint.originalException)) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.log(ALREADY_SEEN_ERROR);
            return;
          }
          var eventId = hint && hint.event_id;
          this._process(this._captureEvent(event2, hint, scope).then(function(result) {
            eventId = result;
          }));
          return eventId;
        };
        BaseClient2.prototype.captureSession = function(session) {
          if (!this._isEnabled()) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("SDK not enabled, will not capture session.");
            return;
          }
          if (!(typeof session.release === "string")) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Discarded session because of missing or non-string release");
          } else {
            this._sendSession(session);
            session.update({ init: false });
          }
        };
        BaseClient2.prototype.getDsn = function() {
          return this._dsn;
        };
        BaseClient2.prototype.getOptions = function() {
          return this._options;
        };
        BaseClient2.prototype.getTransport = function() {
          return this._getBackend().getTransport();
        };
        BaseClient2.prototype.flush = function(timeout) {
          var _this = this;
          return this._isClientDoneProcessing(timeout).then(function(clientFinished) {
            return _this.getTransport().close(timeout).then(function(transportFlushed) {
              return clientFinished && transportFlushed;
            });
          });
        };
        BaseClient2.prototype.close = function(timeout) {
          var _this = this;
          return this.flush(timeout).then(function(result) {
            _this.getOptions().enabled = false;
            return result;
          });
        };
        BaseClient2.prototype.setupIntegrations = function() {
          if (this._isEnabled() && !this._integrations.initialized) {
            this._integrations = integration_1.setupIntegrations(this._options);
          }
        };
        BaseClient2.prototype.getIntegration = function(integration) {
          try {
            return this._integrations[integration.id] || null;
          } catch (_oO) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Cannot retrieve integration " + integration.id + " from the current Client");
            return null;
          }
        };
        BaseClient2.prototype._updateSessionFromEvent = function(session, event2) {
          var e_1, _a;
          var crashed = false;
          var errored = false;
          var exceptions = event2.exception && event2.exception.values;
          if (exceptions) {
            errored = true;
            try {
              for (var exceptions_1 = tslib_1.__values(exceptions), exceptions_1_1 = exceptions_1.next(); !exceptions_1_1.done; exceptions_1_1 = exceptions_1.next()) {
                var ex = exceptions_1_1.value;
                var mechanism = ex.mechanism;
                if (mechanism && mechanism.handled === false) {
                  crashed = true;
                  break;
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (exceptions_1_1 && !exceptions_1_1.done && (_a = exceptions_1.return))
                  _a.call(exceptions_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }
          var sessionNonTerminal = session.status === "ok";
          var shouldUpdateAndSend = sessionNonTerminal && session.errors === 0 || sessionNonTerminal && crashed;
          if (shouldUpdateAndSend) {
            session.update(tslib_1.__assign(tslib_1.__assign({}, crashed && { status: "crashed" }), { errors: session.errors || Number(errored || crashed) }));
            this.captureSession(session);
          }
        };
        BaseClient2.prototype._sendSession = function(session) {
          this._getBackend().sendSession(session);
        };
        BaseClient2.prototype._isClientDoneProcessing = function(timeout) {
          var _this = this;
          return new utils_1.SyncPromise(function(resolve) {
            var ticked = 0;
            var tick = 1;
            var interval = setInterval(function() {
              if (_this._numProcessing == 0) {
                clearInterval(interval);
                resolve(true);
              } else {
                ticked += tick;
                if (timeout && ticked >= timeout) {
                  clearInterval(interval);
                  resolve(false);
                }
              }
            }, tick);
          });
        };
        BaseClient2.prototype._getBackend = function() {
          return this._backend;
        };
        BaseClient2.prototype._isEnabled = function() {
          return this.getOptions().enabled !== false && this._dsn !== void 0;
        };
        BaseClient2.prototype._prepareEvent = function(event2, scope, hint) {
          var _this = this;
          var _a = this.getOptions(), _b = _a.normalizeDepth, normalizeDepth = _b === void 0 ? 3 : _b, _c = _a.normalizeMaxBreadth, normalizeMaxBreadth = _c === void 0 ? 1e3 : _c;
          var prepared = tslib_1.__assign(tslib_1.__assign({}, event2), { event_id: event2.event_id || (hint && hint.event_id ? hint.event_id : utils_1.uuid4()), timestamp: event2.timestamp || utils_1.dateTimestampInSeconds() });
          this._applyClientOptions(prepared);
          this._applyIntegrationsMetadata(prepared);
          var finalScope = scope;
          if (hint && hint.captureContext) {
            finalScope = hub_1.Scope.clone(finalScope).update(hint.captureContext);
          }
          var result = utils_1.resolvedSyncPromise(prepared);
          if (finalScope) {
            result = finalScope.applyToEvent(prepared, hint);
          }
          return result.then(function(evt) {
            if (evt) {
              evt.sdkProcessingMetadata = tslib_1.__assign(tslib_1.__assign({}, evt.sdkProcessingMetadata), { normalizeDepth: utils_1.normalize(normalizeDepth) + " (" + typeof normalizeDepth + ")" });
            }
            if (typeof normalizeDepth === "number" && normalizeDepth > 0) {
              return _this._normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);
            }
            return evt;
          });
        };
        BaseClient2.prototype._normalizeEvent = function(event2, depth, maxBreadth) {
          if (!event2) {
            return null;
          }
          var normalized = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, event2), event2.breadcrumbs && {
            breadcrumbs: event2.breadcrumbs.map(function(b) {
              return tslib_1.__assign(tslib_1.__assign({}, b), b.data && {
                data: utils_1.normalize(b.data, depth, maxBreadth)
              });
            })
          }), event2.user && {
            user: utils_1.normalize(event2.user, depth, maxBreadth)
          }), event2.contexts && {
            contexts: utils_1.normalize(event2.contexts, depth, maxBreadth)
          }), event2.extra && {
            extra: utils_1.normalize(event2.extra, depth, maxBreadth)
          });
          if (event2.contexts && event2.contexts.trace) {
            normalized.contexts.trace = event2.contexts.trace;
          }
          normalized.sdkProcessingMetadata = tslib_1.__assign(tslib_1.__assign({}, normalized.sdkProcessingMetadata), { baseClientNormalized: true });
          return normalized;
        };
        BaseClient2.prototype._applyClientOptions = function(event2) {
          var options = this.getOptions();
          var environment = options.environment, release = options.release, dist = options.dist, _a = options.maxValueLength, maxValueLength = _a === void 0 ? 250 : _a;
          if (!("environment" in event2)) {
            event2.environment = "environment" in options ? environment : "production";
          }
          if (event2.release === void 0 && release !== void 0) {
            event2.release = release;
          }
          if (event2.dist === void 0 && dist !== void 0) {
            event2.dist = dist;
          }
          if (event2.message) {
            event2.message = utils_1.truncate(event2.message, maxValueLength);
          }
          var exception = event2.exception && event2.exception.values && event2.exception.values[0];
          if (exception && exception.value) {
            exception.value = utils_1.truncate(exception.value, maxValueLength);
          }
          var request = event2.request;
          if (request && request.url) {
            request.url = utils_1.truncate(request.url, maxValueLength);
          }
        };
        BaseClient2.prototype._applyIntegrationsMetadata = function(event2) {
          var integrationsArray = Object.keys(this._integrations);
          if (integrationsArray.length > 0) {
            event2.sdk = event2.sdk || {};
            event2.sdk.integrations = tslib_1.__spread(event2.sdk.integrations || [], integrationsArray);
          }
        };
        BaseClient2.prototype._sendEvent = function(event2) {
          this._getBackend().sendEvent(event2);
        };
        BaseClient2.prototype._captureEvent = function(event2, hint, scope) {
          return this._processEvent(event2, hint, scope).then(function(finalEvent) {
            return finalEvent.event_id;
          }, function(reason) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.error(reason);
            return void 0;
          });
        };
        BaseClient2.prototype._processEvent = function(event2, hint, scope) {
          var _this = this;
          var _a = this.getOptions(), beforeSend = _a.beforeSend, sampleRate = _a.sampleRate;
          var transport = this.getTransport();
          function recordLostEvent(outcome, category) {
            if (transport.recordLostEvent) {
              transport.recordLostEvent(outcome, category);
            }
          }
          if (!this._isEnabled()) {
            return utils_1.rejectedSyncPromise(new utils_1.SentryError("SDK not enabled, will not capture event."));
          }
          var isTransaction = event2.type === "transaction";
          if (!isTransaction && typeof sampleRate === "number" && Math.random() > sampleRate) {
            recordLostEvent("sample_rate", "event");
            return utils_1.rejectedSyncPromise(new utils_1.SentryError("Discarding event because it's not included in the random sample (sampling rate = " + sampleRate + ")"));
          }
          return this._prepareEvent(event2, scope, hint).then(function(prepared) {
            if (prepared === null) {
              recordLostEvent("event_processor", event2.type || "event");
              throw new utils_1.SentryError("An event processor returned null, will not send event.");
            }
            var isInternalException = hint && hint.data && hint.data.__sentry__ === true;
            if (isInternalException || isTransaction || !beforeSend) {
              return prepared;
            }
            var beforeSendResult = beforeSend(prepared, hint);
            return _ensureBeforeSendRv(beforeSendResult);
          }).then(function(processedEvent) {
            if (processedEvent === null) {
              recordLostEvent("before_send", event2.type || "event");
              throw new utils_1.SentryError("`beforeSend` returned `null`, will not send event.");
            }
            var session = scope && scope.getSession && scope.getSession();
            if (!isTransaction && session) {
              _this._updateSessionFromEvent(session, processedEvent);
            }
            _this._sendEvent(processedEvent);
            return processedEvent;
          }).then(null, function(reason) {
            if (reason instanceof utils_1.SentryError) {
              throw reason;
            }
            _this.captureException(reason, {
              data: {
                __sentry__: true
              },
              originalException: reason
            });
            throw new utils_1.SentryError("Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: " + reason);
          });
        };
        BaseClient2.prototype._process = function(promise) {
          var _this = this;
          this._numProcessing += 1;
          void promise.then(function(value) {
            _this._numProcessing -= 1;
            return value;
          }, function(reason) {
            _this._numProcessing -= 1;
            return reason;
          });
        };
        return BaseClient2;
      }();
      exports.BaseClient = BaseClient;
      function _ensureBeforeSendRv(rv) {
        var nullErr = "`beforeSend` method has to return `null` or a valid event.";
        if (utils_1.isThenable(rv)) {
          return rv.then(function(event2) {
            if (!(utils_1.isPlainObject(event2) || event2 === null)) {
              throw new utils_1.SentryError(nullErr);
            }
            return event2;
          }, function(e) {
            throw new utils_1.SentryError("beforeSend rejected with " + e);
          });
        } else if (!(utils_1.isPlainObject(rv) || rv === null)) {
          throw new utils_1.SentryError(nullErr);
        }
        return rv;
      }
    }
  });

  // node_modules/@sentry/core/dist/request.js
  var require_request = __commonJS({
    "node_modules/@sentry/core/dist/request.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var api_1 = require_api();
      function getSdkMetadataForEnvelopeHeader(api) {
        if (!api.metadata || !api.metadata.sdk) {
          return;
        }
        var _a = api.metadata.sdk, name = _a.name, version = _a.version;
        return { name, version };
      }
      function enhanceEventWithSdkInfo(event2, sdkInfo) {
        if (!sdkInfo) {
          return event2;
        }
        event2.sdk = event2.sdk || {};
        event2.sdk.name = event2.sdk.name || sdkInfo.name;
        event2.sdk.version = event2.sdk.version || sdkInfo.version;
        event2.sdk.integrations = tslib_1.__spread(event2.sdk.integrations || [], sdkInfo.integrations || []);
        event2.sdk.packages = tslib_1.__spread(event2.sdk.packages || [], sdkInfo.packages || []);
        return event2;
      }
      function createSessionEnvelope(session, api) {
        var sdkInfo = getSdkMetadataForEnvelopeHeader(api);
        var envelopeHeaders = tslib_1.__assign(tslib_1.__assign({ sent_at: new Date().toISOString() }, sdkInfo && { sdk: sdkInfo }), !!api.tunnel && { dsn: utils_1.dsnToString(api.dsn) });
        var type = "aggregates" in session ? "sessions" : "session";
        var envelopeItem = [{ type }, session];
        var envelope = utils_1.createEnvelope(envelopeHeaders, [envelopeItem]);
        return [envelope, type];
      }
      exports.createSessionEnvelope = createSessionEnvelope;
      function sessionToSentryRequest(session, api) {
        var _a = tslib_1.__read(createSessionEnvelope(session, api), 2), envelope = _a[0], type = _a[1];
        return {
          body: utils_1.serializeEnvelope(envelope),
          type,
          url: api_1.getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)
        };
      }
      exports.sessionToSentryRequest = sessionToSentryRequest;
      function createEventEnvelope(event2, api) {
        var sdkInfo = getSdkMetadataForEnvelopeHeader(api);
        var eventType = event2.type || "event";
        var transactionSampling = (event2.sdkProcessingMetadata || {}).transactionSampling;
        var _a = transactionSampling || {}, samplingMethod = _a.method, sampleRate = _a.rate;
        enhanceEventWithSdkInfo(event2, api.metadata.sdk);
        event2.tags = event2.tags || {};
        event2.extra = event2.extra || {};
        if (!(event2.sdkProcessingMetadata && event2.sdkProcessingMetadata.baseClientNormalized)) {
          event2.tags.skippedNormalization = true;
          event2.extra.normalizeDepth = event2.sdkProcessingMetadata ? event2.sdkProcessingMetadata.normalizeDepth : "unset";
        }
        delete event2.sdkProcessingMetadata;
        var envelopeHeaders = tslib_1.__assign(tslib_1.__assign({ event_id: event2.event_id, sent_at: new Date().toISOString() }, sdkInfo && { sdk: sdkInfo }), !!api.tunnel && { dsn: utils_1.dsnToString(api.dsn) });
        var eventItem = [
          {
            type: eventType,
            sample_rates: [{ id: samplingMethod, rate: sampleRate }]
          },
          event2
        ];
        return utils_1.createEnvelope(envelopeHeaders, [eventItem]);
      }
      exports.createEventEnvelope = createEventEnvelope;
      function eventToSentryRequest(event2, api) {
        var sdkInfo = getSdkMetadataForEnvelopeHeader(api);
        var eventType = event2.type || "event";
        var useEnvelope = eventType === "transaction" || !!api.tunnel;
        var transactionSampling = (event2.sdkProcessingMetadata || {}).transactionSampling;
        var _a = transactionSampling || {}, samplingMethod = _a.method, sampleRate = _a.rate;
        enhanceEventWithSdkInfo(event2, api.metadata.sdk);
        event2.tags = event2.tags || {};
        event2.extra = event2.extra || {};
        if (!(event2.sdkProcessingMetadata && event2.sdkProcessingMetadata.baseClientNormalized)) {
          event2.tags.skippedNormalization = true;
          event2.extra.normalizeDepth = event2.sdkProcessingMetadata ? event2.sdkProcessingMetadata.normalizeDepth : "unset";
        }
        delete event2.sdkProcessingMetadata;
        var body;
        try {
          body = JSON.stringify(event2);
        } catch (err) {
          event2.tags.JSONStringifyError = true;
          event2.extra.JSONStringifyError = err;
          try {
            body = JSON.stringify(utils_1.normalize(event2));
          } catch (newErr) {
            var innerErr = newErr;
            body = JSON.stringify({
              message: "JSON.stringify error after renormalization",
              extra: { message: innerErr.message, stack: innerErr.stack }
            });
          }
        }
        var req = {
          body,
          type: eventType,
          url: useEnvelope ? api_1.getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel) : api_1.getStoreEndpointWithUrlEncodedAuth(api.dsn)
        };
        if (useEnvelope) {
          var envelopeHeaders = tslib_1.__assign(tslib_1.__assign({ event_id: event2.event_id, sent_at: new Date().toISOString() }, sdkInfo && { sdk: sdkInfo }), !!api.tunnel && { dsn: utils_1.dsnToString(api.dsn) });
          var eventItem = [
            {
              type: eventType,
              sample_rates: [{ id: samplingMethod, rate: sampleRate }]
            },
            req.body
          ];
          var envelope = utils_1.createEnvelope(envelopeHeaders, [eventItem]);
          req.body = utils_1.serializeEnvelope(envelope);
        }
        return req;
      }
      exports.eventToSentryRequest = eventToSentryRequest;
    }
  });

  // node_modules/@sentry/core/dist/transports/noop.js
  var require_noop = __commonJS({
    "node_modules/@sentry/core/dist/transports/noop.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_dist3();
      var NoopTransport = function() {
        function NoopTransport2() {
        }
        NoopTransport2.prototype.sendEvent = function(_) {
          return utils_1.resolvedSyncPromise({
            reason: "NoopTransport: Event has been skipped because no Dsn is configured.",
            status: "skipped"
          });
        };
        NoopTransport2.prototype.close = function(_) {
          return utils_1.resolvedSyncPromise(true);
        };
        return NoopTransport2;
      }();
      exports.NoopTransport = NoopTransport;
    }
  });

  // node_modules/@sentry/core/dist/basebackend.js
  var require_basebackend = __commonJS({
    "node_modules/@sentry/core/dist/basebackend.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var api_1 = require_api();
      var flags_1 = require_flags3();
      var request_1 = require_request();
      var noop_1 = require_noop();
      var BaseBackend = function() {
        function BaseBackend2(options) {
          this._options = options;
          if (!this._options.dsn) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("No DSN provided, backend will not do anything.");
          }
          this._transport = this._setupTransport();
        }
        BaseBackend2.prototype.eventFromException = function(_exception, _hint) {
          throw new utils_1.SentryError("Backend has to implement `eventFromException` method");
        };
        BaseBackend2.prototype.eventFromMessage = function(_message, _level, _hint) {
          throw new utils_1.SentryError("Backend has to implement `eventFromMessage` method");
        };
        BaseBackend2.prototype.sendEvent = function(event2) {
          if (this._newTransport && this._options.dsn && this._options._experiments && this._options._experiments.newTransport) {
            var api = api_1.initAPIDetails(this._options.dsn, this._options._metadata, this._options.tunnel);
            var env = request_1.createEventEnvelope(event2, api);
            void this._newTransport.send(env).then(null, function(reason) {
              flags_1.IS_DEBUG_BUILD && utils_1.logger.error("Error while sending event:", reason);
            });
          } else {
            void this._transport.sendEvent(event2).then(null, function(reason) {
              flags_1.IS_DEBUG_BUILD && utils_1.logger.error("Error while sending event:", reason);
            });
          }
        };
        BaseBackend2.prototype.sendSession = function(session) {
          if (!this._transport.sendSession) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Dropping session because custom transport doesn't implement sendSession");
            return;
          }
          if (this._newTransport && this._options.dsn && this._options._experiments && this._options._experiments.newTransport) {
            var api = api_1.initAPIDetails(this._options.dsn, this._options._metadata, this._options.tunnel);
            var _a = tslib_1.__read(request_1.createSessionEnvelope(session, api), 1), env = _a[0];
            void this._newTransport.send(env).then(null, function(reason) {
              flags_1.IS_DEBUG_BUILD && utils_1.logger.error("Error while sending session:", reason);
            });
          } else {
            void this._transport.sendSession(session).then(null, function(reason) {
              flags_1.IS_DEBUG_BUILD && utils_1.logger.error("Error while sending session:", reason);
            });
          }
        };
        BaseBackend2.prototype.getTransport = function() {
          return this._transport;
        };
        BaseBackend2.prototype._setupTransport = function() {
          return new noop_1.NoopTransport();
        };
        return BaseBackend2;
      }();
      exports.BaseBackend = BaseBackend;
    }
  });

  // node_modules/@sentry/core/dist/sdk.js
  var require_sdk = __commonJS({
    "node_modules/@sentry/core/dist/sdk.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var hub_1 = require_dist4();
      var utils_1 = require_dist3();
      var flags_1 = require_flags3();
      function initAndBind(clientClass, options) {
        if (options.debug === true) {
          if (flags_1.IS_DEBUG_BUILD) {
            utils_1.logger.enable();
          } else {
            console.warn("[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.");
          }
        }
        var hub = hub_1.getCurrentHub();
        var scope = hub.getScope();
        if (scope) {
          scope.update(options.initialScope);
        }
        var client = new clientClass(options);
        hub.bindClient(client);
      }
      exports.initAndBind = initAndBind;
    }
  });

  // node_modules/@sentry/core/dist/transports/base.js
  var require_base = __commonJS({
    "node_modules/@sentry/core/dist/transports/base.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_dist3();
      exports.ERROR_TRANSPORT_CATEGORY = "error";
      exports.TRANSACTION_TRANSPORT_CATEGORY = "transaction";
      exports.ATTACHMENT_TRANSPORT_CATEGORY = "attachment";
      exports.SESSION_TRANSPORT_CATEGORY = "session";
      exports.DEFAULT_TRANSPORT_BUFFER_SIZE = 30;
      function createTransport(options, makeRequest, buffer) {
        if (buffer === void 0) {
          buffer = utils_1.makePromiseBuffer(options.bufferSize || exports.DEFAULT_TRANSPORT_BUFFER_SIZE);
        }
        var rateLimits = {};
        var flush = function(timeout) {
          return buffer.drain(timeout);
        };
        function send(envelope) {
          var envCategory = utils_1.getEnvelopeType(envelope);
          var category = envCategory === "event" ? "error" : envCategory;
          var request = {
            category,
            body: utils_1.serializeEnvelope(envelope)
          };
          if (utils_1.isRateLimited(rateLimits, category)) {
            return utils_1.rejectedSyncPromise({
              status: "rate_limit",
              reason: getRateLimitReason(rateLimits, category)
            });
          }
          var requestTask = function() {
            return makeRequest(request).then(function(_a) {
              var body = _a.body, headers = _a.headers, reason = _a.reason, statusCode = _a.statusCode;
              var status = utils_1.eventStatusFromHttpCode(statusCode);
              if (headers) {
                rateLimits = utils_1.updateRateLimits(rateLimits, headers);
              }
              if (status === "success") {
                return utils_1.resolvedSyncPromise({ status, reason });
              }
              return utils_1.rejectedSyncPromise({
                status,
                reason: reason || body || (status === "rate_limit" ? getRateLimitReason(rateLimits, category) : "Unknown transport error")
              });
            });
          };
          return buffer.add(requestTask);
        }
        return {
          send,
          flush
        };
      }
      exports.createTransport = createTransport;
      function getRateLimitReason(rateLimits, category) {
        return "Too many " + category + " requests, backing off until: " + new Date(utils_1.disabledUntil(rateLimits, category)).toISOString();
      }
    }
  });

  // node_modules/@sentry/core/dist/version.js
  var require_version = __commonJS({
    "node_modules/@sentry/core/dist/version.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SDK_VERSION = "6.19.7";
    }
  });

  // node_modules/@sentry/core/dist/integrations/functiontostring.js
  var require_functiontostring = __commonJS({
    "node_modules/@sentry/core/dist/integrations/functiontostring.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_dist3();
      var originalFunctionToString;
      var FunctionToString = function() {
        function FunctionToString2() {
          this.name = FunctionToString2.id;
        }
        FunctionToString2.prototype.setupOnce = function() {
          originalFunctionToString = Function.prototype.toString;
          Function.prototype.toString = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            var context = utils_1.getOriginalFunction(this) || this;
            return originalFunctionToString.apply(context, args);
          };
        };
        FunctionToString2.id = "FunctionToString";
        return FunctionToString2;
      }();
      exports.FunctionToString = FunctionToString;
    }
  });

  // node_modules/@sentry/core/dist/integrations/inboundfilters.js
  var require_inboundfilters = __commonJS({
    "node_modules/@sentry/core/dist/integrations/inboundfilters.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var flags_1 = require_flags3();
      var DEFAULT_IGNORE_ERRORS = [/^Script error\.?$/, /^Javascript error: Script error\.? on line 0$/];
      var InboundFilters = function() {
        function InboundFilters2(_options) {
          if (_options === void 0) {
            _options = {};
          }
          this._options = _options;
          this.name = InboundFilters2.id;
        }
        InboundFilters2.prototype.setupOnce = function(addGlobalEventProcessor, getCurrentHub) {
          addGlobalEventProcessor(function(event2) {
            var hub = getCurrentHub();
            if (hub) {
              var self_1 = hub.getIntegration(InboundFilters2);
              if (self_1) {
                var client = hub.getClient();
                var clientOptions = client ? client.getOptions() : {};
                var options = _mergeOptions(self_1._options, clientOptions);
                return _shouldDropEvent(event2, options) ? null : event2;
              }
            }
            return event2;
          });
        };
        InboundFilters2.id = "InboundFilters";
        return InboundFilters2;
      }();
      exports.InboundFilters = InboundFilters;
      function _mergeOptions(internalOptions, clientOptions) {
        if (internalOptions === void 0) {
          internalOptions = {};
        }
        if (clientOptions === void 0) {
          clientOptions = {};
        }
        return {
          allowUrls: tslib_1.__spread(internalOptions.whitelistUrls || [], internalOptions.allowUrls || [], clientOptions.whitelistUrls || [], clientOptions.allowUrls || []),
          denyUrls: tslib_1.__spread(internalOptions.blacklistUrls || [], internalOptions.denyUrls || [], clientOptions.blacklistUrls || [], clientOptions.denyUrls || []),
          ignoreErrors: tslib_1.__spread(internalOptions.ignoreErrors || [], clientOptions.ignoreErrors || [], DEFAULT_IGNORE_ERRORS),
          ignoreInternal: internalOptions.ignoreInternal !== void 0 ? internalOptions.ignoreInternal : true
        };
      }
      exports._mergeOptions = _mergeOptions;
      function _shouldDropEvent(event2, options) {
        if (options.ignoreInternal && _isSentryError(event2)) {
          flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Event dropped due to being internal Sentry Error.\nEvent: " + utils_1.getEventDescription(event2));
          return true;
        }
        if (_isIgnoredError(event2, options.ignoreErrors)) {
          flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Event dropped due to being matched by `ignoreErrors` option.\nEvent: " + utils_1.getEventDescription(event2));
          return true;
        }
        if (_isDeniedUrl(event2, options.denyUrls)) {
          flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Event dropped due to being matched by `denyUrls` option.\nEvent: " + utils_1.getEventDescription(event2) + ".\nUrl: " + _getEventFilterUrl(event2));
          return true;
        }
        if (!_isAllowedUrl(event2, options.allowUrls)) {
          flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Event dropped due to not being matched by `allowUrls` option.\nEvent: " + utils_1.getEventDescription(event2) + ".\nUrl: " + _getEventFilterUrl(event2));
          return true;
        }
        return false;
      }
      exports._shouldDropEvent = _shouldDropEvent;
      function _isIgnoredError(event2, ignoreErrors) {
        if (!ignoreErrors || !ignoreErrors.length) {
          return false;
        }
        return _getPossibleEventMessages(event2).some(function(message) {
          return ignoreErrors.some(function(pattern) {
            return utils_1.isMatchingPattern(message, pattern);
          });
        });
      }
      function _isDeniedUrl(event2, denyUrls) {
        if (!denyUrls || !denyUrls.length) {
          return false;
        }
        var url = _getEventFilterUrl(event2);
        return !url ? false : denyUrls.some(function(pattern) {
          return utils_1.isMatchingPattern(url, pattern);
        });
      }
      function _isAllowedUrl(event2, allowUrls) {
        if (!allowUrls || !allowUrls.length) {
          return true;
        }
        var url = _getEventFilterUrl(event2);
        return !url ? true : allowUrls.some(function(pattern) {
          return utils_1.isMatchingPattern(url, pattern);
        });
      }
      function _getPossibleEventMessages(event2) {
        if (event2.message) {
          return [event2.message];
        }
        if (event2.exception) {
          try {
            var _a = event2.exception.values && event2.exception.values[0] || {}, _b = _a.type, type = _b === void 0 ? "" : _b, _c = _a.value, value = _c === void 0 ? "" : _c;
            return ["" + value, type + ": " + value];
          } catch (oO) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.error("Cannot extract message for event " + utils_1.getEventDescription(event2));
            return [];
          }
        }
        return [];
      }
      function _isSentryError(event2) {
        try {
          return event2.exception.values[0].type === "SentryError";
        } catch (e) {
        }
        return false;
      }
      function _getLastValidUrl(frames) {
        if (frames === void 0) {
          frames = [];
        }
        for (var i = frames.length - 1; i >= 0; i--) {
          var frame = frames[i];
          if (frame && frame.filename !== "<anonymous>" && frame.filename !== "[native code]") {
            return frame.filename || null;
          }
        }
        return null;
      }
      function _getEventFilterUrl(event2) {
        try {
          if (event2.stacktrace) {
            return _getLastValidUrl(event2.stacktrace.frames);
          }
          var frames_1;
          try {
            frames_1 = event2.exception.values[0].stacktrace.frames;
          } catch (e) {
          }
          return frames_1 ? _getLastValidUrl(frames_1) : null;
        } catch (oO) {
          flags_1.IS_DEBUG_BUILD && utils_1.logger.error("Cannot extract url for event " + utils_1.getEventDescription(event2));
          return null;
        }
      }
    }
  });

  // node_modules/@sentry/core/dist/integrations/index.js
  var require_integrations = __commonJS({
    "node_modules/@sentry/core/dist/integrations/index.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var functiontostring_1 = require_functiontostring();
      exports.FunctionToString = functiontostring_1.FunctionToString;
      var inboundfilters_1 = require_inboundfilters();
      exports.InboundFilters = inboundfilters_1.InboundFilters;
    }
  });

  // node_modules/@sentry/core/dist/index.js
  var require_dist6 = __commonJS({
    "node_modules/@sentry/core/dist/index.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var minimal_1 = require_dist5();
      exports.addBreadcrumb = minimal_1.addBreadcrumb;
      exports.captureException = minimal_1.captureException;
      exports.captureEvent = minimal_1.captureEvent;
      exports.captureMessage = minimal_1.captureMessage;
      exports.configureScope = minimal_1.configureScope;
      exports.startTransaction = minimal_1.startTransaction;
      exports.setContext = minimal_1.setContext;
      exports.setExtra = minimal_1.setExtra;
      exports.setExtras = minimal_1.setExtras;
      exports.setTag = minimal_1.setTag;
      exports.setTags = minimal_1.setTags;
      exports.setUser = minimal_1.setUser;
      exports.withScope = minimal_1.withScope;
      var hub_1 = require_dist4();
      exports.addGlobalEventProcessor = hub_1.addGlobalEventProcessor;
      exports.getCurrentHub = hub_1.getCurrentHub;
      exports.getHubFromCarrier = hub_1.getHubFromCarrier;
      exports.Hub = hub_1.Hub;
      exports.makeMain = hub_1.makeMain;
      exports.Scope = hub_1.Scope;
      exports.Session = hub_1.Session;
      var api_1 = require_api();
      exports.API = api_1.API;
      exports.getEnvelopeEndpointWithUrlEncodedAuth = api_1.getEnvelopeEndpointWithUrlEncodedAuth;
      exports.getStoreEndpointWithUrlEncodedAuth = api_1.getStoreEndpointWithUrlEncodedAuth;
      exports.getRequestHeaders = api_1.getRequestHeaders;
      exports.initAPIDetails = api_1.initAPIDetails;
      exports.getReportDialogEndpoint = api_1.getReportDialogEndpoint;
      var baseclient_1 = require_baseclient();
      exports.BaseClient = baseclient_1.BaseClient;
      var basebackend_1 = require_basebackend();
      exports.BaseBackend = basebackend_1.BaseBackend;
      var request_1 = require_request();
      exports.eventToSentryRequest = request_1.eventToSentryRequest;
      exports.sessionToSentryRequest = request_1.sessionToSentryRequest;
      var sdk_1 = require_sdk();
      exports.initAndBind = sdk_1.initAndBind;
      var noop_1 = require_noop();
      exports.NoopTransport = noop_1.NoopTransport;
      var base_1 = require_base();
      exports.createTransport = base_1.createTransport;
      var version_1 = require_version();
      exports.SDK_VERSION = version_1.SDK_VERSION;
      var Integrations = require_integrations();
      exports.Integrations = Integrations;
    }
  });

  // node_modules/@sentry/browser/dist/stack-parsers.js
  var require_stack_parsers = __commonJS({
    "node_modules/@sentry/browser/dist/stack-parsers.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var UNKNOWN_FUNCTION = "?";
      var OPERA10_PRIORITY = 10;
      var OPERA11_PRIORITY = 20;
      var CHROME_PRIORITY = 30;
      var WINJS_PRIORITY = 40;
      var GECKO_PRIORITY = 50;
      function createFrame(filename, func, lineno, colno) {
        var frame = {
          filename,
          function: func,
          in_app: true
        };
        if (lineno !== void 0) {
          frame.lineno = lineno;
        }
        if (colno !== void 0) {
          frame.colno = colno;
        }
        return frame;
      }
      var chromeRegex = /^\s*at (?:(.*?) ?\((?:address at )?)?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
      var chromeEvalRegex = /\((\S*)(?::(\d+))(?::(\d+))\)/;
      var chrome = function(line) {
        var parts = chromeRegex.exec(line);
        if (parts) {
          var isEval = parts[2] && parts[2].indexOf("eval") === 0;
          if (isEval) {
            var subMatch = chromeEvalRegex.exec(parts[2]);
            if (subMatch) {
              parts[2] = subMatch[1];
              parts[3] = subMatch[2];
              parts[4] = subMatch[3];
            }
          }
          var _a = tslib_1.__read(extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]), 2), func = _a[0], filename = _a[1];
          return createFrame(filename, func, parts[3] ? +parts[3] : void 0, parts[4] ? +parts[4] : void 0);
        }
        return;
      };
      exports.chromeStackParser = [CHROME_PRIORITY, chrome];
      var geckoREgex = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i;
      var geckoEvalRegex = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
      var gecko = function(line) {
        var _a;
        var parts = geckoREgex.exec(line);
        if (parts) {
          var isEval = parts[3] && parts[3].indexOf(" > eval") > -1;
          if (isEval) {
            var subMatch = geckoEvalRegex.exec(parts[3]);
            if (subMatch) {
              parts[1] = parts[1] || "eval";
              parts[3] = subMatch[1];
              parts[4] = subMatch[2];
              parts[5] = "";
            }
          }
          var filename = parts[3];
          var func = parts[1] || UNKNOWN_FUNCTION;
          _a = tslib_1.__read(extractSafariExtensionDetails(func, filename), 2), func = _a[0], filename = _a[1];
          return createFrame(filename, func, parts[4] ? +parts[4] : void 0, parts[5] ? +parts[5] : void 0);
        }
        return;
      };
      exports.geckoStackParser = [GECKO_PRIORITY, gecko];
      var winjsRegex = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
      var winjs = function(line) {
        var parts = winjsRegex.exec(line);
        return parts ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : void 0) : void 0;
      };
      exports.winjsStackParser = [WINJS_PRIORITY, winjs];
      var opera10Regex = / line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i;
      var opera10 = function(line) {
        var parts = opera10Regex.exec(line);
        return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : void 0;
      };
      exports.opera10StackParser = [OPERA10_PRIORITY, opera10];
      var opera11Regex = / line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\(.*\))? in (.*):\s*$/i;
      var opera11 = function(line) {
        var parts = opera11Regex.exec(line);
        return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : void 0;
      };
      exports.opera11StackParser = [OPERA11_PRIORITY, opera11];
      var extractSafariExtensionDetails = function(func, filename) {
        var isSafariExtension = func.indexOf("safari-extension") !== -1;
        var isSafariWebExtension = func.indexOf("safari-web-extension") !== -1;
        return isSafariExtension || isSafariWebExtension ? [
          func.indexOf("@") !== -1 ? func.split("@")[0] : UNKNOWN_FUNCTION,
          isSafariExtension ? "safari-extension:" + filename : "safari-web-extension:" + filename
        ] : [func, filename];
      };
    }
  });

  // node_modules/@sentry/browser/dist/eventbuilder.js
  var require_eventbuilder = __commonJS({
    "node_modules/@sentry/browser/dist/eventbuilder.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var types_1 = require_dist2();
      var utils_1 = require_dist3();
      var stack_parsers_1 = require_stack_parsers();
      function exceptionFromError(ex) {
        var frames = parseStackFrames(ex);
        var exception = {
          type: ex && ex.name,
          value: extractMessage(ex)
        };
        if (frames.length) {
          exception.stacktrace = { frames };
        }
        if (exception.type === void 0 && exception.value === "") {
          exception.value = "Unrecoverable error caught";
        }
        return exception;
      }
      exports.exceptionFromError = exceptionFromError;
      function eventFromPlainObject(exception, syntheticException, isUnhandledRejection) {
        var event2 = {
          exception: {
            values: [
              {
                type: utils_1.isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? "UnhandledRejection" : "Error",
                value: "Non-Error " + (isUnhandledRejection ? "promise rejection" : "exception") + " captured with keys: " + utils_1.extractExceptionKeysForMessage(exception)
              }
            ]
          },
          extra: {
            __serialized__: utils_1.normalizeToSize(exception)
          }
        };
        if (syntheticException) {
          var frames_1 = parseStackFrames(syntheticException);
          if (frames_1.length) {
            event2.stacktrace = { frames: frames_1 };
          }
        }
        return event2;
      }
      exports.eventFromPlainObject = eventFromPlainObject;
      function eventFromError(ex) {
        return {
          exception: {
            values: [exceptionFromError(ex)]
          }
        };
      }
      exports.eventFromError = eventFromError;
      function parseStackFrames(ex) {
        var stacktrace = ex.stacktrace || ex.stack || "";
        var popSize = getPopSize(ex);
        try {
          return utils_1.createStackParser(stack_parsers_1.opera10StackParser, stack_parsers_1.opera11StackParser, stack_parsers_1.chromeStackParser, stack_parsers_1.winjsStackParser, stack_parsers_1.geckoStackParser)(stacktrace, popSize);
        } catch (e) {
        }
        return [];
      }
      exports.parseStackFrames = parseStackFrames;
      var reactMinifiedRegexp = /Minified React error #\d+;/i;
      function getPopSize(ex) {
        if (ex) {
          if (typeof ex.framesToPop === "number") {
            return ex.framesToPop;
          }
          if (reactMinifiedRegexp.test(ex.message)) {
            return 1;
          }
        }
        return 0;
      }
      function extractMessage(ex) {
        var message = ex && ex.message;
        if (!message) {
          return "No error message";
        }
        if (message.error && typeof message.error.message === "string") {
          return message.error.message;
        }
        return message;
      }
      function eventFromException(exception, hint, attachStacktrace) {
        var syntheticException = hint && hint.syntheticException || void 0;
        var event2 = eventFromUnknownInput(exception, syntheticException, attachStacktrace);
        utils_1.addExceptionMechanism(event2);
        event2.level = types_1.Severity.Error;
        if (hint && hint.event_id) {
          event2.event_id = hint.event_id;
        }
        return utils_1.resolvedSyncPromise(event2);
      }
      exports.eventFromException = eventFromException;
      function eventFromMessage(message, level, hint, attachStacktrace) {
        if (level === void 0) {
          level = types_1.Severity.Info;
        }
        var syntheticException = hint && hint.syntheticException || void 0;
        var event2 = eventFromString(message, syntheticException, attachStacktrace);
        event2.level = level;
        if (hint && hint.event_id) {
          event2.event_id = hint.event_id;
        }
        return utils_1.resolvedSyncPromise(event2);
      }
      exports.eventFromMessage = eventFromMessage;
      function eventFromUnknownInput(exception, syntheticException, attachStacktrace, isUnhandledRejection) {
        var event2;
        if (utils_1.isErrorEvent(exception) && exception.error) {
          var errorEvent = exception;
          return eventFromError(errorEvent.error);
        }
        if (utils_1.isDOMError(exception) || utils_1.isDOMException(exception)) {
          var domException = exception;
          if ("stack" in exception) {
            event2 = eventFromError(exception);
          } else {
            var name_1 = domException.name || (utils_1.isDOMError(domException) ? "DOMError" : "DOMException");
            var message = domException.message ? name_1 + ": " + domException.message : name_1;
            event2 = eventFromString(message, syntheticException, attachStacktrace);
            utils_1.addExceptionTypeValue(event2, message);
          }
          if ("code" in domException) {
            event2.tags = tslib_1.__assign(tslib_1.__assign({}, event2.tags), { "DOMException.code": "" + domException.code });
          }
          return event2;
        }
        if (utils_1.isError(exception)) {
          return eventFromError(exception);
        }
        if (utils_1.isPlainObject(exception) || utils_1.isEvent(exception)) {
          var objectException = exception;
          event2 = eventFromPlainObject(objectException, syntheticException, isUnhandledRejection);
          utils_1.addExceptionMechanism(event2, {
            synthetic: true
          });
          return event2;
        }
        event2 = eventFromString(exception, syntheticException, attachStacktrace);
        utils_1.addExceptionTypeValue(event2, "" + exception, void 0);
        utils_1.addExceptionMechanism(event2, {
          synthetic: true
        });
        return event2;
      }
      exports.eventFromUnknownInput = eventFromUnknownInput;
      function eventFromString(input, syntheticException, attachStacktrace) {
        var event2 = {
          message: input
        };
        if (attachStacktrace && syntheticException) {
          var frames_2 = parseStackFrames(syntheticException);
          if (frames_2.length) {
            event2.stacktrace = { frames: frames_2 };
          }
        }
        return event2;
      }
      exports.eventFromString = eventFromString;
    }
  });

  // node_modules/@sentry/browser/dist/flags.js
  var require_flags4 = __commonJS({
    "node_modules/@sentry/browser/dist/flags.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === "undefined" ? true : __SENTRY_DEBUG__;
    }
  });

  // node_modules/@sentry/browser/dist/transports/utils.js
  var require_utils2 = __commonJS({
    "node_modules/@sentry/browser/dist/transports/utils.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_dist3();
      var flags_1 = require_flags4();
      var global2 = utils_1.getGlobalObject();
      var cachedFetchImpl;
      function getNativeFetchImplementation() {
        if (cachedFetchImpl) {
          return cachedFetchImpl;
        }
        if (utils_1.isNativeFetch(global2.fetch)) {
          return cachedFetchImpl = global2.fetch.bind(global2);
        }
        var document2 = global2.document;
        var fetchImpl = global2.fetch;
        if (document2 && typeof document2.createElement === "function") {
          try {
            var sandbox = document2.createElement("iframe");
            sandbox.hidden = true;
            document2.head.appendChild(sandbox);
            var contentWindow = sandbox.contentWindow;
            if (contentWindow && contentWindow.fetch) {
              fetchImpl = contentWindow.fetch;
            }
            document2.head.removeChild(sandbox);
          } catch (e) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ", e);
          }
        }
        return cachedFetchImpl = fetchImpl.bind(global2);
      }
      exports.getNativeFetchImplementation = getNativeFetchImplementation;
      function sendReport(url, body) {
        var isRealNavigator = Object.prototype.toString.call(global2 && global2.navigator) === "[object Navigator]";
        var hasSendBeacon = isRealNavigator && typeof global2.navigator.sendBeacon === "function";
        if (hasSendBeacon) {
          var sendBeacon = global2.navigator.sendBeacon.bind(global2.navigator);
          return sendBeacon(url, body);
        }
        if (utils_1.supportsFetch()) {
          var fetch_1 = getNativeFetchImplementation();
          return utils_1.forget(fetch_1(url, {
            body,
            method: "POST",
            credentials: "omit",
            keepalive: true
          }));
        }
      }
      exports.sendReport = sendReport;
    }
  });

  // node_modules/@sentry/browser/dist/transports/base.js
  var require_base2 = __commonJS({
    "node_modules/@sentry/browser/dist/transports/base.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var core_1 = require_dist6();
      var utils_1 = require_dist3();
      var flags_1 = require_flags4();
      var utils_2 = require_utils2();
      function requestTypeToCategory(ty) {
        var tyStr = ty;
        return tyStr === "event" ? "error" : tyStr;
      }
      var global2 = utils_1.getGlobalObject();
      var BaseTransport = function() {
        function BaseTransport2(options) {
          var _this = this;
          this.options = options;
          this._buffer = utils_1.makePromiseBuffer(30);
          this._rateLimits = {};
          this._outcomes = {};
          this._api = core_1.initAPIDetails(options.dsn, options._metadata, options.tunnel);
          this.url = core_1.getStoreEndpointWithUrlEncodedAuth(this._api.dsn);
          if (this.options.sendClientReports && global2.document) {
            global2.document.addEventListener("visibilitychange", function() {
              if (global2.document.visibilityState === "hidden") {
                _this._flushOutcomes();
              }
            });
          }
        }
        BaseTransport2.prototype.sendEvent = function(event2) {
          return this._sendRequest(core_1.eventToSentryRequest(event2, this._api), event2);
        };
        BaseTransport2.prototype.sendSession = function(session) {
          return this._sendRequest(core_1.sessionToSentryRequest(session, this._api), session);
        };
        BaseTransport2.prototype.close = function(timeout) {
          return this._buffer.drain(timeout);
        };
        BaseTransport2.prototype.recordLostEvent = function(reason, category) {
          var _a;
          if (!this.options.sendClientReports) {
            return;
          }
          var key = requestTypeToCategory(category) + ":" + reason;
          flags_1.IS_DEBUG_BUILD && utils_1.logger.log("Adding outcome: " + key);
          this._outcomes[key] = (_a = this._outcomes[key], _a !== null && _a !== void 0 ? _a : 0) + 1;
        };
        BaseTransport2.prototype._flushOutcomes = function() {
          if (!this.options.sendClientReports) {
            return;
          }
          var outcomes = this._outcomes;
          this._outcomes = {};
          if (!Object.keys(outcomes).length) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.log("No outcomes to flush");
            return;
          }
          flags_1.IS_DEBUG_BUILD && utils_1.logger.log("Flushing outcomes:\n" + JSON.stringify(outcomes, null, 2));
          var url = core_1.getEnvelopeEndpointWithUrlEncodedAuth(this._api.dsn, this._api.tunnel);
          var discardedEvents = Object.keys(outcomes).map(function(key) {
            var _a = tslib_1.__read(key.split(":"), 2), category = _a[0], reason = _a[1];
            return {
              reason,
              category,
              quantity: outcomes[key]
            };
          });
          var envelope = utils_1.createClientReportEnvelope(discardedEvents, this._api.tunnel && utils_1.dsnToString(this._api.dsn));
          try {
            utils_2.sendReport(url, utils_1.serializeEnvelope(envelope));
          } catch (e) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.error(e);
          }
        };
        BaseTransport2.prototype._handleResponse = function(_a) {
          var requestType = _a.requestType, response = _a.response, headers = _a.headers, resolve = _a.resolve, reject = _a.reject;
          var status = utils_1.eventStatusFromHttpCode(response.status);
          this._rateLimits = utils_1.updateRateLimits(this._rateLimits, headers);
          if (this._isRateLimited(requestType)) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Too many " + requestType + " requests, backing off until: " + this._disabledUntil(requestType));
          }
          if (status === "success") {
            resolve({ status });
            return;
          }
          reject(response);
        };
        BaseTransport2.prototype._disabledUntil = function(requestType) {
          var category = requestTypeToCategory(requestType);
          return new Date(utils_1.disabledUntil(this._rateLimits, category));
        };
        BaseTransport2.prototype._isRateLimited = function(requestType) {
          var category = requestTypeToCategory(requestType);
          return utils_1.isRateLimited(this._rateLimits, category);
        };
        return BaseTransport2;
      }();
      exports.BaseTransport = BaseTransport;
    }
  });

  // node_modules/@sentry/browser/dist/transports/fetch.js
  var require_fetch = __commonJS({
    "node_modules/@sentry/browser/dist/transports/fetch.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var base_1 = require_base2();
      var utils_2 = require_utils2();
      var FetchTransport = function(_super) {
        tslib_1.__extends(FetchTransport2, _super);
        function FetchTransport2(options, fetchImpl) {
          if (fetchImpl === void 0) {
            fetchImpl = utils_2.getNativeFetchImplementation();
          }
          var _this = _super.call(this, options) || this;
          _this._fetch = fetchImpl;
          return _this;
        }
        FetchTransport2.prototype._sendRequest = function(sentryRequest, originalPayload) {
          var _this = this;
          if (this._isRateLimited(sentryRequest.type)) {
            this.recordLostEvent("ratelimit_backoff", sentryRequest.type);
            return Promise.reject({
              event: originalPayload,
              type: sentryRequest.type,
              reason: "Transport for " + sentryRequest.type + " requests locked till " + this._disabledUntil(sentryRequest.type) + " due to too many requests.",
              status: 429
            });
          }
          var options = {
            body: sentryRequest.body,
            method: "POST",
            referrerPolicy: utils_1.supportsReferrerPolicy() ? "origin" : ""
          };
          if (this.options.fetchParameters !== void 0) {
            Object.assign(options, this.options.fetchParameters);
          }
          if (this.options.headers !== void 0) {
            options.headers = this.options.headers;
          }
          return this._buffer.add(function() {
            return new utils_1.SyncPromise(function(resolve, reject) {
              void _this._fetch(sentryRequest.url, options).then(function(response) {
                var headers = {
                  "x-sentry-rate-limits": response.headers.get("X-Sentry-Rate-Limits"),
                  "retry-after": response.headers.get("Retry-After")
                };
                _this._handleResponse({
                  requestType: sentryRequest.type,
                  response,
                  headers,
                  resolve,
                  reject
                });
              }).catch(reject);
            });
          }).then(void 0, function(reason) {
            if (reason instanceof utils_1.SentryError) {
              _this.recordLostEvent("queue_overflow", sentryRequest.type);
            } else {
              _this.recordLostEvent("network_error", sentryRequest.type);
            }
            throw reason;
          });
        };
        return FetchTransport2;
      }(base_1.BaseTransport);
      exports.FetchTransport = FetchTransport;
    }
  });

  // node_modules/@sentry/browser/dist/transports/xhr.js
  var require_xhr = __commonJS({
    "node_modules/@sentry/browser/dist/transports/xhr.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var base_1 = require_base2();
      var XHRTransport = function(_super) {
        tslib_1.__extends(XHRTransport2, _super);
        function XHRTransport2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        XHRTransport2.prototype._sendRequest = function(sentryRequest, originalPayload) {
          var _this = this;
          if (this._isRateLimited(sentryRequest.type)) {
            this.recordLostEvent("ratelimit_backoff", sentryRequest.type);
            return Promise.reject({
              event: originalPayload,
              type: sentryRequest.type,
              reason: "Transport for " + sentryRequest.type + " requests locked till " + this._disabledUntil(sentryRequest.type) + " due to too many requests.",
              status: 429
            });
          }
          return this._buffer.add(function() {
            return new utils_1.SyncPromise(function(resolve, reject) {
              var request = new XMLHttpRequest();
              request.onreadystatechange = function() {
                if (request.readyState === 4) {
                  var headers = {
                    "x-sentry-rate-limits": request.getResponseHeader("X-Sentry-Rate-Limits"),
                    "retry-after": request.getResponseHeader("Retry-After")
                  };
                  _this._handleResponse({ requestType: sentryRequest.type, response: request, headers, resolve, reject });
                }
              };
              request.open("POST", sentryRequest.url);
              for (var header in _this.options.headers) {
                if (Object.prototype.hasOwnProperty.call(_this.options.headers, header)) {
                  request.setRequestHeader(header, _this.options.headers[header]);
                }
              }
              request.send(sentryRequest.body);
            });
          }).then(void 0, function(reason) {
            if (reason instanceof utils_1.SentryError) {
              _this.recordLostEvent("queue_overflow", sentryRequest.type);
            } else {
              _this.recordLostEvent("network_error", sentryRequest.type);
            }
            throw reason;
          });
        };
        return XHRTransport2;
      }(base_1.BaseTransport);
      exports.XHRTransport = XHRTransport;
    }
  });

  // node_modules/@sentry/browser/dist/transports/new-fetch.js
  var require_new_fetch = __commonJS({
    "node_modules/@sentry/browser/dist/transports/new-fetch.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var core_1 = require_dist6();
      var utils_1 = require_utils2();
      function makeNewFetchTransport(options, nativeFetch) {
        if (nativeFetch === void 0) {
          nativeFetch = utils_1.getNativeFetchImplementation();
        }
        function makeRequest(request) {
          var requestOptions = tslib_1.__assign({ body: request.body, method: "POST", referrerPolicy: "origin" }, options.requestOptions);
          return nativeFetch(options.url, requestOptions).then(function(response) {
            return response.text().then(function(body) {
              return {
                body,
                headers: {
                  "x-sentry-rate-limits": response.headers.get("X-Sentry-Rate-Limits"),
                  "retry-after": response.headers.get("Retry-After")
                },
                reason: response.statusText,
                statusCode: response.status
              };
            });
          });
        }
        return core_1.createTransport({ bufferSize: options.bufferSize }, makeRequest);
      }
      exports.makeNewFetchTransport = makeNewFetchTransport;
    }
  });

  // node_modules/@sentry/browser/dist/transports/new-xhr.js
  var require_new_xhr = __commonJS({
    "node_modules/@sentry/browser/dist/transports/new-xhr.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var core_1 = require_dist6();
      var utils_1 = require_dist3();
      var XHR_READYSTATE_DONE = 4;
      function makeNewXHRTransport(options) {
        function makeRequest(request) {
          return new utils_1.SyncPromise(function(resolve, _reject) {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function() {
              if (xhr.readyState === XHR_READYSTATE_DONE) {
                var response = {
                  body: xhr.response,
                  headers: {
                    "x-sentry-rate-limits": xhr.getResponseHeader("X-Sentry-Rate-Limits"),
                    "retry-after": xhr.getResponseHeader("Retry-After")
                  },
                  reason: xhr.statusText,
                  statusCode: xhr.status
                };
                resolve(response);
              }
            };
            xhr.open("POST", options.url);
            for (var header in options.headers) {
              if (Object.prototype.hasOwnProperty.call(options.headers, header)) {
                xhr.setRequestHeader(header, options.headers[header]);
              }
            }
            xhr.send(request.body);
          });
        }
        return core_1.createTransport({ bufferSize: options.bufferSize }, makeRequest);
      }
      exports.makeNewXHRTransport = makeNewXHRTransport;
    }
  });

  // node_modules/@sentry/browser/dist/transports/index.js
  var require_transports = __commonJS({
    "node_modules/@sentry/browser/dist/transports/index.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var base_1 = require_base2();
      exports.BaseTransport = base_1.BaseTransport;
      var fetch_1 = require_fetch();
      exports.FetchTransport = fetch_1.FetchTransport;
      var xhr_1 = require_xhr();
      exports.XHRTransport = xhr_1.XHRTransport;
      var new_fetch_1 = require_new_fetch();
      exports.makeNewFetchTransport = new_fetch_1.makeNewFetchTransport;
      var new_xhr_1 = require_new_xhr();
      exports.makeNewXHRTransport = new_xhr_1.makeNewXHRTransport;
    }
  });

  // node_modules/@sentry/browser/dist/backend.js
  var require_backend = __commonJS({
    "node_modules/@sentry/browser/dist/backend.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var core_1 = require_dist6();
      var types_1 = require_dist2();
      var utils_1 = require_dist3();
      var eventbuilder_1 = require_eventbuilder();
      var transports_1 = require_transports();
      var BrowserBackend = function(_super) {
        tslib_1.__extends(BrowserBackend2, _super);
        function BrowserBackend2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        BrowserBackend2.prototype.eventFromException = function(exception, hint) {
          return eventbuilder_1.eventFromException(exception, hint, this._options.attachStacktrace);
        };
        BrowserBackend2.prototype.eventFromMessage = function(message, level, hint) {
          if (level === void 0) {
            level = types_1.Severity.Info;
          }
          return eventbuilder_1.eventFromMessage(message, level, hint, this._options.attachStacktrace);
        };
        BrowserBackend2.prototype._setupTransport = function() {
          if (!this._options.dsn) {
            return _super.prototype._setupTransport.call(this);
          }
          var transportOptions = tslib_1.__assign(tslib_1.__assign({}, this._options.transportOptions), { dsn: this._options.dsn, tunnel: this._options.tunnel, sendClientReports: this._options.sendClientReports, _metadata: this._options._metadata });
          var api = core_1.initAPIDetails(transportOptions.dsn, transportOptions._metadata, transportOptions.tunnel);
          var url = core_1.getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel);
          if (this._options.transport) {
            return new this._options.transport(transportOptions);
          }
          if (utils_1.supportsFetch()) {
            var requestOptions = tslib_1.__assign({}, transportOptions.fetchParameters);
            this._newTransport = transports_1.makeNewFetchTransport({ requestOptions, url });
            return new transports_1.FetchTransport(transportOptions);
          }
          this._newTransport = transports_1.makeNewXHRTransport({
            url,
            headers: transportOptions.headers
          });
          return new transports_1.XHRTransport(transportOptions);
        };
        return BrowserBackend2;
      }(core_1.BaseBackend);
      exports.BrowserBackend = BrowserBackend;
    }
  });

  // node_modules/@sentry/browser/dist/helpers.js
  var require_helpers = __commonJS({
    "node_modules/@sentry/browser/dist/helpers.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var core_1 = require_dist6();
      var utils_1 = require_dist3();
      var flags_1 = require_flags4();
      var global2 = utils_1.getGlobalObject();
      var ignoreOnError = 0;
      function shouldIgnoreOnError() {
        return ignoreOnError > 0;
      }
      exports.shouldIgnoreOnError = shouldIgnoreOnError;
      function ignoreNextOnError() {
        ignoreOnError += 1;
        setTimeout(function() {
          ignoreOnError -= 1;
        });
      }
      exports.ignoreNextOnError = ignoreNextOnError;
      function wrap(fn, options, before) {
        if (options === void 0) {
          options = {};
        }
        if (typeof fn !== "function") {
          return fn;
        }
        try {
          var wrapper = fn.__sentry_wrapped__;
          if (wrapper) {
            return wrapper;
          }
          if (utils_1.getOriginalFunction(fn)) {
            return fn;
          }
        } catch (e) {
          return fn;
        }
        var sentryWrapped = function() {
          var args = Array.prototype.slice.call(arguments);
          try {
            if (before && typeof before === "function") {
              before.apply(this, arguments);
            }
            var wrappedArguments = args.map(function(arg) {
              return wrap(arg, options);
            });
            return fn.apply(this, wrappedArguments);
          } catch (ex) {
            ignoreNextOnError();
            core_1.withScope(function(scope) {
              scope.addEventProcessor(function(event2) {
                if (options.mechanism) {
                  utils_1.addExceptionTypeValue(event2, void 0, void 0);
                  utils_1.addExceptionMechanism(event2, options.mechanism);
                }
                event2.extra = tslib_1.__assign(tslib_1.__assign({}, event2.extra), { arguments: args });
                return event2;
              });
              core_1.captureException(ex);
            });
            throw ex;
          }
        };
        try {
          for (var property in fn) {
            if (Object.prototype.hasOwnProperty.call(fn, property)) {
              sentryWrapped[property] = fn[property];
            }
          }
        } catch (_oO) {
        }
        utils_1.markFunctionWrapped(sentryWrapped, fn);
        utils_1.addNonEnumerableProperty(fn, "__sentry_wrapped__", sentryWrapped);
        try {
          var descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, "name");
          if (descriptor.configurable) {
            Object.defineProperty(sentryWrapped, "name", {
              get: function() {
                return fn.name;
              }
            });
          }
        } catch (_oO) {
        }
        return sentryWrapped;
      }
      exports.wrap = wrap;
      function injectReportDialog(options) {
        if (options === void 0) {
          options = {};
        }
        if (!global2.document) {
          return;
        }
        if (!options.eventId) {
          flags_1.IS_DEBUG_BUILD && utils_1.logger.error("Missing eventId option in showReportDialog call");
          return;
        }
        if (!options.dsn) {
          flags_1.IS_DEBUG_BUILD && utils_1.logger.error("Missing dsn option in showReportDialog call");
          return;
        }
        var script = global2.document.createElement("script");
        script.async = true;
        script.src = core_1.getReportDialogEndpoint(options.dsn, options);
        if (options.onLoad) {
          script.onload = options.onLoad;
        }
        var injectionPoint = global2.document.head || global2.document.body;
        if (injectionPoint) {
          injectionPoint.appendChild(script);
        }
      }
      exports.injectReportDialog = injectReportDialog;
    }
  });

  // node_modules/@sentry/browser/dist/integrations/globalhandlers.js
  var require_globalhandlers = __commonJS({
    "node_modules/@sentry/browser/dist/integrations/globalhandlers.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var core_1 = require_dist6();
      var types_1 = require_dist2();
      var utils_1 = require_dist3();
      var eventbuilder_1 = require_eventbuilder();
      var flags_1 = require_flags4();
      var helpers_1 = require_helpers();
      var GlobalHandlers = function() {
        function GlobalHandlers2(options) {
          this.name = GlobalHandlers2.id;
          this._installFunc = {
            onerror: _installGlobalOnErrorHandler,
            onunhandledrejection: _installGlobalOnUnhandledRejectionHandler
          };
          this._options = tslib_1.__assign({ onerror: true, onunhandledrejection: true }, options);
        }
        GlobalHandlers2.prototype.setupOnce = function() {
          Error.stackTraceLimit = 50;
          var options = this._options;
          for (var key in options) {
            var installFunc = this._installFunc[key];
            if (installFunc && options[key]) {
              globalHandlerLog(key);
              installFunc();
              this._installFunc[key] = void 0;
            }
          }
        };
        GlobalHandlers2.id = "GlobalHandlers";
        return GlobalHandlers2;
      }();
      exports.GlobalHandlers = GlobalHandlers;
      function _installGlobalOnErrorHandler() {
        utils_1.addInstrumentationHandler(
          "error",
          function(data) {
            var _a = tslib_1.__read(getHubAndAttachStacktrace(), 2), hub = _a[0], attachStacktrace = _a[1];
            if (!hub.getIntegration(GlobalHandlers)) {
              return;
            }
            var msg = data.msg, url = data.url, line = data.line, column = data.column, error = data.error;
            if (helpers_1.shouldIgnoreOnError() || error && error.__sentry_own_request__) {
              return;
            }
            var event2 = error === void 0 && utils_1.isString(msg) ? _eventFromIncompleteOnError(msg, url, line, column) : _enhanceEventWithInitialFrame(eventbuilder_1.eventFromUnknownInput(error || msg, void 0, attachStacktrace, false), url, line, column);
            event2.level = types_1.Severity.Error;
            addMechanismAndCapture(hub, error, event2, "onerror");
          }
        );
      }
      function _installGlobalOnUnhandledRejectionHandler() {
        utils_1.addInstrumentationHandler(
          "unhandledrejection",
          function(e) {
            var _a = tslib_1.__read(getHubAndAttachStacktrace(), 2), hub = _a[0], attachStacktrace = _a[1];
            if (!hub.getIntegration(GlobalHandlers)) {
              return;
            }
            var error = e;
            try {
              if ("reason" in e) {
                error = e.reason;
              } else if ("detail" in e && "reason" in e.detail) {
                error = e.detail.reason;
              }
            } catch (_oO) {
            }
            if (helpers_1.shouldIgnoreOnError() || error && error.__sentry_own_request__) {
              return true;
            }
            var event2 = utils_1.isPrimitive(error) ? _eventFromRejectionWithPrimitive(error) : eventbuilder_1.eventFromUnknownInput(error, void 0, attachStacktrace, true);
            event2.level = types_1.Severity.Error;
            addMechanismAndCapture(hub, error, event2, "onunhandledrejection");
            return;
          }
        );
      }
      function _eventFromRejectionWithPrimitive(reason) {
        return {
          exception: {
            values: [
              {
                type: "UnhandledRejection",
                value: "Non-Error promise rejection captured with value: " + String(reason)
              }
            ]
          }
        };
      }
      function _eventFromIncompleteOnError(msg, url, line, column) {
        var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;
        var message = utils_1.isErrorEvent(msg) ? msg.message : msg;
        var name = "Error";
        var groups = message.match(ERROR_TYPES_RE);
        if (groups) {
          name = groups[1];
          message = groups[2];
        }
        var event2 = {
          exception: {
            values: [
              {
                type: name,
                value: message
              }
            ]
          }
        };
        return _enhanceEventWithInitialFrame(event2, url, line, column);
      }
      function _enhanceEventWithInitialFrame(event2, url, line, column) {
        var e = event2.exception = event2.exception || {};
        var ev = e.values = e.values || [];
        var ev0 = ev[0] = ev[0] || {};
        var ev0s = ev0.stacktrace = ev0.stacktrace || {};
        var ev0sf = ev0s.frames = ev0s.frames || [];
        var colno = isNaN(parseInt(column, 10)) ? void 0 : column;
        var lineno = isNaN(parseInt(line, 10)) ? void 0 : line;
        var filename = utils_1.isString(url) && url.length > 0 ? url : utils_1.getLocationHref();
        if (ev0sf.length === 0) {
          ev0sf.push({
            colno,
            filename,
            function: "?",
            in_app: true,
            lineno
          });
        }
        return event2;
      }
      function globalHandlerLog(type) {
        flags_1.IS_DEBUG_BUILD && utils_1.logger.log("Global Handler attached: " + type);
      }
      function addMechanismAndCapture(hub, error, event2, type) {
        utils_1.addExceptionMechanism(event2, {
          handled: false,
          type
        });
        hub.captureEvent(event2, {
          originalException: error
        });
      }
      function getHubAndAttachStacktrace() {
        var hub = core_1.getCurrentHub();
        var client = hub.getClient();
        var attachStacktrace = client && client.getOptions().attachStacktrace;
        return [hub, attachStacktrace];
      }
    }
  });

  // node_modules/@sentry/browser/dist/integrations/trycatch.js
  var require_trycatch = __commonJS({
    "node_modules/@sentry/browser/dist/integrations/trycatch.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var helpers_1 = require_helpers();
      var DEFAULT_EVENT_TARGET = [
        "EventTarget",
        "Window",
        "Node",
        "ApplicationCache",
        "AudioTrackList",
        "ChannelMergerNode",
        "CryptoOperation",
        "EventSource",
        "FileReader",
        "HTMLUnknownElement",
        "IDBDatabase",
        "IDBRequest",
        "IDBTransaction",
        "KeyOperation",
        "MediaController",
        "MessagePort",
        "ModalWindow",
        "Notification",
        "SVGElementInstance",
        "Screen",
        "TextTrack",
        "TextTrackCue",
        "TextTrackList",
        "WebSocket",
        "WebSocketWorker",
        "Worker",
        "XMLHttpRequest",
        "XMLHttpRequestEventTarget",
        "XMLHttpRequestUpload"
      ];
      var TryCatch = function() {
        function TryCatch2(options) {
          this.name = TryCatch2.id;
          this._options = tslib_1.__assign({ XMLHttpRequest: true, eventTarget: true, requestAnimationFrame: true, setInterval: true, setTimeout: true }, options);
        }
        TryCatch2.prototype.setupOnce = function() {
          var global2 = utils_1.getGlobalObject();
          if (this._options.setTimeout) {
            utils_1.fill(global2, "setTimeout", _wrapTimeFunction);
          }
          if (this._options.setInterval) {
            utils_1.fill(global2, "setInterval", _wrapTimeFunction);
          }
          if (this._options.requestAnimationFrame) {
            utils_1.fill(global2, "requestAnimationFrame", _wrapRAF);
          }
          if (this._options.XMLHttpRequest && "XMLHttpRequest" in global2) {
            utils_1.fill(XMLHttpRequest.prototype, "send", _wrapXHR);
          }
          var eventTargetOption = this._options.eventTarget;
          if (eventTargetOption) {
            var eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;
            eventTarget.forEach(_wrapEventTarget);
          }
        };
        TryCatch2.id = "TryCatch";
        return TryCatch2;
      }();
      exports.TryCatch = TryCatch;
      function _wrapTimeFunction(original) {
        return function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var originalCallback = args[0];
          args[0] = helpers_1.wrap(originalCallback, {
            mechanism: {
              data: { function: utils_1.getFunctionName(original) },
              handled: true,
              type: "instrument"
            }
          });
          return original.apply(this, args);
        };
      }
      function _wrapRAF(original) {
        return function(callback) {
          return original.apply(this, [
            helpers_1.wrap(callback, {
              mechanism: {
                data: {
                  function: "requestAnimationFrame",
                  handler: utils_1.getFunctionName(original)
                },
                handled: true,
                type: "instrument"
              }
            })
          ]);
        };
      }
      function _wrapXHR(originalSend) {
        return function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var xhr = this;
          var xmlHttpRequestProps = ["onload", "onerror", "onprogress", "onreadystatechange"];
          xmlHttpRequestProps.forEach(function(prop) {
            if (prop in xhr && typeof xhr[prop] === "function") {
              utils_1.fill(xhr, prop, function(original) {
                var wrapOptions = {
                  mechanism: {
                    data: {
                      function: prop,
                      handler: utils_1.getFunctionName(original)
                    },
                    handled: true,
                    type: "instrument"
                  }
                };
                var originalFunction = utils_1.getOriginalFunction(original);
                if (originalFunction) {
                  wrapOptions.mechanism.data.handler = utils_1.getFunctionName(originalFunction);
                }
                return helpers_1.wrap(original, wrapOptions);
              });
            }
          });
          return originalSend.apply(this, args);
        };
      }
      function _wrapEventTarget(target) {
        var global2 = utils_1.getGlobalObject();
        var proto = global2[target] && global2[target].prototype;
        if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty("addEventListener")) {
          return;
        }
        utils_1.fill(proto, "addEventListener", function(original) {
          return function(eventName, fn, options) {
            try {
              if (typeof fn.handleEvent === "function") {
                fn.handleEvent = helpers_1.wrap(fn.handleEvent.bind(fn), {
                  mechanism: {
                    data: {
                      function: "handleEvent",
                      handler: utils_1.getFunctionName(fn),
                      target
                    },
                    handled: true,
                    type: "instrument"
                  }
                });
              }
            } catch (err) {
            }
            return original.apply(this, [
              eventName,
              helpers_1.wrap(fn, {
                mechanism: {
                  data: {
                    function: "addEventListener",
                    handler: utils_1.getFunctionName(fn),
                    target
                  },
                  handled: true,
                  type: "instrument"
                }
              }),
              options
            ]);
          };
        });
        utils_1.fill(proto, "removeEventListener", function(originalRemoveEventListener) {
          return function(eventName, fn, options) {
            var wrappedEventHandler = fn;
            try {
              var originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;
              if (originalEventHandler) {
                originalRemoveEventListener.call(this, eventName, originalEventHandler, options);
              }
            } catch (e) {
            }
            return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);
          };
        });
      }
    }
  });

  // node_modules/@sentry/browser/dist/integrations/breadcrumbs.js
  var require_breadcrumbs = __commonJS({
    "node_modules/@sentry/browser/dist/integrations/breadcrumbs.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var core_1 = require_dist6();
      var types_1 = require_dist2();
      var utils_1 = require_dist3();
      var Breadcrumbs = function() {
        function Breadcrumbs2(options) {
          this.name = Breadcrumbs2.id;
          this._options = tslib_1.__assign({ console: true, dom: true, fetch: true, history: true, sentry: true, xhr: true }, options);
        }
        Breadcrumbs2.prototype.addSentryBreadcrumb = function(event2) {
          if (!this._options.sentry) {
            return;
          }
          core_1.getCurrentHub().addBreadcrumb({
            category: "sentry." + (event2.type === "transaction" ? "transaction" : "event"),
            event_id: event2.event_id,
            level: event2.level,
            message: utils_1.getEventDescription(event2)
          }, {
            event: event2
          });
        };
        Breadcrumbs2.prototype.setupOnce = function() {
          if (this._options.console) {
            utils_1.addInstrumentationHandler("console", _consoleBreadcrumb);
          }
          if (this._options.dom) {
            utils_1.addInstrumentationHandler("dom", _domBreadcrumb(this._options.dom));
          }
          if (this._options.xhr) {
            utils_1.addInstrumentationHandler("xhr", _xhrBreadcrumb);
          }
          if (this._options.fetch) {
            utils_1.addInstrumentationHandler("fetch", _fetchBreadcrumb);
          }
          if (this._options.history) {
            utils_1.addInstrumentationHandler("history", _historyBreadcrumb);
          }
        };
        Breadcrumbs2.id = "Breadcrumbs";
        return Breadcrumbs2;
      }();
      exports.Breadcrumbs = Breadcrumbs;
      function _domBreadcrumb(dom) {
        function _innerDomBreadcrumb(handlerData) {
          var target;
          var keyAttrs = typeof dom === "object" ? dom.serializeAttribute : void 0;
          if (typeof keyAttrs === "string") {
            keyAttrs = [keyAttrs];
          }
          try {
            target = handlerData.event.target ? utils_1.htmlTreeAsString(handlerData.event.target, keyAttrs) : utils_1.htmlTreeAsString(handlerData.event, keyAttrs);
          } catch (e) {
            target = "<unknown>";
          }
          if (target.length === 0) {
            return;
          }
          core_1.getCurrentHub().addBreadcrumb({
            category: "ui." + handlerData.name,
            message: target
          }, {
            event: handlerData.event,
            name: handlerData.name,
            global: handlerData.global
          });
        }
        return _innerDomBreadcrumb;
      }
      function _consoleBreadcrumb(handlerData) {
        var breadcrumb = {
          category: "console",
          data: {
            arguments: handlerData.args,
            logger: "console"
          },
          level: utils_1.severityFromString(handlerData.level),
          message: utils_1.safeJoin(handlerData.args, " ")
        };
        if (handlerData.level === "assert") {
          if (handlerData.args[0] === false) {
            breadcrumb.message = "Assertion failed: " + (utils_1.safeJoin(handlerData.args.slice(1), " ") || "console.assert");
            breadcrumb.data.arguments = handlerData.args.slice(1);
          } else {
            return;
          }
        }
        core_1.getCurrentHub().addBreadcrumb(breadcrumb, {
          input: handlerData.args,
          level: handlerData.level
        });
      }
      function _xhrBreadcrumb(handlerData) {
        if (handlerData.endTimestamp) {
          if (handlerData.xhr.__sentry_own_request__) {
            return;
          }
          var _a = handlerData.xhr.__sentry_xhr__ || {}, method = _a.method, url = _a.url, status_code = _a.status_code, body = _a.body;
          core_1.getCurrentHub().addBreadcrumb({
            category: "xhr",
            data: {
              method,
              url,
              status_code
            },
            type: "http"
          }, {
            xhr: handlerData.xhr,
            input: body
          });
          return;
        }
      }
      function _fetchBreadcrumb(handlerData) {
        if (!handlerData.endTimestamp) {
          return;
        }
        if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === "POST") {
          return;
        }
        if (handlerData.error) {
          core_1.getCurrentHub().addBreadcrumb({
            category: "fetch",
            data: handlerData.fetchData,
            level: types_1.Severity.Error,
            type: "http"
          }, {
            data: handlerData.error,
            input: handlerData.args
          });
        } else {
          core_1.getCurrentHub().addBreadcrumb({
            category: "fetch",
            data: tslib_1.__assign(tslib_1.__assign({}, handlerData.fetchData), { status_code: handlerData.response.status }),
            type: "http"
          }, {
            input: handlerData.args,
            response: handlerData.response
          });
        }
      }
      function _historyBreadcrumb(handlerData) {
        var global2 = utils_1.getGlobalObject();
        var from = handlerData.from;
        var to = handlerData.to;
        var parsedLoc = utils_1.parseUrl(global2.location.href);
        var parsedFrom = utils_1.parseUrl(from);
        var parsedTo = utils_1.parseUrl(to);
        if (!parsedFrom.path) {
          parsedFrom = parsedLoc;
        }
        if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {
          to = parsedTo.relative;
        }
        if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {
          from = parsedFrom.relative;
        }
        core_1.getCurrentHub().addBreadcrumb({
          category: "navigation",
          data: {
            from,
            to
          }
        });
      }
    }
  });

  // node_modules/@sentry/browser/dist/integrations/linkederrors.js
  var require_linkederrors = __commonJS({
    "node_modules/@sentry/browser/dist/integrations/linkederrors.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var core_1 = require_dist6();
      var utils_1 = require_dist3();
      var eventbuilder_1 = require_eventbuilder();
      var DEFAULT_KEY = "cause";
      var DEFAULT_LIMIT = 5;
      var LinkedErrors = function() {
        function LinkedErrors2(options) {
          if (options === void 0) {
            options = {};
          }
          this.name = LinkedErrors2.id;
          this._key = options.key || DEFAULT_KEY;
          this._limit = options.limit || DEFAULT_LIMIT;
        }
        LinkedErrors2.prototype.setupOnce = function() {
          core_1.addGlobalEventProcessor(function(event2, hint) {
            var self2 = core_1.getCurrentHub().getIntegration(LinkedErrors2);
            return self2 ? _handler(self2._key, self2._limit, event2, hint) : event2;
          });
        };
        LinkedErrors2.id = "LinkedErrors";
        return LinkedErrors2;
      }();
      exports.LinkedErrors = LinkedErrors;
      function _handler(key, limit, event2, hint) {
        if (!event2.exception || !event2.exception.values || !hint || !utils_1.isInstanceOf(hint.originalException, Error)) {
          return event2;
        }
        var linkedErrors = _walkErrorTree(limit, hint.originalException, key);
        event2.exception.values = tslib_1.__spread(linkedErrors, event2.exception.values);
        return event2;
      }
      exports._handler = _handler;
      function _walkErrorTree(limit, error, key, stack) {
        if (stack === void 0) {
          stack = [];
        }
        if (!utils_1.isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {
          return stack;
        }
        var exception = eventbuilder_1.exceptionFromError(error[key]);
        return _walkErrorTree(limit, error[key], key, tslib_1.__spread([exception], stack));
      }
      exports._walkErrorTree = _walkErrorTree;
    }
  });

  // node_modules/@sentry/browser/dist/integrations/useragent.js
  var require_useragent = __commonJS({
    "node_modules/@sentry/browser/dist/integrations/useragent.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var core_1 = require_dist6();
      var utils_1 = require_dist3();
      var global2 = utils_1.getGlobalObject();
      var UserAgent = function() {
        function UserAgent2() {
          this.name = UserAgent2.id;
        }
        UserAgent2.prototype.setupOnce = function() {
          core_1.addGlobalEventProcessor(function(event2) {
            if (core_1.getCurrentHub().getIntegration(UserAgent2)) {
              if (!global2.navigator && !global2.location && !global2.document) {
                return event2;
              }
              var url = event2.request && event2.request.url || global2.location && global2.location.href;
              var referrer = (global2.document || {}).referrer;
              var userAgent = (global2.navigator || {}).userAgent;
              var headers = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, event2.request && event2.request.headers), referrer && { Referer: referrer }), userAgent && { "User-Agent": userAgent });
              var request = tslib_1.__assign(tslib_1.__assign({}, url && { url }), { headers });
              return tslib_1.__assign(tslib_1.__assign({}, event2), { request });
            }
            return event2;
          });
        };
        UserAgent2.id = "UserAgent";
        return UserAgent2;
      }();
      exports.UserAgent = UserAgent;
    }
  });

  // node_modules/@sentry/browser/dist/integrations/dedupe.js
  var require_dedupe = __commonJS({
    "node_modules/@sentry/browser/dist/integrations/dedupe.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_dist3();
      var flags_1 = require_flags4();
      var Dedupe = function() {
        function Dedupe2() {
          this.name = Dedupe2.id;
        }
        Dedupe2.prototype.setupOnce = function(addGlobalEventProcessor, getCurrentHub) {
          addGlobalEventProcessor(function(currentEvent) {
            var self2 = getCurrentHub().getIntegration(Dedupe2);
            if (self2) {
              try {
                if (_shouldDropEvent(currentEvent, self2._previousEvent)) {
                  flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Event dropped due to being a duplicate of previously captured event.");
                  return null;
                }
              } catch (_oO) {
                return self2._previousEvent = currentEvent;
              }
              return self2._previousEvent = currentEvent;
            }
            return currentEvent;
          });
        };
        Dedupe2.id = "Dedupe";
        return Dedupe2;
      }();
      exports.Dedupe = Dedupe;
      function _shouldDropEvent(currentEvent, previousEvent) {
        if (!previousEvent) {
          return false;
        }
        if (_isSameMessageEvent(currentEvent, previousEvent)) {
          return true;
        }
        if (_isSameExceptionEvent(currentEvent, previousEvent)) {
          return true;
        }
        return false;
      }
      function _isSameMessageEvent(currentEvent, previousEvent) {
        var currentMessage = currentEvent.message;
        var previousMessage = previousEvent.message;
        if (!currentMessage && !previousMessage) {
          return false;
        }
        if (currentMessage && !previousMessage || !currentMessage && previousMessage) {
          return false;
        }
        if (currentMessage !== previousMessage) {
          return false;
        }
        if (!_isSameFingerprint(currentEvent, previousEvent)) {
          return false;
        }
        if (!_isSameStacktrace(currentEvent, previousEvent)) {
          return false;
        }
        return true;
      }
      function _isSameExceptionEvent(currentEvent, previousEvent) {
        var previousException = _getExceptionFromEvent(previousEvent);
        var currentException = _getExceptionFromEvent(currentEvent);
        if (!previousException || !currentException) {
          return false;
        }
        if (previousException.type !== currentException.type || previousException.value !== currentException.value) {
          return false;
        }
        if (!_isSameFingerprint(currentEvent, previousEvent)) {
          return false;
        }
        if (!_isSameStacktrace(currentEvent, previousEvent)) {
          return false;
        }
        return true;
      }
      function _isSameStacktrace(currentEvent, previousEvent) {
        var currentFrames = _getFramesFromEvent(currentEvent);
        var previousFrames = _getFramesFromEvent(previousEvent);
        if (!currentFrames && !previousFrames) {
          return true;
        }
        if (currentFrames && !previousFrames || !currentFrames && previousFrames) {
          return false;
        }
        currentFrames = currentFrames;
        previousFrames = previousFrames;
        if (previousFrames.length !== currentFrames.length) {
          return false;
        }
        for (var i = 0; i < previousFrames.length; i++) {
          var frameA = previousFrames[i];
          var frameB = currentFrames[i];
          if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {
            return false;
          }
        }
        return true;
      }
      function _isSameFingerprint(currentEvent, previousEvent) {
        var currentFingerprint = currentEvent.fingerprint;
        var previousFingerprint = previousEvent.fingerprint;
        if (!currentFingerprint && !previousFingerprint) {
          return true;
        }
        if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {
          return false;
        }
        currentFingerprint = currentFingerprint;
        previousFingerprint = previousFingerprint;
        try {
          return !!(currentFingerprint.join("") === previousFingerprint.join(""));
        } catch (_oO) {
          return false;
        }
      }
      function _getExceptionFromEvent(event2) {
        return event2.exception && event2.exception.values && event2.exception.values[0];
      }
      function _getFramesFromEvent(event2) {
        var exception = event2.exception;
        if (exception) {
          try {
            return exception.values[0].stacktrace.frames;
          } catch (_oO) {
            return void 0;
          }
        } else if (event2.stacktrace) {
          return event2.stacktrace.frames;
        }
        return void 0;
      }
    }
  });

  // node_modules/@sentry/browser/dist/integrations/index.js
  var require_integrations2 = __commonJS({
    "node_modules/@sentry/browser/dist/integrations/index.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var globalhandlers_1 = require_globalhandlers();
      exports.GlobalHandlers = globalhandlers_1.GlobalHandlers;
      var trycatch_1 = require_trycatch();
      exports.TryCatch = trycatch_1.TryCatch;
      var breadcrumbs_1 = require_breadcrumbs();
      exports.Breadcrumbs = breadcrumbs_1.Breadcrumbs;
      var linkederrors_1 = require_linkederrors();
      exports.LinkedErrors = linkederrors_1.LinkedErrors;
      var useragent_1 = require_useragent();
      exports.UserAgent = useragent_1.UserAgent;
      var dedupe_1 = require_dedupe();
      exports.Dedupe = dedupe_1.Dedupe;
    }
  });

  // node_modules/@sentry/browser/dist/client.js
  var require_client = __commonJS({
    "node_modules/@sentry/browser/dist/client.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var core_1 = require_dist6();
      var utils_1 = require_dist3();
      var backend_1 = require_backend();
      var flags_1 = require_flags4();
      var helpers_1 = require_helpers();
      var integrations_1 = require_integrations2();
      var BrowserClient = function(_super) {
        tslib_1.__extends(BrowserClient2, _super);
        function BrowserClient2(options) {
          if (options === void 0) {
            options = {};
          }
          var _this = this;
          options._metadata = options._metadata || {};
          options._metadata.sdk = options._metadata.sdk || {
            name: "sentry.javascript.browser",
            packages: [
              {
                name: "npm:@sentry/browser",
                version: core_1.SDK_VERSION
              }
            ],
            version: core_1.SDK_VERSION
          };
          _this = _super.call(this, backend_1.BrowserBackend, options) || this;
          return _this;
        }
        BrowserClient2.prototype.showReportDialog = function(options) {
          if (options === void 0) {
            options = {};
          }
          var document2 = utils_1.getGlobalObject().document;
          if (!document2) {
            return;
          }
          if (!this._isEnabled()) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.error("Trying to call showReportDialog with Sentry Client disabled");
            return;
          }
          helpers_1.injectReportDialog(tslib_1.__assign(tslib_1.__assign({}, options), { dsn: options.dsn || this.getDsn() }));
        };
        BrowserClient2.prototype._prepareEvent = function(event2, scope, hint) {
          event2.platform = event2.platform || "javascript";
          return _super.prototype._prepareEvent.call(this, event2, scope, hint);
        };
        BrowserClient2.prototype._sendEvent = function(event2) {
          var integration = this.getIntegration(integrations_1.Breadcrumbs);
          if (integration) {
            integration.addSentryBreadcrumb(event2);
          }
          _super.prototype._sendEvent.call(this, event2);
        };
        return BrowserClient2;
      }(core_1.BaseClient);
      exports.BrowserClient = BrowserClient;
    }
  });

  // node_modules/@sentry/browser/dist/sdk.js
  var require_sdk2 = __commonJS({
    "node_modules/@sentry/browser/dist/sdk.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var core_1 = require_dist6();
      var utils_1 = require_dist3();
      var client_1 = require_client();
      var flags_1 = require_flags4();
      var helpers_1 = require_helpers();
      var integrations_1 = require_integrations2();
      exports.defaultIntegrations = [
        new core_1.Integrations.InboundFilters(),
        new core_1.Integrations.FunctionToString(),
        new integrations_1.TryCatch(),
        new integrations_1.Breadcrumbs(),
        new integrations_1.GlobalHandlers(),
        new integrations_1.LinkedErrors(),
        new integrations_1.Dedupe(),
        new integrations_1.UserAgent()
      ];
      function init(options) {
        if (options === void 0) {
          options = {};
        }
        if (options.defaultIntegrations === void 0) {
          options.defaultIntegrations = exports.defaultIntegrations;
        }
        if (options.release === void 0) {
          var window_1 = utils_1.getGlobalObject();
          if (window_1.SENTRY_RELEASE && window_1.SENTRY_RELEASE.id) {
            options.release = window_1.SENTRY_RELEASE.id;
          }
        }
        if (options.autoSessionTracking === void 0) {
          options.autoSessionTracking = true;
        }
        if (options.sendClientReports === void 0) {
          options.sendClientReports = true;
        }
        core_1.initAndBind(client_1.BrowserClient, options);
        if (options.autoSessionTracking) {
          startSessionTracking();
        }
      }
      exports.init = init;
      function showReportDialog(options) {
        if (options === void 0) {
          options = {};
        }
        var hub = core_1.getCurrentHub();
        var scope = hub.getScope();
        if (scope) {
          options.user = tslib_1.__assign(tslib_1.__assign({}, scope.getUser()), options.user);
        }
        if (!options.eventId) {
          options.eventId = hub.lastEventId();
        }
        var client = hub.getClient();
        if (client) {
          client.showReportDialog(options);
        }
      }
      exports.showReportDialog = showReportDialog;
      function lastEventId() {
        return core_1.getCurrentHub().lastEventId();
      }
      exports.lastEventId = lastEventId;
      function forceLoad() {
      }
      exports.forceLoad = forceLoad;
      function onLoad(callback) {
        callback();
      }
      exports.onLoad = onLoad;
      function flush(timeout) {
        var client = core_1.getCurrentHub().getClient();
        if (client) {
          return client.flush(timeout);
        }
        flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Cannot flush events. No client defined.");
        return utils_1.resolvedSyncPromise(false);
      }
      exports.flush = flush;
      function close(timeout) {
        var client = core_1.getCurrentHub().getClient();
        if (client) {
          return client.close(timeout);
        }
        flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Cannot flush events and disable SDK. No client defined.");
        return utils_1.resolvedSyncPromise(false);
      }
      exports.close = close;
      function wrap(fn) {
        return helpers_1.wrap(fn)();
      }
      exports.wrap = wrap;
      function startSessionOnHub(hub) {
        hub.startSession({ ignoreDuration: true });
        hub.captureSession();
      }
      function startSessionTracking() {
        var window2 = utils_1.getGlobalObject();
        var document2 = window2.document;
        if (typeof document2 === "undefined") {
          flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Session tracking in non-browser environment with @sentry/browser is not supported.");
          return;
        }
        var hub = core_1.getCurrentHub();
        if (!hub.captureSession) {
          return;
        }
        startSessionOnHub(hub);
        utils_1.addInstrumentationHandler("history", function(_a) {
          var from = _a.from, to = _a.to;
          if (!(from === void 0 || from === to)) {
            startSessionOnHub(core_1.getCurrentHub());
          }
        });
      }
    }
  });

  // node_modules/@sentry/browser/dist/version.js
  var require_version2 = __commonJS({
    "node_modules/@sentry/browser/dist/version.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SDK_NAME = "sentry.javascript.browser";
    }
  });

  // node_modules/@sentry/browser/dist/exports.js
  var require_exports = __commonJS({
    "node_modules/@sentry/browser/dist/exports.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var types_1 = require_dist2();
      exports.Severity = types_1.Severity;
      var core_1 = require_dist6();
      exports.addGlobalEventProcessor = core_1.addGlobalEventProcessor;
      exports.addBreadcrumb = core_1.addBreadcrumb;
      exports.captureException = core_1.captureException;
      exports.captureEvent = core_1.captureEvent;
      exports.captureMessage = core_1.captureMessage;
      exports.configureScope = core_1.configureScope;
      exports.getHubFromCarrier = core_1.getHubFromCarrier;
      exports.getCurrentHub = core_1.getCurrentHub;
      exports.Hub = core_1.Hub;
      exports.makeMain = core_1.makeMain;
      exports.Scope = core_1.Scope;
      exports.Session = core_1.Session;
      exports.startTransaction = core_1.startTransaction;
      exports.SDK_VERSION = core_1.SDK_VERSION;
      exports.setContext = core_1.setContext;
      exports.setExtra = core_1.setExtra;
      exports.setExtras = core_1.setExtras;
      exports.setTag = core_1.setTag;
      exports.setTags = core_1.setTags;
      exports.setUser = core_1.setUser;
      exports.withScope = core_1.withScope;
      var client_1 = require_client();
      exports.BrowserClient = client_1.BrowserClient;
      var helpers_1 = require_helpers();
      exports.injectReportDialog = helpers_1.injectReportDialog;
      var eventbuilder_1 = require_eventbuilder();
      exports.eventFromException = eventbuilder_1.eventFromException;
      exports.eventFromMessage = eventbuilder_1.eventFromMessage;
      var sdk_1 = require_sdk2();
      exports.defaultIntegrations = sdk_1.defaultIntegrations;
      exports.forceLoad = sdk_1.forceLoad;
      exports.init = sdk_1.init;
      exports.lastEventId = sdk_1.lastEventId;
      exports.onLoad = sdk_1.onLoad;
      exports.showReportDialog = sdk_1.showReportDialog;
      exports.flush = sdk_1.flush;
      exports.close = sdk_1.close;
      exports.wrap = sdk_1.wrap;
      var version_1 = require_version2();
      exports.SDK_NAME = version_1.SDK_NAME;
    }
  });

  // node_modules/@sentry/browser/dist/index.js
  var require_dist7 = __commonJS({
    "node_modules/@sentry/browser/dist/index.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      tslib_1.__exportStar(require_exports(), exports);
      var core_1 = require_dist6();
      var utils_1 = require_dist3();
      var BrowserIntegrations = require_integrations2();
      var Transports = require_transports();
      exports.Transports = Transports;
      var windowIntegrations = {};
      var _window = utils_1.getGlobalObject();
      if (_window.Sentry && _window.Sentry.Integrations) {
        windowIntegrations = _window.Sentry.Integrations;
      }
      var INTEGRATIONS = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, windowIntegrations), core_1.Integrations), BrowserIntegrations);
      exports.Integrations = INTEGRATIONS;
    }
  });

  // node_modules/@sentry/integrations/dist/flags.js
  var require_flags5 = __commonJS({
    "node_modules/@sentry/integrations/dist/flags.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === "undefined" ? true : __SENTRY_DEBUG__;
    }
  });

  // node_modules/@sentry/integrations/dist/angular.js
  var require_angular = __commonJS({
    "node_modules/@sentry/integrations/dist/angular.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var flags_1 = require_flags5();
      var angularPattern = /^\[((?:[$a-zA-Z0-9]+:)?(?:[$a-zA-Z0-9]+))\] (.*?)\n?(\S+)$/;
      var Angular = function() {
        function Angular2(options) {
          if (options === void 0) {
            options = {};
          }
          this.name = Angular2.id;
          flags_1.IS_DEBUG_BUILD && utils_1.logger.log("You are still using the Angular integration, consider moving to @sentry/angular");
          this._angular = options.angular || utils_1.getGlobalObject().angular;
          if (!this._angular) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.error("AngularIntegration is missing an Angular instance");
            return;
          }
          this._module = this._angular.module(Angular2.moduleName, []);
        }
        Angular2.prototype.setupOnce = function(_, getCurrentHub) {
          var _this = this;
          if (!this._module) {
            return;
          }
          this._getCurrentHub = getCurrentHub;
          this._module.config([
            "$provide",
            function($provide) {
              $provide.decorator("$exceptionHandler", ["$delegate", _this._$exceptionHandlerDecorator.bind(_this)]);
            }
          ]);
        };
        Angular2.prototype._$exceptionHandlerDecorator = function($delegate) {
          var _this = this;
          return function(exception, cause) {
            var hub = _this._getCurrentHub && _this._getCurrentHub();
            if (hub && hub.getIntegration(Angular2)) {
              hub.withScope(function(scope) {
                if (cause) {
                  scope.setExtra("cause", cause);
                }
                scope.addEventProcessor(function(event2) {
                  var ex = event2.exception && event2.exception.values && event2.exception.values[0];
                  if (ex) {
                    var matches = angularPattern.exec(ex.value || "");
                    if (matches) {
                      ex.type = matches[1];
                      ex.value = matches[2];
                      event2.message = ex.type + ": " + ex.value;
                      event2.extra = tslib_1.__assign(tslib_1.__assign({}, event2.extra), { angularDocs: matches[3].substr(0, 250) });
                    }
                  }
                  return event2;
                });
                hub.captureException(exception);
              });
            }
            $delegate(exception, cause);
          };
        };
        Angular2.id = "AngularJS";
        Angular2.moduleName = "ngSentry";
        return Angular2;
      }();
      exports.Angular = Angular;
    }
  });

  // node_modules/@sentry/integrations/dist/captureconsole.js
  var require_captureconsole = __commonJS({
    "node_modules/@sentry/integrations/dist/captureconsole.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_dist3();
      var global2 = utils_1.getGlobalObject();
      var CaptureConsole = function() {
        function CaptureConsole2(options) {
          if (options === void 0) {
            options = {};
          }
          this.name = CaptureConsole2.id;
          this._levels = utils_1.CONSOLE_LEVELS;
          if (options.levels) {
            this._levels = options.levels;
          }
        }
        CaptureConsole2.prototype.setupOnce = function(_, getCurrentHub) {
          if (!("console" in global2)) {
            return;
          }
          this._levels.forEach(function(level) {
            if (!(level in global2.console)) {
              return;
            }
            utils_1.fill(global2.console, level, function(originalConsoleMethod) {
              return function() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments[_i];
                }
                var hub = getCurrentHub();
                if (hub.getIntegration(CaptureConsole2)) {
                  hub.withScope(function(scope) {
                    scope.setLevel(utils_1.severityFromString(level));
                    scope.setExtra("arguments", args);
                    scope.addEventProcessor(function(event2) {
                      event2.logger = "console";
                      return event2;
                    });
                    var message = utils_1.safeJoin(args, " ");
                    if (level === "assert") {
                      if (args[0] === false) {
                        message = "Assertion failed: " + (utils_1.safeJoin(args.slice(1), " ") || "console.assert");
                        scope.setExtra("arguments", args.slice(1));
                        hub.captureMessage(message);
                      }
                    } else if (level === "error" && args[0] instanceof Error) {
                      hub.captureException(args[0]);
                    } else {
                      hub.captureMessage(message);
                    }
                  });
                }
                if (originalConsoleMethod) {
                  originalConsoleMethod.apply(global2.console, args);
                }
              };
            });
          });
        };
        CaptureConsole2.id = "CaptureConsole";
        return CaptureConsole2;
      }();
      exports.CaptureConsole = CaptureConsole;
    }
  });

  // node_modules/@sentry/integrations/dist/debug.js
  var require_debug = __commonJS({
    "node_modules/@sentry/integrations/dist/debug.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var Debug = function() {
        function Debug2(options) {
          this.name = Debug2.id;
          this._options = tslib_1.__assign({ debugger: false, stringify: false }, options);
        }
        Debug2.prototype.setupOnce = function(addGlobalEventProcessor, getCurrentHub) {
          addGlobalEventProcessor(function(event2, hint) {
            var self2 = getCurrentHub().getIntegration(Debug2);
            if (self2) {
              if (self2._options.debugger) {
                debugger;
              }
              utils_1.consoleSandbox(function() {
                if (self2._options.stringify) {
                  console.log(JSON.stringify(event2, null, 2));
                  if (hint) {
                    console.log(JSON.stringify(hint, null, 2));
                  }
                } else {
                  console.log(event2);
                  if (hint) {
                    console.log(hint);
                  }
                }
              });
            }
            return event2;
          });
        };
        Debug2.id = "Debug";
        return Debug2;
      }();
      exports.Debug = Debug;
    }
  });

  // node_modules/@sentry/integrations/dist/dedupe.js
  var require_dedupe2 = __commonJS({
    "node_modules/@sentry/integrations/dist/dedupe.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_dist3();
      var flags_1 = require_flags5();
      var Dedupe = function() {
        function Dedupe2() {
          this.name = Dedupe2.id;
        }
        Dedupe2.prototype.setupOnce = function(addGlobalEventProcessor, getCurrentHub) {
          addGlobalEventProcessor(function(currentEvent) {
            var self2 = getCurrentHub().getIntegration(Dedupe2);
            if (self2) {
              try {
                if (_shouldDropEvent(currentEvent, self2._previousEvent)) {
                  flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Event dropped due to being a duplicate of previously captured event.");
                  return null;
                }
              } catch (_oO) {
                return self2._previousEvent = currentEvent;
              }
              return self2._previousEvent = currentEvent;
            }
            return currentEvent;
          });
        };
        Dedupe2.id = "Dedupe";
        return Dedupe2;
      }();
      exports.Dedupe = Dedupe;
      function _shouldDropEvent(currentEvent, previousEvent) {
        if (!previousEvent) {
          return false;
        }
        if (_isSameMessageEvent(currentEvent, previousEvent)) {
          return true;
        }
        if (_isSameExceptionEvent(currentEvent, previousEvent)) {
          return true;
        }
        return false;
      }
      exports._shouldDropEvent = _shouldDropEvent;
      function _isSameMessageEvent(currentEvent, previousEvent) {
        var currentMessage = currentEvent.message;
        var previousMessage = previousEvent.message;
        if (!currentMessage && !previousMessage) {
          return false;
        }
        if (currentMessage && !previousMessage || !currentMessage && previousMessage) {
          return false;
        }
        if (currentMessage !== previousMessage) {
          return false;
        }
        if (!_isSameFingerprint(currentEvent, previousEvent)) {
          return false;
        }
        if (!_isSameStacktrace(currentEvent, previousEvent)) {
          return false;
        }
        return true;
      }
      function _isSameExceptionEvent(currentEvent, previousEvent) {
        var previousException = _getExceptionFromEvent(previousEvent);
        var currentException = _getExceptionFromEvent(currentEvent);
        if (!previousException || !currentException) {
          return false;
        }
        if (previousException.type !== currentException.type || previousException.value !== currentException.value) {
          return false;
        }
        if (!_isSameFingerprint(currentEvent, previousEvent)) {
          return false;
        }
        if (!_isSameStacktrace(currentEvent, previousEvent)) {
          return false;
        }
        return true;
      }
      function _isSameStacktrace(currentEvent, previousEvent) {
        var currentFrames = _getFramesFromEvent(currentEvent);
        var previousFrames = _getFramesFromEvent(previousEvent);
        if (!currentFrames && !previousFrames) {
          return true;
        }
        if (currentFrames && !previousFrames || !currentFrames && previousFrames) {
          return false;
        }
        currentFrames = currentFrames;
        previousFrames = previousFrames;
        if (previousFrames.length !== currentFrames.length) {
          return false;
        }
        for (var i = 0; i < previousFrames.length; i++) {
          var frameA = previousFrames[i];
          var frameB = currentFrames[i];
          if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {
            return false;
          }
        }
        return true;
      }
      function _isSameFingerprint(currentEvent, previousEvent) {
        var currentFingerprint = currentEvent.fingerprint;
        var previousFingerprint = previousEvent.fingerprint;
        if (!currentFingerprint && !previousFingerprint) {
          return true;
        }
        if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {
          return false;
        }
        currentFingerprint = currentFingerprint;
        previousFingerprint = previousFingerprint;
        try {
          return !!(currentFingerprint.join("") === previousFingerprint.join(""));
        } catch (_oO) {
          return false;
        }
      }
      function _getExceptionFromEvent(event2) {
        return event2.exception && event2.exception.values && event2.exception.values[0];
      }
      function _getFramesFromEvent(event2) {
        var exception = event2.exception;
        if (exception) {
          try {
            return exception.values[0].stacktrace.frames;
          } catch (_oO) {
            return void 0;
          }
        } else if (event2.stacktrace) {
          return event2.stacktrace.frames;
        }
        return void 0;
      }
    }
  });

  // node_modules/@sentry/integrations/dist/ember.js
  var require_ember = __commonJS({
    "node_modules/@sentry/integrations/dist/ember.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_dist3();
      var flags_1 = require_flags5();
      var Ember = function() {
        function Ember2(options) {
          if (options === void 0) {
            options = {};
          }
          this.name = Ember2.id;
          this._Ember = options.Ember || utils_1.getGlobalObject().Ember;
        }
        Ember2.prototype.setupOnce = function(_, getCurrentHub) {
          var _this = this;
          if (!this._Ember) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.error("EmberIntegration is missing an Ember instance");
            return;
          }
          var oldOnError = this._Ember.onerror;
          this._Ember.onerror = function(error) {
            if (getCurrentHub().getIntegration(Ember2)) {
              getCurrentHub().captureException(error, { originalException: error });
            }
            if (typeof oldOnError === "function") {
              oldOnError.call(_this._Ember, error);
            } else if (_this._Ember.testing) {
              throw error;
            }
          };
          this._Ember.RSVP.on("error", function(reason) {
            if (getCurrentHub().getIntegration(Ember2)) {
              getCurrentHub().withScope(function(scope) {
                if (utils_1.isInstanceOf(reason, Error)) {
                  scope.setExtra("context", "Unhandled Promise error detected");
                  getCurrentHub().captureException(reason, { originalException: reason });
                } else {
                  scope.setExtra("reason", reason);
                  getCurrentHub().captureMessage("Unhandled Promise error detected");
                }
              });
            }
          });
        };
        Ember2.id = "Ember";
        return Ember2;
      }();
      exports.Ember = Ember;
    }
  });

  // node_modules/@sentry/integrations/dist/extraerrordata.js
  var require_extraerrordata = __commonJS({
    "node_modules/@sentry/integrations/dist/extraerrordata.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var flags_1 = require_flags5();
      var ExtraErrorData = function() {
        function ExtraErrorData2(options) {
          this.name = ExtraErrorData2.id;
          this._options = tslib_1.__assign({ depth: 3 }, options);
        }
        ExtraErrorData2.prototype.setupOnce = function(addGlobalEventProcessor, getCurrentHub) {
          addGlobalEventProcessor(function(event2, hint) {
            var self2 = getCurrentHub().getIntegration(ExtraErrorData2);
            if (!self2) {
              return event2;
            }
            return self2.enhanceEventWithErrorData(event2, hint);
          });
        };
        ExtraErrorData2.prototype.enhanceEventWithErrorData = function(event2, hint) {
          var _a;
          if (!hint || !hint.originalException || !utils_1.isError(hint.originalException)) {
            return event2;
          }
          var name = hint.originalException.name || hint.originalException.constructor.name;
          var errorData = this._extractErrorData(hint.originalException);
          if (errorData) {
            var contexts = tslib_1.__assign({}, event2.contexts);
            var normalizedErrorData = utils_1.normalize(errorData, this._options.depth);
            if (utils_1.isPlainObject(normalizedErrorData)) {
              contexts = tslib_1.__assign(tslib_1.__assign({}, event2.contexts), (_a = {}, _a[name] = tslib_1.__assign({}, normalizedErrorData), _a));
            }
            return tslib_1.__assign(tslib_1.__assign({}, event2), { contexts });
          }
          return event2;
        };
        ExtraErrorData2.prototype._extractErrorData = function(error) {
          var e_1, _a, e_2, _b;
          try {
            var nativeKeys = [
              "name",
              "message",
              "stack",
              "line",
              "column",
              "fileName",
              "lineNumber",
              "columnNumber",
              "toJSON"
            ];
            var extraErrorInfo = {};
            try {
              for (var _c = tslib_1.__values(Object.keys(error)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var key = _d.value;
                if (nativeKeys.indexOf(key) !== -1) {
                  continue;
                }
                var value = error[key];
                extraErrorInfo[key] = utils_1.isError(value) ? value.toString() : value;
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_d && !_d.done && (_a = _c.return))
                  _a.call(_c);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
            if (typeof error.toJSON === "function") {
              var serializedError = error.toJSON();
              try {
                for (var _e = tslib_1.__values(Object.keys(serializedError)), _f = _e.next(); !_f.done; _f = _e.next()) {
                  var key = _f.value;
                  var value = serializedError[key];
                  extraErrorInfo[key] = utils_1.isError(value) ? value.toString() : value;
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (_f && !_f.done && (_b = _e.return))
                    _b.call(_e);
                } finally {
                  if (e_2)
                    throw e_2.error;
                }
              }
            }
            return extraErrorInfo;
          } catch (oO) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.error("Unable to extract extra data from the Error object:", oO);
          }
          return null;
        };
        ExtraErrorData2.id = "ExtraErrorData";
        return ExtraErrorData2;
      }();
      exports.ExtraErrorData = ExtraErrorData;
    }
  });

  // node_modules/localforage/dist/localforage.js
  var require_localforage = __commonJS({
    "node_modules/localforage/dist/localforage.js"(exports, module) {
      (function(f) {
        if (typeof exports === "object" && typeof module !== "undefined") {
          module.exports = f();
        } else if (typeof define === "function" && define.amd) {
          define([], f);
        } else {
          var g;
          if (typeof window !== "undefined") {
            g = window;
          } else if (typeof global !== "undefined") {
            g = global;
          } else if (typeof self !== "undefined") {
            g = self;
          } else {
            g = this;
          }
          g.localforage = f();
        }
      })(function() {
        var define2, module2, exports2;
        return function e(t, n, r) {
          function s(o2, u) {
            if (!n[o2]) {
              if (!t[o2]) {
                var a = typeof __require == "function" && __require;
                if (!u && a)
                  return a(o2, true);
                if (i)
                  return i(o2, true);
                var f = new Error("Cannot find module '" + o2 + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
              }
              var l = n[o2] = { exports: {} };
              t[o2][0].call(l.exports, function(e2) {
                var n2 = t[o2][1][e2];
                return s(n2 ? n2 : e2);
              }, l, l.exports, e, t, n, r);
            }
            return n[o2].exports;
          }
          var i = typeof __require == "function" && __require;
          for (var o = 0; o < r.length; o++)
            s(r[o]);
          return s;
        }({ 1: [function(_dereq_, module3, exports3) {
          (function(global2) {
            "use strict";
            var Mutation = global2.MutationObserver || global2.WebKitMutationObserver;
            var scheduleDrain;
            {
              if (Mutation) {
                var called = 0;
                var observer = new Mutation(nextTick);
                var element = global2.document.createTextNode("");
                observer.observe(element, {
                  characterData: true
                });
                scheduleDrain = function() {
                  element.data = called = ++called % 2;
                };
              } else if (!global2.setImmediate && typeof global2.MessageChannel !== "undefined") {
                var channel = new global2.MessageChannel();
                channel.port1.onmessage = nextTick;
                scheduleDrain = function() {
                  channel.port2.postMessage(0);
                };
              } else if ("document" in global2 && "onreadystatechange" in global2.document.createElement("script")) {
                scheduleDrain = function() {
                  var scriptEl = global2.document.createElement("script");
                  scriptEl.onreadystatechange = function() {
                    nextTick();
                    scriptEl.onreadystatechange = null;
                    scriptEl.parentNode.removeChild(scriptEl);
                    scriptEl = null;
                  };
                  global2.document.documentElement.appendChild(scriptEl);
                };
              } else {
                scheduleDrain = function() {
                  setTimeout(nextTick, 0);
                };
              }
            }
            var draining;
            var queue = [];
            function nextTick() {
              draining = true;
              var i, oldQueue;
              var len = queue.length;
              while (len) {
                oldQueue = queue;
                queue = [];
                i = -1;
                while (++i < len) {
                  oldQueue[i]();
                }
                len = queue.length;
              }
              draining = false;
            }
            module3.exports = immediate;
            function immediate(task) {
              if (queue.push(task) === 1 && !draining) {
                scheduleDrain();
              }
            }
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {}], 2: [function(_dereq_, module3, exports3) {
          "use strict";
          var immediate = _dereq_(1);
          function INTERNAL() {
          }
          var handlers = {};
          var REJECTED = ["REJECTED"];
          var FULFILLED = ["FULFILLED"];
          var PENDING = ["PENDING"];
          module3.exports = Promise2;
          function Promise2(resolver) {
            if (typeof resolver !== "function") {
              throw new TypeError("resolver must be a function");
            }
            this.state = PENDING;
            this.queue = [];
            this.outcome = void 0;
            if (resolver !== INTERNAL) {
              safelyResolveThenable(this, resolver);
            }
          }
          Promise2.prototype["catch"] = function(onRejected) {
            return this.then(null, onRejected);
          };
          Promise2.prototype.then = function(onFulfilled, onRejected) {
            if (typeof onFulfilled !== "function" && this.state === FULFILLED || typeof onRejected !== "function" && this.state === REJECTED) {
              return this;
            }
            var promise = new this.constructor(INTERNAL);
            if (this.state !== PENDING) {
              var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
              unwrap(promise, resolver, this.outcome);
            } else {
              this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
            }
            return promise;
          };
          function QueueItem(promise, onFulfilled, onRejected) {
            this.promise = promise;
            if (typeof onFulfilled === "function") {
              this.onFulfilled = onFulfilled;
              this.callFulfilled = this.otherCallFulfilled;
            }
            if (typeof onRejected === "function") {
              this.onRejected = onRejected;
              this.callRejected = this.otherCallRejected;
            }
          }
          QueueItem.prototype.callFulfilled = function(value) {
            handlers.resolve(this.promise, value);
          };
          QueueItem.prototype.otherCallFulfilled = function(value) {
            unwrap(this.promise, this.onFulfilled, value);
          };
          QueueItem.prototype.callRejected = function(value) {
            handlers.reject(this.promise, value);
          };
          QueueItem.prototype.otherCallRejected = function(value) {
            unwrap(this.promise, this.onRejected, value);
          };
          function unwrap(promise, func, value) {
            immediate(function() {
              var returnValue;
              try {
                returnValue = func(value);
              } catch (e) {
                return handlers.reject(promise, e);
              }
              if (returnValue === promise) {
                handlers.reject(promise, new TypeError("Cannot resolve promise with itself"));
              } else {
                handlers.resolve(promise, returnValue);
              }
            });
          }
          handlers.resolve = function(self2, value) {
            var result = tryCatch(getThen, value);
            if (result.status === "error") {
              return handlers.reject(self2, result.value);
            }
            var thenable = result.value;
            if (thenable) {
              safelyResolveThenable(self2, thenable);
            } else {
              self2.state = FULFILLED;
              self2.outcome = value;
              var i = -1;
              var len = self2.queue.length;
              while (++i < len) {
                self2.queue[i].callFulfilled(value);
              }
            }
            return self2;
          };
          handlers.reject = function(self2, error) {
            self2.state = REJECTED;
            self2.outcome = error;
            var i = -1;
            var len = self2.queue.length;
            while (++i < len) {
              self2.queue[i].callRejected(error);
            }
            return self2;
          };
          function getThen(obj) {
            var then = obj && obj.then;
            if (obj && (typeof obj === "object" || typeof obj === "function") && typeof then === "function") {
              return function appyThen() {
                then.apply(obj, arguments);
              };
            }
          }
          function safelyResolveThenable(self2, thenable) {
            var called = false;
            function onError(value) {
              if (called) {
                return;
              }
              called = true;
              handlers.reject(self2, value);
            }
            function onSuccess(value) {
              if (called) {
                return;
              }
              called = true;
              handlers.resolve(self2, value);
            }
            function tryToUnwrap() {
              thenable(onSuccess, onError);
            }
            var result = tryCatch(tryToUnwrap);
            if (result.status === "error") {
              onError(result.value);
            }
          }
          function tryCatch(func, value) {
            var out = {};
            try {
              out.value = func(value);
              out.status = "success";
            } catch (e) {
              out.status = "error";
              out.value = e;
            }
            return out;
          }
          Promise2.resolve = resolve;
          function resolve(value) {
            if (value instanceof this) {
              return value;
            }
            return handlers.resolve(new this(INTERNAL), value);
          }
          Promise2.reject = reject;
          function reject(reason) {
            var promise = new this(INTERNAL);
            return handlers.reject(promise, reason);
          }
          Promise2.all = all;
          function all(iterable) {
            var self2 = this;
            if (Object.prototype.toString.call(iterable) !== "[object Array]") {
              return this.reject(new TypeError("must be an array"));
            }
            var len = iterable.length;
            var called = false;
            if (!len) {
              return this.resolve([]);
            }
            var values = new Array(len);
            var resolved = 0;
            var i = -1;
            var promise = new this(INTERNAL);
            while (++i < len) {
              allResolver(iterable[i], i);
            }
            return promise;
            function allResolver(value, i2) {
              self2.resolve(value).then(resolveFromAll, function(error) {
                if (!called) {
                  called = true;
                  handlers.reject(promise, error);
                }
              });
              function resolveFromAll(outValue) {
                values[i2] = outValue;
                if (++resolved === len && !called) {
                  called = true;
                  handlers.resolve(promise, values);
                }
              }
            }
          }
          Promise2.race = race;
          function race(iterable) {
            var self2 = this;
            if (Object.prototype.toString.call(iterable) !== "[object Array]") {
              return this.reject(new TypeError("must be an array"));
            }
            var len = iterable.length;
            var called = false;
            if (!len) {
              return this.resolve([]);
            }
            var i = -1;
            var promise = new this(INTERNAL);
            while (++i < len) {
              resolver(iterable[i]);
            }
            return promise;
            function resolver(value) {
              self2.resolve(value).then(function(response) {
                if (!called) {
                  called = true;
                  handlers.resolve(promise, response);
                }
              }, function(error) {
                if (!called) {
                  called = true;
                  handlers.reject(promise, error);
                }
              });
            }
          }
        }, { "1": 1 }], 3: [function(_dereq_, module3, exports3) {
          (function(global2) {
            "use strict";
            if (typeof global2.Promise !== "function") {
              global2.Promise = _dereq_(2);
            }
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, { "2": 2 }], 4: [function(_dereq_, module3, exports3) {
          "use strict";
          var _typeof3 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          function _classCallCheck2(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function getIDB() {
            try {
              if (typeof indexedDB !== "undefined") {
                return indexedDB;
              }
              if (typeof webkitIndexedDB !== "undefined") {
                return webkitIndexedDB;
              }
              if (typeof mozIndexedDB !== "undefined") {
                return mozIndexedDB;
              }
              if (typeof OIndexedDB !== "undefined") {
                return OIndexedDB;
              }
              if (typeof msIndexedDB !== "undefined") {
                return msIndexedDB;
              }
            } catch (e) {
              return;
            }
          }
          var idb = getIDB();
          function isIndexedDBValid() {
            try {
              if (!idb || !idb.open) {
                return false;
              }
              var isSafari = typeof openDatabase !== "undefined" && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);
              var hasFetch = typeof fetch === "function" && fetch.toString().indexOf("[native code") !== -1;
              return (!isSafari || hasFetch) && typeof indexedDB !== "undefined" && typeof IDBKeyRange !== "undefined";
            } catch (e) {
              return false;
            }
          }
          function createBlob(parts, properties) {
            parts = parts || [];
            properties = properties || {};
            try {
              return new Blob(parts, properties);
            } catch (e) {
              if (e.name !== "TypeError") {
                throw e;
              }
              var Builder = typeof BlobBuilder !== "undefined" ? BlobBuilder : typeof MSBlobBuilder !== "undefined" ? MSBlobBuilder : typeof MozBlobBuilder !== "undefined" ? MozBlobBuilder : WebKitBlobBuilder;
              var builder = new Builder();
              for (var i = 0; i < parts.length; i += 1) {
                builder.append(parts[i]);
              }
              return builder.getBlob(properties.type);
            }
          }
          if (typeof Promise === "undefined") {
            _dereq_(3);
          }
          var Promise$1 = Promise;
          function executeCallback(promise, callback) {
            if (callback) {
              promise.then(function(result) {
                callback(null, result);
              }, function(error) {
                callback(error);
              });
            }
          }
          function executeTwoCallbacks(promise, callback, errorCallback) {
            if (typeof callback === "function") {
              promise.then(callback);
            }
            if (typeof errorCallback === "function") {
              promise["catch"](errorCallback);
            }
          }
          function normalizeKey(key2) {
            if (typeof key2 !== "string") {
              console.warn(key2 + " used as a key, but it is not a string.");
              key2 = String(key2);
            }
            return key2;
          }
          function getCallback() {
            if (arguments.length && typeof arguments[arguments.length - 1] === "function") {
              return arguments[arguments.length - 1];
            }
          }
          var DETECT_BLOB_SUPPORT_STORE = "local-forage-detect-blob-support";
          var supportsBlobs = void 0;
          var dbContexts = {};
          var toString = Object.prototype.toString;
          var READ_ONLY = "readonly";
          var READ_WRITE = "readwrite";
          function _binStringToArrayBuffer(bin) {
            var length2 = bin.length;
            var buf = new ArrayBuffer(length2);
            var arr = new Uint8Array(buf);
            for (var i = 0; i < length2; i++) {
              arr[i] = bin.charCodeAt(i);
            }
            return buf;
          }
          function _checkBlobSupportWithoutCaching(idb2) {
            return new Promise$1(function(resolve) {
              var txn = idb2.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
              var blob = createBlob([""]);
              txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, "key");
              txn.onabort = function(e) {
                e.preventDefault();
                e.stopPropagation();
                resolve(false);
              };
              txn.oncomplete = function() {
                var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
                var matchedEdge = navigator.userAgent.match(/Edge\//);
                resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
              };
            })["catch"](function() {
              return false;
            });
          }
          function _checkBlobSupport(idb2) {
            if (typeof supportsBlobs === "boolean") {
              return Promise$1.resolve(supportsBlobs);
            }
            return _checkBlobSupportWithoutCaching(idb2).then(function(value) {
              supportsBlobs = value;
              return supportsBlobs;
            });
          }
          function _deferReadiness(dbInfo) {
            var dbContext = dbContexts[dbInfo.name];
            var deferredOperation = {};
            deferredOperation.promise = new Promise$1(function(resolve, reject) {
              deferredOperation.resolve = resolve;
              deferredOperation.reject = reject;
            });
            dbContext.deferredOperations.push(deferredOperation);
            if (!dbContext.dbReady) {
              dbContext.dbReady = deferredOperation.promise;
            } else {
              dbContext.dbReady = dbContext.dbReady.then(function() {
                return deferredOperation.promise;
              });
            }
          }
          function _advanceReadiness(dbInfo) {
            var dbContext = dbContexts[dbInfo.name];
            var deferredOperation = dbContext.deferredOperations.pop();
            if (deferredOperation) {
              deferredOperation.resolve();
              return deferredOperation.promise;
            }
          }
          function _rejectReadiness(dbInfo, err) {
            var dbContext = dbContexts[dbInfo.name];
            var deferredOperation = dbContext.deferredOperations.pop();
            if (deferredOperation) {
              deferredOperation.reject(err);
              return deferredOperation.promise;
            }
          }
          function _getConnection(dbInfo, upgradeNeeded) {
            return new Promise$1(function(resolve, reject) {
              dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();
              if (dbInfo.db) {
                if (upgradeNeeded) {
                  _deferReadiness(dbInfo);
                  dbInfo.db.close();
                } else {
                  return resolve(dbInfo.db);
                }
              }
              var dbArgs = [dbInfo.name];
              if (upgradeNeeded) {
                dbArgs.push(dbInfo.version);
              }
              var openreq = idb.open.apply(idb, dbArgs);
              if (upgradeNeeded) {
                openreq.onupgradeneeded = function(e) {
                  var db = openreq.result;
                  try {
                    db.createObjectStore(dbInfo.storeName);
                    if (e.oldVersion <= 1) {
                      db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
                    }
                  } catch (ex) {
                    if (ex.name === "ConstraintError") {
                      console.warn('The database "' + dbInfo.name + '" has been upgraded from version ' + e.oldVersion + " to version " + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
                    } else {
                      throw ex;
                    }
                  }
                };
              }
              openreq.onerror = function(e) {
                e.preventDefault();
                reject(openreq.error);
              };
              openreq.onsuccess = function() {
                var db = openreq.result;
                db.onversionchange = function(e) {
                  e.target.close();
                };
                resolve(db);
                _advanceReadiness(dbInfo);
              };
            });
          }
          function _getOriginalConnection(dbInfo) {
            return _getConnection(dbInfo, false);
          }
          function _getUpgradedConnection(dbInfo) {
            return _getConnection(dbInfo, true);
          }
          function _isUpgradeNeeded(dbInfo, defaultVersion) {
            if (!dbInfo.db) {
              return true;
            }
            var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
            var isDowngrade = dbInfo.version < dbInfo.db.version;
            var isUpgrade = dbInfo.version > dbInfo.db.version;
            if (isDowngrade) {
              if (dbInfo.version !== defaultVersion) {
                console.warn('The database "' + dbInfo.name + `" can't be downgraded from version ` + dbInfo.db.version + " to version " + dbInfo.version + ".");
              }
              dbInfo.version = dbInfo.db.version;
            }
            if (isUpgrade || isNewStore) {
              if (isNewStore) {
                var incVersion = dbInfo.db.version + 1;
                if (incVersion > dbInfo.version) {
                  dbInfo.version = incVersion;
                }
              }
              return true;
            }
            return false;
          }
          function _encodeBlob(blob) {
            return new Promise$1(function(resolve, reject) {
              var reader = new FileReader();
              reader.onerror = reject;
              reader.onloadend = function(e) {
                var base64 = btoa(e.target.result || "");
                resolve({
                  __local_forage_encoded_blob: true,
                  data: base64,
                  type: blob.type
                });
              };
              reader.readAsBinaryString(blob);
            });
          }
          function _decodeBlob(encodedBlob) {
            var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
            return createBlob([arrayBuff], { type: encodedBlob.type });
          }
          function _isEncodedBlob(value) {
            return value && value.__local_forage_encoded_blob;
          }
          function _fullyReady(callback) {
            var self2 = this;
            var promise = self2._initReady().then(function() {
              var dbContext = dbContexts[self2._dbInfo.name];
              if (dbContext && dbContext.dbReady) {
                return dbContext.dbReady;
              }
            });
            executeTwoCallbacks(promise, callback, callback);
            return promise;
          }
          function _tryReconnect(dbInfo) {
            _deferReadiness(dbInfo);
            var dbContext = dbContexts[dbInfo.name];
            var forages = dbContext.forages;
            for (var i = 0; i < forages.length; i++) {
              var forage = forages[i];
              if (forage._dbInfo.db) {
                forage._dbInfo.db.close();
                forage._dbInfo.db = null;
              }
            }
            dbInfo.db = null;
            return _getOriginalConnection(dbInfo).then(function(db) {
              dbInfo.db = db;
              if (_isUpgradeNeeded(dbInfo)) {
                return _getUpgradedConnection(dbInfo);
              }
              return db;
            }).then(function(db) {
              dbInfo.db = dbContext.db = db;
              for (var i2 = 0; i2 < forages.length; i2++) {
                forages[i2]._dbInfo.db = db;
              }
            })["catch"](function(err) {
              _rejectReadiness(dbInfo, err);
              throw err;
            });
          }
          function createTransaction(dbInfo, mode, callback, retries) {
            if (retries === void 0) {
              retries = 1;
            }
            try {
              var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
              callback(null, tx);
            } catch (err) {
              if (retries > 0 && (!dbInfo.db || err.name === "InvalidStateError" || err.name === "NotFoundError")) {
                return Promise$1.resolve().then(function() {
                  if (!dbInfo.db || err.name === "NotFoundError" && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
                    if (dbInfo.db) {
                      dbInfo.version = dbInfo.db.version + 1;
                    }
                    return _getUpgradedConnection(dbInfo);
                  }
                }).then(function() {
                  return _tryReconnect(dbInfo).then(function() {
                    createTransaction(dbInfo, mode, callback, retries - 1);
                  });
                })["catch"](callback);
              }
              callback(err);
            }
          }
          function createDbContext() {
            return {
              forages: [],
              db: null,
              dbReady: null,
              deferredOperations: []
            };
          }
          function _initStorage(options) {
            var self2 = this;
            var dbInfo = {
              db: null
            };
            if (options) {
              for (var i in options) {
                dbInfo[i] = options[i];
              }
            }
            var dbContext = dbContexts[dbInfo.name];
            if (!dbContext) {
              dbContext = createDbContext();
              dbContexts[dbInfo.name] = dbContext;
            }
            dbContext.forages.push(self2);
            if (!self2._initReady) {
              self2._initReady = self2.ready;
              self2.ready = _fullyReady;
            }
            var initPromises = [];
            function ignoreErrors() {
              return Promise$1.resolve();
            }
            for (var j = 0; j < dbContext.forages.length; j++) {
              var forage = dbContext.forages[j];
              if (forage !== self2) {
                initPromises.push(forage._initReady()["catch"](ignoreErrors));
              }
            }
            var forages = dbContext.forages.slice(0);
            return Promise$1.all(initPromises).then(function() {
              dbInfo.db = dbContext.db;
              return _getOriginalConnection(dbInfo);
            }).then(function(db) {
              dbInfo.db = db;
              if (_isUpgradeNeeded(dbInfo, self2._defaultConfig.version)) {
                return _getUpgradedConnection(dbInfo);
              }
              return db;
            }).then(function(db) {
              dbInfo.db = dbContext.db = db;
              self2._dbInfo = dbInfo;
              for (var k = 0; k < forages.length; k++) {
                var forage2 = forages[k];
                if (forage2 !== self2) {
                  forage2._dbInfo.db = dbInfo.db;
                  forage2._dbInfo.version = dbInfo.version;
                }
              }
            });
          }
          function getItem(key2, callback) {
            var self2 = this;
            key2 = normalizeKey(key2);
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var req = store.get(key2);
                    req.onsuccess = function() {
                      var value = req.result;
                      if (value === void 0) {
                        value = null;
                      }
                      if (_isEncodedBlob(value)) {
                        value = _decodeBlob(value);
                      }
                      resolve(value);
                    };
                    req.onerror = function() {
                      reject(req.error);
                    };
                  } catch (e) {
                    reject(e);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function iterate(iterator, callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var req = store.openCursor();
                    var iterationNumber = 1;
                    req.onsuccess = function() {
                      var cursor = req.result;
                      if (cursor) {
                        var value = cursor.value;
                        if (_isEncodedBlob(value)) {
                          value = _decodeBlob(value);
                        }
                        var result = iterator(value, cursor.key, iterationNumber++);
                        if (result !== void 0) {
                          resolve(result);
                        } else {
                          cursor["continue"]();
                        }
                      } else {
                        resolve();
                      }
                    };
                    req.onerror = function() {
                      reject(req.error);
                    };
                  } catch (e) {
                    reject(e);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function setItem(key2, value, callback) {
            var self2 = this;
            key2 = normalizeKey(key2);
            var promise = new Promise$1(function(resolve, reject) {
              var dbInfo;
              self2.ready().then(function() {
                dbInfo = self2._dbInfo;
                if (toString.call(value) === "[object Blob]") {
                  return _checkBlobSupport(dbInfo.db).then(function(blobSupport) {
                    if (blobSupport) {
                      return value;
                    }
                    return _encodeBlob(value);
                  });
                }
                return value;
              }).then(function(value2) {
                createTransaction(self2._dbInfo, READ_WRITE, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    if (value2 === null) {
                      value2 = void 0;
                    }
                    var req = store.put(value2, key2);
                    transaction.oncomplete = function() {
                      if (value2 === void 0) {
                        value2 = null;
                      }
                      resolve(value2);
                    };
                    transaction.onabort = transaction.onerror = function() {
                      var err2 = req.error ? req.error : req.transaction.error;
                      reject(err2);
                    };
                  } catch (e) {
                    reject(e);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function removeItem(key2, callback) {
            var self2 = this;
            key2 = normalizeKey(key2);
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_WRITE, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var req = store["delete"](key2);
                    transaction.oncomplete = function() {
                      resolve();
                    };
                    transaction.onerror = function() {
                      reject(req.error);
                    };
                    transaction.onabort = function() {
                      var err2 = req.error ? req.error : req.transaction.error;
                      reject(err2);
                    };
                  } catch (e) {
                    reject(e);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function clear(callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_WRITE, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var req = store.clear();
                    transaction.oncomplete = function() {
                      resolve();
                    };
                    transaction.onabort = transaction.onerror = function() {
                      var err2 = req.error ? req.error : req.transaction.error;
                      reject(err2);
                    };
                  } catch (e) {
                    reject(e);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function length(callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var req = store.count();
                    req.onsuccess = function() {
                      resolve(req.result);
                    };
                    req.onerror = function() {
                      reject(req.error);
                    };
                  } catch (e) {
                    reject(e);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function key(n, callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              if (n < 0) {
                resolve(null);
                return;
              }
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var advanced = false;
                    var req = store.openKeyCursor();
                    req.onsuccess = function() {
                      var cursor = req.result;
                      if (!cursor) {
                        resolve(null);
                        return;
                      }
                      if (n === 0) {
                        resolve(cursor.key);
                      } else {
                        if (!advanced) {
                          advanced = true;
                          cursor.advance(n);
                        } else {
                          resolve(cursor.key);
                        }
                      }
                    };
                    req.onerror = function() {
                      reject(req.error);
                    };
                  } catch (e) {
                    reject(e);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function keys2(callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var req = store.openKeyCursor();
                    var keys3 = [];
                    req.onsuccess = function() {
                      var cursor = req.result;
                      if (!cursor) {
                        resolve(keys3);
                        return;
                      }
                      keys3.push(cursor.key);
                      cursor["continue"]();
                    };
                    req.onerror = function() {
                      reject(req.error);
                    };
                  } catch (e) {
                    reject(e);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function dropInstance(options, callback) {
            callback = getCallback.apply(this, arguments);
            var currentConfig = this.config();
            options = typeof options !== "function" && options || {};
            if (!options.name) {
              options.name = options.name || currentConfig.name;
              options.storeName = options.storeName || currentConfig.storeName;
            }
            var self2 = this;
            var promise;
            if (!options.name) {
              promise = Promise$1.reject("Invalid arguments");
            } else {
              var isCurrentDb = options.name === currentConfig.name && self2._dbInfo.db;
              var dbPromise = isCurrentDb ? Promise$1.resolve(self2._dbInfo.db) : _getOriginalConnection(options).then(function(db) {
                var dbContext = dbContexts[options.name];
                var forages = dbContext.forages;
                dbContext.db = db;
                for (var i = 0; i < forages.length; i++) {
                  forages[i]._dbInfo.db = db;
                }
                return db;
              });
              if (!options.storeName) {
                promise = dbPromise.then(function(db) {
                  _deferReadiness(options);
                  var dbContext = dbContexts[options.name];
                  var forages = dbContext.forages;
                  db.close();
                  for (var i = 0; i < forages.length; i++) {
                    var forage = forages[i];
                    forage._dbInfo.db = null;
                  }
                  var dropDBPromise = new Promise$1(function(resolve, reject) {
                    var req = idb.deleteDatabase(options.name);
                    req.onerror = function() {
                      var db2 = req.result;
                      if (db2) {
                        db2.close();
                      }
                      reject(req.error);
                    };
                    req.onblocked = function() {
                      console.warn('dropInstance blocked for database "' + options.name + '" until all open connections are closed');
                    };
                    req.onsuccess = function() {
                      var db2 = req.result;
                      if (db2) {
                        db2.close();
                      }
                      resolve(db2);
                    };
                  });
                  return dropDBPromise.then(function(db2) {
                    dbContext.db = db2;
                    for (var i2 = 0; i2 < forages.length; i2++) {
                      var _forage = forages[i2];
                      _advanceReadiness(_forage._dbInfo);
                    }
                  })["catch"](function(err) {
                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function() {
                    });
                    throw err;
                  });
                });
              } else {
                promise = dbPromise.then(function(db) {
                  if (!db.objectStoreNames.contains(options.storeName)) {
                    return;
                  }
                  var newVersion = db.version + 1;
                  _deferReadiness(options);
                  var dbContext = dbContexts[options.name];
                  var forages = dbContext.forages;
                  db.close();
                  for (var i = 0; i < forages.length; i++) {
                    var forage = forages[i];
                    forage._dbInfo.db = null;
                    forage._dbInfo.version = newVersion;
                  }
                  var dropObjectPromise = new Promise$1(function(resolve, reject) {
                    var req = idb.open(options.name, newVersion);
                    req.onerror = function(err) {
                      var db2 = req.result;
                      db2.close();
                      reject(err);
                    };
                    req.onupgradeneeded = function() {
                      var db2 = req.result;
                      db2.deleteObjectStore(options.storeName);
                    };
                    req.onsuccess = function() {
                      var db2 = req.result;
                      db2.close();
                      resolve(db2);
                    };
                  });
                  return dropObjectPromise.then(function(db2) {
                    dbContext.db = db2;
                    for (var j = 0; j < forages.length; j++) {
                      var _forage2 = forages[j];
                      _forage2._dbInfo.db = db2;
                      _advanceReadiness(_forage2._dbInfo);
                    }
                  })["catch"](function(err) {
                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function() {
                    });
                    throw err;
                  });
                });
              }
            }
            executeCallback(promise, callback);
            return promise;
          }
          var asyncStorage = {
            _driver: "asyncStorage",
            _initStorage,
            _support: isIndexedDBValid(),
            iterate,
            getItem,
            setItem,
            removeItem,
            clear,
            length,
            key,
            keys: keys2,
            dropInstance
          };
          function isWebSQLValid() {
            return typeof openDatabase === "function";
          }
          var BASE_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
          var BLOB_TYPE_PREFIX = "~~local_forage_type~";
          var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;
          var SERIALIZED_MARKER = "__lfsc__:";
          var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;
          var TYPE_ARRAYBUFFER = "arbf";
          var TYPE_BLOB = "blob";
          var TYPE_INT8ARRAY = "si08";
          var TYPE_UINT8ARRAY = "ui08";
          var TYPE_UINT8CLAMPEDARRAY = "uic8";
          var TYPE_INT16ARRAY = "si16";
          var TYPE_INT32ARRAY = "si32";
          var TYPE_UINT16ARRAY = "ur16";
          var TYPE_UINT32ARRAY = "ui32";
          var TYPE_FLOAT32ARRAY = "fl32";
          var TYPE_FLOAT64ARRAY = "fl64";
          var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;
          var toString$1 = Object.prototype.toString;
          function stringToBuffer(serializedString) {
            var bufferLength = serializedString.length * 0.75;
            var len = serializedString.length;
            var i;
            var p = 0;
            var encoded1, encoded2, encoded3, encoded4;
            if (serializedString[serializedString.length - 1] === "=") {
              bufferLength--;
              if (serializedString[serializedString.length - 2] === "=") {
                bufferLength--;
              }
            }
            var buffer = new ArrayBuffer(bufferLength);
            var bytes = new Uint8Array(buffer);
            for (i = 0; i < len; i += 4) {
              encoded1 = BASE_CHARS.indexOf(serializedString[i]);
              encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
              encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
              encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);
              bytes[p++] = encoded1 << 2 | encoded2 >> 4;
              bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
              bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
            }
            return buffer;
          }
          function bufferToString(buffer) {
            var bytes = new Uint8Array(buffer);
            var base64String = "";
            var i;
            for (i = 0; i < bytes.length; i += 3) {
              base64String += BASE_CHARS[bytes[i] >> 2];
              base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
              base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
              base64String += BASE_CHARS[bytes[i + 2] & 63];
            }
            if (bytes.length % 3 === 2) {
              base64String = base64String.substring(0, base64String.length - 1) + "=";
            } else if (bytes.length % 3 === 1) {
              base64String = base64String.substring(0, base64String.length - 2) + "==";
            }
            return base64String;
          }
          function serialize(value, callback) {
            var valueType = "";
            if (value) {
              valueType = toString$1.call(value);
            }
            if (value && (valueType === "[object ArrayBuffer]" || value.buffer && toString$1.call(value.buffer) === "[object ArrayBuffer]")) {
              var buffer;
              var marker = SERIALIZED_MARKER;
              if (value instanceof ArrayBuffer) {
                buffer = value;
                marker += TYPE_ARRAYBUFFER;
              } else {
                buffer = value.buffer;
                if (valueType === "[object Int8Array]") {
                  marker += TYPE_INT8ARRAY;
                } else if (valueType === "[object Uint8Array]") {
                  marker += TYPE_UINT8ARRAY;
                } else if (valueType === "[object Uint8ClampedArray]") {
                  marker += TYPE_UINT8CLAMPEDARRAY;
                } else if (valueType === "[object Int16Array]") {
                  marker += TYPE_INT16ARRAY;
                } else if (valueType === "[object Uint16Array]") {
                  marker += TYPE_UINT16ARRAY;
                } else if (valueType === "[object Int32Array]") {
                  marker += TYPE_INT32ARRAY;
                } else if (valueType === "[object Uint32Array]") {
                  marker += TYPE_UINT32ARRAY;
                } else if (valueType === "[object Float32Array]") {
                  marker += TYPE_FLOAT32ARRAY;
                } else if (valueType === "[object Float64Array]") {
                  marker += TYPE_FLOAT64ARRAY;
                } else {
                  callback(new Error("Failed to get type for BinaryArray"));
                }
              }
              callback(marker + bufferToString(buffer));
            } else if (valueType === "[object Blob]") {
              var fileReader = new FileReader();
              fileReader.onload = function() {
                var str = BLOB_TYPE_PREFIX + value.type + "~" + bufferToString(this.result);
                callback(SERIALIZED_MARKER + TYPE_BLOB + str);
              };
              fileReader.readAsArrayBuffer(value);
            } else {
              try {
                callback(JSON.stringify(value));
              } catch (e) {
                console.error("Couldn't convert value into a JSON string: ", value);
                callback(null, e);
              }
            }
          }
          function deserialize(value) {
            if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
              return JSON.parse(value);
            }
            var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
            var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);
            var blobType;
            if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
              var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
              blobType = matcher[1];
              serializedString = serializedString.substring(matcher[0].length);
            }
            var buffer = stringToBuffer(serializedString);
            switch (type) {
              case TYPE_ARRAYBUFFER:
                return buffer;
              case TYPE_BLOB:
                return createBlob([buffer], { type: blobType });
              case TYPE_INT8ARRAY:
                return new Int8Array(buffer);
              case TYPE_UINT8ARRAY:
                return new Uint8Array(buffer);
              case TYPE_UINT8CLAMPEDARRAY:
                return new Uint8ClampedArray(buffer);
              case TYPE_INT16ARRAY:
                return new Int16Array(buffer);
              case TYPE_UINT16ARRAY:
                return new Uint16Array(buffer);
              case TYPE_INT32ARRAY:
                return new Int32Array(buffer);
              case TYPE_UINT32ARRAY:
                return new Uint32Array(buffer);
              case TYPE_FLOAT32ARRAY:
                return new Float32Array(buffer);
              case TYPE_FLOAT64ARRAY:
                return new Float64Array(buffer);
              default:
                throw new Error("Unkown type: " + type);
            }
          }
          var localforageSerializer = {
            serialize,
            deserialize,
            stringToBuffer,
            bufferToString
          };
          function createDbTable(t, dbInfo, callback, errorCallback) {
            t.executeSql("CREATE TABLE IF NOT EXISTS " + dbInfo.storeName + " (id INTEGER PRIMARY KEY, key unique, value)", [], callback, errorCallback);
          }
          function _initStorage$1(options) {
            var self2 = this;
            var dbInfo = {
              db: null
            };
            if (options) {
              for (var i in options) {
                dbInfo[i] = typeof options[i] !== "string" ? options[i].toString() : options[i];
              }
            }
            var dbInfoPromise = new Promise$1(function(resolve, reject) {
              try {
                dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
              } catch (e) {
                return reject(e);
              }
              dbInfo.db.transaction(function(t) {
                createDbTable(t, dbInfo, function() {
                  self2._dbInfo = dbInfo;
                  resolve();
                }, function(t2, error) {
                  reject(error);
                });
              }, reject);
            });
            dbInfo.serializer = localforageSerializer;
            return dbInfoPromise;
          }
          function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {
            t.executeSql(sqlStatement, args, callback, function(t2, error) {
              if (error.code === error.SYNTAX_ERR) {
                t2.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?", [dbInfo.storeName], function(t3, results) {
                  if (!results.rows.length) {
                    createDbTable(t3, dbInfo, function() {
                      t3.executeSql(sqlStatement, args, callback, errorCallback);
                    }, errorCallback);
                  } else {
                    errorCallback(t3, error);
                  }
                }, errorCallback);
              } else {
                errorCallback(t2, error);
              }
            }, errorCallback);
          }
          function getItem$1(key2, callback) {
            var self2 = this;
            key2 = normalizeKey(key2);
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t) {
                  tryExecuteSql(t, dbInfo, "SELECT * FROM " + dbInfo.storeName + " WHERE key = ? LIMIT 1", [key2], function(t2, results) {
                    var result = results.rows.length ? results.rows.item(0).value : null;
                    if (result) {
                      result = dbInfo.serializer.deserialize(result);
                    }
                    resolve(result);
                  }, function(t2, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function iterate$1(iterator, callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t) {
                  tryExecuteSql(t, dbInfo, "SELECT * FROM " + dbInfo.storeName, [], function(t2, results) {
                    var rows = results.rows;
                    var length2 = rows.length;
                    for (var i = 0; i < length2; i++) {
                      var item = rows.item(i);
                      var result = item.value;
                      if (result) {
                        result = dbInfo.serializer.deserialize(result);
                      }
                      result = iterator(result, item.key, i + 1);
                      if (result !== void 0) {
                        resolve(result);
                        return;
                      }
                    }
                    resolve();
                  }, function(t2, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function _setItem(key2, value, callback, retriesLeft) {
            var self2 = this;
            key2 = normalizeKey(key2);
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                if (value === void 0) {
                  value = null;
                }
                var originalValue = value;
                var dbInfo = self2._dbInfo;
                dbInfo.serializer.serialize(value, function(value2, error) {
                  if (error) {
                    reject(error);
                  } else {
                    dbInfo.db.transaction(function(t) {
                      tryExecuteSql(t, dbInfo, "INSERT OR REPLACE INTO " + dbInfo.storeName + " (key, value) VALUES (?, ?)", [key2, value2], function() {
                        resolve(originalValue);
                      }, function(t2, error2) {
                        reject(error2);
                      });
                    }, function(sqlError) {
                      if (sqlError.code === sqlError.QUOTA_ERR) {
                        if (retriesLeft > 0) {
                          resolve(_setItem.apply(self2, [key2, originalValue, callback, retriesLeft - 1]));
                          return;
                        }
                        reject(sqlError);
                      }
                    });
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function setItem$1(key2, value, callback) {
            return _setItem.apply(this, [key2, value, callback, 1]);
          }
          function removeItem$1(key2, callback) {
            var self2 = this;
            key2 = normalizeKey(key2);
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t) {
                  tryExecuteSql(t, dbInfo, "DELETE FROM " + dbInfo.storeName + " WHERE key = ?", [key2], function() {
                    resolve();
                  }, function(t2, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function clear$1(callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t) {
                  tryExecuteSql(t, dbInfo, "DELETE FROM " + dbInfo.storeName, [], function() {
                    resolve();
                  }, function(t2, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function length$1(callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t) {
                  tryExecuteSql(t, dbInfo, "SELECT COUNT(key) as c FROM " + dbInfo.storeName, [], function(t2, results) {
                    var result = results.rows.item(0).c;
                    resolve(result);
                  }, function(t2, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function key$1(n, callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t) {
                  tryExecuteSql(t, dbInfo, "SELECT key FROM " + dbInfo.storeName + " WHERE id = ? LIMIT 1", [n + 1], function(t2, results) {
                    var result = results.rows.length ? results.rows.item(0).key : null;
                    resolve(result);
                  }, function(t2, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function keys$1(callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t) {
                  tryExecuteSql(t, dbInfo, "SELECT key FROM " + dbInfo.storeName, [], function(t2, results) {
                    var keys3 = [];
                    for (var i = 0; i < results.rows.length; i++) {
                      keys3.push(results.rows.item(i).key);
                    }
                    resolve(keys3);
                  }, function(t2, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function getAllStoreNames(db) {
            return new Promise$1(function(resolve, reject) {
              db.transaction(function(t) {
                t.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function(t2, results) {
                  var storeNames = [];
                  for (var i = 0; i < results.rows.length; i++) {
                    storeNames.push(results.rows.item(i).name);
                  }
                  resolve({
                    db,
                    storeNames
                  });
                }, function(t2, error) {
                  reject(error);
                });
              }, function(sqlError) {
                reject(sqlError);
              });
            });
          }
          function dropInstance$1(options, callback) {
            callback = getCallback.apply(this, arguments);
            var currentConfig = this.config();
            options = typeof options !== "function" && options || {};
            if (!options.name) {
              options.name = options.name || currentConfig.name;
              options.storeName = options.storeName || currentConfig.storeName;
            }
            var self2 = this;
            var promise;
            if (!options.name) {
              promise = Promise$1.reject("Invalid arguments");
            } else {
              promise = new Promise$1(function(resolve) {
                var db;
                if (options.name === currentConfig.name) {
                  db = self2._dbInfo.db;
                } else {
                  db = openDatabase(options.name, "", "", 0);
                }
                if (!options.storeName) {
                  resolve(getAllStoreNames(db));
                } else {
                  resolve({
                    db,
                    storeNames: [options.storeName]
                  });
                }
              }).then(function(operationInfo) {
                return new Promise$1(function(resolve, reject) {
                  operationInfo.db.transaction(function(t) {
                    function dropTable(storeName) {
                      return new Promise$1(function(resolve2, reject2) {
                        t.executeSql("DROP TABLE IF EXISTS " + storeName, [], function() {
                          resolve2();
                        }, function(t2, error) {
                          reject2(error);
                        });
                      });
                    }
                    var operations = [];
                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {
                      operations.push(dropTable(operationInfo.storeNames[i]));
                    }
                    Promise$1.all(operations).then(function() {
                      resolve();
                    })["catch"](function(e) {
                      reject(e);
                    });
                  }, function(sqlError) {
                    reject(sqlError);
                  });
                });
              });
            }
            executeCallback(promise, callback);
            return promise;
          }
          var webSQLStorage = {
            _driver: "webSQLStorage",
            _initStorage: _initStorage$1,
            _support: isWebSQLValid(),
            iterate: iterate$1,
            getItem: getItem$1,
            setItem: setItem$1,
            removeItem: removeItem$1,
            clear: clear$1,
            length: length$1,
            key: key$1,
            keys: keys$1,
            dropInstance: dropInstance$1
          };
          function isLocalStorageValid() {
            try {
              return typeof localStorage !== "undefined" && "setItem" in localStorage && !!localStorage.setItem;
            } catch (e) {
              return false;
            }
          }
          function _getKeyPrefix(options, defaultConfig) {
            var keyPrefix = options.name + "/";
            if (options.storeName !== defaultConfig.storeName) {
              keyPrefix += options.storeName + "/";
            }
            return keyPrefix;
          }
          function checkIfLocalStorageThrows() {
            var localStorageTestKey = "_localforage_support_test";
            try {
              localStorage.setItem(localStorageTestKey, true);
              localStorage.removeItem(localStorageTestKey);
              return false;
            } catch (e) {
              return true;
            }
          }
          function _isLocalStorageUsable() {
            return !checkIfLocalStorageThrows() || localStorage.length > 0;
          }
          function _initStorage$2(options) {
            var self2 = this;
            var dbInfo = {};
            if (options) {
              for (var i in options) {
                dbInfo[i] = options[i];
              }
            }
            dbInfo.keyPrefix = _getKeyPrefix(options, self2._defaultConfig);
            if (!_isLocalStorageUsable()) {
              return Promise$1.reject();
            }
            self2._dbInfo = dbInfo;
            dbInfo.serializer = localforageSerializer;
            return Promise$1.resolve();
          }
          function clear$2(callback) {
            var self2 = this;
            var promise = self2.ready().then(function() {
              var keyPrefix = self2._dbInfo.keyPrefix;
              for (var i = localStorage.length - 1; i >= 0; i--) {
                var key2 = localStorage.key(i);
                if (key2.indexOf(keyPrefix) === 0) {
                  localStorage.removeItem(key2);
                }
              }
            });
            executeCallback(promise, callback);
            return promise;
          }
          function getItem$2(key2, callback) {
            var self2 = this;
            key2 = normalizeKey(key2);
            var promise = self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              var result = localStorage.getItem(dbInfo.keyPrefix + key2);
              if (result) {
                result = dbInfo.serializer.deserialize(result);
              }
              return result;
            });
            executeCallback(promise, callback);
            return promise;
          }
          function iterate$2(iterator, callback) {
            var self2 = this;
            var promise = self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              var keyPrefix = dbInfo.keyPrefix;
              var keyPrefixLength = keyPrefix.length;
              var length2 = localStorage.length;
              var iterationNumber = 1;
              for (var i = 0; i < length2; i++) {
                var key2 = localStorage.key(i);
                if (key2.indexOf(keyPrefix) !== 0) {
                  continue;
                }
                var value = localStorage.getItem(key2);
                if (value) {
                  value = dbInfo.serializer.deserialize(value);
                }
                value = iterator(value, key2.substring(keyPrefixLength), iterationNumber++);
                if (value !== void 0) {
                  return value;
                }
              }
            });
            executeCallback(promise, callback);
            return promise;
          }
          function key$2(n, callback) {
            var self2 = this;
            var promise = self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              var result;
              try {
                result = localStorage.key(n);
              } catch (error) {
                result = null;
              }
              if (result) {
                result = result.substring(dbInfo.keyPrefix.length);
              }
              return result;
            });
            executeCallback(promise, callback);
            return promise;
          }
          function keys$2(callback) {
            var self2 = this;
            var promise = self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              var length2 = localStorage.length;
              var keys3 = [];
              for (var i = 0; i < length2; i++) {
                var itemKey = localStorage.key(i);
                if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
                  keys3.push(itemKey.substring(dbInfo.keyPrefix.length));
                }
              }
              return keys3;
            });
            executeCallback(promise, callback);
            return promise;
          }
          function length$2(callback) {
            var self2 = this;
            var promise = self2.keys().then(function(keys3) {
              return keys3.length;
            });
            executeCallback(promise, callback);
            return promise;
          }
          function removeItem$2(key2, callback) {
            var self2 = this;
            key2 = normalizeKey(key2);
            var promise = self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              localStorage.removeItem(dbInfo.keyPrefix + key2);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function setItem$2(key2, value, callback) {
            var self2 = this;
            key2 = normalizeKey(key2);
            var promise = self2.ready().then(function() {
              if (value === void 0) {
                value = null;
              }
              var originalValue = value;
              return new Promise$1(function(resolve, reject) {
                var dbInfo = self2._dbInfo;
                dbInfo.serializer.serialize(value, function(value2, error) {
                  if (error) {
                    reject(error);
                  } else {
                    try {
                      localStorage.setItem(dbInfo.keyPrefix + key2, value2);
                      resolve(originalValue);
                    } catch (e) {
                      if (e.name === "QuotaExceededError" || e.name === "NS_ERROR_DOM_QUOTA_REACHED") {
                        reject(e);
                      }
                      reject(e);
                    }
                  }
                });
              });
            });
            executeCallback(promise, callback);
            return promise;
          }
          function dropInstance$2(options, callback) {
            callback = getCallback.apply(this, arguments);
            options = typeof options !== "function" && options || {};
            if (!options.name) {
              var currentConfig = this.config();
              options.name = options.name || currentConfig.name;
              options.storeName = options.storeName || currentConfig.storeName;
            }
            var self2 = this;
            var promise;
            if (!options.name) {
              promise = Promise$1.reject("Invalid arguments");
            } else {
              promise = new Promise$1(function(resolve) {
                if (!options.storeName) {
                  resolve(options.name + "/");
                } else {
                  resolve(_getKeyPrefix(options, self2._defaultConfig));
                }
              }).then(function(keyPrefix) {
                for (var i = localStorage.length - 1; i >= 0; i--) {
                  var key2 = localStorage.key(i);
                  if (key2.indexOf(keyPrefix) === 0) {
                    localStorage.removeItem(key2);
                  }
                }
              });
            }
            executeCallback(promise, callback);
            return promise;
          }
          var localStorageWrapper = {
            _driver: "localStorageWrapper",
            _initStorage: _initStorage$2,
            _support: isLocalStorageValid(),
            iterate: iterate$2,
            getItem: getItem$2,
            setItem: setItem$2,
            removeItem: removeItem$2,
            clear: clear$2,
            length: length$2,
            key: key$2,
            keys: keys$2,
            dropInstance: dropInstance$2
          };
          var sameValue = function sameValue2(x, y) {
            return x === y || typeof x === "number" && typeof y === "number" && isNaN(x) && isNaN(y);
          };
          var includes = function includes2(array, searchElement) {
            var len = array.length;
            var i = 0;
            while (i < len) {
              if (sameValue(array[i], searchElement)) {
                return true;
              }
              i++;
            }
            return false;
          };
          var isArray = Array.isArray || function(arg) {
            return Object.prototype.toString.call(arg) === "[object Array]";
          };
          var DefinedDrivers = {};
          var DriverSupport = {};
          var DefaultDrivers = {
            INDEXEDDB: asyncStorage,
            WEBSQL: webSQLStorage,
            LOCALSTORAGE: localStorageWrapper
          };
          var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];
          var OptionalDriverMethods = ["dropInstance"];
          var LibraryMethods = ["clear", "getItem", "iterate", "key", "keys", "length", "removeItem", "setItem"].concat(OptionalDriverMethods);
          var DefaultConfig = {
            description: "",
            driver: DefaultDriverOrder.slice(),
            name: "localforage",
            size: 4980736,
            storeName: "keyvaluepairs",
            version: 1
          };
          function callWhenReady(localForageInstance, libraryMethod) {
            localForageInstance[libraryMethod] = function() {
              var _args = arguments;
              return localForageInstance.ready().then(function() {
                return localForageInstance[libraryMethod].apply(localForageInstance, _args);
              });
            };
          }
          function extend() {
            for (var i = 1; i < arguments.length; i++) {
              var arg = arguments[i];
              if (arg) {
                for (var _key in arg) {
                  if (arg.hasOwnProperty(_key)) {
                    if (isArray(arg[_key])) {
                      arguments[0][_key] = arg[_key].slice();
                    } else {
                      arguments[0][_key] = arg[_key];
                    }
                  }
                }
              }
            }
            return arguments[0];
          }
          var LocalForage = function() {
            function LocalForage2(options) {
              _classCallCheck2(this, LocalForage2);
              for (var driverTypeKey in DefaultDrivers) {
                if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
                  var driver = DefaultDrivers[driverTypeKey];
                  var driverName = driver._driver;
                  this[driverTypeKey] = driverName;
                  if (!DefinedDrivers[driverName]) {
                    this.defineDriver(driver);
                  }
                }
              }
              this._defaultConfig = extend({}, DefaultConfig);
              this._config = extend({}, this._defaultConfig, options);
              this._driverSet = null;
              this._initDriver = null;
              this._ready = false;
              this._dbInfo = null;
              this._wrapLibraryMethodsWithReady();
              this.setDriver(this._config.driver)["catch"](function() {
              });
            }
            LocalForage2.prototype.config = function config(options) {
              if ((typeof options === "undefined" ? "undefined" : _typeof3(options)) === "object") {
                if (this._ready) {
                  return new Error("Can't call config() after localforage has been used.");
                }
                for (var i in options) {
                  if (i === "storeName") {
                    options[i] = options[i].replace(/\W/g, "_");
                  }
                  if (i === "version" && typeof options[i] !== "number") {
                    return new Error("Database version must be a number.");
                  }
                  this._config[i] = options[i];
                }
                if ("driver" in options && options.driver) {
                  return this.setDriver(this._config.driver);
                }
                return true;
              } else if (typeof options === "string") {
                return this._config[options];
              } else {
                return this._config;
              }
            };
            LocalForage2.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
              var promise = new Promise$1(function(resolve, reject) {
                try {
                  var driverName = driverObject._driver;
                  var complianceError = new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");
                  if (!driverObject._driver) {
                    reject(complianceError);
                    return;
                  }
                  var driverMethods = LibraryMethods.concat("_initStorage");
                  for (var i = 0, len = driverMethods.length; i < len; i++) {
                    var driverMethodName = driverMethods[i];
                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);
                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== "function") {
                      reject(complianceError);
                      return;
                    }
                  }
                  var configureMissingMethods = function configureMissingMethods2() {
                    var methodNotImplementedFactory = function methodNotImplementedFactory2(methodName) {
                      return function() {
                        var error = new Error("Method " + methodName + " is not implemented by the current driver");
                        var promise2 = Promise$1.reject(error);
                        executeCallback(promise2, arguments[arguments.length - 1]);
                        return promise2;
                      };
                    };
                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {
                      var optionalDriverMethod = OptionalDriverMethods[_i];
                      if (!driverObject[optionalDriverMethod]) {
                        driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
                      }
                    }
                  };
                  configureMissingMethods();
                  var setDriverSupport = function setDriverSupport2(support) {
                    if (DefinedDrivers[driverName]) {
                      console.info("Redefining LocalForage driver: " + driverName);
                    }
                    DefinedDrivers[driverName] = driverObject;
                    DriverSupport[driverName] = support;
                    resolve();
                  };
                  if ("_support" in driverObject) {
                    if (driverObject._support && typeof driverObject._support === "function") {
                      driverObject._support().then(setDriverSupport, reject);
                    } else {
                      setDriverSupport(!!driverObject._support);
                    }
                  } else {
                    setDriverSupport(true);
                  }
                } catch (e) {
                  reject(e);
                }
              });
              executeTwoCallbacks(promise, callback, errorCallback);
              return promise;
            };
            LocalForage2.prototype.driver = function driver() {
              return this._driver || null;
            };
            LocalForage2.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
              var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error("Driver not found."));
              executeTwoCallbacks(getDriverPromise, callback, errorCallback);
              return getDriverPromise;
            };
            LocalForage2.prototype.getSerializer = function getSerializer(callback) {
              var serializerPromise = Promise$1.resolve(localforageSerializer);
              executeTwoCallbacks(serializerPromise, callback);
              return serializerPromise;
            };
            LocalForage2.prototype.ready = function ready(callback) {
              var self2 = this;
              var promise = self2._driverSet.then(function() {
                if (self2._ready === null) {
                  self2._ready = self2._initDriver();
                }
                return self2._ready;
              });
              executeTwoCallbacks(promise, callback, callback);
              return promise;
            };
            LocalForage2.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
              var self2 = this;
              if (!isArray(drivers)) {
                drivers = [drivers];
              }
              var supportedDrivers = this._getSupportedDrivers(drivers);
              function setDriverToConfig() {
                self2._config.driver = self2.driver();
              }
              function extendSelfWithDriver(driver) {
                self2._extend(driver);
                setDriverToConfig();
                self2._ready = self2._initStorage(self2._config);
                return self2._ready;
              }
              function initDriver(supportedDrivers2) {
                return function() {
                  var currentDriverIndex = 0;
                  function driverPromiseLoop() {
                    while (currentDriverIndex < supportedDrivers2.length) {
                      var driverName = supportedDrivers2[currentDriverIndex];
                      currentDriverIndex++;
                      self2._dbInfo = null;
                      self2._ready = null;
                      return self2.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
                    }
                    setDriverToConfig();
                    var error = new Error("No available storage method found.");
                    self2._driverSet = Promise$1.reject(error);
                    return self2._driverSet;
                  }
                  return driverPromiseLoop();
                };
              }
              var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function() {
                return Promise$1.resolve();
              }) : Promise$1.resolve();
              this._driverSet = oldDriverSetDone.then(function() {
                var driverName = supportedDrivers[0];
                self2._dbInfo = null;
                self2._ready = null;
                return self2.getDriver(driverName).then(function(driver) {
                  self2._driver = driver._driver;
                  setDriverToConfig();
                  self2._wrapLibraryMethodsWithReady();
                  self2._initDriver = initDriver(supportedDrivers);
                });
              })["catch"](function() {
                setDriverToConfig();
                var error = new Error("No available storage method found.");
                self2._driverSet = Promise$1.reject(error);
                return self2._driverSet;
              });
              executeTwoCallbacks(this._driverSet, callback, errorCallback);
              return this._driverSet;
            };
            LocalForage2.prototype.supports = function supports(driverName) {
              return !!DriverSupport[driverName];
            };
            LocalForage2.prototype._extend = function _extend(libraryMethodsAndProperties) {
              extend(this, libraryMethodsAndProperties);
            };
            LocalForage2.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
              var supportedDrivers = [];
              for (var i = 0, len = drivers.length; i < len; i++) {
                var driverName = drivers[i];
                if (this.supports(driverName)) {
                  supportedDrivers.push(driverName);
                }
              }
              return supportedDrivers;
            };
            LocalForage2.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
              for (var i = 0, len = LibraryMethods.length; i < len; i++) {
                callWhenReady(this, LibraryMethods[i]);
              }
            };
            LocalForage2.prototype.createInstance = function createInstance(options) {
              return new LocalForage2(options);
            };
            return LocalForage2;
          }();
          var localforage_js = new LocalForage();
          module3.exports = localforage_js;
        }, { "3": 3 }] }, {}, [4])(4);
      });
    }
  });

  // node_modules/@sentry/integrations/dist/offline.js
  var require_offline = __commonJS({
    "node_modules/@sentry/integrations/dist/offline.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var localforage_1 = tslib_1.__importDefault(require_localforage());
      var flags_1 = require_flags5();
      var Offline = function() {
        function Offline2(options) {
          if (options === void 0) {
            options = {};
          }
          this.name = Offline2.id;
          this.global = utils_1.getGlobalObject();
          this.maxStoredEvents = options.maxStoredEvents || 30;
          this.offlineEventStore = localforage_1.default.createInstance({
            name: "sentry/offlineEventStore"
          });
        }
        Offline2.prototype.setupOnce = function(addGlobalEventProcessor, getCurrentHub) {
          var _this = this;
          this.hub = getCurrentHub();
          if ("addEventListener" in this.global) {
            this.global.addEventListener("online", function() {
              void _this._sendEvents().catch(function() {
                flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("could not send cached events");
              });
            });
          }
          addGlobalEventProcessor(function(event2) {
            if (_this.hub && _this.hub.getIntegration(Offline2)) {
              if ("navigator" in _this.global && "onLine" in _this.global.navigator && !_this.global.navigator.onLine) {
                void _this._cacheEvent(event2).then(function(_event) {
                  return _this._enforceMaxEvents();
                }).catch(function(_error) {
                  flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("could not cache event while offline");
                });
                return null;
              }
            }
            return event2;
          });
          if ("navigator" in this.global && "onLine" in this.global.navigator && this.global.navigator.onLine) {
            void this._sendEvents().catch(function() {
              flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("could not send cached events");
            });
          }
        };
        Offline2.prototype._cacheEvent = function(event2) {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, this.offlineEventStore.setItem(utils_1.uuid4(), utils_1.normalize(event2))];
            });
          });
        };
        Offline2.prototype._enforceMaxEvents = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            var events;
            var _this = this;
            return tslib_1.__generator(this, function(_a) {
              events = [];
              return [2, this.offlineEventStore.iterate(function(event2, cacheKey, _index) {
                events.push({ cacheKey, event: event2 });
              }).then(function() {
                return _this._purgeEvents(
                  events.sort(function(a, b) {
                    return (b.event.timestamp || 0) - (a.event.timestamp || 0);
                  }).slice(_this.maxStoredEvents < events.length ? _this.maxStoredEvents : events.length).map(function(event2) {
                    return event2.cacheKey;
                  })
                );
              }).catch(function(_error) {
                flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("could not enforce max events");
              })];
            });
          });
        };
        Offline2.prototype._purgeEvent = function(cacheKey) {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, this.offlineEventStore.removeItem(cacheKey)];
            });
          });
        };
        Offline2.prototype._purgeEvents = function(cacheKeys) {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return tslib_1.__generator(this, function(_a) {
              return [2, Promise.all(cacheKeys.map(function(cacheKey) {
                return _this._purgeEvent(cacheKey);
              })).then()];
            });
          });
        };
        Offline2.prototype._sendEvents = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return tslib_1.__generator(this, function(_a) {
              return [2, this.offlineEventStore.iterate(function(event2, cacheKey, _index) {
                if (_this.hub) {
                  _this.hub.captureEvent(event2);
                  void _this._purgeEvent(cacheKey).catch(function(_error) {
                    flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("could not purge event from cache");
                  });
                } else {
                  flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("no hub found - could not send cached event");
                }
              })];
            });
          });
        };
        Offline2.id = "Offline";
        return Offline2;
      }();
      exports.Offline = Offline;
    }
  });

  // node_modules/@sentry/integrations/dist/reportingobserver.js
  var require_reportingobserver = __commonJS({
    "node_modules/@sentry/integrations/dist/reportingobserver.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var ReportingObserver = function() {
        function ReportingObserver2(_options) {
          if (_options === void 0) {
            _options = {
              types: ["crash", "deprecation", "intervention"]
            };
          }
          this._options = _options;
          this.name = ReportingObserver2.id;
        }
        ReportingObserver2.prototype.setupOnce = function(_, getCurrentHub) {
          if (!utils_1.supportsReportingObserver()) {
            return;
          }
          this._getCurrentHub = getCurrentHub;
          var observer = new (utils_1.getGlobalObject()).ReportingObserver(this.handler.bind(this), {
            buffered: true,
            types: this._options.types
          });
          observer.observe();
        };
        ReportingObserver2.prototype.handler = function(reports) {
          var e_1, _a;
          var hub = this._getCurrentHub && this._getCurrentHub();
          if (!hub || !hub.getIntegration(ReportingObserver2)) {
            return;
          }
          var _loop_1 = function(report2) {
            hub.withScope(function(scope) {
              scope.setExtra("url", report2.url);
              var label = "ReportingObserver [" + report2.type + "]";
              var details = "No details available";
              if (report2.body) {
                var plainBody = {};
                for (var prop in report2.body) {
                  plainBody[prop] = report2.body[prop];
                }
                scope.setExtra("body", plainBody);
                if (report2.type === "crash") {
                  var body = report2.body;
                  details = [body.crashId || "", body.reason || ""].join(" ").trim() || details;
                } else {
                  var body = report2.body;
                  details = body.message || details;
                }
              }
              hub.captureMessage(label + ": " + details);
            });
          };
          try {
            for (var reports_1 = tslib_1.__values(reports), reports_1_1 = reports_1.next(); !reports_1_1.done; reports_1_1 = reports_1.next()) {
              var report = reports_1_1.value;
              _loop_1(report);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (reports_1_1 && !reports_1_1.done && (_a = reports_1.return))
                _a.call(reports_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        };
        ReportingObserver2.id = "ReportingObserver";
        return ReportingObserver2;
      }();
      exports.ReportingObserver = ReportingObserver;
    }
  });

  // node_modules/@sentry/integrations/dist/rewriteframes.js
  var require_rewriteframes = __commonJS({
    "node_modules/@sentry/integrations/dist/rewriteframes.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var RewriteFrames = function() {
        function RewriteFrames2(options) {
          var _this = this;
          if (options === void 0) {
            options = {};
          }
          this.name = RewriteFrames2.id;
          this._prefix = "app:///";
          this._iteratee = function(frame) {
            if (!frame.filename) {
              return frame;
            }
            var isWindowsFrame = /^[A-Z]:\\/.test(frame.filename);
            var startsWithSlash = /^\//.test(frame.filename);
            if (isWindowsFrame || startsWithSlash) {
              var filename = isWindowsFrame ? frame.filename.replace(/^[A-Z]:/, "").replace(/\\/g, "/") : frame.filename;
              var base = _this._root ? utils_1.relative(_this._root, filename) : utils_1.basename(filename);
              frame.filename = "" + _this._prefix + base;
            }
            return frame;
          };
          if (options.root) {
            this._root = options.root;
          }
          if (options.prefix) {
            this._prefix = options.prefix;
          }
          if (options.iteratee) {
            this._iteratee = options.iteratee;
          }
        }
        RewriteFrames2.prototype.setupOnce = function(addGlobalEventProcessor, getCurrentHub) {
          addGlobalEventProcessor(function(event2) {
            var self2 = getCurrentHub().getIntegration(RewriteFrames2);
            if (self2) {
              return self2.process(event2);
            }
            return event2;
          });
        };
        RewriteFrames2.prototype.process = function(originalEvent) {
          var processedEvent = originalEvent;
          if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {
            processedEvent = this._processExceptionsEvent(processedEvent);
          }
          if (originalEvent.stacktrace) {
            processedEvent = this._processStacktraceEvent(processedEvent);
          }
          return processedEvent;
        };
        RewriteFrames2.prototype._processExceptionsEvent = function(event2) {
          var _this = this;
          try {
            return tslib_1.__assign(tslib_1.__assign({}, event2), { exception: tslib_1.__assign(tslib_1.__assign({}, event2.exception), {
              values: event2.exception.values.map(function(value) {
                return tslib_1.__assign(tslib_1.__assign({}, value), { stacktrace: _this._processStacktrace(value.stacktrace) });
              })
            }) });
          } catch (_oO) {
            return event2;
          }
        };
        RewriteFrames2.prototype._processStacktraceEvent = function(event2) {
          try {
            return tslib_1.__assign(tslib_1.__assign({}, event2), { stacktrace: this._processStacktrace(event2.stacktrace) });
          } catch (_oO) {
            return event2;
          }
        };
        RewriteFrames2.prototype._processStacktrace = function(stacktrace) {
          var _this = this;
          return tslib_1.__assign(tslib_1.__assign({}, stacktrace), { frames: stacktrace && stacktrace.frames && stacktrace.frames.map(function(f) {
            return _this._iteratee(f);
          }) });
        };
        RewriteFrames2.id = "RewriteFrames";
        return RewriteFrames2;
      }();
      exports.RewriteFrames = RewriteFrames;
    }
  });

  // node_modules/@sentry/integrations/dist/sessiontiming.js
  var require_sessiontiming = __commonJS({
    "node_modules/@sentry/integrations/dist/sessiontiming.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var SessionTiming = function() {
        function SessionTiming2() {
          this.name = SessionTiming2.id;
          this._startTime = Date.now();
        }
        SessionTiming2.prototype.setupOnce = function(addGlobalEventProcessor, getCurrentHub) {
          addGlobalEventProcessor(function(event2) {
            var self2 = getCurrentHub().getIntegration(SessionTiming2);
            if (self2) {
              return self2.process(event2);
            }
            return event2;
          });
        };
        SessionTiming2.prototype.process = function(event2) {
          var _a;
          var now = Date.now();
          return tslib_1.__assign(tslib_1.__assign({}, event2), { extra: tslib_1.__assign(tslib_1.__assign({}, event2.extra), (_a = {}, _a["session:start"] = this._startTime, _a["session:duration"] = now - this._startTime, _a["session:end"] = now, _a)) });
        };
        SessionTiming2.id = "SessionTiming";
        return SessionTiming2;
      }();
      exports.SessionTiming = SessionTiming;
    }
  });

  // node_modules/@sentry/integrations/dist/transaction.js
  var require_transaction = __commonJS({
    "node_modules/@sentry/integrations/dist/transaction.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var Transaction = function() {
        function Transaction2() {
          this.name = Transaction2.id;
        }
        Transaction2.prototype.setupOnce = function(addGlobalEventProcessor, getCurrentHub) {
          addGlobalEventProcessor(function(event2) {
            var self2 = getCurrentHub().getIntegration(Transaction2);
            if (self2) {
              return self2.process(event2);
            }
            return event2;
          });
        };
        Transaction2.prototype.process = function(event2) {
          var frames = this._getFramesFromEvent(event2);
          for (var i = frames.length - 1; i >= 0; i--) {
            var frame = frames[i];
            if (frame.in_app === true) {
              event2.transaction = this._getTransaction(frame);
              break;
            }
          }
          return event2;
        };
        Transaction2.prototype._getFramesFromEvent = function(event2) {
          var exception = event2.exception && event2.exception.values && event2.exception.values[0];
          return exception && exception.stacktrace && exception.stacktrace.frames || [];
        };
        Transaction2.prototype._getTransaction = function(frame) {
          return frame.module || frame.function ? (frame.module || "?") + "/" + (frame.function || "?") : "<unknown>";
        };
        Transaction2.id = "Transaction";
        return Transaction2;
      }();
      exports.Transaction = Transaction;
    }
  });

  // node_modules/@sentry/integrations/dist/vue.js
  var require_vue = __commonJS({
    "node_modules/@sentry/integrations/dist/vue.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = require_tslib();
      var utils_1 = require_dist3();
      var flags_1 = require_flags5();
      var TRACING_GETTER = {
        id: "Tracing"
      };
      var BROWSER_TRACING_GETTER = {
        id: "BrowserTracing"
      };
      var VUE_OP = "ui.vue";
      var HOOKS = {
        activate: ["activated", "deactivated"],
        create: ["beforeCreate", "created"],
        destroy: ["beforeDestroy", "destroyed"],
        mount: ["beforeMount", "mounted"],
        update: ["beforeUpdate", "updated"]
      };
      var COMPONENT_NAME_REGEXP = /(?:^|[-_/])(\w)/g;
      var ROOT_COMPONENT_NAME = "root";
      var ANONYMOUS_COMPONENT_NAME = "anonymous component";
      var Vue = function() {
        function Vue2(options) {
          var _this = this;
          this.name = Vue2.id;
          this._componentsCache = {};
          this._applyTracingHooks = function(vm, getCurrentHub) {
            if (vm.$options.$_sentryPerfHook) {
              return;
            }
            vm.$options.$_sentryPerfHook = true;
            var name = _this._getComponentName(vm);
            var rootMount = name === ROOT_COMPONENT_NAME;
            var spans = {};
            var rootHandler = function(hook) {
              var now = utils_1.timestampWithMs();
              if (_this._rootSpan) {
                _this._finishRootSpan(now, getCurrentHub);
              } else {
                vm.$once("hook:" + hook, function() {
                  var tracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);
                  if (tracingIntegration) {
                    _this._tracingActivity = tracingIntegration.constructor.pushActivity("Vue Application Render");
                    var transaction = tracingIntegration.constructor.getTransaction();
                    if (transaction) {
                      _this._rootSpan = transaction.startChild({
                        description: "Application Render",
                        op: VUE_OP
                      });
                    }
                  } else {
                    var activeTransaction = getActiveTransaction(getCurrentHub());
                    if (activeTransaction) {
                      _this._rootSpan = activeTransaction.startChild({
                        description: "Application Render",
                        op: VUE_OP
                      });
                    }
                  }
                });
              }
            };
            var childHandler = function(hook, operation) {
              var shouldTrack = Array.isArray(_this._options.tracingOptions.trackComponents) ? _this._options.tracingOptions.trackComponents.indexOf(name) > -1 : _this._options.tracingOptions.trackComponents;
              if (!_this._rootSpan || !shouldTrack) {
                return;
              }
              var now = utils_1.timestampWithMs();
              var span = spans[operation];
              if (span) {
                span.finish();
                _this._finishRootSpan(now, getCurrentHub);
              } else {
                vm.$once("hook:" + hook, function() {
                  if (_this._rootSpan) {
                    spans[operation] = _this._rootSpan.startChild({
                      description: "Vue <" + name + ">",
                      op: VUE_OP + "." + operation
                    });
                  }
                });
              }
            };
            _this._options.tracingOptions.hooks.forEach(function(operation) {
              var internalHooks = HOOKS[operation];
              if (!internalHooks) {
                flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Unknown hook: " + operation);
                return;
              }
              internalHooks.forEach(function(internalHook) {
                var handler = rootMount ? rootHandler.bind(_this, internalHook) : childHandler.bind(_this, internalHook, operation);
                var currentValue = vm.$options[internalHook];
                if (Array.isArray(currentValue)) {
                  vm.$options[internalHook] = tslib_1.__spread([handler], currentValue);
                } else if (typeof currentValue === "function") {
                  vm.$options[internalHook] = [handler, currentValue];
                } else {
                  vm.$options[internalHook] = [handler];
                }
              });
            });
          };
          flags_1.IS_DEBUG_BUILD && utils_1.logger.log("You are still using the Vue.js integration, consider moving to @sentry/vue");
          this._options = tslib_1.__assign(tslib_1.__assign({
            Vue: utils_1.getGlobalObject().Vue,
            attachProps: true,
            logErrors: false,
            tracing: false
          }, options), { tracingOptions: tslib_1.__assign({ hooks: ["mount", "update"], timeout: 2e3, trackComponents: false }, options.tracingOptions) });
        }
        Vue2.prototype.setupOnce = function(_, getCurrentHub) {
          if (!this._options.Vue) {
            flags_1.IS_DEBUG_BUILD && utils_1.logger.error("Vue integration is missing a Vue instance");
            return;
          }
          this._attachErrorHandler(getCurrentHub);
          if (this._options.tracing) {
            this._startTracing(getCurrentHub);
          }
        };
        Vue2.prototype._getComponentName = function(vm) {
          if (!vm) {
            return ANONYMOUS_COMPONENT_NAME;
          }
          if (vm.$root === vm) {
            return ROOT_COMPONENT_NAME;
          }
          if (!vm.$options) {
            return ANONYMOUS_COMPONENT_NAME;
          }
          if (vm.$options.name) {
            return vm.$options.name;
          }
          if (vm.$options._componentTag) {
            return vm.$options._componentTag;
          }
          if (vm.$options.__file) {
            var unifiedFile = vm.$options.__file.replace(/^[a-zA-Z]:/, "").replace(/\\/g, "/");
            var filename = utils_1.basename(unifiedFile, ".vue");
            return this._componentsCache[filename] || (this._componentsCache[filename] = filename.replace(COMPONENT_NAME_REGEXP, function(_, c) {
              return c ? c.toUpperCase() : "";
            }));
          }
          return ANONYMOUS_COMPONENT_NAME;
        };
        Vue2.prototype._finishRootSpan = function(timestamp, getCurrentHub) {
          var _this = this;
          if (this._rootSpanTimer) {
            clearTimeout(this._rootSpanTimer);
          }
          this._rootSpanTimer = setTimeout(function() {
            if (_this._tracingActivity) {
              var tracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);
              if (tracingIntegration) {
                tracingIntegration.constructor.popActivity(_this._tracingActivity);
              }
            }
            if (_this._rootSpan) {
              _this._rootSpan.finish(timestamp);
            }
          }, this._options.tracingOptions.timeout);
        };
        Vue2.prototype._startTracing = function(getCurrentHub) {
          var applyTracingHooks = this._applyTracingHooks;
          this._options.Vue.mixin({
            beforeCreate: function() {
              if (getCurrentHub().getIntegration(TRACING_GETTER) || getCurrentHub().getIntegration(BROWSER_TRACING_GETTER)) {
                applyTracingHooks(this, getCurrentHub);
              } else {
                flags_1.IS_DEBUG_BUILD && utils_1.logger.error("Vue integration has tracing enabled, but Tracing integration is not configured");
              }
            }
          });
        };
        Vue2.prototype._attachErrorHandler = function(getCurrentHub) {
          var _this = this;
          var currentErrorHandler = this._options.Vue.config.errorHandler;
          this._options.Vue.config.errorHandler = function(error, vm, info) {
            var metadata = {};
            if (vm) {
              try {
                metadata.componentName = _this._getComponentName(vm);
                if (_this._options.attachProps) {
                  metadata.propsData = vm.$options.propsData;
                }
              } catch (_oO) {
                flags_1.IS_DEBUG_BUILD && utils_1.logger.warn("Unable to extract metadata from Vue component.");
              }
            }
            if (info) {
              metadata.lifecycleHook = info;
            }
            if (getCurrentHub().getIntegration(Vue2)) {
              setTimeout(function() {
                getCurrentHub().withScope(function(scope) {
                  scope.setContext("vue", metadata);
                  getCurrentHub().captureException(error);
                });
              });
            }
            if (typeof currentErrorHandler === "function") {
              currentErrorHandler.call(_this._options.Vue, error, vm, info);
            }
            if (_this._options.logErrors) {
              if (_this._options.Vue.util) {
                _this._options.Vue.util.warn("Error in " + info + ': "' + (error && error.toString()) + '"', vm);
              }
              console.error(error);
            }
          };
        };
        Vue2.id = "Vue";
        return Vue2;
      }();
      exports.Vue = Vue;
      function getActiveTransaction(hub) {
        if (hub && hub.getScope) {
          var scope = hub.getScope();
          if (scope) {
            return scope.getTransaction();
          }
        }
        return void 0;
      }
      exports.getActiveTransaction = getActiveTransaction;
    }
  });

  // node_modules/@sentry/integrations/dist/index.js
  var require_dist8 = __commonJS({
    "node_modules/@sentry/integrations/dist/index.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      var angular_1 = require_angular();
      exports.Angular = angular_1.Angular;
      var captureconsole_1 = require_captureconsole();
      exports.CaptureConsole = captureconsole_1.CaptureConsole;
      var debug_1 = require_debug();
      exports.Debug = debug_1.Debug;
      var dedupe_1 = require_dedupe2();
      exports.Dedupe = dedupe_1.Dedupe;
      var ember_1 = require_ember();
      exports.Ember = ember_1.Ember;
      var extraerrordata_1 = require_extraerrordata();
      exports.ExtraErrorData = extraerrordata_1.ExtraErrorData;
      var offline_1 = require_offline();
      exports.Offline = offline_1.Offline;
      var reportingobserver_1 = require_reportingobserver();
      exports.ReportingObserver = reportingobserver_1.ReportingObserver;
      var rewriteframes_1 = require_rewriteframes();
      exports.RewriteFrames = rewriteframes_1.RewriteFrames;
      var sessiontiming_1 = require_sessiontiming();
      exports.SessionTiming = sessiontiming_1.SessionTiming;
      var transaction_1 = require_transaction();
      exports.Transaction = transaction_1.Transaction;
      var vue_1 = require_vue();
      exports.Vue = vue_1.Vue;
    }
  });

  // node_modules/@material-ui/core/utils/setRef.js
  var require_setRef = __commonJS({
    "node_modules/@material-ui/core/utils/setRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = setRef2;
      function setRef2(ref, value) {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref) {
          ref.current = value;
        }
      }
    }
  });

  // node_modules/@material-ui/core/utils/useForkRef.js
  var require_useForkRef = __commonJS({
    "node_modules/@material-ui/core/utils/useForkRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useForkRef2;
      var React69 = _interopRequireWildcard(require_react());
      var _setRef = _interopRequireDefault(require_setRef());
      function useForkRef2(refA, refB) {
        return React69.useMemo(function() {
          if (refA == null && refB == null) {
            return null;
          }
          return function(refValue) {
            (0, _setRef.default)(refA, refValue);
            (0, _setRef.default)(refB, refValue);
          };
        }, [refA, refB]);
      }
    }
  });

  // node_modules/@material-ui/core/utils/useEventCallback.js
  var require_useEventCallback = __commonJS({
    "node_modules/@material-ui/core/utils/useEventCallback.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useEventCallback2;
      var React69 = _interopRequireWildcard(require_react());
      var useEnhancedEffect8 = typeof window !== "undefined" ? React69.useLayoutEffect : React69.useEffect;
      function useEventCallback2(fn) {
        var ref = React69.useRef(fn);
        useEnhancedEffect8(function() {
          ref.current = fn;
        });
        return React69.useCallback(function() {
          return (0, ref.current).apply(void 0, arguments);
        }, []);
      }
    }
  });

  // node_modules/@material-ui/core/utils/deprecatedPropType.js
  var require_deprecatedPropType = __commonJS({
    "node_modules/@material-ui/core/utils/deprecatedPropType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = deprecatedPropType2;
      function deprecatedPropType2(validator, reason) {
        if (false) {
          return function() {
            return null;
          };
        }
        return function(props, propName, componentName, location, propFullName) {
          var componentNameSafe = componentName || "<<anonymous>>";
          var propFullNameSafe = propFullName || propName;
          if (typeof props[propName] !== "undefined") {
            return new Error("The ".concat(location, " `").concat(propFullNameSafe, "` of ") + "`".concat(componentNameSafe, "` is deprecated. ").concat(reason));
          }
          return null;
        };
      }
    }
  });

  // node_modules/@material-ui/core/utils/useIsFocusVisible.js
  var require_useIsFocusVisible = __commonJS({
    "node_modules/@material-ui/core/utils/useIsFocusVisible.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.teardown = teardown;
      exports.default = useIsFocusVisible2;
      var React69 = _interopRequireWildcard(require_react());
      var ReactDOM11 = _interopRequireWildcard(require_react_dom());
      var hadKeyboardEvent2 = true;
      var hadFocusVisibleRecently2 = false;
      var hadFocusVisibleRecentlyTimeout2 = null;
      var inputTypesWhitelist2 = {
        text: true,
        search: true,
        url: true,
        tel: true,
        email: true,
        password: true,
        number: true,
        date: true,
        month: true,
        week: true,
        time: true,
        datetime: true,
        "datetime-local": true
      };
      function focusTriggersKeyboardModality2(node) {
        var type = node.type, tagName = node.tagName;
        if (tagName === "INPUT" && inputTypesWhitelist2[type] && !node.readOnly) {
          return true;
        }
        if (tagName === "TEXTAREA" && !node.readOnly) {
          return true;
        }
        if (node.isContentEditable) {
          return true;
        }
        return false;
      }
      function handleKeyDown2(event2) {
        if (event2.metaKey || event2.altKey || event2.ctrlKey) {
          return;
        }
        hadKeyboardEvent2 = true;
      }
      function handlePointerDown2() {
        hadKeyboardEvent2 = false;
      }
      function handleVisibilityChange2() {
        if (this.visibilityState === "hidden") {
          if (hadFocusVisibleRecently2) {
            hadKeyboardEvent2 = true;
          }
        }
      }
      function prepare2(doc) {
        doc.addEventListener("keydown", handleKeyDown2, true);
        doc.addEventListener("mousedown", handlePointerDown2, true);
        doc.addEventListener("pointerdown", handlePointerDown2, true);
        doc.addEventListener("touchstart", handlePointerDown2, true);
        doc.addEventListener("visibilitychange", handleVisibilityChange2, true);
      }
      function teardown(doc) {
        doc.removeEventListener("keydown", handleKeyDown2, true);
        doc.removeEventListener("mousedown", handlePointerDown2, true);
        doc.removeEventListener("pointerdown", handlePointerDown2, true);
        doc.removeEventListener("touchstart", handlePointerDown2, true);
        doc.removeEventListener("visibilitychange", handleVisibilityChange2, true);
      }
      function isFocusVisible2(event2) {
        var target = event2.target;
        try {
          return target.matches(":focus-visible");
        } catch (error) {
        }
        return hadKeyboardEvent2 || focusTriggersKeyboardModality2(target);
      }
      function handleBlurVisible2() {
        hadFocusVisibleRecently2 = true;
        window.clearTimeout(hadFocusVisibleRecentlyTimeout2);
        hadFocusVisibleRecentlyTimeout2 = window.setTimeout(function() {
          hadFocusVisibleRecently2 = false;
        }, 100);
      }
      function useIsFocusVisible2() {
        var ref = React69.useCallback(function(instance) {
          var node = ReactDOM11.findDOMNode(instance);
          if (node != null) {
            prepare2(node.ownerDocument);
          }
        }, []);
        if (true) {
          React69.useDebugValue(isFocusVisible2);
        }
        return {
          isFocusVisible: isFocusVisible2,
          onBlurVisible: handleBlurVisible2,
          ref
        };
      }
    }
  });

  // node_modules/dom-helpers/cjs/hasClass.js
  var require_hasClass = __commonJS({
    "node_modules/dom-helpers/cjs/hasClass.js"(exports, module) {
      "use strict";
      exports.__esModule = true;
      exports.default = hasClass;
      function hasClass(element, className) {
        if (element.classList)
          return !!className && element.classList.contains(className);
        return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
      }
      module.exports = exports["default"];
    }
  });

  // node_modules/dom-helpers/cjs/addClass.js
  var require_addClass = __commonJS({
    "node_modules/dom-helpers/cjs/addClass.js"(exports, module) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      exports.__esModule = true;
      exports.default = addClass;
      var _hasClass = _interopRequireDefault(require_hasClass());
      function addClass(element, className) {
        if (element.classList)
          element.classList.add(className);
        else if (!(0, _hasClass.default)(element, className))
          if (typeof element.className === "string")
            element.className = element.className + " " + className;
          else
            element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
      }
      module.exports = exports["default"];
    }
  });

  // node_modules/dom-helpers/cjs/removeClass.js
  var require_removeClass = __commonJS({
    "node_modules/dom-helpers/cjs/removeClass.js"(exports, module) {
      "use strict";
      exports.__esModule = true;
      exports.default = removeClass;
      function replaceClassName(origClass, classToRemove) {
        return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
      }
      function removeClass(element, className) {
        if (element.classList) {
          element.classList.remove(className);
        } else if (typeof element.className === "string") {
          element.className = replaceClassName(element.className, className);
        } else {
          element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
        }
      }
      module.exports = exports["default"];
    }
  });

  // node_modules/react-transition-group/cjs/config.js
  var require_config = __commonJS({
    "node_modules/react-transition-group/cjs/config.js"(exports, module) {
      "use strict";
      exports.__esModule = true;
      exports.default = void 0;
      var _default = {
        disabled: false
      };
      exports.default = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/react-transition-group/cjs/utils/PropTypes.js
  var require_PropTypes = __commonJS({
    "node_modules/react-transition-group/cjs/utils/PropTypes.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.classNamesShape = exports.timeoutsShape = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var timeoutsShape = true ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
        enter: _propTypes.default.number,
        exit: _propTypes.default.number,
        appear: _propTypes.default.number
      }).isRequired]) : null;
      exports.timeoutsShape = timeoutsShape;
      var classNamesShape = true ? _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
        enter: _propTypes.default.string,
        exit: _propTypes.default.string,
        active: _propTypes.default.string
      }), _propTypes.default.shape({
        enter: _propTypes.default.string,
        enterDone: _propTypes.default.string,
        enterActive: _propTypes.default.string,
        exit: _propTypes.default.string,
        exitDone: _propTypes.default.string,
        exitActive: _propTypes.default.string
      })]) : null;
      exports.classNamesShape = classNamesShape;
    }
  });

  // node_modules/react-transition-group/cjs/TransitionGroupContext.js
  var require_TransitionGroupContext = __commonJS({
    "node_modules/react-transition-group/cjs/TransitionGroupContext.js"(exports, module) {
      "use strict";
      exports.__esModule = true;
      exports.default = void 0;
      var _react = _interopRequireDefault(require_react());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var _default = _react.default.createContext(null);
      exports.default = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/react-transition-group/cjs/utils/reflow.js
  var require_reflow = __commonJS({
    "node_modules/react-transition-group/cjs/utils/reflow.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.forceReflow = void 0;
      var forceReflow = function forceReflow2(node) {
        return node.scrollTop;
      };
      exports.forceReflow = forceReflow;
    }
  });

  // node_modules/react-transition-group/cjs/Transition.js
  var require_Transition = __commonJS({
    "node_modules/react-transition-group/cjs/Transition.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react = _interopRequireDefault(require_react());
      var _reactDom = _interopRequireDefault(require_react_dom());
      var _config = _interopRequireDefault(require_config());
      var _PropTypes = require_PropTypes();
      var _TransitionGroupContext = _interopRequireDefault(require_TransitionGroupContext());
      var _reflow = require_reflow();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      var UNMOUNTED = "unmounted";
      exports.UNMOUNTED = UNMOUNTED;
      var EXITED = "exited";
      exports.EXITED = EXITED;
      var ENTERING = "entering";
      exports.ENTERING = ENTERING;
      var ENTERED = "entered";
      exports.ENTERED = ENTERED;
      var EXITING = "exiting";
      exports.EXITING = EXITING;
      var Transition2 = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose(Transition3, _React$Component);
        function Transition3(props, context) {
          var _this;
          _this = _React$Component.call(this, props, context) || this;
          var parentGroup = context;
          var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
          var initialStatus;
          _this.appearStatus = null;
          if (props.in) {
            if (appear) {
              initialStatus = EXITED;
              _this.appearStatus = ENTERING;
            } else {
              initialStatus = ENTERED;
            }
          } else {
            if (props.unmountOnExit || props.mountOnEnter) {
              initialStatus = UNMOUNTED;
            } else {
              initialStatus = EXITED;
            }
          }
          _this.state = {
            status: initialStatus
          };
          _this.nextCallback = null;
          return _this;
        }
        Transition3.getDerivedStateFromProps = function getDerivedStateFromProps(_ref4, prevState) {
          var nextIn = _ref4.in;
          if (nextIn && prevState.status === UNMOUNTED) {
            return {
              status: EXITED
            };
          }
          return null;
        };
        var _proto = Transition3.prototype;
        _proto.componentDidMount = function componentDidMount() {
          this.updateStatus(true, this.appearStatus);
        };
        _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
          var nextStatus = null;
          if (prevProps !== this.props) {
            var status = this.state.status;
            if (this.props.in) {
              if (status !== ENTERING && status !== ENTERED) {
                nextStatus = ENTERING;
              }
            } else {
              if (status === ENTERING || status === ENTERED) {
                nextStatus = EXITING;
              }
            }
          }
          this.updateStatus(false, nextStatus);
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
          this.cancelNextCallback();
        };
        _proto.getTimeouts = function getTimeouts() {
          var timeout = this.props.timeout;
          var exit, enter, appear;
          exit = enter = appear = timeout;
          if (timeout != null && typeof timeout !== "number") {
            exit = timeout.exit;
            enter = timeout.enter;
            appear = timeout.appear !== void 0 ? timeout.appear : enter;
          }
          return {
            exit,
            enter,
            appear
          };
        };
        _proto.updateStatus = function updateStatus(mounting, nextStatus) {
          if (mounting === void 0) {
            mounting = false;
          }
          if (nextStatus !== null) {
            this.cancelNextCallback();
            if (nextStatus === ENTERING) {
              if (this.props.unmountOnExit || this.props.mountOnEnter) {
                var node = this.props.nodeRef ? this.props.nodeRef.current : _reactDom.default.findDOMNode(this);
                if (node)
                  (0, _reflow.forceReflow)(node);
              }
              this.performEnter(mounting);
            } else {
              this.performExit();
            }
          } else if (this.props.unmountOnExit && this.state.status === EXITED) {
            this.setState({
              status: UNMOUNTED
            });
          }
        };
        _proto.performEnter = function performEnter(mounting) {
          var _this2 = this;
          var enter = this.props.enter;
          var appearing = this.context ? this.context.isMounting : mounting;
          var _ref23 = this.props.nodeRef ? [appearing] : [_reactDom.default.findDOMNode(this), appearing], maybeNode = _ref23[0], maybeAppearing = _ref23[1];
          var timeouts = this.getTimeouts();
          var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
          if (!mounting && !enter || _config.default.disabled) {
            this.safeSetState({
              status: ENTERED
            }, function() {
              _this2.props.onEntered(maybeNode);
            });
            return;
          }
          this.props.onEnter(maybeNode, maybeAppearing);
          this.safeSetState({
            status: ENTERING
          }, function() {
            _this2.props.onEntering(maybeNode, maybeAppearing);
            _this2.onTransitionEnd(enterTimeout, function() {
              _this2.safeSetState({
                status: ENTERED
              }, function() {
                _this2.props.onEntered(maybeNode, maybeAppearing);
              });
            });
          });
        };
        _proto.performExit = function performExit() {
          var _this3 = this;
          var exit = this.props.exit;
          var timeouts = this.getTimeouts();
          var maybeNode = this.props.nodeRef ? void 0 : _reactDom.default.findDOMNode(this);
          if (!exit || _config.default.disabled) {
            this.safeSetState({
              status: EXITED
            }, function() {
              _this3.props.onExited(maybeNode);
            });
            return;
          }
          this.props.onExit(maybeNode);
          this.safeSetState({
            status: EXITING
          }, function() {
            _this3.props.onExiting(maybeNode);
            _this3.onTransitionEnd(timeouts.exit, function() {
              _this3.safeSetState({
                status: EXITED
              }, function() {
                _this3.props.onExited(maybeNode);
              });
            });
          });
        };
        _proto.cancelNextCallback = function cancelNextCallback() {
          if (this.nextCallback !== null) {
            this.nextCallback.cancel();
            this.nextCallback = null;
          }
        };
        _proto.safeSetState = function safeSetState(nextState, callback) {
          callback = this.setNextCallback(callback);
          this.setState(nextState, callback);
        };
        _proto.setNextCallback = function setNextCallback(callback) {
          var _this4 = this;
          var active = true;
          this.nextCallback = function(event2) {
            if (active) {
              active = false;
              _this4.nextCallback = null;
              callback(event2);
            }
          };
          this.nextCallback.cancel = function() {
            active = false;
          };
          return this.nextCallback;
        };
        _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
          this.setNextCallback(handler);
          var node = this.props.nodeRef ? this.props.nodeRef.current : _reactDom.default.findDOMNode(this);
          var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
          if (!node || doesNotHaveTimeoutOrListener) {
            setTimeout(this.nextCallback, 0);
            return;
          }
          if (this.props.addEndListener) {
            var _ref32 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref32[0], maybeNextCallback = _ref32[1];
            this.props.addEndListener(maybeNode, maybeNextCallback);
          }
          if (timeout != null) {
            setTimeout(this.nextCallback, timeout);
          }
        };
        _proto.render = function render() {
          var status = this.state.status;
          if (status === UNMOUNTED) {
            return null;
          }
          var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose2(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
          return /* @__PURE__ */ _react.default.createElement(_TransitionGroupContext.default.Provider, {
            value: null
          }, typeof children === "function" ? children(status, childProps) : _react.default.cloneElement(_react.default.Children.only(children), childProps));
        };
        return Transition3;
      }(_react.default.Component);
      Transition2.contextType = _TransitionGroupContext.default;
      Transition2.propTypes = true ? {
        nodeRef: _propTypes.default.shape({
          current: typeof Element === "undefined" ? _propTypes.default.any : function(propValue, key, componentName, location, propFullName, secret) {
            var value = propValue[key];
            return _propTypes.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
          }
        }),
        children: _propTypes.default.oneOfType([_propTypes.default.func.isRequired, _propTypes.default.element.isRequired]).isRequired,
        in: _propTypes.default.bool,
        mountOnEnter: _propTypes.default.bool,
        unmountOnExit: _propTypes.default.bool,
        appear: _propTypes.default.bool,
        enter: _propTypes.default.bool,
        exit: _propTypes.default.bool,
        timeout: function timeout(props) {
          var pt = _PropTypes.timeoutsShape;
          if (!props.addEndListener)
            pt = pt.isRequired;
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          return pt.apply(void 0, [props].concat(args));
        },
        addEndListener: _propTypes.default.func,
        onEnter: _propTypes.default.func,
        onEntering: _propTypes.default.func,
        onEntered: _propTypes.default.func,
        onExit: _propTypes.default.func,
        onExiting: _propTypes.default.func,
        onExited: _propTypes.default.func
      } : {};
      function noop() {
      }
      Transition2.defaultProps = {
        in: false,
        mountOnEnter: false,
        unmountOnExit: false,
        appear: false,
        enter: true,
        exit: true,
        onEnter: noop,
        onEntering: noop,
        onEntered: noop,
        onExit: noop,
        onExiting: noop,
        onExited: noop
      };
      Transition2.UNMOUNTED = UNMOUNTED;
      Transition2.EXITED = EXITED;
      Transition2.ENTERING = ENTERING;
      Transition2.ENTERED = ENTERED;
      Transition2.EXITING = EXITING;
      var _default = Transition2;
      exports.default = _default;
    }
  });

  // node_modules/react-transition-group/cjs/CSSTransition.js
  var require_CSSTransition = __commonJS({
    "node_modules/react-transition-group/cjs/CSSTransition.js"(exports, module) {
      "use strict";
      exports.__esModule = true;
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _addClass2 = _interopRequireDefault(require_addClass());
      var _removeClass = _interopRequireDefault(require_removeClass());
      var _react = _interopRequireDefault(require_react());
      var _Transition = _interopRequireDefault(require_Transition());
      var _PropTypes = require_PropTypes();
      var _reflow = require_reflow();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _extends2() {
        _extends2 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      var _addClass = function addClass(node, classes) {
        return node && classes && classes.split(" ").forEach(function(c) {
          return (0, _addClass2.default)(node, c);
        });
      };
      var removeClass = function removeClass2(node, classes) {
        return node && classes && classes.split(" ").forEach(function(c) {
          return (0, _removeClass.default)(node, c);
        });
      };
      var CSSTransition = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose(CSSTransition2, _React$Component);
        function CSSTransition2() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
          _this.appliedClasses = {
            appear: {},
            enter: {},
            exit: {}
          };
          _this.onEnter = function(maybeNode, maybeAppearing) {
            var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
            _this.removeClasses(node, "exit");
            _this.addClass(node, appearing ? "appear" : "enter", "base");
            if (_this.props.onEnter) {
              _this.props.onEnter(maybeNode, maybeAppearing);
            }
          };
          _this.onEntering = function(maybeNode, maybeAppearing) {
            var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
            var type = appearing ? "appear" : "enter";
            _this.addClass(node, type, "active");
            if (_this.props.onEntering) {
              _this.props.onEntering(maybeNode, maybeAppearing);
            }
          };
          _this.onEntered = function(maybeNode, maybeAppearing) {
            var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
            var type = appearing ? "appear" : "enter";
            _this.removeClasses(node, type);
            _this.addClass(node, type, "done");
            if (_this.props.onEntered) {
              _this.props.onEntered(maybeNode, maybeAppearing);
            }
          };
          _this.onExit = function(maybeNode) {
            var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];
            _this.removeClasses(node, "appear");
            _this.removeClasses(node, "enter");
            _this.addClass(node, "exit", "base");
            if (_this.props.onExit) {
              _this.props.onExit(maybeNode);
            }
          };
          _this.onExiting = function(maybeNode) {
            var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];
            _this.addClass(node, "exit", "active");
            if (_this.props.onExiting) {
              _this.props.onExiting(maybeNode);
            }
          };
          _this.onExited = function(maybeNode) {
            var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];
            _this.removeClasses(node, "exit");
            _this.addClass(node, "exit", "done");
            if (_this.props.onExited) {
              _this.props.onExited(maybeNode);
            }
          };
          _this.resolveArguments = function(maybeNode, maybeAppearing) {
            return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
          };
          _this.getClassNames = function(type) {
            var classNames = _this.props.classNames;
            var isStringClassNames = typeof classNames === "string";
            var prefix = isStringClassNames && classNames ? classNames + "-" : "";
            var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
            var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
            var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
            return {
              baseClassName,
              activeClassName,
              doneClassName
            };
          };
          return _this;
        }
        var _proto = CSSTransition2.prototype;
        _proto.addClass = function addClass(node, type, phase) {
          var className = this.getClassNames(type)[phase + "ClassName"];
          var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
          if (type === "appear" && phase === "done" && doneClassName) {
            className += " " + doneClassName;
          }
          if (phase === "active") {
            if (node)
              (0, _reflow.forceReflow)(node);
          }
          if (className) {
            this.appliedClasses[type][phase] = className;
            _addClass(node, className);
          }
        };
        _proto.removeClasses = function removeClasses(node, type) {
          var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
          this.appliedClasses[type] = {};
          if (baseClassName) {
            removeClass(node, baseClassName);
          }
          if (activeClassName) {
            removeClass(node, activeClassName);
          }
          if (doneClassName) {
            removeClass(node, doneClassName);
          }
        };
        _proto.render = function render() {
          var _this$props = this.props, _ = _this$props.classNames, props = _objectWithoutPropertiesLoose2(_this$props, ["classNames"]);
          return /* @__PURE__ */ _react.default.createElement(_Transition.default, _extends2({}, props, {
            onEnter: this.onEnter,
            onEntered: this.onEntered,
            onEntering: this.onEntering,
            onExit: this.onExit,
            onExiting: this.onExiting,
            onExited: this.onExited
          }));
        };
        return CSSTransition2;
      }(_react.default.Component);
      CSSTransition.defaultProps = {
        classNames: ""
      };
      CSSTransition.propTypes = true ? _extends2({}, _Transition.default.propTypes, {
        classNames: _PropTypes.classNamesShape,
        onEnter: _propTypes.default.func,
        onEntering: _propTypes.default.func,
        onEntered: _propTypes.default.func,
        onExit: _propTypes.default.func,
        onExiting: _propTypes.default.func,
        onExited: _propTypes.default.func
      }) : {};
      var _default = CSSTransition;
      exports.default = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/react-transition-group/cjs/utils/ChildMapping.js
  var require_ChildMapping = __commonJS({
    "node_modules/react-transition-group/cjs/utils/ChildMapping.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.getChildMapping = getChildMapping;
      exports.mergeChildMappings = mergeChildMappings;
      exports.getInitialChildMapping = getInitialChildMapping;
      exports.getNextChildMapping = getNextChildMapping;
      var _react = require_react();
      function getChildMapping(children, mapFn) {
        var mapper = function mapper2(child) {
          return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
        };
        var result = /* @__PURE__ */ Object.create(null);
        if (children)
          _react.Children.map(children, function(c) {
            return c;
          }).forEach(function(child) {
            result[child.key] = mapper(child);
          });
        return result;
      }
      function mergeChildMappings(prev, next) {
        prev = prev || {};
        next = next || {};
        function getValueForKey(key) {
          return key in next ? next[key] : prev[key];
        }
        var nextKeysPending = /* @__PURE__ */ Object.create(null);
        var pendingKeys = [];
        for (var prevKey in prev) {
          if (prevKey in next) {
            if (pendingKeys.length) {
              nextKeysPending[prevKey] = pendingKeys;
              pendingKeys = [];
            }
          } else {
            pendingKeys.push(prevKey);
          }
        }
        var i;
        var childMapping = {};
        for (var nextKey in next) {
          if (nextKeysPending[nextKey]) {
            for (i = 0; i < nextKeysPending[nextKey].length; i++) {
              var pendingNextKey = nextKeysPending[nextKey][i];
              childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
            }
          }
          childMapping[nextKey] = getValueForKey(nextKey);
        }
        for (i = 0; i < pendingKeys.length; i++) {
          childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
        }
        return childMapping;
      }
      function getProp(child, prop, props) {
        return props[prop] != null ? props[prop] : child.props[prop];
      }
      function getInitialChildMapping(props, onExited) {
        return getChildMapping(props.children, function(child) {
          return (0, _react.cloneElement)(child, {
            onExited: onExited.bind(null, child),
            in: true,
            appear: getProp(child, "appear", props),
            enter: getProp(child, "enter", props),
            exit: getProp(child, "exit", props)
          });
        });
      }
      function getNextChildMapping(nextProps, prevChildMapping, onExited) {
        var nextChildMapping = getChildMapping(nextProps.children);
        var children = mergeChildMappings(prevChildMapping, nextChildMapping);
        Object.keys(children).forEach(function(key) {
          var child = children[key];
          if (!(0, _react.isValidElement)(child))
            return;
          var hasPrev = key in prevChildMapping;
          var hasNext = key in nextChildMapping;
          var prevChild = prevChildMapping[key];
          var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in;
          if (hasNext && (!hasPrev || isLeaving)) {
            children[key] = (0, _react.cloneElement)(child, {
              onExited: onExited.bind(null, child),
              in: true,
              exit: getProp(child, "exit", nextProps),
              enter: getProp(child, "enter", nextProps)
            });
          } else if (!hasNext && hasPrev && !isLeaving) {
            children[key] = (0, _react.cloneElement)(child, {
              in: false
            });
          } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
            children[key] = (0, _react.cloneElement)(child, {
              onExited: onExited.bind(null, child),
              in: prevChild.props.in,
              exit: getProp(child, "exit", nextProps),
              enter: getProp(child, "enter", nextProps)
            });
          }
        });
        return children;
      }
    }
  });

  // node_modules/react-transition-group/cjs/TransitionGroup.js
  var require_TransitionGroup = __commonJS({
    "node_modules/react-transition-group/cjs/TransitionGroup.js"(exports, module) {
      "use strict";
      exports.__esModule = true;
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react = _interopRequireDefault(require_react());
      var _TransitionGroupContext = _interopRequireDefault(require_TransitionGroupContext());
      var _ChildMapping = require_ChildMapping();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _extends2() {
        _extends2 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      var values = Object.values || function(obj) {
        return Object.keys(obj).map(function(k) {
          return obj[k];
        });
      };
      var defaultProps = {
        component: "div",
        childFactory: function childFactory(child) {
          return child;
        }
      };
      var TransitionGroup2 = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose(TransitionGroup3, _React$Component);
        function TransitionGroup3(props, context) {
          var _this;
          _this = _React$Component.call(this, props, context) || this;
          var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
          _this.state = {
            contextValue: {
              isMounting: true
            },
            handleExited,
            firstRender: true
          };
          return _this;
        }
        var _proto = TransitionGroup3.prototype;
        _proto.componentDidMount = function componentDidMount() {
          this.mounted = true;
          this.setState({
            contextValue: {
              isMounting: false
            }
          });
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
          this.mounted = false;
        };
        TransitionGroup3.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref4) {
          var prevChildMapping = _ref4.children, handleExited = _ref4.handleExited, firstRender = _ref4.firstRender;
          return {
            children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
            firstRender: false
          };
        };
        _proto.handleExited = function handleExited(child, node) {
          var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
          if (child.key in currentChildMapping)
            return;
          if (child.props.onExited) {
            child.props.onExited(node);
          }
          if (this.mounted) {
            this.setState(function(state) {
              var children = _extends2({}, state.children);
              delete children[child.key];
              return {
                children
              };
            });
          }
        };
        _proto.render = function render() {
          var _this$props = this.props, Component4 = _this$props.component, childFactory = _this$props.childFactory, props = _objectWithoutPropertiesLoose2(_this$props, ["component", "childFactory"]);
          var contextValue = this.state.contextValue;
          var children = values(this.state.children).map(childFactory);
          delete props.appear;
          delete props.enter;
          delete props.exit;
          if (Component4 === null) {
            return /* @__PURE__ */ _react.default.createElement(_TransitionGroupContext.default.Provider, {
              value: contextValue
            }, children);
          }
          return /* @__PURE__ */ _react.default.createElement(_TransitionGroupContext.default.Provider, {
            value: contextValue
          }, /* @__PURE__ */ _react.default.createElement(Component4, props, children));
        };
        return TransitionGroup3;
      }(_react.default.Component);
      TransitionGroup2.propTypes = true ? {
        component: _propTypes.default.any,
        children: _propTypes.default.node,
        appear: _propTypes.default.bool,
        enter: _propTypes.default.bool,
        exit: _propTypes.default.bool,
        childFactory: _propTypes.default.func
      } : {};
      TransitionGroup2.defaultProps = defaultProps;
      var _default = TransitionGroup2;
      exports.default = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/react-transition-group/cjs/ReplaceTransition.js
  var require_ReplaceTransition = __commonJS({
    "node_modules/react-transition-group/cjs/ReplaceTransition.js"(exports, module) {
      "use strict";
      exports.__esModule = true;
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react = _interopRequireDefault(require_react());
      var _reactDom = _interopRequireDefault(require_react_dom());
      var _TransitionGroup = _interopRequireDefault(require_TransitionGroup());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      var ReplaceTransition = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose(ReplaceTransition2, _React$Component);
        function ReplaceTransition2() {
          var _this;
          for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
            _args[_key] = arguments[_key];
          }
          _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
          _this.handleEnter = function() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            return _this.handleLifecycle("onEnter", 0, args);
          };
          _this.handleEntering = function() {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }
            return _this.handleLifecycle("onEntering", 0, args);
          };
          _this.handleEntered = function() {
            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              args[_key4] = arguments[_key4];
            }
            return _this.handleLifecycle("onEntered", 0, args);
          };
          _this.handleExit = function() {
            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
              args[_key5] = arguments[_key5];
            }
            return _this.handleLifecycle("onExit", 1, args);
          };
          _this.handleExiting = function() {
            for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
              args[_key6] = arguments[_key6];
            }
            return _this.handleLifecycle("onExiting", 1, args);
          };
          _this.handleExited = function() {
            for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
              args[_key7] = arguments[_key7];
            }
            return _this.handleLifecycle("onExited", 1, args);
          };
          return _this;
        }
        var _proto = ReplaceTransition2.prototype;
        _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
          var _child$props;
          var children = this.props.children;
          var child = _react.default.Children.toArray(children)[idx];
          if (child.props[handler])
            (_child$props = child.props)[handler].apply(_child$props, originalArgs);
          if (this.props[handler]) {
            var maybeNode = child.props.nodeRef ? void 0 : _reactDom.default.findDOMNode(this);
            this.props[handler](maybeNode);
          }
        };
        _proto.render = function render() {
          var _this$props = this.props, children = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose2(_this$props, ["children", "in"]);
          var _React$Children$toArr = _react.default.Children.toArray(children), first = _React$Children$toArr[0], second = _React$Children$toArr[1];
          delete props.onEnter;
          delete props.onEntering;
          delete props.onEntered;
          delete props.onExit;
          delete props.onExiting;
          delete props.onExited;
          return /* @__PURE__ */ _react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
            key: "first",
            onEnter: this.handleEnter,
            onEntering: this.handleEntering,
            onEntered: this.handleEntered
          }) : _react.default.cloneElement(second, {
            key: "second",
            onEnter: this.handleExit,
            onEntering: this.handleExiting,
            onEntered: this.handleExited
          }));
        };
        return ReplaceTransition2;
      }(_react.default.Component);
      ReplaceTransition.propTypes = true ? {
        in: _propTypes.default.bool.isRequired,
        children: function children(props, propName) {
          if (_react.default.Children.count(props[propName]) !== 2)
            return new Error('"' + propName + '" must be exactly two transition components.');
          return null;
        }
      } : {};
      var _default = ReplaceTransition;
      exports.default = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/react-transition-group/cjs/SwitchTransition.js
  var require_SwitchTransition = __commonJS({
    "node_modules/react-transition-group/cjs/SwitchTransition.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.default = exports.modes = void 0;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _Transition = require_Transition();
      var _TransitionGroupContext = _interopRequireDefault(require_TransitionGroupContext());
      var _leaveRenders;
      var _enterRenders;
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      function areChildrenDifferent(oldChildren, newChildren) {
        if (oldChildren === newChildren)
          return false;
        if (_react.default.isValidElement(oldChildren) && _react.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
          return false;
        }
        return true;
      }
      var modes = {
        out: "out-in",
        in: "in-out"
      };
      exports.modes = modes;
      var callHook = function callHook2(element, name, cb) {
        return function() {
          var _element$props;
          element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
          cb();
        };
      };
      var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref4) {
        var current = _ref4.current, changeState = _ref4.changeState;
        return _react.default.cloneElement(current, {
          in: false,
          onExited: callHook(current, "onExited", function() {
            changeState(_Transition.ENTERING, null);
          })
        });
      }, _leaveRenders[modes.in] = function(_ref23) {
        var current = _ref23.current, changeState = _ref23.changeState, children = _ref23.children;
        return [current, _react.default.cloneElement(children, {
          in: true,
          onEntered: callHook(children, "onEntered", function() {
            changeState(_Transition.ENTERING);
          })
        })];
      }, _leaveRenders);
      var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref32) {
        var children = _ref32.children, changeState = _ref32.changeState;
        return _react.default.cloneElement(children, {
          in: true,
          onEntered: callHook(children, "onEntered", function() {
            changeState(_Transition.ENTERED, _react.default.cloneElement(children, {
              in: true
            }));
          })
        });
      }, _enterRenders[modes.in] = function(_ref4) {
        var current = _ref4.current, children = _ref4.children, changeState = _ref4.changeState;
        return [_react.default.cloneElement(current, {
          in: false,
          onExited: callHook(current, "onExited", function() {
            changeState(_Transition.ENTERED, _react.default.cloneElement(children, {
              in: true
            }));
          })
        }), _react.default.cloneElement(children, {
          in: true
        })];
      }, _enterRenders);
      var SwitchTransition = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose(SwitchTransition2, _React$Component);
        function SwitchTransition2() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
          _this.state = {
            status: _Transition.ENTERED,
            current: null
          };
          _this.appeared = false;
          _this.changeState = function(status, current) {
            if (current === void 0) {
              current = _this.state.current;
            }
            _this.setState({
              status,
              current
            });
          };
          return _this;
        }
        var _proto = SwitchTransition2.prototype;
        _proto.componentDidMount = function componentDidMount() {
          this.appeared = true;
        };
        SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
          if (props.children == null) {
            return {
              current: null
            };
          }
          if (state.status === _Transition.ENTERING && props.mode === modes.in) {
            return {
              status: _Transition.ENTERING
            };
          }
          if (state.current && areChildrenDifferent(state.current, props.children)) {
            return {
              status: _Transition.EXITING
            };
          }
          return {
            current: _react.default.cloneElement(props.children, {
              in: true
            })
          };
        };
        _proto.render = function render() {
          var _this$props = this.props, children = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;
          var data = {
            children,
            current,
            changeState: this.changeState,
            status
          };
          var component;
          switch (status) {
            case _Transition.ENTERING:
              component = enterRenders[mode](data);
              break;
            case _Transition.EXITING:
              component = leaveRenders[mode](data);
              break;
            case _Transition.ENTERED:
              component = current;
          }
          return /* @__PURE__ */ _react.default.createElement(_TransitionGroupContext.default.Provider, {
            value: {
              isMounting: !this.appeared
            }
          }, component);
        };
        return SwitchTransition2;
      }(_react.default.Component);
      SwitchTransition.propTypes = true ? {
        mode: _propTypes.default.oneOf([modes.in, modes.out]),
        children: _propTypes.default.oneOfType([_propTypes.default.element.isRequired])
      } : {};
      SwitchTransition.defaultProps = {
        mode: modes.out
      };
      var _default = SwitchTransition;
      exports.default = _default;
    }
  });

  // node_modules/react-transition-group/cjs/index.js
  var require_cjs = __commonJS({
    "node_modules/react-transition-group/cjs/index.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.config = exports.Transition = exports.TransitionGroup = exports.SwitchTransition = exports.ReplaceTransition = exports.CSSTransition = void 0;
      var _CSSTransition = _interopRequireDefault(require_CSSTransition());
      exports.CSSTransition = _CSSTransition.default;
      var _ReplaceTransition = _interopRequireDefault(require_ReplaceTransition());
      exports.ReplaceTransition = _ReplaceTransition.default;
      var _SwitchTransition = _interopRequireDefault(require_SwitchTransition());
      exports.SwitchTransition = _SwitchTransition.default;
      var _TransitionGroup = _interopRequireDefault(require_TransitionGroup());
      exports.TransitionGroup = _TransitionGroup.default;
      var _Transition = _interopRequireDefault(require_Transition());
      exports.Transition = _Transition.default;
      var _config = _interopRequireDefault(require_config());
      exports.config = _config.default;
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
    }
  });

  // node_modules/@material-ui/core/ButtonBase/Ripple.js
  var require_Ripple = __commonJS({
    "node_modules/@material-ui/core/ButtonBase/Ripple.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback());
      var useEnhancedEffect8 = typeof window === "undefined" ? React69.useEffect : React69.useLayoutEffect;
      function Ripple2(props) {
        var classes = props.classes, _props$pulsate = props.pulsate, pulsate = _props$pulsate === void 0 ? false : _props$pulsate, rippleX = props.rippleX, rippleY = props.rippleY, rippleSize = props.rippleSize, inProp = props.in, _props$onExited = props.onExited, onExited = _props$onExited === void 0 ? function() {
        } : _props$onExited, timeout = props.timeout;
        var _React$useState = React69.useState(false), leaving = _React$useState[0], setLeaving = _React$useState[1];
        var rippleClassName = (0, _clsx.default)(classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
        var rippleStyles = {
          width: rippleSize,
          height: rippleSize,
          top: -(rippleSize / 2) + rippleY,
          left: -(rippleSize / 2) + rippleX
        };
        var childClassName = (0, _clsx.default)(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
        var handleExited = (0, _useEventCallback.default)(onExited);
        useEnhancedEffect8(function() {
          if (!inProp) {
            setLeaving(true);
            var timeoutId = setTimeout(handleExited, timeout);
            return function() {
              clearTimeout(timeoutId);
            };
          }
          return void 0;
        }, [handleExited, inProp, timeout]);
        return /* @__PURE__ */ React69.createElement("span", {
          className: rippleClassName,
          style: rippleStyles
        }, /* @__PURE__ */ React69.createElement("span", {
          className: childClassName
        }));
      }
      true ? Ripple2.propTypes = {
        classes: _propTypes.default.object.isRequired,
        in: _propTypes.default.bool,
        onExited: _propTypes.default.func,
        pulsate: _propTypes.default.bool,
        rippleSize: _propTypes.default.number,
        rippleX: _propTypes.default.number,
        rippleY: _propTypes.default.number,
        timeout: _propTypes.default.number.isRequired
      } : void 0;
      var _default = Ripple2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/ButtonBase/TouchRipple.js
  var require_TouchRipple = __commonJS({
    "node_modules/@material-ui/core/ButtonBase/TouchRipple.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = exports.DELAY_RIPPLE = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _reactTransitionGroup = require_cjs();
      var _clsx = _interopRequireDefault(require_clsx());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _Ripple = _interopRequireDefault(require_Ripple());
      var DURATION2 = 550;
      var DELAY_RIPPLE2 = 80;
      exports.DELAY_RIPPLE = DELAY_RIPPLE2;
      var styles61 = function styles62(theme2) {
        return {
          root: {
            overflow: "hidden",
            pointerEvents: "none",
            position: "absolute",
            zIndex: 0,
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
            borderRadius: "inherit"
          },
          ripple: {
            opacity: 0,
            position: "absolute"
          },
          rippleVisible: {
            opacity: 0.3,
            transform: "scale(1)",
            animation: "$enter ".concat(DURATION2, "ms ").concat(theme2.transitions.easing.easeInOut)
          },
          ripplePulsate: {
            animationDuration: "".concat(theme2.transitions.duration.shorter, "ms")
          },
          child: {
            opacity: 1,
            display: "block",
            width: "100%",
            height: "100%",
            borderRadius: "50%",
            backgroundColor: "currentColor"
          },
          childLeaving: {
            opacity: 0,
            animation: "$exit ".concat(DURATION2, "ms ").concat(theme2.transitions.easing.easeInOut)
          },
          childPulsate: {
            position: "absolute",
            left: 0,
            top: 0,
            animation: "$pulsate 2500ms ".concat(theme2.transitions.easing.easeInOut, " 200ms infinite")
          },
          "@keyframes enter": {
            "0%": {
              transform: "scale(0)",
              opacity: 0.1
            },
            "100%": {
              transform: "scale(1)",
              opacity: 0.3
            }
          },
          "@keyframes exit": {
            "0%": {
              opacity: 1
            },
            "100%": {
              opacity: 0
            }
          },
          "@keyframes pulsate": {
            "0%": {
              transform: "scale(1)"
            },
            "50%": {
              transform: "scale(0.92)"
            },
            "100%": {
              transform: "scale(1)"
            }
          }
        };
      };
      exports.styles = styles61;
      var TouchRipple3 = /* @__PURE__ */ React69.forwardRef(function TouchRipple4(props, ref) {
        var _props$center = props.center, centerProp = _props$center === void 0 ? false : _props$center, classes = props.classes, className = props.className, other = (0, _objectWithoutProperties2.default)(props, ["center", "classes", "className"]);
        var _React$useState = React69.useState([]), ripples = _React$useState[0], setRipples = _React$useState[1];
        var nextKey = React69.useRef(0);
        var rippleCallback = React69.useRef(null);
        React69.useEffect(function() {
          if (rippleCallback.current) {
            rippleCallback.current();
            rippleCallback.current = null;
          }
        }, [ripples]);
        var ignoringMouseDown = React69.useRef(false);
        var startTimer = React69.useRef(null);
        var startTimerCommit = React69.useRef(null);
        var container = React69.useRef(null);
        React69.useEffect(function() {
          return function() {
            clearTimeout(startTimer.current);
          };
        }, []);
        var startCommit = React69.useCallback(function(params) {
          var pulsate2 = params.pulsate, rippleX = params.rippleX, rippleY = params.rippleY, rippleSize = params.rippleSize, cb = params.cb;
          setRipples(function(oldRipples) {
            return [].concat((0, _toConsumableArray2.default)(oldRipples), [/* @__PURE__ */ React69.createElement(_Ripple.default, {
              key: nextKey.current,
              classes,
              timeout: DURATION2,
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize
            })]);
          });
          nextKey.current += 1;
          rippleCallback.current = cb;
        }, [classes]);
        var start = React69.useCallback(function() {
          var event2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var cb = arguments.length > 2 ? arguments[2] : void 0;
          var _options$pulsate = options.pulsate, pulsate2 = _options$pulsate === void 0 ? false : _options$pulsate, _options$center = options.center, center = _options$center === void 0 ? centerProp || options.pulsate : _options$center, _options$fakeElement = options.fakeElement, fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;
          if (event2.type === "mousedown" && ignoringMouseDown.current) {
            ignoringMouseDown.current = false;
            return;
          }
          if (event2.type === "touchstart") {
            ignoringMouseDown.current = true;
          }
          var element = fakeElement ? null : container.current;
          var rect = element ? element.getBoundingClientRect() : {
            width: 0,
            height: 0,
            left: 0,
            top: 0
          };
          var rippleX;
          var rippleY;
          var rippleSize;
          if (center || event2.clientX === 0 && event2.clientY === 0 || !event2.clientX && !event2.touches) {
            rippleX = Math.round(rect.width / 2);
            rippleY = Math.round(rect.height / 2);
          } else {
            var _ref4 = event2.touches ? event2.touches[0] : event2, clientX = _ref4.clientX, clientY = _ref4.clientY;
            rippleX = Math.round(clientX - rect.left);
            rippleY = Math.round(clientY - rect.top);
          }
          if (center) {
            rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3);
            if (rippleSize % 2 === 0) {
              rippleSize += 1;
            }
          } else {
            var sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
            var sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
            rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
          }
          if (event2.touches) {
            if (startTimerCommit.current === null) {
              startTimerCommit.current = function() {
                startCommit({
                  pulsate: pulsate2,
                  rippleX,
                  rippleY,
                  rippleSize,
                  cb
                });
              };
              startTimer.current = setTimeout(function() {
                if (startTimerCommit.current) {
                  startTimerCommit.current();
                  startTimerCommit.current = null;
                }
              }, DELAY_RIPPLE2);
            }
          } else {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          }
        }, [centerProp, startCommit]);
        var pulsate = React69.useCallback(function() {
          start({}, {
            pulsate: true
          });
        }, [start]);
        var stop = React69.useCallback(function(event2, cb) {
          clearTimeout(startTimer.current);
          if (event2.type === "touchend" && startTimerCommit.current) {
            event2.persist();
            startTimerCommit.current();
            startTimerCommit.current = null;
            startTimer.current = setTimeout(function() {
              stop(event2, cb);
            });
            return;
          }
          startTimerCommit.current = null;
          setRipples(function(oldRipples) {
            if (oldRipples.length > 0) {
              return oldRipples.slice(1);
            }
            return oldRipples;
          });
          rippleCallback.current = cb;
        }, []);
        React69.useImperativeHandle(ref, function() {
          return {
            pulsate,
            start,
            stop
          };
        }, [pulsate, start, stop]);
        return /* @__PURE__ */ React69.createElement("span", (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, className),
          ref: container
        }, other), /* @__PURE__ */ React69.createElement(_reactTransitionGroup.TransitionGroup, {
          component: null,
          exit: true
        }, ripples));
      });
      true ? TouchRipple3.propTypes = {
        center: _propTypes.default.bool,
        classes: _propTypes.default.object.isRequired,
        className: _propTypes.default.string
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        flip: false,
        name: "MuiTouchRipple"
      })(/* @__PURE__ */ React69.memo(TouchRipple3));
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/ButtonBase/ButtonBase.js
  var require_ButtonBase = __commonJS({
    "node_modules/@material-ui/core/ButtonBase/ButtonBase.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var ReactDOM11 = _interopRequireWildcard(require_react_dom());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _useForkRef = _interopRequireDefault(require_useForkRef());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback());
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _useIsFocusVisible2 = _interopRequireDefault(require_useIsFocusVisible());
      var _TouchRipple = _interopRequireDefault(require_TouchRipple());
      var styles61 = {
        root: {
          display: "inline-flex",
          alignItems: "center",
          justifyContent: "center",
          position: "relative",
          WebkitTapHighlightColor: "transparent",
          backgroundColor: "transparent",
          outline: 0,
          border: 0,
          margin: 0,
          borderRadius: 0,
          padding: 0,
          cursor: "pointer",
          userSelect: "none",
          verticalAlign: "middle",
          "-moz-appearance": "none",
          "-webkit-appearance": "none",
          textDecoration: "none",
          color: "inherit",
          "&::-moz-focus-inner": {
            borderStyle: "none"
          },
          "&$disabled": {
            pointerEvents: "none",
            cursor: "default"
          },
          "@media print": {
            colorAdjust: "exact"
          }
        },
        disabled: {},
        focusVisible: {}
      };
      exports.styles = styles61;
      var ButtonBase3 = /* @__PURE__ */ React69.forwardRef(function ButtonBase4(props, ref) {
        var action = props.action, buttonRefProp = props.buttonRef, _props$centerRipple = props.centerRipple, centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple, children = props.children, classes = props.classes, className = props.className, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableRipple = props.disableRipple, disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple, _props$disableTouchRi = props.disableTouchRipple, disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi, _props$focusRipple = props.focusRipple, focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple, focusVisibleClassName = props.focusVisibleClassName, onBlur = props.onBlur, onClick = props.onClick, onFocus = props.onFocus, onFocusVisible = props.onFocusVisible, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, onMouseDown = props.onMouseDown, onMouseLeave = props.onMouseLeave, onMouseUp = props.onMouseUp, onTouchEnd = props.onTouchEnd, onTouchMove = props.onTouchMove, onTouchStart = props.onTouchStart, onDragLeave = props.onDragLeave, _props$tabIndex = props.tabIndex, tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex, TouchRippleProps = props.TouchRippleProps, _props$type = props.type, type = _props$type === void 0 ? "button" : _props$type, other = (0, _objectWithoutProperties2.default)(props, ["action", "buttonRef", "centerRipple", "children", "classes", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "onDragLeave", "tabIndex", "TouchRippleProps", "type"]);
        var buttonRef = React69.useRef(null);
        function getButtonNode() {
          return ReactDOM11.findDOMNode(buttonRef.current);
        }
        var rippleRef = React69.useRef(null);
        var _React$useState = React69.useState(false), focusVisible = _React$useState[0], setFocusVisible = _React$useState[1];
        if (disabled && focusVisible) {
          setFocusVisible(false);
        }
        var _useIsFocusVisible = (0, _useIsFocusVisible2.default)(), isFocusVisible2 = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
        React69.useImperativeHandle(action, function() {
          return {
            focusVisible: function focusVisible2() {
              setFocusVisible(true);
              buttonRef.current.focus();
            }
          };
        }, []);
        React69.useEffect(function() {
          if (focusVisible && focusRipple && !disableRipple) {
            rippleRef.current.pulsate();
          }
        }, [disableRipple, focusRipple, focusVisible]);
        function useRippleHandler(rippleAction, eventCallback) {
          var skipRippleAction = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : disableTouchRipple;
          return (0, _useEventCallback.default)(function(event2) {
            if (eventCallback) {
              eventCallback(event2);
            }
            var ignore = skipRippleAction;
            if (!ignore && rippleRef.current) {
              rippleRef.current[rippleAction](event2);
            }
            return true;
          });
        }
        var handleMouseDown = useRippleHandler("start", onMouseDown);
        var handleDragLeave = useRippleHandler("stop", onDragLeave);
        var handleMouseUp = useRippleHandler("stop", onMouseUp);
        var handleMouseLeave = useRippleHandler("stop", function(event2) {
          if (focusVisible) {
            event2.preventDefault();
          }
          if (onMouseLeave) {
            onMouseLeave(event2);
          }
        });
        var handleTouchStart = useRippleHandler("start", onTouchStart);
        var handleTouchEnd = useRippleHandler("stop", onTouchEnd);
        var handleTouchMove = useRippleHandler("stop", onTouchMove);
        var handleBlur = useRippleHandler("stop", function(event2) {
          if (focusVisible) {
            onBlurVisible(event2);
            setFocusVisible(false);
          }
          if (onBlur) {
            onBlur(event2);
          }
        }, false);
        var handleFocus = (0, _useEventCallback.default)(function(event2) {
          if (!buttonRef.current) {
            buttonRef.current = event2.currentTarget;
          }
          if (isFocusVisible2(event2)) {
            setFocusVisible(true);
            if (onFocusVisible) {
              onFocusVisible(event2);
            }
          }
          if (onFocus) {
            onFocus(event2);
          }
        });
        var isNonNativeButton = function isNonNativeButton2() {
          var button = getButtonNode();
          return component && component !== "button" && !(button.tagName === "A" && button.href);
        };
        var keydownRef = React69.useRef(false);
        var handleKeyDown2 = (0, _useEventCallback.default)(function(event2) {
          if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event2.key === " ") {
            keydownRef.current = true;
            event2.persist();
            rippleRef.current.stop(event2, function() {
              rippleRef.current.start(event2);
            });
          }
          if (event2.target === event2.currentTarget && isNonNativeButton() && event2.key === " ") {
            event2.preventDefault();
          }
          if (onKeyDown) {
            onKeyDown(event2);
          }
          if (event2.target === event2.currentTarget && isNonNativeButton() && event2.key === "Enter" && !disabled) {
            event2.preventDefault();
            if (onClick) {
              onClick(event2);
            }
          }
        });
        var handleKeyUp = (0, _useEventCallback.default)(function(event2) {
          if (focusRipple && event2.key === " " && rippleRef.current && focusVisible && !event2.defaultPrevented) {
            keydownRef.current = false;
            event2.persist();
            rippleRef.current.stop(event2, function() {
              rippleRef.current.pulsate(event2);
            });
          }
          if (onKeyUp) {
            onKeyUp(event2);
          }
          if (onClick && event2.target === event2.currentTarget && isNonNativeButton() && event2.key === " " && !event2.defaultPrevented) {
            onClick(event2);
          }
        });
        var ComponentProp = component;
        if (ComponentProp === "button" && other.href) {
          ComponentProp = "a";
        }
        var buttonProps = {};
        if (ComponentProp === "button") {
          buttonProps.type = type;
          buttonProps.disabled = disabled;
        } else {
          if (ComponentProp !== "a" || !other.href) {
            buttonProps.role = "button";
          }
          buttonProps["aria-disabled"] = disabled;
        }
        var handleUserRef = (0, _useForkRef.default)(buttonRefProp, ref);
        var handleOwnRef = (0, _useForkRef.default)(focusVisibleRef, buttonRef);
        var handleRef = (0, _useForkRef.default)(handleUserRef, handleOwnRef);
        var _React$useState2 = React69.useState(false), mountedState = _React$useState2[0], setMountedState = _React$useState2[1];
        React69.useEffect(function() {
          setMountedState(true);
        }, []);
        var enableTouchRipple = mountedState && !disableRipple && !disabled;
        if (true) {
          React69.useEffect(function() {
            if (enableTouchRipple && !rippleRef.current) {
              console.error(["Material-UI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
            }
          }, [enableTouchRipple]);
        }
        return /* @__PURE__ */ React69.createElement(ComponentProp, (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, className, focusVisible && [classes.focusVisible, focusVisibleClassName], disabled && classes.disabled),
          onBlur: handleBlur,
          onClick,
          onFocus: handleFocus,
          onKeyDown: handleKeyDown2,
          onKeyUp: handleKeyUp,
          onMouseDown: handleMouseDown,
          onMouseLeave: handleMouseLeave,
          onMouseUp: handleMouseUp,
          onDragLeave: handleDragLeave,
          onTouchEnd: handleTouchEnd,
          onTouchMove: handleTouchMove,
          onTouchStart: handleTouchStart,
          ref: handleRef,
          tabIndex: disabled ? -1 : tabIndex
        }, buttonProps, other), children, enableTouchRipple ? /* @__PURE__ */ React69.createElement(_TouchRipple.default, (0, _extends2.default)({
          ref: rippleRef,
          center: centerRipple
        }, TouchRippleProps)) : null);
      });
      true ? ButtonBase3.propTypes = {
        action: _utils.refType,
        buttonRef: (0, _deprecatedPropType.default)(_utils.refType, "Use `ref` instead."),
        centerRipple: _propTypes.default.bool,
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        component: _utils.elementTypeAcceptingRef,
        disabled: _propTypes.default.bool,
        disableRipple: _propTypes.default.bool,
        disableTouchRipple: _propTypes.default.bool,
        focusRipple: _propTypes.default.bool,
        focusVisibleClassName: _propTypes.default.string,
        href: _propTypes.default.string,
        onBlur: _propTypes.default.func,
        onClick: _propTypes.default.func,
        onDragLeave: _propTypes.default.func,
        onFocus: _propTypes.default.func,
        onFocusVisible: _propTypes.default.func,
        onKeyDown: _propTypes.default.func,
        onKeyUp: _propTypes.default.func,
        onMouseDown: _propTypes.default.func,
        onMouseLeave: _propTypes.default.func,
        onMouseUp: _propTypes.default.func,
        onTouchEnd: _propTypes.default.func,
        onTouchMove: _propTypes.default.func,
        onTouchStart: _propTypes.default.func,
        tabIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        TouchRippleProps: _propTypes.default.object,
        type: _propTypes.default.oneOfType([_propTypes.default.oneOf(["button", "reset", "submit"]), _propTypes.default.string])
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiButtonBase"
      })(ButtonBase3);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/ButtonBase/index.js
  var require_ButtonBase2 = __commonJS({
    "node_modules/@material-ui/core/ButtonBase/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _ButtonBase.default;
        }
      });
      var _ButtonBase = _interopRequireDefault(require_ButtonBase());
    }
  });

  // node_modules/@material-ui/core/utils/capitalize.js
  var require_capitalize = __commonJS({
    "node_modules/@material-ui/core/utils/capitalize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = capitalize2;
      var _utils = require_utils();
      function capitalize2(string) {
        if (typeof string !== "string") {
          throw new Error(true ? "Material-UI: capitalize(string) expects a string argument." : (0, _utils.formatMuiErrorMessage)(7));
        }
        return string.charAt(0).toUpperCase() + string.slice(1);
      }
    }
  });

  // node_modules/@material-ui/core/Button/Button.js
  var require_Button = __commonJS({
    "node_modules/@material-ui/core/Button/Button.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _extends2 = _interopRequireDefault(require_extends());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _colorManipulator = require_colorManipulator();
      var _ButtonBase = _interopRequireDefault(require_ButtonBase2());
      var _capitalize = _interopRequireDefault(require_capitalize());
      var styles61 = function styles62(theme2) {
        return {
          root: (0, _extends2.default)({}, theme2.typography.button, {
            boxSizing: "border-box",
            minWidth: 64,
            padding: "6px 16px",
            borderRadius: theme2.shape.borderRadius,
            color: theme2.palette.text.primary,
            transition: theme2.transitions.create(["background-color", "box-shadow", "border"], {
              duration: theme2.transitions.duration.short
            }),
            "&:hover": {
              textDecoration: "none",
              backgroundColor: (0, _colorManipulator.alpha)(theme2.palette.text.primary, theme2.palette.action.hoverOpacity),
              "@media (hover: none)": {
                backgroundColor: "transparent"
              },
              "&$disabled": {
                backgroundColor: "transparent"
              }
            },
            "&$disabled": {
              color: theme2.palette.action.disabled
            }
          }),
          label: {
            width: "100%",
            display: "inherit",
            alignItems: "inherit",
            justifyContent: "inherit"
          },
          text: {
            padding: "6px 8px"
          },
          textPrimary: {
            color: theme2.palette.primary.main,
            "&:hover": {
              backgroundColor: (0, _colorManipulator.alpha)(theme2.palette.primary.main, theme2.palette.action.hoverOpacity),
              "@media (hover: none)": {
                backgroundColor: "transparent"
              }
            }
          },
          textSecondary: {
            color: theme2.palette.secondary.main,
            "&:hover": {
              backgroundColor: (0, _colorManipulator.alpha)(theme2.palette.secondary.main, theme2.palette.action.hoverOpacity),
              "@media (hover: none)": {
                backgroundColor: "transparent"
              }
            }
          },
          outlined: {
            padding: "5px 15px",
            border: "1px solid ".concat(theme2.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"),
            "&$disabled": {
              border: "1px solid ".concat(theme2.palette.action.disabledBackground)
            }
          },
          outlinedPrimary: {
            color: theme2.palette.primary.main,
            border: "1px solid ".concat((0, _colorManipulator.alpha)(theme2.palette.primary.main, 0.5)),
            "&:hover": {
              border: "1px solid ".concat(theme2.palette.primary.main),
              backgroundColor: (0, _colorManipulator.alpha)(theme2.palette.primary.main, theme2.palette.action.hoverOpacity),
              "@media (hover: none)": {
                backgroundColor: "transparent"
              }
            }
          },
          outlinedSecondary: {
            color: theme2.palette.secondary.main,
            border: "1px solid ".concat((0, _colorManipulator.alpha)(theme2.palette.secondary.main, 0.5)),
            "&:hover": {
              border: "1px solid ".concat(theme2.palette.secondary.main),
              backgroundColor: (0, _colorManipulator.alpha)(theme2.palette.secondary.main, theme2.palette.action.hoverOpacity),
              "@media (hover: none)": {
                backgroundColor: "transparent"
              }
            },
            "&$disabled": {
              border: "1px solid ".concat(theme2.palette.action.disabled)
            }
          },
          contained: {
            color: theme2.palette.getContrastText(theme2.palette.grey[300]),
            backgroundColor: theme2.palette.grey[300],
            boxShadow: theme2.shadows[2],
            "&:hover": {
              backgroundColor: theme2.palette.grey.A100,
              boxShadow: theme2.shadows[4],
              "@media (hover: none)": {
                boxShadow: theme2.shadows[2],
                backgroundColor: theme2.palette.grey[300]
              },
              "&$disabled": {
                backgroundColor: theme2.palette.action.disabledBackground
              }
            },
            "&$focusVisible": {
              boxShadow: theme2.shadows[6]
            },
            "&:active": {
              boxShadow: theme2.shadows[8]
            },
            "&$disabled": {
              color: theme2.palette.action.disabled,
              boxShadow: theme2.shadows[0],
              backgroundColor: theme2.palette.action.disabledBackground
            }
          },
          containedPrimary: {
            color: theme2.palette.primary.contrastText,
            backgroundColor: theme2.palette.primary.main,
            "&:hover": {
              backgroundColor: theme2.palette.primary.dark,
              "@media (hover: none)": {
                backgroundColor: theme2.palette.primary.main
              }
            }
          },
          containedSecondary: {
            color: theme2.palette.secondary.contrastText,
            backgroundColor: theme2.palette.secondary.main,
            "&:hover": {
              backgroundColor: theme2.palette.secondary.dark,
              "@media (hover: none)": {
                backgroundColor: theme2.palette.secondary.main
              }
            }
          },
          disableElevation: {
            boxShadow: "none",
            "&:hover": {
              boxShadow: "none"
            },
            "&$focusVisible": {
              boxShadow: "none"
            },
            "&:active": {
              boxShadow: "none"
            },
            "&$disabled": {
              boxShadow: "none"
            }
          },
          focusVisible: {},
          disabled: {},
          colorInherit: {
            color: "inherit",
            borderColor: "currentColor"
          },
          textSizeSmall: {
            padding: "4px 5px",
            fontSize: theme2.typography.pxToRem(13)
          },
          textSizeLarge: {
            padding: "8px 11px",
            fontSize: theme2.typography.pxToRem(15)
          },
          outlinedSizeSmall: {
            padding: "3px 9px",
            fontSize: theme2.typography.pxToRem(13)
          },
          outlinedSizeLarge: {
            padding: "7px 21px",
            fontSize: theme2.typography.pxToRem(15)
          },
          containedSizeSmall: {
            padding: "4px 10px",
            fontSize: theme2.typography.pxToRem(13)
          },
          containedSizeLarge: {
            padding: "8px 22px",
            fontSize: theme2.typography.pxToRem(15)
          },
          sizeSmall: {},
          sizeLarge: {},
          fullWidth: {
            width: "100%"
          },
          startIcon: {
            display: "inherit",
            marginRight: 8,
            marginLeft: -4,
            "&$iconSizeSmall": {
              marginLeft: -2
            }
          },
          endIcon: {
            display: "inherit",
            marginRight: -4,
            marginLeft: 8,
            "&$iconSizeSmall": {
              marginRight: -2
            }
          },
          iconSizeSmall: {
            "& > *:first-child": {
              fontSize: 18
            }
          },
          iconSizeMedium: {
            "& > *:first-child": {
              fontSize: 20
            }
          },
          iconSizeLarge: {
            "& > *:first-child": {
              fontSize: 22
            }
          }
        };
      };
      exports.styles = styles61;
      var Button8 = /* @__PURE__ */ React69.forwardRef(function Button9(props, ref) {
        var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableElevati = props.disableElevation, disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, endIconProp = props.endIcon, focusVisibleClassName = props.focusVisibleClassName, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, startIconProp = props.startIcon, _props$type = props.type, type = _props$type === void 0 ? "button" : _props$type, _props$variant = props.variant, variant = _props$variant === void 0 ? "text" : _props$variant, other = (0, _objectWithoutProperties2.default)(props, ["children", "classes", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"]);
        var startIcon = startIconProp && /* @__PURE__ */ React69.createElement("span", {
          className: (0, _clsx.default)(classes.startIcon, classes["iconSize".concat((0, _capitalize.default)(size))])
        }, startIconProp);
        var endIcon = endIconProp && /* @__PURE__ */ React69.createElement("span", {
          className: (0, _clsx.default)(classes.endIcon, classes["iconSize".concat((0, _capitalize.default)(size))])
        }, endIconProp);
        return /* @__PURE__ */ React69.createElement(_ButtonBase.default, (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, classes[variant], className, color === "inherit" ? classes.colorInherit : color !== "default" && classes["".concat(variant).concat((0, _capitalize.default)(color))], size !== "medium" && [classes["".concat(variant, "Size").concat((0, _capitalize.default)(size))], classes["size".concat((0, _capitalize.default)(size))]], disableElevation && classes.disableElevation, disabled && classes.disabled, fullWidth && classes.fullWidth),
          component,
          disabled,
          focusRipple: !disableFocusRipple,
          focusVisibleClassName: (0, _clsx.default)(classes.focusVisible, focusVisibleClassName),
          ref,
          type
        }, other), /* @__PURE__ */ React69.createElement("span", {
          className: classes.label
        }, startIcon, children, endIcon));
      });
      true ? Button8.propTypes = {
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        color: _propTypes.default.oneOf(["default", "inherit", "primary", "secondary"]),
        component: _propTypes.default.elementType,
        disabled: _propTypes.default.bool,
        disableElevation: _propTypes.default.bool,
        disableFocusRipple: _propTypes.default.bool,
        disableRipple: _propTypes.default.bool,
        endIcon: _propTypes.default.node,
        focusVisibleClassName: _propTypes.default.string,
        fullWidth: _propTypes.default.bool,
        href: _propTypes.default.string,
        size: _propTypes.default.oneOf(["large", "medium", "small"]),
        startIcon: _propTypes.default.node,
        type: _propTypes.default.oneOfType([_propTypes.default.oneOf(["button", "reset", "submit"]), _propTypes.default.string]),
        variant: _propTypes.default.oneOf(["contained", "outlined", "text"])
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiButton"
      })(Button8);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Button/index.js
  var require_Button2 = __commonJS({
    "node_modules/@material-ui/core/Button/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _Button.default;
        }
      });
      var _Button = _interopRequireDefault(require_Button());
    }
  });

  // node_modules/@material-ui/core/utils/ownerDocument.js
  var require_ownerDocument = __commonJS({
    "node_modules/@material-ui/core/utils/ownerDocument.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = ownerDocument2;
      function ownerDocument2(node) {
        return node && node.ownerDocument || document;
      }
    }
  });

  // node_modules/@material-ui/core/Portal/Portal.js
  var require_Portal = __commonJS({
    "node_modules/@material-ui/core/Portal/Portal.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React69 = _interopRequireWildcard(require_react());
      var ReactDOM11 = _interopRequireWildcard(require_react_dom());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType());
      var _setRef = _interopRequireDefault(require_setRef());
      var _useForkRef = _interopRequireDefault(require_useForkRef());
      function getContainer3(container) {
        container = typeof container === "function" ? container() : container;
        return ReactDOM11.findDOMNode(container);
      }
      var useEnhancedEffect8 = typeof window !== "undefined" ? React69.useLayoutEffect : React69.useEffect;
      var Portal3 = /* @__PURE__ */ React69.forwardRef(function Portal4(props, ref) {
        var children = props.children, container = props.container, _props$disablePortal = props.disablePortal, disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal, onRendered = props.onRendered;
        var _React$useState = React69.useState(null), mountNode = _React$useState[0], setMountNode = _React$useState[1];
        var handleRef = (0, _useForkRef.default)(/* @__PURE__ */ React69.isValidElement(children) ? children.ref : null, ref);
        useEnhancedEffect8(function() {
          if (!disablePortal) {
            setMountNode(getContainer3(container) || document.body);
          }
        }, [container, disablePortal]);
        useEnhancedEffect8(function() {
          if (mountNode && !disablePortal) {
            (0, _setRef.default)(ref, mountNode);
            return function() {
              (0, _setRef.default)(ref, null);
            };
          }
          return void 0;
        }, [ref, mountNode, disablePortal]);
        useEnhancedEffect8(function() {
          if (onRendered && (mountNode || disablePortal)) {
            onRendered();
          }
        }, [onRendered, mountNode, disablePortal]);
        if (disablePortal) {
          if (/* @__PURE__ */ React69.isValidElement(children)) {
            return /* @__PURE__ */ React69.cloneElement(children, {
              ref: handleRef
            });
          }
          return children;
        }
        return mountNode ? /* @__PURE__ */ ReactDOM11.createPortal(children, mountNode) : mountNode;
      });
      true ? Portal3.propTypes = {
        children: _propTypes.default.node,
        container: _propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.instanceOf(React69.Component), _propTypes.default.func]),
        disablePortal: _propTypes.default.bool,
        onRendered: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the ref instead.")
      } : void 0;
      if (true) {
        Portal3["propTypes"] = (0, _utils.exactProp)(Portal3.propTypes);
      }
      var _default = Portal3;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Portal/index.js
  var require_Portal2 = __commonJS({
    "node_modules/@material-ui/core/Portal/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _Portal.default;
        }
      });
      var _Portal = _interopRequireDefault(require_Portal());
    }
  });

  // node_modules/@material-ui/core/utils/createChainedFunction.js
  var require_createChainedFunction = __commonJS({
    "node_modules/@material-ui/core/utils/createChainedFunction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createChainedFunction2;
      function createChainedFunction2() {
        for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
          funcs[_key] = arguments[_key];
        }
        return funcs.reduce(function(acc, func) {
          if (func == null) {
            return acc;
          }
          if (true) {
            if (typeof func !== "function") {
              console.error("Material-UI: Invalid Argument Type, must only provide functions, undefined, or null.");
            }
          }
          return function chainedFunction() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            acc.apply(this, args);
            func.apply(this, args);
          };
        }, function() {
        });
      }
    }
  });

  // node_modules/@material-ui/core/utils/getScrollbarSize.js
  var require_getScrollbarSize = __commonJS({
    "node_modules/@material-ui/core/utils/getScrollbarSize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getScrollbarSize2;
      function getScrollbarSize2() {
        var scrollDiv = document.createElement("div");
        scrollDiv.style.width = "99px";
        scrollDiv.style.height = "99px";
        scrollDiv.style.position = "absolute";
        scrollDiv.style.top = "-9999px";
        scrollDiv.style.overflow = "scroll";
        document.body.appendChild(scrollDiv);
        var scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        return scrollbarSize;
      }
    }
  });

  // node_modules/@material-ui/core/utils/ownerWindow.js
  var require_ownerWindow = __commonJS({
    "node_modules/@material-ui/core/utils/ownerWindow.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = ownerWindow2;
      var _ownerDocument = _interopRequireDefault(require_ownerDocument());
      function ownerWindow2(node) {
        var doc = (0, _ownerDocument.default)(node);
        return doc.defaultView || window;
      }
    }
  });

  // node_modules/@material-ui/core/Modal/ModalManager.js
  var require_ModalManager = __commonJS({
    "node_modules/@material-ui/core/Modal/ModalManager.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ariaHidden = ariaHidden2;
      exports.default = void 0;
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
      var _getScrollbarSize = _interopRequireDefault(require_getScrollbarSize());
      var _ownerDocument = _interopRequireDefault(require_ownerDocument());
      var _ownerWindow = _interopRequireDefault(require_ownerWindow());
      function isOverflowing2(container) {
        var doc = (0, _ownerDocument.default)(container);
        if (doc.body === container) {
          return (0, _ownerWindow.default)(doc).innerWidth > doc.documentElement.clientWidth;
        }
        return container.scrollHeight > container.clientHeight;
      }
      function ariaHidden2(node, show) {
        if (show) {
          node.setAttribute("aria-hidden", "true");
        } else {
          node.removeAttribute("aria-hidden");
        }
      }
      function getPaddingRight2(node) {
        return parseInt(window.getComputedStyle(node)["padding-right"], 10) || 0;
      }
      function ariaHiddenSiblings2(container, mountNode, currentNode) {
        var nodesToExclude = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];
        var show = arguments.length > 4 ? arguments[4] : void 0;
        var blacklist = [mountNode, currentNode].concat((0, _toConsumableArray2.default)(nodesToExclude));
        var blacklistTagNames = ["TEMPLATE", "SCRIPT", "STYLE"];
        [].forEach.call(container.children, function(node) {
          if (node.nodeType === 1 && blacklist.indexOf(node) === -1 && blacklistTagNames.indexOf(node.tagName) === -1) {
            ariaHidden2(node, show);
          }
        });
      }
      function findIndexOf2(containerInfo, callback) {
        var idx = -1;
        containerInfo.some(function(item, index) {
          if (callback(item)) {
            idx = index;
            return true;
          }
          return false;
        });
        return idx;
      }
      function handleContainer2(containerInfo, props) {
        var restoreStyle = [];
        var restorePaddings = [];
        var container = containerInfo.container;
        var fixedNodes;
        if (!props.disableScrollLock) {
          if (isOverflowing2(container)) {
            var scrollbarSize = (0, _getScrollbarSize.default)();
            restoreStyle.push({
              value: container.style.paddingRight,
              key: "padding-right",
              el: container
            });
            container.style["padding-right"] = "".concat(getPaddingRight2(container) + scrollbarSize, "px");
            fixedNodes = (0, _ownerDocument.default)(container).querySelectorAll(".mui-fixed");
            [].forEach.call(fixedNodes, function(node) {
              restorePaddings.push(node.style.paddingRight);
              node.style.paddingRight = "".concat(getPaddingRight2(node) + scrollbarSize, "px");
            });
          }
          var parent = container.parentElement;
          var scrollContainer = parent.nodeName === "HTML" && window.getComputedStyle(parent)["overflow-y"] === "scroll" ? parent : container;
          restoreStyle.push({
            value: scrollContainer.style.overflow,
            key: "overflow",
            el: scrollContainer
          });
          scrollContainer.style.overflow = "hidden";
        }
        var restore = function restore2() {
          if (fixedNodes) {
            [].forEach.call(fixedNodes, function(node, i) {
              if (restorePaddings[i]) {
                node.style.paddingRight = restorePaddings[i];
              } else {
                node.style.removeProperty("padding-right");
              }
            });
          }
          restoreStyle.forEach(function(_ref4) {
            var value = _ref4.value, el = _ref4.el, key = _ref4.key;
            if (value) {
              el.style.setProperty(key, value);
            } else {
              el.style.removeProperty(key);
            }
          });
        };
        return restore;
      }
      function getHiddenSiblings2(container) {
        var hiddenSiblings = [];
        [].forEach.call(container.children, function(node) {
          if (node.getAttribute && node.getAttribute("aria-hidden") === "true") {
            hiddenSiblings.push(node);
          }
        });
        return hiddenSiblings;
      }
      var ModalManager2 = /* @__PURE__ */ function() {
        function ModalManager3() {
          (0, _classCallCheck2.default)(this, ModalManager3);
          this.modals = [];
          this.containers = [];
        }
        (0, _createClass2.default)(ModalManager3, [{
          key: "add",
          value: function add(modal, container) {
            var modalIndex = this.modals.indexOf(modal);
            if (modalIndex !== -1) {
              return modalIndex;
            }
            modalIndex = this.modals.length;
            this.modals.push(modal);
            if (modal.modalRef) {
              ariaHidden2(modal.modalRef, false);
            }
            var hiddenSiblingNodes = getHiddenSiblings2(container);
            ariaHiddenSiblings2(container, modal.mountNode, modal.modalRef, hiddenSiblingNodes, true);
            var containerIndex = findIndexOf2(this.containers, function(item) {
              return item.container === container;
            });
            if (containerIndex !== -1) {
              this.containers[containerIndex].modals.push(modal);
              return modalIndex;
            }
            this.containers.push({
              modals: [modal],
              container,
              restore: null,
              hiddenSiblingNodes
            });
            return modalIndex;
          }
        }, {
          key: "mount",
          value: function mount(modal, props) {
            var containerIndex = findIndexOf2(this.containers, function(item) {
              return item.modals.indexOf(modal) !== -1;
            });
            var containerInfo = this.containers[containerIndex];
            if (!containerInfo.restore) {
              containerInfo.restore = handleContainer2(containerInfo, props);
            }
          }
        }, {
          key: "remove",
          value: function remove(modal) {
            var modalIndex = this.modals.indexOf(modal);
            if (modalIndex === -1) {
              return modalIndex;
            }
            var containerIndex = findIndexOf2(this.containers, function(item) {
              return item.modals.indexOf(modal) !== -1;
            });
            var containerInfo = this.containers[containerIndex];
            containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
            this.modals.splice(modalIndex, 1);
            if (containerInfo.modals.length === 0) {
              if (containerInfo.restore) {
                containerInfo.restore();
              }
              if (modal.modalRef) {
                ariaHidden2(modal.modalRef, true);
              }
              ariaHiddenSiblings2(containerInfo.container, modal.mountNode, modal.modalRef, containerInfo.hiddenSiblingNodes, false);
              this.containers.splice(containerIndex, 1);
            } else {
              var nextTop = containerInfo.modals[containerInfo.modals.length - 1];
              if (nextTop.modalRef) {
                ariaHidden2(nextTop.modalRef, false);
              }
            }
            return modalIndex;
          }
        }, {
          key: "isTopModal",
          value: function isTopModal(modal) {
            return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
          }
        }]);
        return ModalManager3;
      }();
      exports.default = ModalManager2;
    }
  });

  // node_modules/@material-ui/core/Unstable_TrapFocus/Unstable_TrapFocus.js
  var require_Unstable_TrapFocus = __commonJS({
    "node_modules/@material-ui/core/Unstable_TrapFocus/Unstable_TrapFocus.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React69 = _interopRequireWildcard(require_react());
      var ReactDOM11 = _interopRequireWildcard(require_react_dom());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _ownerDocument = _interopRequireDefault(require_ownerDocument());
      var _useForkRef = _interopRequireDefault(require_useForkRef());
      var _utils = require_utils();
      function Unstable_TrapFocus2(props) {
        var children = props.children, _props$disableAutoFoc = props.disableAutoFocus, disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$disableEnforce = props.disableEnforceFocus, disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce, _props$disableRestore = props.disableRestoreFocus, disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore, getDoc = props.getDoc, isEnabled = props.isEnabled, open = props.open;
        var ignoreNextEnforceFocus = React69.useRef();
        var sentinelStart = React69.useRef(null);
        var sentinelEnd = React69.useRef(null);
        var nodeToRestore = React69.useRef();
        var rootRef = React69.useRef(null);
        var handleOwnRef = React69.useCallback(function(instance) {
          rootRef.current = ReactDOM11.findDOMNode(instance);
        }, []);
        var handleRef = (0, _useForkRef.default)(children.ref, handleOwnRef);
        var prevOpenRef = React69.useRef();
        React69.useEffect(function() {
          prevOpenRef.current = open;
        }, [open]);
        if (!prevOpenRef.current && open && typeof window !== "undefined") {
          nodeToRestore.current = getDoc().activeElement;
        }
        React69.useEffect(function() {
          if (!open) {
            return;
          }
          var doc = (0, _ownerDocument.default)(rootRef.current);
          if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {
            if (!rootRef.current.hasAttribute("tabIndex")) {
              if (true) {
                console.error(["Material-UI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
              }
              rootRef.current.setAttribute("tabIndex", -1);
            }
            rootRef.current.focus();
          }
          var contain = function contain2() {
            var rootElement = rootRef.current;
            if (rootElement === null) {
              return;
            }
            if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
              ignoreNextEnforceFocus.current = false;
              return;
            }
            if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {
              rootRef.current.focus();
            }
          };
          var loopFocus = function loopFocus2(event2) {
            if (disableEnforceFocus || !isEnabled() || event2.keyCode !== 9) {
              return;
            }
            if (doc.activeElement === rootRef.current) {
              ignoreNextEnforceFocus.current = true;
              if (event2.shiftKey) {
                sentinelEnd.current.focus();
              } else {
                sentinelStart.current.focus();
              }
            }
          };
          doc.addEventListener("focus", contain, true);
          doc.addEventListener("keydown", loopFocus, true);
          var interval = setInterval(function() {
            contain();
          }, 50);
          return function() {
            clearInterval(interval);
            doc.removeEventListener("focus", contain, true);
            doc.removeEventListener("keydown", loopFocus, true);
            if (!disableRestoreFocus) {
              if (nodeToRestore.current && nodeToRestore.current.focus) {
                nodeToRestore.current.focus();
              }
              nodeToRestore.current = null;
            }
          };
        }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);
        return /* @__PURE__ */ React69.createElement(React69.Fragment, null, /* @__PURE__ */ React69.createElement("div", {
          tabIndex: 0,
          ref: sentinelStart,
          "data-test": "sentinelStart"
        }), /* @__PURE__ */ React69.cloneElement(children, {
          ref: handleRef
        }), /* @__PURE__ */ React69.createElement("div", {
          tabIndex: 0,
          ref: sentinelEnd,
          "data-test": "sentinelEnd"
        }));
      }
      true ? Unstable_TrapFocus2.propTypes = {
        children: _propTypes.default.node,
        disableAutoFocus: _propTypes.default.bool,
        disableEnforceFocus: _propTypes.default.bool,
        disableRestoreFocus: _propTypes.default.bool,
        getDoc: _propTypes.default.func.isRequired,
        isEnabled: _propTypes.default.func.isRequired,
        open: _propTypes.default.bool.isRequired
      } : void 0;
      if (true) {
        Unstable_TrapFocus2["propTypes"] = (0, _utils.exactProp)(Unstable_TrapFocus2.propTypes);
      }
      var _default = Unstable_TrapFocus2;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Unstable_TrapFocus/index.js
  var require_Unstable_TrapFocus2 = __commonJS({
    "node_modules/@material-ui/core/Unstable_TrapFocus/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _Unstable_TrapFocus.default;
        }
      });
      var _Unstable_TrapFocus = _interopRequireDefault(require_Unstable_TrapFocus());
    }
  });

  // node_modules/@material-ui/core/Modal/SimpleBackdrop.js
  var require_SimpleBackdrop = __commonJS({
    "node_modules/@material-ui/core/Modal/SimpleBackdrop.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var styles61 = {
        root: {
          zIndex: -1,
          position: "fixed",
          right: 0,
          bottom: 0,
          top: 0,
          left: 0,
          backgroundColor: "rgba(0, 0, 0, 0.5)",
          WebkitTapHighlightColor: "transparent"
        },
        invisible: {
          backgroundColor: "transparent"
        }
      };
      exports.styles = styles61;
      var SimpleBackdrop3 = /* @__PURE__ */ React69.forwardRef(function SimpleBackdrop4(props, ref) {
        var _props$invisible = props.invisible, invisible = _props$invisible === void 0 ? false : _props$invisible, open = props.open, other = (0, _objectWithoutProperties2.default)(props, ["invisible", "open"]);
        return open ? /* @__PURE__ */ React69.createElement("div", (0, _extends2.default)({
          "aria-hidden": true,
          ref
        }, other, {
          style: (0, _extends2.default)({}, styles61.root, invisible ? styles61.invisible : {}, other.style)
        })) : null;
      });
      true ? SimpleBackdrop3.propTypes = {
        invisible: _propTypes.default.bool,
        open: _propTypes.default.bool.isRequired
      } : void 0;
      var _default = SimpleBackdrop3;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Modal/Modal.js
  var require_Modal = __commonJS({
    "node_modules/@material-ui/core/Modal/Modal.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _extends2 = _interopRequireDefault(require_extends());
      var React69 = _interopRequireWildcard(require_react());
      var ReactDOM11 = _interopRequireWildcard(require_react_dom());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _styles = require_styles();
      var _utils = require_utils();
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType());
      var _ownerDocument = _interopRequireDefault(require_ownerDocument());
      var _Portal = _interopRequireDefault(require_Portal2());
      var _createChainedFunction = _interopRequireDefault(require_createChainedFunction());
      var _useForkRef = _interopRequireDefault(require_useForkRef());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback());
      var _zIndex = _interopRequireDefault(require_zIndex());
      var _ModalManager = _interopRequireWildcard(require_ModalManager());
      var _Unstable_TrapFocus = _interopRequireDefault(require_Unstable_TrapFocus2());
      var _SimpleBackdrop = _interopRequireDefault(require_SimpleBackdrop());
      function getContainer3(container) {
        container = typeof container === "function" ? container() : container;
        return ReactDOM11.findDOMNode(container);
      }
      function getHasTransition2(props) {
        return props.children ? props.children.props.hasOwnProperty("in") : false;
      }
      var defaultManager2 = new _ModalManager.default();
      var styles61 = function styles62(theme2) {
        return {
          root: {
            position: "fixed",
            zIndex: theme2.zIndex.modal,
            right: 0,
            bottom: 0,
            top: 0,
            left: 0
          },
          hidden: {
            visibility: "hidden"
          }
        };
      };
      exports.styles = styles61;
      var Modal3 = /* @__PURE__ */ React69.forwardRef(function Modal4(inProps, ref) {
        var theme2 = (0, _styles.useTheme)();
        var props = (0, _styles.getThemeProps)({
          name: "MuiModal",
          props: (0, _extends2.default)({}, inProps),
          theme: theme2
        });
        var _props$BackdropCompon = props.BackdropComponent, BackdropComponent = _props$BackdropCompon === void 0 ? _SimpleBackdrop.default : _props$BackdropCompon, BackdropProps = props.BackdropProps, children = props.children, _props$closeAfterTran = props.closeAfterTransition, closeAfterTransition = _props$closeAfterTran === void 0 ? false : _props$closeAfterTran, container = props.container, _props$disableAutoFoc = props.disableAutoFocus, disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$disableBackdro = props.disableBackdropClick, disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro, _props$disableEnforce = props.disableEnforceFocus, disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce, _props$disableEscapeK = props.disableEscapeKeyDown, disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK, _props$disablePortal = props.disablePortal, disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal, _props$disableRestore = props.disableRestoreFocus, disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore, _props$disableScrollL = props.disableScrollLock, disableScrollLock = _props$disableScrollL === void 0 ? false : _props$disableScrollL, _props$hideBackdrop = props.hideBackdrop, hideBackdrop = _props$hideBackdrop === void 0 ? false : _props$hideBackdrop, _props$keepMounted = props.keepMounted, keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted, _props$manager = props.manager, manager = _props$manager === void 0 ? defaultManager2 : _props$manager, onBackdropClick = props.onBackdropClick, onClose = props.onClose, onEscapeKeyDown = props.onEscapeKeyDown, onRendered = props.onRendered, open = props.open, other = (0, _objectWithoutProperties2.default)(props, ["BackdropComponent", "BackdropProps", "children", "closeAfterTransition", "container", "disableAutoFocus", "disableBackdropClick", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onEscapeKeyDown", "onRendered", "open"]);
        var _React$useState = React69.useState(true), exited = _React$useState[0], setExited = _React$useState[1];
        var modal = React69.useRef({});
        var mountNodeRef = React69.useRef(null);
        var modalRef = React69.useRef(null);
        var handleRef = (0, _useForkRef.default)(modalRef, ref);
        var hasTransition = getHasTransition2(props);
        var getDoc = function getDoc2() {
          return (0, _ownerDocument.default)(mountNodeRef.current);
        };
        var getModal = function getModal2() {
          modal.current.modalRef = modalRef.current;
          modal.current.mountNode = mountNodeRef.current;
          return modal.current;
        };
        var handleMounted = function handleMounted2() {
          manager.mount(getModal(), {
            disableScrollLock
          });
          modalRef.current.scrollTop = 0;
        };
        var handleOpen = (0, _useEventCallback.default)(function() {
          var resolvedContainer = getContainer3(container) || getDoc().body;
          manager.add(getModal(), resolvedContainer);
          if (modalRef.current) {
            handleMounted();
          }
        });
        var isTopModal = React69.useCallback(function() {
          return manager.isTopModal(getModal());
        }, [manager]);
        var handlePortalRef = (0, _useEventCallback.default)(function(node) {
          mountNodeRef.current = node;
          if (!node) {
            return;
          }
          if (onRendered) {
            onRendered();
          }
          if (open && isTopModal()) {
            handleMounted();
          } else {
            (0, _ModalManager.ariaHidden)(modalRef.current, true);
          }
        });
        var handleClose = React69.useCallback(function() {
          manager.remove(getModal());
        }, [manager]);
        React69.useEffect(function() {
          return function() {
            handleClose();
          };
        }, [handleClose]);
        React69.useEffect(function() {
          if (open) {
            handleOpen();
          } else if (!hasTransition || !closeAfterTransition) {
            handleClose();
          }
        }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
        if (!keepMounted && !open && (!hasTransition || exited)) {
          return null;
        }
        var handleEnter = function handleEnter2() {
          setExited(false);
        };
        var handleExited = function handleExited2() {
          setExited(true);
          if (closeAfterTransition) {
            handleClose();
          }
        };
        var handleBackdropClick = function handleBackdropClick2(event2) {
          if (event2.target !== event2.currentTarget) {
            return;
          }
          if (onBackdropClick) {
            onBackdropClick(event2);
          }
          if (!disableBackdropClick && onClose) {
            onClose(event2, "backdropClick");
          }
        };
        var handleKeyDown2 = function handleKeyDown3(event2) {
          if (event2.key !== "Escape" || !isTopModal()) {
            return;
          }
          if (onEscapeKeyDown) {
            onEscapeKeyDown(event2);
          }
          if (!disableEscapeKeyDown) {
            event2.stopPropagation();
            if (onClose) {
              onClose(event2, "escapeKeyDown");
            }
          }
        };
        var inlineStyle = styles61(theme2 || {
          zIndex: _zIndex.default
        });
        var childProps = {};
        if (children.props.tabIndex === void 0) {
          childProps.tabIndex = children.props.tabIndex || "-1";
        }
        if (hasTransition) {
          childProps.onEnter = (0, _createChainedFunction.default)(handleEnter, children.props.onEnter);
          childProps.onExited = (0, _createChainedFunction.default)(handleExited, children.props.onExited);
        }
        return /* @__PURE__ */ React69.createElement(_Portal.default, {
          ref: handlePortalRef,
          container,
          disablePortal
        }, /* @__PURE__ */ React69.createElement("div", (0, _extends2.default)({
          ref: handleRef,
          onKeyDown: handleKeyDown2,
          role: "presentation"
        }, other, {
          style: (0, _extends2.default)({}, inlineStyle.root, !open && exited ? inlineStyle.hidden : {}, other.style)
        }), hideBackdrop ? null : /* @__PURE__ */ React69.createElement(BackdropComponent, (0, _extends2.default)({
          open,
          onClick: handleBackdropClick
        }, BackdropProps)), /* @__PURE__ */ React69.createElement(_Unstable_TrapFocus.default, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          getDoc,
          isEnabled: isTopModal,
          open
        }, /* @__PURE__ */ React69.cloneElement(children, childProps))));
      });
      true ? Modal3.propTypes = {
        BackdropComponent: _propTypes.default.elementType,
        BackdropProps: _propTypes.default.object,
        children: _utils.elementAcceptingRef.isRequired,
        closeAfterTransition: _propTypes.default.bool,
        container: _propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.instanceOf(React69.Component), _propTypes.default.func]),
        disableAutoFocus: _propTypes.default.bool,
        disableBackdropClick: (0, _deprecatedPropType.default)(_propTypes.default.bool, "Use the onClose prop with the `reason` argument to filter the `backdropClick` events."),
        disableEnforceFocus: _propTypes.default.bool,
        disableEscapeKeyDown: _propTypes.default.bool,
        disablePortal: _propTypes.default.bool,
        disableRestoreFocus: _propTypes.default.bool,
        disableScrollLock: _propTypes.default.bool,
        hideBackdrop: _propTypes.default.bool,
        keepMounted: _propTypes.default.bool,
        manager: _propTypes.default.object,
        onBackdropClick: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the onClose prop with the `reason` argument to handle the `backdropClick` events."),
        onClose: _propTypes.default.func,
        onEscapeKeyDown: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the onClose prop with the `reason` argument to handle the `escapeKeyDown` events."),
        onRendered: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the ref instead."),
        open: _propTypes.default.bool.isRequired
      } : void 0;
      var _default = Modal3;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Modal/index.js
  var require_Modal2 = __commonJS({
    "node_modules/@material-ui/core/Modal/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _Modal.default;
        }
      });
      Object.defineProperty(exports, "ModalManager", {
        enumerable: true,
        get: function get() {
          return _ModalManager.default;
        }
      });
      var _Modal = _interopRequireDefault(require_Modal());
      var _ModalManager = _interopRequireDefault(require_ModalManager());
    }
  });

  // node_modules/@material-ui/core/transitions/utils.js
  var require_utils3 = __commonJS({
    "node_modules/@material-ui/core/transitions/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getTransitionProps = getTransitionProps2;
      exports.reflow = void 0;
      var reflow3 = function reflow4(node) {
        return node.scrollTop;
      };
      exports.reflow = reflow3;
      function getTransitionProps2(props, options) {
        var timeout = props.timeout, _props$style = props.style, style = _props$style === void 0 ? {} : _props$style;
        return {
          duration: style.transitionDuration || typeof timeout === "number" ? timeout : timeout[options.mode] || 0,
          delay: style.transitionDelay
        };
      }
    }
  });

  // node_modules/@material-ui/core/Fade/Fade.js
  var require_Fade = __commonJS({
    "node_modules/@material-ui/core/Fade/Fade.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _reactTransitionGroup = require_cjs();
      var _transitions = require_transitions();
      var _useTheme = _interopRequireDefault(require_useTheme3());
      var _utils = require_utils3();
      var _useForkRef = _interopRequireDefault(require_useForkRef());
      var styles61 = {
        entering: {
          opacity: 1
        },
        entered: {
          opacity: 1
        }
      };
      var defaultTimeout = {
        enter: _transitions.duration.enteringScreen,
        exit: _transitions.duration.leavingScreen
      };
      var Fade = /* @__PURE__ */ React69.forwardRef(function Fade2(props, ref) {
        var children = props.children, _props$disableStrictM = props.disableStrictModeCompat, disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style = props.style, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? _reactTransitionGroup.Transition : _props$TransitionComp, _props$timeout = props.timeout, timeout = _props$timeout === void 0 ? defaultTimeout : _props$timeout, other = (0, _objectWithoutProperties2.default)(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "TransitionComponent", "timeout"]);
        var theme2 = (0, _useTheme.default)();
        var enableStrictModeCompat = theme2.unstable_strictMode && !disableStrictModeCompat;
        var nodeRef = React69.useRef(null);
        var foreignRef = (0, _useForkRef.default)(children.ref, ref);
        var handleRef = (0, _useForkRef.default)(enableStrictModeCompat ? nodeRef : void 0, foreignRef);
        var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
          return function(nodeOrAppearing, maybeAppearing) {
            if (callback) {
              var _ref4 = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing], _ref23 = (0, _slicedToArray2.default)(_ref4, 2), node = _ref23[0], isAppearing = _ref23[1];
              if (isAppearing === void 0) {
                callback(node);
              } else {
                callback(node, isAppearing);
              }
            }
          };
        };
        var handleEntering = normalizedTransitionCallback(onEntering);
        var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
          (0, _utils.reflow)(node);
          var transitionProps = (0, _utils.getTransitionProps)({
            style,
            timeout
          }, {
            mode: "enter"
          });
          node.style.webkitTransition = theme2.transitions.create("opacity", transitionProps);
          node.style.transition = theme2.transitions.create("opacity", transitionProps);
          if (onEnter) {
            onEnter(node, isAppearing);
          }
        });
        var handleEntered = normalizedTransitionCallback(onEntered);
        var handleExiting = normalizedTransitionCallback(onExiting);
        var handleExit = normalizedTransitionCallback(function(node) {
          var transitionProps = (0, _utils.getTransitionProps)({
            style,
            timeout
          }, {
            mode: "exit"
          });
          node.style.webkitTransition = theme2.transitions.create("opacity", transitionProps);
          node.style.transition = theme2.transitions.create("opacity", transitionProps);
          if (onExit) {
            onExit(node);
          }
        });
        var handleExited = normalizedTransitionCallback(onExited);
        return /* @__PURE__ */ React69.createElement(TransitionComponent, (0, _extends2.default)({
          appear: true,
          in: inProp,
          nodeRef: enableStrictModeCompat ? nodeRef : void 0,
          onEnter: handleEnter,
          onEntered: handleEntered,
          onEntering: handleEntering,
          onExit: handleExit,
          onExited: handleExited,
          onExiting: handleExiting,
          timeout
        }, other), function(state, childProps) {
          return /* @__PURE__ */ React69.cloneElement(children, (0, _extends2.default)({
            style: (0, _extends2.default)({
              opacity: 0,
              visibility: state === "exited" && !inProp ? "hidden" : void 0
            }, styles61[state], style, children.props.style),
            ref: handleRef
          }, childProps));
        });
      });
      true ? Fade.propTypes = {
        children: _propTypes.default.element,
        disableStrictModeCompat: _propTypes.default.bool,
        in: _propTypes.default.bool,
        onEnter: _propTypes.default.func,
        onEntered: _propTypes.default.func,
        onEntering: _propTypes.default.func,
        onExit: _propTypes.default.func,
        onExited: _propTypes.default.func,
        onExiting: _propTypes.default.func,
        style: _propTypes.default.object,
        timeout: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
          appear: _propTypes.default.number,
          enter: _propTypes.default.number,
          exit: _propTypes.default.number
        })])
      } : void 0;
      var _default = Fade;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Fade/index.js
  var require_Fade2 = __commonJS({
    "node_modules/@material-ui/core/Fade/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _Fade.default;
        }
      });
      var _Fade = _interopRequireDefault(require_Fade());
    }
  });

  // node_modules/@material-ui/core/Backdrop/Backdrop.js
  var require_Backdrop = __commonJS({
    "node_modules/@material-ui/core/Backdrop/Backdrop.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _Fade = _interopRequireDefault(require_Fade2());
      var styles61 = {
        root: {
          zIndex: -1,
          position: "fixed",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          right: 0,
          bottom: 0,
          top: 0,
          left: 0,
          backgroundColor: "rgba(0, 0, 0, 0.5)",
          WebkitTapHighlightColor: "transparent"
        },
        invisible: {
          backgroundColor: "transparent"
        }
      };
      exports.styles = styles61;
      var Backdrop = /* @__PURE__ */ React69.forwardRef(function Backdrop2(props, ref) {
        var children = props.children, classes = props.classes, className = props.className, _props$invisible = props.invisible, invisible = _props$invisible === void 0 ? false : _props$invisible, open = props.open, transitionDuration = props.transitionDuration, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? _Fade.default : _props$TransitionComp, other = (0, _objectWithoutProperties2.default)(props, ["children", "classes", "className", "invisible", "open", "transitionDuration", "TransitionComponent"]);
        return /* @__PURE__ */ React69.createElement(TransitionComponent, (0, _extends2.default)({
          in: open,
          timeout: transitionDuration
        }, other), /* @__PURE__ */ React69.createElement("div", {
          className: (0, _clsx.default)(classes.root, className, invisible && classes.invisible),
          "aria-hidden": true,
          ref
        }, children));
      });
      true ? Backdrop.propTypes = {
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        invisible: _propTypes.default.bool,
        open: _propTypes.default.bool.isRequired,
        transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
          appear: _propTypes.default.number,
          enter: _propTypes.default.number,
          exit: _propTypes.default.number
        })])
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiBackdrop"
      })(Backdrop);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Backdrop/index.js
  var require_Backdrop2 = __commonJS({
    "node_modules/@material-ui/core/Backdrop/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _Backdrop.default;
        }
      });
      var _Backdrop = _interopRequireDefault(require_Backdrop());
    }
  });

  // node_modules/@material-ui/core/Paper/Paper.js
  var require_Paper = __commonJS({
    "node_modules/@material-ui/core/Paper/Paper.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _extends2 = _interopRequireDefault(require_extends());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var styles61 = function styles62(theme2) {
        var elevations = {};
        theme2.shadows.forEach(function(shadow, index) {
          elevations["elevation".concat(index)] = {
            boxShadow: shadow
          };
        });
        return (0, _extends2.default)({
          root: {
            backgroundColor: theme2.palette.background.paper,
            color: theme2.palette.text.primary,
            transition: theme2.transitions.create("box-shadow")
          },
          rounded: {
            borderRadius: theme2.shape.borderRadius
          },
          outlined: {
            border: "1px solid ".concat(theme2.palette.divider)
          }
        }, elevations);
      };
      exports.styles = styles61;
      var Paper3 = /* @__PURE__ */ React69.forwardRef(function Paper4(props, ref) {
        var classes = props.classes, className = props.className, _props$component = props.component, Component4 = _props$component === void 0 ? "div" : _props$component, _props$square = props.square, square = _props$square === void 0 ? false : _props$square, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 1 : _props$elevation, _props$variant = props.variant, variant = _props$variant === void 0 ? "elevation" : _props$variant, other = (0, _objectWithoutProperties2.default)(props, ["classes", "className", "component", "square", "elevation", "variant"]);
        return /* @__PURE__ */ React69.createElement(Component4, (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, className, variant === "outlined" ? classes.outlined : classes["elevation".concat(elevation)], !square && classes.rounded),
          ref
        }, other));
      });
      true ? Paper3.propTypes = {
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        component: _propTypes.default.elementType,
        elevation: (0, _utils.chainPropTypes)(_propTypes.default.number, function(props) {
          var classes = props.classes, elevation = props.elevation;
          if (classes === void 0) {
            return null;
          }
          if (elevation != null && classes["elevation".concat(elevation)] === void 0) {
            return new Error("Material-UI: This elevation `".concat(elevation, "` is not implemented."));
          }
          return null;
        }),
        square: _propTypes.default.bool,
        variant: _propTypes.default.oneOf(["elevation", "outlined"])
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiPaper"
      })(Paper3);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Paper/index.js
  var require_Paper2 = __commonJS({
    "node_modules/@material-ui/core/Paper/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _Paper.default;
        }
      });
      var _Paper = _interopRequireDefault(require_Paper());
    }
  });

  // node_modules/@material-ui/core/Dialog/Dialog.js
  var require_Dialog = __commonJS({
    "node_modules/@material-ui/core/Dialog/Dialog.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _defineProperty2 = _interopRequireDefault(require_defineProperty());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _capitalize = _interopRequireDefault(require_capitalize());
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType());
      var _Modal = _interopRequireDefault(require_Modal2());
      var _Backdrop = _interopRequireDefault(require_Backdrop2());
      var _Fade = _interopRequireDefault(require_Fade2());
      var _transitions = require_transitions();
      var _Paper = _interopRequireDefault(require_Paper2());
      var styles61 = function styles62(theme2) {
        return {
          root: {
            "@media print": {
              position: "absolute !important"
            }
          },
          scrollPaper: {
            display: "flex",
            justifyContent: "center",
            alignItems: "center"
          },
          scrollBody: {
            overflowY: "auto",
            overflowX: "hidden",
            textAlign: "center",
            "&:after": {
              content: '""',
              display: "inline-block",
              verticalAlign: "middle",
              height: "100%",
              width: "0"
            }
          },
          container: {
            height: "100%",
            "@media print": {
              height: "auto"
            },
            outline: 0
          },
          paper: {
            margin: 32,
            position: "relative",
            overflowY: "auto",
            "@media print": {
              overflowY: "visible",
              boxShadow: "none"
            }
          },
          paperScrollPaper: {
            display: "flex",
            flexDirection: "column",
            maxHeight: "calc(100% - 64px)"
          },
          paperScrollBody: {
            display: "inline-block",
            verticalAlign: "middle",
            textAlign: "left"
          },
          paperWidthFalse: {
            maxWidth: "calc(100% - 64px)"
          },
          paperWidthXs: {
            maxWidth: Math.max(theme2.breakpoints.values.xs, 444),
            "&$paperScrollBody": (0, _defineProperty2.default)({}, theme2.breakpoints.down(Math.max(theme2.breakpoints.values.xs, 444) + 32 * 2), {
              maxWidth: "calc(100% - 64px)"
            })
          },
          paperWidthSm: {
            maxWidth: theme2.breakpoints.values.sm,
            "&$paperScrollBody": (0, _defineProperty2.default)({}, theme2.breakpoints.down(theme2.breakpoints.values.sm + 32 * 2), {
              maxWidth: "calc(100% - 64px)"
            })
          },
          paperWidthMd: {
            maxWidth: theme2.breakpoints.values.md,
            "&$paperScrollBody": (0, _defineProperty2.default)({}, theme2.breakpoints.down(theme2.breakpoints.values.md + 32 * 2), {
              maxWidth: "calc(100% - 64px)"
            })
          },
          paperWidthLg: {
            maxWidth: theme2.breakpoints.values.lg,
            "&$paperScrollBody": (0, _defineProperty2.default)({}, theme2.breakpoints.down(theme2.breakpoints.values.lg + 32 * 2), {
              maxWidth: "calc(100% - 64px)"
            })
          },
          paperWidthXl: {
            maxWidth: theme2.breakpoints.values.xl,
            "&$paperScrollBody": (0, _defineProperty2.default)({}, theme2.breakpoints.down(theme2.breakpoints.values.xl + 32 * 2), {
              maxWidth: "calc(100% - 64px)"
            })
          },
          paperFullWidth: {
            width: "calc(100% - 64px)"
          },
          paperFullScreen: {
            margin: 0,
            width: "100%",
            maxWidth: "100%",
            height: "100%",
            maxHeight: "none",
            borderRadius: 0,
            "&$paperScrollBody": {
              margin: 0,
              maxWidth: "100%"
            }
          }
        };
      };
      exports.styles = styles61;
      var defaultTransitionDuration = {
        enter: _transitions.duration.enteringScreen,
        exit: _transitions.duration.leavingScreen
      };
      var Dialog = /* @__PURE__ */ React69.forwardRef(function Dialog2(props, ref) {
        var BackdropProps = props.BackdropProps, children = props.children, classes = props.classes, className = props.className, _props$disableBackdro = props.disableBackdropClick, disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro, _props$disableEscapeK = props.disableEscapeKeyDown, disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK, _props$fullScreen = props.fullScreen, fullScreen = _props$fullScreen === void 0 ? false : _props$fullScreen, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$maxWidth = props.maxWidth, maxWidth = _props$maxWidth === void 0 ? "sm" : _props$maxWidth, onBackdropClick = props.onBackdropClick, onClose = props.onClose, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onEscapeKeyDown = props.onEscapeKeyDown, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, open = props.open, _props$PaperComponent = props.PaperComponent, PaperComponent = _props$PaperComponent === void 0 ? _Paper.default : _props$PaperComponent, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, _props$scroll = props.scroll, scroll = _props$scroll === void 0 ? "paper" : _props$scroll, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? _Fade.default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration : _props$transitionDura, TransitionProps = props.TransitionProps, ariaDescribedby = props["aria-describedby"], ariaLabelledby = props["aria-labelledby"], other = (0, _objectWithoutProperties2.default)(props, ["BackdropProps", "children", "classes", "className", "disableBackdropClick", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "onEnter", "onEntered", "onEntering", "onEscapeKeyDown", "onExit", "onExited", "onExiting", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps", "aria-describedby", "aria-labelledby"]);
        var mouseDownTarget = React69.useRef();
        var handleMouseDown = function handleMouseDown2(event2) {
          mouseDownTarget.current = event2.target;
        };
        var handleBackdropClick = function handleBackdropClick2(event2) {
          if (event2.target !== event2.currentTarget) {
            return;
          }
          if (event2.target !== mouseDownTarget.current) {
            return;
          }
          mouseDownTarget.current = null;
          if (onBackdropClick) {
            onBackdropClick(event2);
          }
          if (!disableBackdropClick && onClose) {
            onClose(event2, "backdropClick");
          }
        };
        return /* @__PURE__ */ React69.createElement(_Modal.default, (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, className),
          BackdropComponent: _Backdrop.default,
          BackdropProps: (0, _extends2.default)({
            transitionDuration
          }, BackdropProps),
          closeAfterTransition: true
        }, disableBackdropClick ? {
          disableBackdropClick
        } : {}, {
          disableEscapeKeyDown,
          onEscapeKeyDown,
          onClose,
          open,
          ref
        }, other), /* @__PURE__ */ React69.createElement(TransitionComponent, (0, _extends2.default)({
          appear: true,
          in: open,
          timeout: transitionDuration,
          onEnter,
          onEntering,
          onEntered,
          onExit,
          onExiting,
          onExited,
          role: "none presentation"
        }, TransitionProps), /* @__PURE__ */ React69.createElement("div", {
          className: (0, _clsx.default)(classes.container, classes["scroll".concat((0, _capitalize.default)(scroll))]),
          onMouseUp: handleBackdropClick,
          onMouseDown: handleMouseDown
        }, /* @__PURE__ */ React69.createElement(PaperComponent, (0, _extends2.default)({
          elevation: 24,
          role: "dialog",
          "aria-describedby": ariaDescribedby,
          "aria-labelledby": ariaLabelledby
        }, PaperProps, {
          className: (0, _clsx.default)(classes.paper, classes["paperScroll".concat((0, _capitalize.default)(scroll))], classes["paperWidth".concat((0, _capitalize.default)(String(maxWidth)))], PaperProps.className, fullScreen && classes.paperFullScreen, fullWidth && classes.paperFullWidth)
        }), children))));
      });
      true ? Dialog.propTypes = {
        "aria-describedby": _propTypes.default.string,
        "aria-labelledby": _propTypes.default.string,
        BackdropProps: _propTypes.default.object,
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        disableBackdropClick: (0, _deprecatedPropType.default)(_propTypes.default.bool, "Use the onClose prop with the `reason` argument to filter the `backdropClick` events."),
        disableEscapeKeyDown: _propTypes.default.bool,
        fullScreen: _propTypes.default.bool,
        fullWidth: _propTypes.default.bool,
        maxWidth: _propTypes.default.oneOf(["lg", "md", "sm", "xl", "xs", false]),
        onBackdropClick: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the onClose prop with the `reason` argument to handle the `backdropClick` events."),
        onClose: _propTypes.default.func,
        onEnter: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the `TransitionProps` prop instead."),
        onEntered: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the `TransitionProps` prop instead."),
        onEntering: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the `TransitionProps` prop instead."),
        onEscapeKeyDown: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the onClose prop with the `reason` argument to handle the `escapeKeyDown` events."),
        onExit: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the `TransitionProps` prop instead."),
        onExited: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the `TransitionProps` prop instead."),
        onExiting: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the `TransitionProps` prop instead."),
        open: _propTypes.default.bool.isRequired,
        PaperComponent: _propTypes.default.elementType,
        PaperProps: _propTypes.default.object,
        scroll: _propTypes.default.oneOf(["body", "paper"]),
        TransitionComponent: _propTypes.default.elementType,
        transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
          appear: _propTypes.default.number,
          enter: _propTypes.default.number,
          exit: _propTypes.default.number
        })]),
        TransitionProps: _propTypes.default.object
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiDialog"
      })(Dialog);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Dialog/index.js
  var require_Dialog2 = __commonJS({
    "node_modules/@material-ui/core/Dialog/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _Dialog.default;
        }
      });
      var _Dialog = _interopRequireDefault(require_Dialog());
    }
  });

  // node_modules/@material-ui/core/DialogActions/DialogActions.js
  var require_DialogActions = __commonJS({
    "node_modules/@material-ui/core/DialogActions/DialogActions.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var styles61 = {
        root: {
          display: "flex",
          alignItems: "center",
          padding: 8,
          justifyContent: "flex-end",
          flex: "0 0 auto"
        },
        spacing: {
          "& > :not(:first-child)": {
            marginLeft: 8
          }
        }
      };
      exports.styles = styles61;
      var DialogActions = /* @__PURE__ */ React69.forwardRef(function DialogActions2(props, ref) {
        var _props$disableSpacing = props.disableSpacing, disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing, classes = props.classes, className = props.className, other = (0, _objectWithoutProperties2.default)(props, ["disableSpacing", "classes", "className"]);
        return /* @__PURE__ */ React69.createElement("div", (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, className, !disableSpacing && classes.spacing),
          ref
        }, other));
      });
      true ? DialogActions.propTypes = {
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        disableSpacing: _propTypes.default.bool
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiDialogActions"
      })(DialogActions);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/DialogActions/index.js
  var require_DialogActions2 = __commonJS({
    "node_modules/@material-ui/core/DialogActions/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _DialogActions.default;
        }
      });
      var _DialogActions = _interopRequireDefault(require_DialogActions());
    }
  });

  // node_modules/@material-ui/core/DialogContent/DialogContent.js
  var require_DialogContent = __commonJS({
    "node_modules/@material-ui/core/DialogContent/DialogContent.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var styles61 = function styles62(theme2) {
        return {
          root: {
            flex: "1 1 auto",
            WebkitOverflowScrolling: "touch",
            overflowY: "auto",
            padding: "8px 24px",
            "&:first-child": {
              paddingTop: 20
            }
          },
          dividers: {
            padding: "16px 24px",
            borderTop: "1px solid ".concat(theme2.palette.divider),
            borderBottom: "1px solid ".concat(theme2.palette.divider)
          }
        };
      };
      exports.styles = styles61;
      var DialogContent = /* @__PURE__ */ React69.forwardRef(function DialogContent2(props, ref) {
        var classes = props.classes, className = props.className, _props$dividers = props.dividers, dividers = _props$dividers === void 0 ? false : _props$dividers, other = (0, _objectWithoutProperties2.default)(props, ["classes", "className", "dividers"]);
        return /* @__PURE__ */ React69.createElement("div", (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, className, dividers && classes.dividers),
          ref
        }, other));
      });
      true ? DialogContent.propTypes = {
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        dividers: _propTypes.default.bool
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiDialogContent"
      })(DialogContent);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/DialogContent/index.js
  var require_DialogContent2 = __commonJS({
    "node_modules/@material-ui/core/DialogContent/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _DialogContent.default;
        }
      });
      var _DialogContent = _interopRequireDefault(require_DialogContent());
    }
  });

  // node_modules/@material-ui/core/Typography/Typography.js
  var require_Typography = __commonJS({
    "node_modules/@material-ui/core/Typography/Typography.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _capitalize = _interopRequireDefault(require_capitalize());
      var styles61 = function styles62(theme2) {
        return {
          root: {
            margin: 0
          },
          body2: theme2.typography.body2,
          body1: theme2.typography.body1,
          caption: theme2.typography.caption,
          button: theme2.typography.button,
          h1: theme2.typography.h1,
          h2: theme2.typography.h2,
          h3: theme2.typography.h3,
          h4: theme2.typography.h4,
          h5: theme2.typography.h5,
          h6: theme2.typography.h6,
          subtitle1: theme2.typography.subtitle1,
          subtitle2: theme2.typography.subtitle2,
          overline: theme2.typography.overline,
          srOnly: {
            position: "absolute",
            height: 1,
            width: 1,
            overflow: "hidden"
          },
          alignLeft: {
            textAlign: "left"
          },
          alignCenter: {
            textAlign: "center"
          },
          alignRight: {
            textAlign: "right"
          },
          alignJustify: {
            textAlign: "justify"
          },
          noWrap: {
            overflow: "hidden",
            textOverflow: "ellipsis",
            whiteSpace: "nowrap"
          },
          gutterBottom: {
            marginBottom: "0.35em"
          },
          paragraph: {
            marginBottom: 16
          },
          colorInherit: {
            color: "inherit"
          },
          colorPrimary: {
            color: theme2.palette.primary.main
          },
          colorSecondary: {
            color: theme2.palette.secondary.main
          },
          colorTextPrimary: {
            color: theme2.palette.text.primary
          },
          colorTextSecondary: {
            color: theme2.palette.text.secondary
          },
          colorError: {
            color: theme2.palette.error.main
          },
          displayInline: {
            display: "inline"
          },
          displayBlock: {
            display: "block"
          }
        };
      };
      exports.styles = styles61;
      var defaultVariantMapping2 = {
        h1: "h1",
        h2: "h2",
        h3: "h3",
        h4: "h4",
        h5: "h5",
        h6: "h6",
        subtitle1: "h6",
        subtitle2: "h6",
        body1: "p",
        body2: "p"
      };
      var Typography3 = /* @__PURE__ */ React69.forwardRef(function Typography4(props, ref) {
        var _props$align = props.align, align = _props$align === void 0 ? "inherit" : _props$align, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "initial" : _props$color, component = props.component, _props$display = props.display, display2 = _props$display === void 0 ? "initial" : _props$display, _props$gutterBottom = props.gutterBottom, gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom, _props$noWrap = props.noWrap, noWrap = _props$noWrap === void 0 ? false : _props$noWrap, _props$paragraph = props.paragraph, paragraph = _props$paragraph === void 0 ? false : _props$paragraph, _props$variant = props.variant, variant = _props$variant === void 0 ? "body1" : _props$variant, _props$variantMapping = props.variantMapping, variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping2 : _props$variantMapping, other = (0, _objectWithoutProperties2.default)(props, ["align", "classes", "className", "color", "component", "display", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"]);
        var Component4 = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping2[variant]) || "span";
        return /* @__PURE__ */ React69.createElement(Component4, (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, className, variant !== "inherit" && classes[variant], color !== "initial" && classes["color".concat((0, _capitalize.default)(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== "inherit" && classes["align".concat((0, _capitalize.default)(align))], display2 !== "initial" && classes["display".concat((0, _capitalize.default)(display2))]),
          ref
        }, other));
      });
      true ? Typography3.propTypes = {
        align: _propTypes.default.oneOf(["inherit", "left", "center", "right", "justify"]),
        children: _propTypes.default.node,
        classes: _propTypes.default.object.isRequired,
        className: _propTypes.default.string,
        color: _propTypes.default.oneOf(["initial", "inherit", "primary", "secondary", "textPrimary", "textSecondary", "error"]),
        component: _propTypes.default.elementType,
        display: _propTypes.default.oneOf(["initial", "block", "inline"]),
        gutterBottom: _propTypes.default.bool,
        noWrap: _propTypes.default.bool,
        paragraph: _propTypes.default.bool,
        variant: _propTypes.default.oneOf(["h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "caption", "button", "overline", "srOnly", "inherit"]),
        variantMapping: _propTypes.default.object
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiTypography"
      })(Typography3);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Typography/index.js
  var require_Typography2 = __commonJS({
    "node_modules/@material-ui/core/Typography/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _Typography.default;
        }
      });
      var _Typography = _interopRequireDefault(require_Typography());
    }
  });

  // node_modules/@material-ui/core/DialogContentText/DialogContentText.js
  var require_DialogContentText = __commonJS({
    "node_modules/@material-ui/core/DialogContentText/DialogContentText.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _Typography = _interopRequireDefault(require_Typography2());
      var styles61 = {
        root: {
          marginBottom: 12
        }
      };
      exports.styles = styles61;
      var DialogContentText = /* @__PURE__ */ React69.forwardRef(function DialogContentText2(props, ref) {
        return /* @__PURE__ */ React69.createElement(_Typography.default, (0, _extends2.default)({
          component: "p",
          variant: "body1",
          color: "textSecondary",
          ref
        }, props));
      });
      true ? DialogContentText.propTypes = {
        children: _propTypes.default.node,
        classes: _propTypes.default.object
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiDialogContentText"
      })(DialogContentText);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/DialogContentText/index.js
  var require_DialogContentText2 = __commonJS({
    "node_modules/@material-ui/core/DialogContentText/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _DialogContentText.default;
        }
      });
      var _DialogContentText = _interopRequireDefault(require_DialogContentText());
    }
  });

  // node_modules/@material-ui/core/DialogTitle/DialogTitle.js
  var require_DialogTitle = __commonJS({
    "node_modules/@material-ui/core/DialogTitle/DialogTitle.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _Typography = _interopRequireDefault(require_Typography2());
      var styles61 = {
        root: {
          margin: 0,
          padding: "16px 24px",
          flex: "0 0 auto"
        }
      };
      exports.styles = styles61;
      var DialogTitle = /* @__PURE__ */ React69.forwardRef(function DialogTitle2(props, ref) {
        var children = props.children, classes = props.classes, className = props.className, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, other = (0, _objectWithoutProperties2.default)(props, ["children", "classes", "className", "disableTypography"]);
        return /* @__PURE__ */ React69.createElement("div", (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, className),
          ref
        }, other), disableTypography ? children : /* @__PURE__ */ React69.createElement(_Typography.default, {
          component: "h2",
          variant: "h6"
        }, children));
      });
      true ? DialogTitle.propTypes = {
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        disableTypography: _propTypes.default.bool
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiDialogTitle"
      })(DialogTitle);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/DialogTitle/index.js
  var require_DialogTitle2 = __commonJS({
    "node_modules/@material-ui/core/DialogTitle/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _DialogTitle.default;
        }
      });
      var _DialogTitle = _interopRequireDefault(require_DialogTitle());
    }
  });

  // node_modules/@material-ui/core/SvgIcon/SvgIcon.js
  var require_SvgIcon = __commonJS({
    "node_modules/@material-ui/core/SvgIcon/SvgIcon.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _capitalize = _interopRequireDefault(require_capitalize());
      var styles61 = function styles62(theme2) {
        return {
          root: {
            userSelect: "none",
            width: "1em",
            height: "1em",
            display: "inline-block",
            fill: "currentColor",
            flexShrink: 0,
            fontSize: theme2.typography.pxToRem(24),
            transition: theme2.transitions.create("fill", {
              duration: theme2.transitions.duration.shorter
            })
          },
          colorPrimary: {
            color: theme2.palette.primary.main
          },
          colorSecondary: {
            color: theme2.palette.secondary.main
          },
          colorAction: {
            color: theme2.palette.action.active
          },
          colorError: {
            color: theme2.palette.error.main
          },
          colorDisabled: {
            color: theme2.palette.action.disabled
          },
          fontSizeInherit: {
            fontSize: "inherit"
          },
          fontSizeSmall: {
            fontSize: theme2.typography.pxToRem(20)
          },
          fontSizeLarge: {
            fontSize: theme2.typography.pxToRem(35)
          }
        };
      };
      exports.styles = styles61;
      var SvgIcon3 = /* @__PURE__ */ React69.forwardRef(function SvgIcon4(props, ref) {
        var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "inherit" : _props$color, _props$component = props.component, Component4 = _props$component === void 0 ? "svg" : _props$component, _props$fontSize = props.fontSize, fontSize = _props$fontSize === void 0 ? "medium" : _props$fontSize, htmlColor = props.htmlColor, titleAccess = props.titleAccess, _props$viewBox = props.viewBox, viewBox = _props$viewBox === void 0 ? "0 0 24 24" : _props$viewBox, other = (0, _objectWithoutProperties2.default)(props, ["children", "classes", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"]);
        return /* @__PURE__ */ React69.createElement(Component4, (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, className, color !== "inherit" && classes["color".concat((0, _capitalize.default)(color))], fontSize !== "default" && fontSize !== "medium" && classes["fontSize".concat((0, _capitalize.default)(fontSize))]),
          focusable: "false",
          viewBox,
          color: htmlColor,
          "aria-hidden": titleAccess ? void 0 : true,
          role: titleAccess ? "img" : void 0,
          ref
        }, other), children, titleAccess ? /* @__PURE__ */ React69.createElement("title", null, titleAccess) : null);
      });
      true ? SvgIcon3.propTypes = {
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        color: _propTypes.default.oneOf(["action", "disabled", "error", "inherit", "primary", "secondary"]),
        component: _propTypes.default.elementType,
        fontSize: (0, _utils.chainPropTypes)(_propTypes.default.oneOf(["default", "inherit", "large", "medium", "small"]), function(props) {
          var fontSize = props.fontSize;
          if (fontSize === "default") {
            throw new Error('Material-UI: `fontSize="default"` is deprecated. Use `fontSize="medium"` instead.');
          }
          return null;
        }),
        htmlColor: _propTypes.default.string,
        shapeRendering: _propTypes.default.string,
        titleAccess: _propTypes.default.string,
        viewBox: _propTypes.default.string
      } : void 0;
      SvgIcon3.muiName = "SvgIcon";
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiSvgIcon"
      })(SvgIcon3);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/SvgIcon/index.js
  var require_SvgIcon2 = __commonJS({
    "node_modules/@material-ui/core/SvgIcon/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _SvgIcon.default;
        }
      });
      var _SvgIcon = _interopRequireDefault(require_SvgIcon());
    }
  });

  // node_modules/@material-ui/core/utils/createSvgIcon.js
  var require_createSvgIcon = __commonJS({
    "node_modules/@material-ui/core/utils/createSvgIcon.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createSvgIcon2;
      var _extends2 = _interopRequireDefault(require_extends());
      var _react = _interopRequireDefault(require_react());
      var _SvgIcon = _interopRequireDefault(require_SvgIcon2());
      function createSvgIcon2(path, displayName) {
        var Component4 = function Component5(props, ref) {
          return /* @__PURE__ */ _react.default.createElement(_SvgIcon.default, (0, _extends2.default)({
            ref
          }, props), path);
        };
        if (true) {
          Component4.displayName = "".concat(displayName, "Icon");
        }
        Component4.muiName = _SvgIcon.default.muiName;
        return /* @__PURE__ */ _react.default.memo(/* @__PURE__ */ _react.default.forwardRef(Component4));
      }
    }
  });

  // node_modules/@material-ui/core/utils/debounce.js
  var require_debounce = __commonJS({
    "node_modules/@material-ui/core/utils/debounce.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = debounce2;
      function debounce2(func) {
        var wait = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 166;
        var timeout;
        function debounced() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var that = this;
          var later = function later2() {
            func.apply(that, args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        }
        debounced.clear = function() {
          clearTimeout(timeout);
        };
        return debounced;
      }
    }
  });

  // node_modules/@material-ui/core/utils/isMuiElement.js
  var require_isMuiElement = __commonJS({
    "node_modules/@material-ui/core/utils/isMuiElement.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isMuiElement2;
      var React69 = _interopRequireWildcard(require_react());
      function isMuiElement2(element, muiNames) {
        return /* @__PURE__ */ React69.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
      }
    }
  });

  // node_modules/@material-ui/core/utils/requirePropFactory.js
  var require_requirePropFactory = __commonJS({
    "node_modules/@material-ui/core/utils/requirePropFactory.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = requirePropFactory2;
      function requirePropFactory2(componentNameInError) {
        if (false) {
          return function() {
            return null;
          };
        }
        var requireProp = function requireProp2(requiredProp) {
          return function(props, propName, componentName, location, propFullName) {
            var propFullNameSafe = propFullName || propName;
            if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
              return new Error("The prop `".concat(propFullNameSafe, "` of ") + "`".concat(componentNameInError, "` must be used on `").concat(requiredProp, "`."));
            }
            return null;
          };
        };
        return requireProp;
      }
    }
  });

  // node_modules/@material-ui/core/utils/unsupportedProp.js
  var require_unsupportedProp = __commonJS({
    "node_modules/@material-ui/core/utils/unsupportedProp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = unsupportedProp2;
      function unsupportedProp2(props, propName, componentName, location, propFullName) {
        if (false) {
          return null;
        }
        var propFullNameSafe = propFullName || propName;
        if (typeof props[propName] !== "undefined") {
          return new Error("The prop `".concat(propFullNameSafe, "` is not supported. Please remove it."));
        }
        return null;
      }
    }
  });

  // node_modules/@material-ui/core/utils/useControlled.js
  var require_useControlled = __commonJS({
    "node_modules/@material-ui/core/utils/useControlled.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useControlled2;
      var React69 = _interopRequireWildcard(require_react());
      function useControlled2(_ref4) {
        var controlled = _ref4.controlled, defaultProp = _ref4.default, name = _ref4.name, _ref$state = _ref4.state, state = _ref$state === void 0 ? "value" : _ref$state;
        var _React$useRef = React69.useRef(controlled !== void 0), isControlled = _React$useRef.current;
        var _React$useState = React69.useState(defaultProp), valueState = _React$useState[0], setValue = _React$useState[1];
        var value = isControlled ? controlled : valueState;
        if (true) {
          React69.useEffect(function() {
            if (isControlled !== (controlled !== void 0)) {
              console.error(["Material-UI: A component is changing the ".concat(isControlled ? "" : "un", "controlled ").concat(state, " state of ").concat(name, " to be ").concat(isControlled ? "un" : "", "controlled."), "Elements should not switch from uncontrolled to controlled (or vice versa).", "Decide between using a controlled or uncontrolled ".concat(name, " ") + "element for the lifetime of the component.", "The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
            }
          }, [controlled]);
          var _React$useRef2 = React69.useRef(defaultProp), defaultValue = _React$useRef2.current;
          React69.useEffect(function() {
            if (!isControlled && defaultValue !== defaultProp) {
              console.error(["Material-UI: A component is changing the default ".concat(state, " state of an uncontrolled ").concat(name, " after being initialized. ") + "To suppress this warning opt to use a controlled ".concat(name, ".")].join("\n"));
            }
          }, [JSON.stringify(defaultProp)]);
        }
        var setValueIfUncontrolled = React69.useCallback(function(newValue) {
          if (!isControlled) {
            setValue(newValue);
          }
        }, []);
        return [value, setValueIfUncontrolled];
      }
    }
  });

  // node_modules/@material-ui/core/utils/unstable_useId.js
  var require_unstable_useId = __commonJS({
    "node_modules/@material-ui/core/utils/unstable_useId.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useId;
      var React69 = _interopRequireWildcard(require_react());
      function useId(idOverride) {
        var _React$useState = React69.useState(idOverride), defaultId = _React$useState[0], setDefaultId = _React$useState[1];
        var id = idOverride || defaultId;
        React69.useEffect(function() {
          if (defaultId == null) {
            setDefaultId("mui-".concat(Math.round(Math.random() * 1e5)));
          }
        }, [defaultId]);
        return id;
      }
    }
  });

  // node_modules/@material-ui/core/utils/index.js
  var require_utils4 = __commonJS({
    "node_modules/@material-ui/core/utils/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "capitalize", {
        enumerable: true,
        get: function get() {
          return _capitalize.default;
        }
      });
      Object.defineProperty(exports, "createChainedFunction", {
        enumerable: true,
        get: function get() {
          return _createChainedFunction.default;
        }
      });
      Object.defineProperty(exports, "createSvgIcon", {
        enumerable: true,
        get: function get() {
          return _createSvgIcon.default;
        }
      });
      Object.defineProperty(exports, "debounce", {
        enumerable: true,
        get: function get() {
          return _debounce.default;
        }
      });
      Object.defineProperty(exports, "deprecatedPropType", {
        enumerable: true,
        get: function get() {
          return _deprecatedPropType.default;
        }
      });
      Object.defineProperty(exports, "isMuiElement", {
        enumerable: true,
        get: function get() {
          return _isMuiElement.default;
        }
      });
      Object.defineProperty(exports, "ownerDocument", {
        enumerable: true,
        get: function get() {
          return _ownerDocument.default;
        }
      });
      Object.defineProperty(exports, "ownerWindow", {
        enumerable: true,
        get: function get() {
          return _ownerWindow.default;
        }
      });
      Object.defineProperty(exports, "requirePropFactory", {
        enumerable: true,
        get: function get() {
          return _requirePropFactory.default;
        }
      });
      Object.defineProperty(exports, "setRef", {
        enumerable: true,
        get: function get() {
          return _setRef.default;
        }
      });
      Object.defineProperty(exports, "unsupportedProp", {
        enumerable: true,
        get: function get() {
          return _unsupportedProp.default;
        }
      });
      Object.defineProperty(exports, "useControlled", {
        enumerable: true,
        get: function get() {
          return _useControlled.default;
        }
      });
      Object.defineProperty(exports, "useEventCallback", {
        enumerable: true,
        get: function get() {
          return _useEventCallback.default;
        }
      });
      Object.defineProperty(exports, "useForkRef", {
        enumerable: true,
        get: function get() {
          return _useForkRef.default;
        }
      });
      Object.defineProperty(exports, "unstable_useId", {
        enumerable: true,
        get: function get() {
          return _unstable_useId.default;
        }
      });
      Object.defineProperty(exports, "useIsFocusVisible", {
        enumerable: true,
        get: function get() {
          return _useIsFocusVisible.default;
        }
      });
      var _capitalize = _interopRequireDefault(require_capitalize());
      var _createChainedFunction = _interopRequireDefault(require_createChainedFunction());
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
      var _debounce = _interopRequireDefault(require_debounce());
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType());
      var _isMuiElement = _interopRequireDefault(require_isMuiElement());
      var _ownerDocument = _interopRequireDefault(require_ownerDocument());
      var _ownerWindow = _interopRequireDefault(require_ownerWindow());
      var _requirePropFactory = _interopRequireDefault(require_requirePropFactory());
      var _setRef = _interopRequireDefault(require_setRef());
      var _unsupportedProp = _interopRequireDefault(require_unsupportedProp());
      var _useControlled = _interopRequireDefault(require_useControlled());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback());
      var _useForkRef = _interopRequireDefault(require_useForkRef());
      var _unstable_useId = _interopRequireDefault(require_unstable_useId());
      var _useIsFocusVisible = _interopRequireDefault(require_useIsFocusVisible());
    }
  });

  // node_modules/@material-ui/icons/utils/createSvgIcon.js
  var require_createSvgIcon2 = __commonJS({
    "node_modules/@material-ui/icons/utils/createSvgIcon.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _utils.createSvgIcon;
        }
      });
      var _utils = require_utils4();
    }
  });

  // node_modules/@material-ui/icons/Check.js
  var require_Check = __commonJS({
    "node_modules/@material-ui/icons/Check.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React69 = _interopRequireWildcard(require_react());
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ React69.createElement("path", {
        d: "M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"
      }), "Check");
      exports.default = _default;
    }
  });

  // node_modules/@iobroker/adapter-react/Dialogs/Error.js
  var require_Error = __commonJS({
    "node_modules/@iobroker/adapter-react/Dialogs/Error.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _inherits2 = _interopRequireDefault(require_inherits());
      var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
      var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _Button = _interopRequireDefault(require_Button2());
      var _Dialog = _interopRequireDefault(require_Dialog2());
      var _DialogActions = _interopRequireDefault(require_DialogActions2());
      var _DialogContent = _interopRequireDefault(require_DialogContent2());
      var _DialogContentText = _interopRequireDefault(require_DialogContentText2());
      var _DialogTitle = _interopRequireDefault(require_DialogTitle2());
      var _Check = _interopRequireDefault(require_Check());
      var _i18n = _interopRequireDefault(require_i18n());
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = (0, _getPrototypeOf2["default"])(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return (0, _possibleConstructorReturn2["default"])(this, result);
        };
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      var styles61 = function styles62(theme2) {
        return {
          titleBackground: {},
          titleColor: {}
        };
      };
      var DialogError = /* @__PURE__ */ function(_React$Component) {
        (0, _inherits2["default"])(DialogError2, _React$Component);
        var _super = _createSuper(DialogError2);
        function DialogError2() {
          (0, _classCallCheck2["default"])(this, DialogError2);
          return _super.apply(this, arguments);
        }
        (0, _createClass2["default"])(DialogError2, [{
          key: "handleOk",
          value: function handleOk() {
            this.props.onClose && this.props.onClose();
          }
        }, {
          key: "render",
          value: function render() {
            var _this = this;
            return /* @__PURE__ */ _react["default"].createElement(_Dialog["default"], {
              open: true,
              maxWidth: "sm",
              fullWidth: true,
              onClose: function onClose() {
                return _this.handleOk();
              },
              "aria-labelledby": "alert-dialog-title",
              "aria-describedby": "alert-dialog-description"
            }, /* @__PURE__ */ _react["default"].createElement(_DialogTitle["default"], {
              className: this.props.classes.titleBackground,
              classes: {
                root: this.props.classes.titleColor
              },
              id: "alert-dialog-title"
            }, this.props.title || _i18n["default"].t("ra_Error")), /* @__PURE__ */ _react["default"].createElement(_DialogContent["default"], null, /* @__PURE__ */ _react["default"].createElement(_DialogContentText["default"], {
              id: "alert-dialog-description"
            }, this.props.text || _i18n["default"].t("ra_Unknown error!"))), /* @__PURE__ */ _react["default"].createElement(_DialogActions["default"], null, /* @__PURE__ */ _react["default"].createElement(_Button["default"], {
              variant: "contained",
              onClick: function onClick() {
                return _this.handleOk();
              },
              color: "primary",
              autoFocus: true,
              startIcon: /* @__PURE__ */ _react["default"].createElement(_Check["default"], null)
            }, _i18n["default"].t("ra_Ok"))));
          }
        }]);
        return DialogError2;
      }(_react["default"].Component);
      DialogError.propTypes = {
        onClose: _propTypes["default"].func,
        title: _propTypes["default"].string,
        text: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]),
        icon: _propTypes["default"].object
      };
      var _export = (0, _withStyles["default"])(styles61)(DialogError);
      var _default = _export;
      exports["default"] = _default;
    }
  });

  // node_modules/@material-ui/core/ClickAwayListener/ClickAwayListener.js
  var require_ClickAwayListener = __commonJS({
    "node_modules/@material-ui/core/ClickAwayListener/ClickAwayListener.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React69 = _interopRequireWildcard(require_react());
      var ReactDOM11 = _interopRequireWildcard(require_react_dom());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _ownerDocument = _interopRequireDefault(require_ownerDocument());
      var _useForkRef = _interopRequireDefault(require_useForkRef());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback());
      var _utils = require_utils();
      function mapEventPropToEvent(eventProp) {
        return eventProp.substring(2).toLowerCase();
      }
      function clickedRootScrollbar(event2) {
        return document.documentElement.clientWidth < event2.clientX || document.documentElement.clientHeight < event2.clientY;
      }
      function ClickAwayListener(props) {
        var children = props.children, _props$disableReactTr = props.disableReactTree, disableReactTree = _props$disableReactTr === void 0 ? false : _props$disableReactTr, _props$mouseEvent = props.mouseEvent, mouseEvent = _props$mouseEvent === void 0 ? "onClick" : _props$mouseEvent, onClickAway = props.onClickAway, _props$touchEvent = props.touchEvent, touchEvent = _props$touchEvent === void 0 ? "onTouchEnd" : _props$touchEvent;
        var movedRef = React69.useRef(false);
        var nodeRef = React69.useRef(null);
        var activatedRef = React69.useRef(false);
        var syntheticEventRef = React69.useRef(false);
        React69.useEffect(function() {
          setTimeout(function() {
            activatedRef.current = true;
          }, 0);
          return function() {
            activatedRef.current = false;
          };
        }, []);
        var handleOwnRef = React69.useCallback(function(instance) {
          nodeRef.current = ReactDOM11.findDOMNode(instance);
        }, []);
        var handleRef = (0, _useForkRef.default)(children.ref, handleOwnRef);
        var handleClickAway = (0, _useEventCallback.default)(function(event2) {
          var insideReactTree = syntheticEventRef.current;
          syntheticEventRef.current = false;
          if (!activatedRef.current || !nodeRef.current || clickedRootScrollbar(event2)) {
            return;
          }
          if (movedRef.current) {
            movedRef.current = false;
            return;
          }
          var insideDOM;
          if (event2.composedPath) {
            insideDOM = event2.composedPath().indexOf(nodeRef.current) > -1;
          } else {
            var doc = (0, _ownerDocument.default)(nodeRef.current);
            insideDOM = !doc.documentElement.contains(event2.target) || nodeRef.current.contains(event2.target);
          }
          if (!insideDOM && (disableReactTree || !insideReactTree)) {
            onClickAway(event2);
          }
        });
        var createHandleSynthetic = function createHandleSynthetic2(handlerName) {
          return function(event2) {
            syntheticEventRef.current = true;
            var childrenPropsHandler = children.props[handlerName];
            if (childrenPropsHandler) {
              childrenPropsHandler(event2);
            }
          };
        };
        var childrenProps = {
          ref: handleRef
        };
        if (touchEvent !== false) {
          childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
        }
        React69.useEffect(function() {
          if (touchEvent !== false) {
            var mappedTouchEvent = mapEventPropToEvent(touchEvent);
            var doc = (0, _ownerDocument.default)(nodeRef.current);
            var handleTouchMove = function handleTouchMove2() {
              movedRef.current = true;
            };
            doc.addEventListener(mappedTouchEvent, handleClickAway);
            doc.addEventListener("touchmove", handleTouchMove);
            return function() {
              doc.removeEventListener(mappedTouchEvent, handleClickAway);
              doc.removeEventListener("touchmove", handleTouchMove);
            };
          }
          return void 0;
        }, [handleClickAway, touchEvent]);
        if (mouseEvent !== false) {
          childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
        }
        React69.useEffect(function() {
          if (mouseEvent !== false) {
            var mappedMouseEvent = mapEventPropToEvent(mouseEvent);
            var doc = (0, _ownerDocument.default)(nodeRef.current);
            doc.addEventListener(mappedMouseEvent, handleClickAway);
            return function() {
              doc.removeEventListener(mappedMouseEvent, handleClickAway);
            };
          }
          return void 0;
        }, [handleClickAway, mouseEvent]);
        return /* @__PURE__ */ React69.createElement(React69.Fragment, null, /* @__PURE__ */ React69.cloneElement(children, childrenProps));
      }
      true ? ClickAwayListener.propTypes = {
        children: _utils.elementAcceptingRef.isRequired,
        disableReactTree: _propTypes.default.bool,
        mouseEvent: _propTypes.default.oneOf(["onClick", "onMouseDown", "onMouseUp", false]),
        onClickAway: _propTypes.default.func.isRequired,
        touchEvent: _propTypes.default.oneOf(["onTouchEnd", "onTouchStart", false])
      } : void 0;
      if (true) {
        ClickAwayListener["propTypes"] = (0, _utils.exactProp)(ClickAwayListener.propTypes);
      }
      var _default = ClickAwayListener;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/ClickAwayListener/index.js
  var require_ClickAwayListener2 = __commonJS({
    "node_modules/@material-ui/core/ClickAwayListener/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _ClickAwayListener.default;
        }
      });
      var _ClickAwayListener = _interopRequireDefault(require_ClickAwayListener());
    }
  });

  // node_modules/@material-ui/core/Grow/Grow.js
  var require_Grow = __commonJS({
    "node_modules/@material-ui/core/Grow/Grow.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _reactTransitionGroup = require_cjs();
      var _useTheme = _interopRequireDefault(require_useTheme3());
      var _utils = require_utils3();
      var _useForkRef = _interopRequireDefault(require_useForkRef());
      function getScale2(value) {
        return "scale(".concat(value, ", ").concat(Math.pow(value, 2), ")");
      }
      var styles61 = {
        entering: {
          opacity: 1,
          transform: getScale2(1)
        },
        entered: {
          opacity: 1,
          transform: "none"
        }
      };
      var Grow3 = /* @__PURE__ */ React69.forwardRef(function Grow4(props, ref) {
        var children = props.children, _props$disableStrictM = props.disableStrictModeCompat, disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style = props.style, _props$timeout = props.timeout, timeout = _props$timeout === void 0 ? "auto" : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? _reactTransitionGroup.Transition : _props$TransitionComp, other = (0, _objectWithoutProperties2.default)(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
        var timer = React69.useRef();
        var autoTimeout = React69.useRef();
        var theme2 = (0, _useTheme.default)();
        var enableStrictModeCompat = theme2.unstable_strictMode && !disableStrictModeCompat;
        var nodeRef = React69.useRef(null);
        var foreignRef = (0, _useForkRef.default)(children.ref, ref);
        var handleRef = (0, _useForkRef.default)(enableStrictModeCompat ? nodeRef : void 0, foreignRef);
        var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
          return function(nodeOrAppearing, maybeAppearing) {
            if (callback) {
              var _ref4 = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing], _ref23 = (0, _slicedToArray2.default)(_ref4, 2), node = _ref23[0], isAppearing = _ref23[1];
              if (isAppearing === void 0) {
                callback(node);
              } else {
                callback(node, isAppearing);
              }
            }
          };
        };
        var handleEntering = normalizedTransitionCallback(onEntering);
        var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
          (0, _utils.reflow)(node);
          var _getTransitionProps = (0, _utils.getTransitionProps)({
            style,
            timeout
          }, {
            mode: "enter"
          }), transitionDuration = _getTransitionProps.duration, delay = _getTransitionProps.delay;
          var duration2;
          if (timeout === "auto") {
            duration2 = theme2.transitions.getAutoHeightDuration(node.clientHeight);
            autoTimeout.current = duration2;
          } else {
            duration2 = transitionDuration;
          }
          node.style.transition = [theme2.transitions.create("opacity", {
            duration: duration2,
            delay
          }), theme2.transitions.create("transform", {
            duration: duration2 * 0.666,
            delay
          })].join(",");
          if (onEnter) {
            onEnter(node, isAppearing);
          }
        });
        var handleEntered = normalizedTransitionCallback(onEntered);
        var handleExiting = normalizedTransitionCallback(onExiting);
        var handleExit = normalizedTransitionCallback(function(node) {
          var _getTransitionProps2 = (0, _utils.getTransitionProps)({
            style,
            timeout
          }, {
            mode: "exit"
          }), transitionDuration = _getTransitionProps2.duration, delay = _getTransitionProps2.delay;
          var duration2;
          if (timeout === "auto") {
            duration2 = theme2.transitions.getAutoHeightDuration(node.clientHeight);
            autoTimeout.current = duration2;
          } else {
            duration2 = transitionDuration;
          }
          node.style.transition = [theme2.transitions.create("opacity", {
            duration: duration2,
            delay
          }), theme2.transitions.create("transform", {
            duration: duration2 * 0.666,
            delay: delay || duration2 * 0.333
          })].join(",");
          node.style.opacity = "0";
          node.style.transform = getScale2(0.75);
          if (onExit) {
            onExit(node);
          }
        });
        var handleExited = normalizedTransitionCallback(onExited);
        var addEndListener = function addEndListener2(nodeOrNext, maybeNext) {
          var next = enableStrictModeCompat ? nodeOrNext : maybeNext;
          if (timeout === "auto") {
            timer.current = setTimeout(next, autoTimeout.current || 0);
          }
        };
        React69.useEffect(function() {
          return function() {
            clearTimeout(timer.current);
          };
        }, []);
        return /* @__PURE__ */ React69.createElement(TransitionComponent, (0, _extends2.default)({
          appear: true,
          in: inProp,
          nodeRef: enableStrictModeCompat ? nodeRef : void 0,
          onEnter: handleEnter,
          onEntered: handleEntered,
          onEntering: handleEntering,
          onExit: handleExit,
          onExited: handleExited,
          onExiting: handleExiting,
          addEndListener,
          timeout: timeout === "auto" ? null : timeout
        }, other), function(state, childProps) {
          return /* @__PURE__ */ React69.cloneElement(children, (0, _extends2.default)({
            style: (0, _extends2.default)({
              opacity: 0,
              transform: getScale2(0.75),
              visibility: state === "exited" && !inProp ? "hidden" : void 0
            }, styles61[state], style, children.props.style),
            ref: handleRef
          }, childProps));
        });
      });
      true ? Grow3.propTypes = {
        children: _propTypes.default.element,
        disableStrictModeCompat: _propTypes.default.bool,
        in: _propTypes.default.bool,
        onEnter: _propTypes.default.func,
        onEntered: _propTypes.default.func,
        onEntering: _propTypes.default.func,
        onExit: _propTypes.default.func,
        onExited: _propTypes.default.func,
        onExiting: _propTypes.default.func,
        style: _propTypes.default.object,
        timeout: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.shape({
          appear: _propTypes.default.number,
          enter: _propTypes.default.number,
          exit: _propTypes.default.number
        })])
      } : void 0;
      Grow3.muiSupportAuto = true;
      var _default = Grow3;
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Grow/index.js
  var require_Grow2 = __commonJS({
    "node_modules/@material-ui/core/Grow/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _Grow.default;
        }
      });
      var _Grow = _interopRequireDefault(require_Grow());
    }
  });

  // node_modules/@material-ui/core/SnackbarContent/SnackbarContent.js
  var require_SnackbarContent = __commonJS({
    "node_modules/@material-ui/core/SnackbarContent/SnackbarContent.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _defineProperty2 = _interopRequireDefault(require_defineProperty());
      var _extends3 = _interopRequireDefault(require_extends());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _Paper = _interopRequireDefault(require_Paper2());
      var _colorManipulator = require_colorManipulator();
      var styles61 = function styles62(theme2) {
        var emphasis = theme2.palette.type === "light" ? 0.8 : 0.98;
        var backgroundColor = (0, _colorManipulator.emphasize)(theme2.palette.background.default, emphasis);
        return {
          root: (0, _extends3.default)({}, theme2.typography.body2, (0, _defineProperty2.default)({
            color: theme2.palette.getContrastText(backgroundColor),
            backgroundColor,
            display: "flex",
            alignItems: "center",
            flexWrap: "wrap",
            padding: "6px 16px",
            borderRadius: theme2.shape.borderRadius,
            flexGrow: 1
          }, theme2.breakpoints.up("sm"), {
            flexGrow: "initial",
            minWidth: 288
          })),
          message: {
            padding: "8px 0"
          },
          action: {
            display: "flex",
            alignItems: "center",
            marginLeft: "auto",
            paddingLeft: 16,
            marginRight: -8
          }
        };
      };
      exports.styles = styles61;
      var SnackbarContent = /* @__PURE__ */ React69.forwardRef(function SnackbarContent2(props, ref) {
        var action = props.action, classes = props.classes, className = props.className, message = props.message, _props$role = props.role, role = _props$role === void 0 ? "alert" : _props$role, other = (0, _objectWithoutProperties2.default)(props, ["action", "classes", "className", "message", "role"]);
        return /* @__PURE__ */ React69.createElement(_Paper.default, (0, _extends3.default)({
          role,
          square: true,
          elevation: 6,
          className: (0, _clsx.default)(classes.root, className),
          ref
        }, other), /* @__PURE__ */ React69.createElement("div", {
          className: classes.message
        }, message), action ? /* @__PURE__ */ React69.createElement("div", {
          className: classes.action
        }, action) : null);
      });
      true ? SnackbarContent.propTypes = {
        action: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        message: _propTypes.default.node,
        role: _propTypes.default.string
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiSnackbarContent"
      })(SnackbarContent);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/SnackbarContent/index.js
  var require_SnackbarContent2 = __commonJS({
    "node_modules/@material-ui/core/SnackbarContent/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _SnackbarContent.default;
        }
      });
      var _SnackbarContent = _interopRequireDefault(require_SnackbarContent());
    }
  });

  // node_modules/@material-ui/core/Snackbar/Snackbar.js
  var require_Snackbar = __commonJS({
    "node_modules/@material-ui/core/Snackbar/Snackbar.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _defineProperty2 = _interopRequireDefault(require_defineProperty());
      var _extends8 = _interopRequireDefault(require_extends());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _transitions = require_transitions();
      var _ClickAwayListener = _interopRequireDefault(require_ClickAwayListener2());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback());
      var _capitalize = _interopRequireDefault(require_capitalize());
      var _createChainedFunction = _interopRequireDefault(require_createChainedFunction());
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType());
      var _Grow = _interopRequireDefault(require_Grow2());
      var _SnackbarContent = _interopRequireDefault(require_SnackbarContent2());
      var styles61 = function styles62(theme2) {
        var top1 = {
          top: 8
        };
        var bottom1 = {
          bottom: 8
        };
        var right = {
          justifyContent: "flex-end"
        };
        var left = {
          justifyContent: "flex-start"
        };
        var top3 = {
          top: 24
        };
        var bottom3 = {
          bottom: 24
        };
        var right3 = {
          right: 24
        };
        var left3 = {
          left: 24
        };
        var center = {
          left: "50%",
          right: "auto",
          transform: "translateX(-50%)"
        };
        return {
          root: {
            zIndex: theme2.zIndex.snackbar,
            position: "fixed",
            display: "flex",
            left: 8,
            right: 8,
            justifyContent: "center",
            alignItems: "center"
          },
          anchorOriginTopCenter: (0, _extends8.default)({}, top1, (0, _defineProperty2.default)({}, theme2.breakpoints.up("sm"), (0, _extends8.default)({}, top3, center))),
          anchorOriginBottomCenter: (0, _extends8.default)({}, bottom1, (0, _defineProperty2.default)({}, theme2.breakpoints.up("sm"), (0, _extends8.default)({}, bottom3, center))),
          anchorOriginTopRight: (0, _extends8.default)({}, top1, right, (0, _defineProperty2.default)({}, theme2.breakpoints.up("sm"), (0, _extends8.default)({
            left: "auto"
          }, top3, right3))),
          anchorOriginBottomRight: (0, _extends8.default)({}, bottom1, right, (0, _defineProperty2.default)({}, theme2.breakpoints.up("sm"), (0, _extends8.default)({
            left: "auto"
          }, bottom3, right3))),
          anchorOriginTopLeft: (0, _extends8.default)({}, top1, left, (0, _defineProperty2.default)({}, theme2.breakpoints.up("sm"), (0, _extends8.default)({
            right: "auto"
          }, top3, left3))),
          anchorOriginBottomLeft: (0, _extends8.default)({}, bottom1, left, (0, _defineProperty2.default)({}, theme2.breakpoints.up("sm"), (0, _extends8.default)({
            right: "auto"
          }, bottom3, left3)))
        };
      };
      exports.styles = styles61;
      var Snackbar = /* @__PURE__ */ React69.forwardRef(function Snackbar2(props, ref) {
        var action = props.action, _props$anchorOrigin = props.anchorOrigin;
        _props$anchorOrigin = _props$anchorOrigin === void 0 ? {
          vertical: "bottom",
          horizontal: "center"
        } : _props$anchorOrigin;
        var vertical = _props$anchorOrigin.vertical, horizontal = _props$anchorOrigin.horizontal, _props$autoHideDurati = props.autoHideDuration, autoHideDuration = _props$autoHideDurati === void 0 ? null : _props$autoHideDurati, children = props.children, classes = props.classes, className = props.className, ClickAwayListenerProps = props.ClickAwayListenerProps, ContentProps = props.ContentProps, _props$disableWindowB = props.disableWindowBlurListener, disableWindowBlurListener = _props$disableWindowB === void 0 ? false : _props$disableWindowB, message = props.message, onClose = props.onClose, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, open = props.open, resumeHideDuration = props.resumeHideDuration, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? _Grow.default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? {
          enter: _transitions.duration.enteringScreen,
          exit: _transitions.duration.leavingScreen
        } : _props$transitionDura, TransitionProps = props.TransitionProps, other = (0, _objectWithoutProperties2.default)(props, ["action", "anchorOrigin", "autoHideDuration", "children", "classes", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onClose", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"]);
        var timerAutoHide = React69.useRef();
        var _React$useState = React69.useState(true), exited = _React$useState[0], setExited = _React$useState[1];
        var handleClose = (0, _useEventCallback.default)(function() {
          if (onClose) {
            onClose.apply(void 0, arguments);
          }
        });
        var setAutoHideTimer = (0, _useEventCallback.default)(function(autoHideDurationParam) {
          if (!onClose || autoHideDurationParam == null) {
            return;
          }
          clearTimeout(timerAutoHide.current);
          timerAutoHide.current = setTimeout(function() {
            handleClose(null, "timeout");
          }, autoHideDurationParam);
        });
        React69.useEffect(function() {
          if (open) {
            setAutoHideTimer(autoHideDuration);
          }
          return function() {
            clearTimeout(timerAutoHide.current);
          };
        }, [open, autoHideDuration, setAutoHideTimer]);
        var handlePause = function handlePause2() {
          clearTimeout(timerAutoHide.current);
        };
        var handleResume = React69.useCallback(function() {
          if (autoHideDuration != null) {
            setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
          }
        }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
        var handleMouseEnter = function handleMouseEnter2(event2) {
          if (onMouseEnter) {
            onMouseEnter(event2);
          }
          handlePause();
        };
        var handleMouseLeave = function handleMouseLeave2(event2) {
          if (onMouseLeave) {
            onMouseLeave(event2);
          }
          handleResume();
        };
        var handleClickAway = function handleClickAway2(event2) {
          if (onClose) {
            onClose(event2, "clickaway");
          }
        };
        var handleExited = function handleExited2() {
          setExited(true);
        };
        var handleEnter = function handleEnter2() {
          setExited(false);
        };
        React69.useEffect(function() {
          if (!disableWindowBlurListener && open) {
            window.addEventListener("focus", handleResume);
            window.addEventListener("blur", handlePause);
            return function() {
              window.removeEventListener("focus", handleResume);
              window.removeEventListener("blur", handlePause);
            };
          }
          return void 0;
        }, [disableWindowBlurListener, handleResume, open]);
        if (!open && exited) {
          return null;
        }
        return /* @__PURE__ */ React69.createElement(_ClickAwayListener.default, (0, _extends8.default)({
          onClickAway: handleClickAway
        }, ClickAwayListenerProps), /* @__PURE__ */ React69.createElement("div", (0, _extends8.default)({
          className: (0, _clsx.default)(classes.root, classes["anchorOrigin".concat((0, _capitalize.default)(vertical)).concat((0, _capitalize.default)(horizontal))], className),
          onMouseEnter: handleMouseEnter,
          onMouseLeave: handleMouseLeave,
          ref
        }, other), /* @__PURE__ */ React69.createElement(TransitionComponent, (0, _extends8.default)({
          appear: true,
          in: open,
          onEnter: (0, _createChainedFunction.default)(handleEnter, onEnter),
          onEntered,
          onEntering,
          onExit,
          onExited: (0, _createChainedFunction.default)(handleExited, onExited),
          onExiting,
          timeout: transitionDuration,
          direction: vertical === "top" ? "down" : "up"
        }, TransitionProps), children || /* @__PURE__ */ React69.createElement(_SnackbarContent.default, (0, _extends8.default)({
          message,
          action
        }, ContentProps)))));
      });
      true ? Snackbar.propTypes = {
        action: _propTypes.default.node,
        anchorOrigin: _propTypes.default.shape({
          horizontal: _propTypes.default.oneOf(["center", "left", "right"]).isRequired,
          vertical: _propTypes.default.oneOf(["bottom", "top"]).isRequired
        }),
        autoHideDuration: _propTypes.default.number,
        children: _propTypes.default.element,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        ClickAwayListenerProps: _propTypes.default.object,
        ContentProps: _propTypes.default.object,
        disableWindowBlurListener: _propTypes.default.bool,
        key: _propTypes.default.any,
        message: _propTypes.default.node,
        onClose: _propTypes.default.func,
        onEnter: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the `TransitionProps` prop instead."),
        onEntered: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the `TransitionProps` prop instead."),
        onEntering: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the `TransitionProps` prop instead."),
        onExit: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the `TransitionProps` prop instead."),
        onExited: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the `TransitionProps` prop instead."),
        onExiting: (0, _deprecatedPropType.default)(_propTypes.default.func, "Use the `TransitionProps` prop instead."),
        onMouseEnter: _propTypes.default.func,
        onMouseLeave: _propTypes.default.func,
        open: _propTypes.default.bool,
        resumeHideDuration: _propTypes.default.number,
        TransitionComponent: _propTypes.default.elementType,
        transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
          appear: _propTypes.default.number,
          enter: _propTypes.default.number,
          exit: _propTypes.default.number
        })]),
        TransitionProps: _propTypes.default.object
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        flip: false,
        name: "MuiSnackbar"
      })(Snackbar);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Snackbar/index.js
  var require_Snackbar2 = __commonJS({
    "node_modules/@material-ui/core/Snackbar/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _Snackbar.default;
        }
      });
      var _Snackbar = _interopRequireDefault(require_Snackbar());
    }
  });

  // node_modules/@material-ui/core/IconButton/IconButton.js
  var require_IconButton = __commonJS({
    "node_modules/@material-ui/core/IconButton/IconButton.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _colorManipulator = require_colorManipulator();
      var _ButtonBase = _interopRequireDefault(require_ButtonBase2());
      var _capitalize = _interopRequireDefault(require_capitalize());
      var styles61 = function styles62(theme2) {
        return {
          root: {
            textAlign: "center",
            flex: "0 0 auto",
            fontSize: theme2.typography.pxToRem(24),
            padding: 12,
            borderRadius: "50%",
            overflow: "visible",
            color: theme2.palette.action.active,
            transition: theme2.transitions.create("background-color", {
              duration: theme2.transitions.duration.shortest
            }),
            "&:hover": {
              backgroundColor: (0, _colorManipulator.alpha)(theme2.palette.action.active, theme2.palette.action.hoverOpacity),
              "@media (hover: none)": {
                backgroundColor: "transparent"
              }
            },
            "&$disabled": {
              backgroundColor: "transparent",
              color: theme2.palette.action.disabled
            }
          },
          edgeStart: {
            marginLeft: -12,
            "$sizeSmall&": {
              marginLeft: -3
            }
          },
          edgeEnd: {
            marginRight: -12,
            "$sizeSmall&": {
              marginRight: -3
            }
          },
          colorInherit: {
            color: "inherit"
          },
          colorPrimary: {
            color: theme2.palette.primary.main,
            "&:hover": {
              backgroundColor: (0, _colorManipulator.alpha)(theme2.palette.primary.main, theme2.palette.action.hoverOpacity),
              "@media (hover: none)": {
                backgroundColor: "transparent"
              }
            }
          },
          colorSecondary: {
            color: theme2.palette.secondary.main,
            "&:hover": {
              backgroundColor: (0, _colorManipulator.alpha)(theme2.palette.secondary.main, theme2.palette.action.hoverOpacity),
              "@media (hover: none)": {
                backgroundColor: "transparent"
              }
            }
          },
          disabled: {},
          sizeSmall: {
            padding: 3,
            fontSize: theme2.typography.pxToRem(18)
          },
          label: {
            width: "100%",
            display: "flex",
            alignItems: "inherit",
            justifyContent: "inherit"
          }
        };
      };
      exports.styles = styles61;
      var IconButton3 = /* @__PURE__ */ React69.forwardRef(function IconButton4(props, ref) {
        var _props$edge = props.edge, edge = _props$edge === void 0 ? false : _props$edge, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = (0, _objectWithoutProperties2.default)(props, ["edge", "children", "classes", "className", "color", "disabled", "disableFocusRipple", "size"]);
        return /* @__PURE__ */ React69.createElement(_ButtonBase.default, (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, className, color !== "default" && classes["color".concat((0, _capitalize.default)(color))], disabled && classes.disabled, size === "small" && classes["size".concat((0, _capitalize.default)(size))], {
            "start": classes.edgeStart,
            "end": classes.edgeEnd
          }[edge]),
          centerRipple: true,
          focusRipple: !disableFocusRipple,
          disabled,
          ref
        }, other), /* @__PURE__ */ React69.createElement("span", {
          className: classes.label
        }, children));
      });
      true ? IconButton3.propTypes = {
        children: (0, _utils.chainPropTypes)(_propTypes.default.node, function(props) {
          var found = React69.Children.toArray(props.children).some(function(child) {
            return /* @__PURE__ */ React69.isValidElement(child) && child.props.onClick;
          });
          if (found) {
            return new Error(["Material-UI: You are providing an onClick event listener to a child of a button element.", "Firefox will never trigger the event.", "You should move the onClick listener to the parent button element.", "https://github.com/mui-org/material-ui/issues/13957"].join("\n"));
          }
          return null;
        }),
        classes: _propTypes.default.object.isRequired,
        className: _propTypes.default.string,
        color: _propTypes.default.oneOf(["default", "inherit", "primary", "secondary"]),
        disabled: _propTypes.default.bool,
        disableFocusRipple: _propTypes.default.bool,
        disableRipple: _propTypes.default.bool,
        edge: _propTypes.default.oneOf(["start", "end", false]),
        size: _propTypes.default.oneOf(["small", "medium"])
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiIconButton"
      })(IconButton3);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/IconButton/index.js
  var require_IconButton2 = __commonJS({
    "node_modules/@material-ui/core/IconButton/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _IconButton.default;
        }
      });
      var _IconButton = _interopRequireDefault(require_IconButton());
    }
  });

  // node_modules/@material-ui/icons/Close.js
  var require_Close = __commonJS({
    "node_modules/@material-ui/icons/Close.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React69 = _interopRequireWildcard(require_react());
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ React69.createElement("path", {
        d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
      }), "Close");
      exports.default = _default;
    }
  });

  // node_modules/@iobroker/adapter-react/Prompt.js
  var require_Prompt = __commonJS({
    "node_modules/@iobroker/adapter-react/Prompt.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      function printPrompt() {
        var prompt = "\n\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \n\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2554\u255D\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2554\u255D \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\n\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u255D  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n\u2588\u2588\u2551\u255A\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2551  \u2588\u2588\u2551\u255A\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\n\u255A\u2550\u255D \u255A\u2550\u2550\u2550\u2550\u2550\u255D \u255A\u2550\u2550\u2550\u2550\u2550\u255D \u255A\u2550\u255D  \u255A\u2550\u255D \u255A\u2550\u2550\u2550\u2550\u2550\u255D \u255A\u2550\u255D  \u255A\u2550\u255D\u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D\u255A\u2550\u255D  \u255A\u2550\u255D\n";
        console.log(prompt);
        console.log("Nice to see you here! :) Join our dev community here https://github.com/ioBroker/ioBroker or here https://github.com/iobroker-community-adapters");
        console.log("Help us to create open source project with reactJS!");
        console.log("See you :)");
      }
      var _default = printPrompt;
      exports["default"] = _default;
    }
  });

  // node_modules/@iobroker/adapter-react/Components/loader.css
  var require_ = __commonJS({
    "node_modules/@iobroker/adapter-react/Components/loader.css"(exports, module) {
      module.exports = {};
    }
  });

  // node_modules/@iobroker/adapter-react/Components/Loader.js
  var require_Loader = __commonJS({
    "node_modules/@iobroker/adapter-react/Components/Loader.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _inherits2 = _interopRequireDefault(require_inherits());
      var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
      var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      require_();
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = (0, _getPrototypeOf2["default"])(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return (0, _possibleConstructorReturn2["default"])(this, result);
        };
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      var styles61 = function styles62(theme2) {
        return {};
      };
      var Loader = /* @__PURE__ */ function(_React$Component) {
        (0, _inherits2["default"])(Loader2, _React$Component);
        var _super = _createSuper(Loader2);
        function Loader2(props) {
          var _this;
          (0, _classCallCheck2["default"])(this, Loader2);
          _this = _super.call(this, props);
          _this.size = _this.props.size || 234;
          return _this;
        }
        (0, _createClass2["default"])(Loader2, [{
          key: "render",
          value: function render() {
            var theme2 = this.props.themeType || this.props.theme || "light";
            return /* @__PURE__ */ _react["default"].createElement("div", {
              className: "logo-back logo-background-" + theme2
            }, /* @__PURE__ */ _react["default"].createElement("div", {
              className: "logo-div",
              style: {
                width: this.size,
                height: this.size
              }
            }, /* @__PURE__ */ _react["default"].createElement("div", {
              className: "logo-top logo-background-" + theme2,
              style: {
                left: "37%"
              }
            }), /* @__PURE__ */ _react["default"].createElement("div", {
              className: "logo-top logo-background-" + theme2,
              style: {
                left: "57%"
              }
            }), /* @__PURE__ */ _react["default"].createElement("div", {
              className: "logo-border logo-background-" + theme2 + " logo-animate-wait",
              style: {
                borderWidth: this.size * 0.132
              }
            }), /* @__PURE__ */ _react["default"].createElement("div", {
              className: "logo-i logo-animate-color-inside-" + theme2
            }), /* @__PURE__ */ _react["default"].createElement("div", {
              className: "logo-i-top logo-animate-color-inside-" + theme2,
              style: {
                top: "18%"
              }
            }), /* @__PURE__ */ _react["default"].createElement("div", {
              className: "logo-i-top logo-animate-color-inside-" + theme2,
              style: {
                bottom: "18%"
              }
            })), /* @__PURE__ */ _react["default"].createElement("div", {
              className: "logo-animate-grow logo-animate-grow-" + theme2,
              style: {
                width: this.size + 11,
                height: this.size + 11
              }
            }));
          }
        }]);
        return Loader2;
      }(_react["default"].Component);
      Loader.propTypes = {
        size: _propTypes["default"].number,
        themeType: _propTypes["default"].string
      };
      var _export = (0, _withStyles["default"])(styles61)(Loader);
      var _default = _export;
      exports["default"] = _default;
    }
  });

  // node_modules/@iobroker/adapter-react/Components/Router.js
  var require_Router = __commonJS({
    "node_modules/@iobroker/adapter-react/Components/Router.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
      var _inherits2 = _interopRequireDefault(require_inherits());
      var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
      var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
      var _react = _interopRequireDefault(require_react());
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = (0, _getPrototypeOf2["default"])(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return (0, _possibleConstructorReturn2["default"])(this, result);
        };
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      var Router = /* @__PURE__ */ function(_React$Component) {
        (0, _inherits2["default"])(Router2, _React$Component);
        var _super = _createSuper(Router2);
        function Router2(props) {
          var _this;
          (0, _classCallCheck2["default"])(this, Router2);
          _this = _super.call(this, props);
          _this.onHashChangedBound = _this.onHashChanged.bind((0, _assertThisInitialized2["default"])(_this));
          return _this;
        }
        (0, _createClass2["default"])(Router2, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            window.addEventListener("hashchange", this.onHashChangedBound);
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            window.removeEventListener("hashchange", this.onHashChangedBound);
          }
        }, {
          key: "onHashChanged",
          value: function onHashChanged() {
          }
        }], [{
          key: "getLocation",
          value: function getLocation() {
            var hash = window.location.hash;
            hash = hash.replace(/^#/, "");
            var parts = hash.split("/").map(function(item) {
              try {
                return item ? decodeURIComponent(item) : "";
              } catch (e) {
                console.error("Router: Cannot decode " + item);
                return item || "";
              }
            });
            return {
              tab: parts[0] || "",
              dialog: parts[1] || "",
              id: parts[2] || "",
              arg: parts[3] || ""
            };
          }
        }, {
          key: "doNavigate",
          value: function doNavigate(tab, dialog, id, arg) {
            var hash = "";
            var location = Router2.getLocation();
            if (arg !== void 0 && !id) {
              id = location.id;
            }
            if (id && !dialog) {
              dialog = location.dialog;
            }
            if (dialog && !tab) {
              tab = location.tab;
            } else if (tab === null) {
              tab = location.tab;
            }
            if (tab) {
              hash = "#" + tab;
              if (dialog) {
                hash += "/" + dialog;
                if (id) {
                  hash += "/" + id;
                  if (arg !== void 0) {
                    hash += "/" + arg;
                  }
                }
              }
            }
            if (window.location.hash !== hash) {
              window.location.hash = hash;
            }
          }
        }]);
        return Router2;
      }(_react["default"].Component);
      var _default = Router;
      exports["default"] = _default;
    }
  });

  // node_modules/@material-ui/core/Fab/Fab.js
  var require_Fab = __commonJS({
    "node_modules/@material-ui/core/Fab/Fab.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _extends2 = _interopRequireDefault(require_extends());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _ButtonBase = _interopRequireDefault(require_ButtonBase2());
      var _capitalize = _interopRequireDefault(require_capitalize());
      var styles61 = function styles62(theme2) {
        return {
          root: (0, _extends2.default)({}, theme2.typography.button, {
            boxSizing: "border-box",
            minHeight: 36,
            transition: theme2.transitions.create(["background-color", "box-shadow", "border"], {
              duration: theme2.transitions.duration.short
            }),
            borderRadius: "50%",
            padding: 0,
            minWidth: 0,
            width: 56,
            height: 56,
            boxShadow: theme2.shadows[6],
            "&:active": {
              boxShadow: theme2.shadows[12]
            },
            color: theme2.palette.getContrastText(theme2.palette.grey[300]),
            backgroundColor: theme2.palette.grey[300],
            "&:hover": {
              backgroundColor: theme2.palette.grey.A100,
              "@media (hover: none)": {
                backgroundColor: theme2.palette.grey[300]
              },
              "&$disabled": {
                backgroundColor: theme2.palette.action.disabledBackground
              },
              textDecoration: "none"
            },
            "&$focusVisible": {
              boxShadow: theme2.shadows[6]
            },
            "&$disabled": {
              color: theme2.palette.action.disabled,
              boxShadow: theme2.shadows[0],
              backgroundColor: theme2.palette.action.disabledBackground
            }
          }),
          label: {
            width: "100%",
            display: "inherit",
            alignItems: "inherit",
            justifyContent: "inherit"
          },
          primary: {
            color: theme2.palette.primary.contrastText,
            backgroundColor: theme2.palette.primary.main,
            "&:hover": {
              backgroundColor: theme2.palette.primary.dark,
              "@media (hover: none)": {
                backgroundColor: theme2.palette.primary.main
              }
            }
          },
          secondary: {
            color: theme2.palette.secondary.contrastText,
            backgroundColor: theme2.palette.secondary.main,
            "&:hover": {
              backgroundColor: theme2.palette.secondary.dark,
              "@media (hover: none)": {
                backgroundColor: theme2.palette.secondary.main
              }
            }
          },
          extended: {
            borderRadius: 48 / 2,
            padding: "0 16px",
            width: "auto",
            minHeight: "auto",
            minWidth: 48,
            height: 48,
            "&$sizeSmall": {
              width: "auto",
              padding: "0 8px",
              borderRadius: 34 / 2,
              minWidth: 34,
              height: 34
            },
            "&$sizeMedium": {
              width: "auto",
              padding: "0 16px",
              borderRadius: 40 / 2,
              minWidth: 40,
              height: 40
            }
          },
          focusVisible: {},
          disabled: {},
          colorInherit: {
            color: "inherit"
          },
          sizeSmall: {
            width: 40,
            height: 40
          },
          sizeMedium: {
            width: 48,
            height: 48
          }
        };
      };
      exports.styles = styles61;
      var Fab = /* @__PURE__ */ React69.forwardRef(function Fab2(props, ref) {
        var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, focusVisibleClassName = props.focusVisibleClassName, _props$size = props.size, size = _props$size === void 0 ? "large" : _props$size, _props$variant = props.variant, variant = _props$variant === void 0 ? "circular" : _props$variant, other = (0, _objectWithoutProperties2.default)(props, ["children", "classes", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"]);
        return /* @__PURE__ */ React69.createElement(_ButtonBase.default, (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, className, size !== "large" && classes["size".concat((0, _capitalize.default)(size))], disabled && classes.disabled, variant === "extended" && classes.extended, {
            "primary": classes.primary,
            "secondary": classes.secondary,
            "inherit": classes.colorInherit
          }[color]),
          component,
          disabled,
          focusRipple: !disableFocusRipple,
          focusVisibleClassName: (0, _clsx.default)(classes.focusVisible, focusVisibleClassName),
          ref
        }, other), /* @__PURE__ */ React69.createElement("span", {
          className: classes.label
        }, children));
      });
      true ? Fab.propTypes = {
        children: _propTypes.default.node.isRequired,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        color: _propTypes.default.oneOf(["default", "inherit", "primary", "secondary"]),
        component: _propTypes.default.elementType,
        disabled: _propTypes.default.bool,
        disableFocusRipple: _propTypes.default.bool,
        disableRipple: _propTypes.default.bool,
        focusVisibleClassName: _propTypes.default.string,
        href: _propTypes.default.string,
        size: _propTypes.default.oneOf(["large", "medium", "small"]),
        variant: (0, _utils.chainPropTypes)(_propTypes.default.oneOf(["extended", "circular", "round"]), function(props) {
          if (props.variant === "round") {
            throw new Error('Material-UI: variant="round" was renamed variant="circular" for consistency.');
          }
          return null;
        })
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiFab"
      })(Fab);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Fab/index.js
  var require_Fab2 = __commonJS({
    "node_modules/@material-ui/core/Fab/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _Fab.default;
        }
      });
      var _Fab = _interopRequireDefault(require_Fab());
    }
  });

  // node_modules/@material-ui/core/Toolbar/Toolbar.js
  var require_Toolbar = __commonJS({
    "node_modules/@material-ui/core/Toolbar/Toolbar.js"(exports) {
      "use strict";
      var _interopRequireWildcard = require_interopRequireWildcard();
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.styles = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
      var _defineProperty2 = _interopRequireDefault(require_defineProperty());
      var React69 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var styles61 = function styles62(theme2) {
        return {
          root: {
            position: "relative",
            display: "flex",
            alignItems: "center"
          },
          gutters: (0, _defineProperty2.default)({
            paddingLeft: theme2.spacing(2),
            paddingRight: theme2.spacing(2)
          }, theme2.breakpoints.up("sm"), {
            paddingLeft: theme2.spacing(3),
            paddingRight: theme2.spacing(3)
          }),
          regular: theme2.mixins.toolbar,
          dense: {
            minHeight: 48
          }
        };
      };
      exports.styles = styles61;
      var Toolbar = /* @__PURE__ */ React69.forwardRef(function Toolbar2(props, ref) {
        var classes = props.classes, className = props.className, _props$component = props.component, Component4 = _props$component === void 0 ? "div" : _props$component, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$variant = props.variant, variant = _props$variant === void 0 ? "regular" : _props$variant, other = (0, _objectWithoutProperties2.default)(props, ["classes", "className", "component", "disableGutters", "variant"]);
        return /* @__PURE__ */ React69.createElement(Component4, (0, _extends2.default)({
          className: (0, _clsx.default)(classes.root, classes[variant], className, !disableGutters && classes.gutters),
          ref
        }, other));
      });
      true ? Toolbar.propTypes = {
        children: _propTypes.default.node,
        classes: _propTypes.default.object.isRequired,
        className: _propTypes.default.string,
        component: _propTypes.default.elementType,
        disableGutters: _propTypes.default.bool,
        variant: _propTypes.default.oneOf(["regular", "dense"])
      } : void 0;
      var _default = (0, _withStyles.default)(styles61, {
        name: "MuiToolbar"
      })(Toolbar);
      exports.default = _default;
    }
  });

  // node_modules/@material-ui/core/Toolbar/index.js
  var require_Toolbar2 = __commonJS({
    "node_modules/@material-ui/core/Toolbar/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function get() {
          return _Toolbar.default;
        }
      });
      var _Toolbar = _interopRequireDefault(require_Toolbar());
    }
  });

  // node_modules/@material-ui/icons/Save.js
  var require_Save = __commonJS({
    "node_modules/@material-ui/icons/Save.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      var _interopRequireWildcard = require_interopRequireWildcard();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React69 = _interopRequireWildcard(require_react());
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ React69.createElement("path", {
        d: "M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"
      }), "Save");
      exports.default = _default;
    }
  });

  // node_modules/@iobroker/adapter-react/Components/SaveCloseButtons.js
  var require_SaveCloseButtons = __commonJS({
    "node_modules/@iobroker/adapter-react/Components/SaveCloseButtons.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _inherits2 = _interopRequireDefault(require_inherits());
      var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
      var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
      var _react = _interopRequireDefault(require_react());
      var _withStyles = _interopRequireDefault(require_withStyles3());
      var _Fab = _interopRequireDefault(require_Fab2());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _Toolbar = _interopRequireDefault(require_Toolbar2());
      var _i18n = _interopRequireDefault(require_i18n());
      var _Save = _interopRequireDefault(require_Save());
      var _Close = _interopRequireDefault(require_Close());
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = (0, _getPrototypeOf2["default"])(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return (0, _possibleConstructorReturn2["default"])(this, result);
        };
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      var styles61 = function styles62(theme2) {
        return {
          buttonIcon: {
            marginRight: 8
          }
        };
      };
      var SaveCloseButtons = /* @__PURE__ */ function(_React$Component) {
        (0, _inherits2["default"])(SaveCloseButtons2, _React$Component);
        var _super = _createSuper(SaveCloseButtons2);
        function SaveCloseButtons2(props) {
          var _this;
          (0, _classCallCheck2["default"])(this, SaveCloseButtons2);
          _this = _super.call(this, props);
          try {
            _this.isIFrame = !props.newReact && window.self !== window.top;
          } catch (e) {
            _this.isIFrame = !props.newReact;
          }
          return _this;
        }
        (0, _createClass2["default"])(SaveCloseButtons2, [{
          key: "render",
          value: function render() {
            var _this2 = this;
            var noTextOnButtons = this.props.noTextOnButtons;
            var buttonStyle = {
              borderRadius: this.props.theme.saveToolbar.button.borderRadius || 3,
              height: this.props.theme.saveToolbar.button.height || 32
            };
            var style = {
              bottom: this.isIFrame ? 38 : 0,
              left: this.props.paddingLeft || 0,
              right: 0,
              position: "absolute",
              background: this.props.theme.saveToolbar.background
            };
            if (this.props.dense) {
              style.minHeight = 48;
            }
            if (this.props.error) {
              buttonStyle.border = "1px solid red";
            }
            return /* @__PURE__ */ _react["default"].createElement(_Toolbar["default"], {
              position: "absolute",
              style
            }, /* @__PURE__ */ _react["default"].createElement(_Fab["default"], {
              variant: "extended",
              "aria-label": "Save",
              disabled: !this.props.changed || this.props.error,
              onClick: function onClick() {
                return _this2.props.onSave(false);
              },
              style: buttonStyle
            }, /* @__PURE__ */ _react["default"].createElement(_Save["default"], {
              className: !noTextOnButtons ? this.props.classes.buttonIcon : ""
            }), !noTextOnButtons && _i18n["default"].t("ra_Save")), /* @__PURE__ */ _react["default"].createElement(_Fab["default"], {
              variant: "extended",
              "aria-label": "Save and close",
              disabled: !this.props.changed || this.props.error,
              onClick: function onClick() {
                return _this2.props.onSave(true);
              },
              style: Object.assign({}, buttonStyle, {
                marginLeft: 10
              })
            }, /* @__PURE__ */ _react["default"].createElement(_Save["default"], {
              className: !noTextOnButtons ? this.props.classes.buttonIcon : ""
            }), !noTextOnButtons ? _i18n["default"].t("ra_Save and close") : "+", noTextOnButtons && /* @__PURE__ */ _react["default"].createElement(_Close["default"], null)), /* @__PURE__ */ _react["default"].createElement("div", {
              style: {
                flexGrow: 1
              }
            }), /* @__PURE__ */ _react["default"].createElement(_Fab["default"], {
              variant: "extended",
              "aria-label": "Close",
              onClick: function onClick() {
                return _this2.props.onClose();
              },
              style: buttonStyle
            }, /* @__PURE__ */ _react["default"].createElement(_Close["default"], {
              className: !noTextOnButtons ? this.props.classes.buttonIcon : ""
            }), !noTextOnButtons && _i18n["default"].t("ra_Close")));
          }
        }]);
        return SaveCloseButtons2;
      }(_react["default"].Component);
      SaveCloseButtons.propTypes = {
        dense: _propTypes["default"].bool,
        paddingLeft: _propTypes["default"].number,
        noTextOnButtons: _propTypes["default"].bool,
        theme: _propTypes["default"].object,
        isIFrame: _propTypes["default"].bool,
        changed: _propTypes["default"].bool.isRequired,
        error: _propTypes["default"].bool,
        onSave: _propTypes["default"].func.isRequired,
        onClose: _propTypes["default"].func.isRequired,
        newReact: _propTypes["default"].bool
      };
      var _export = (0, _withStyles["default"])(styles61)(SaveCloseButtons);
      var _default = _export;
      exports["default"] = _default;
    }
  });

  // node_modules/@iobroker/adapter-react/index.css
  var require_2 = __commonJS({
    "node_modules/@iobroker/adapter-react/index.css"(exports, module) {
      module.exports = {};
    }
  });

  // node_modules/@iobroker/adapter-react/i18n/en.json
  var require_en = __commonJS({
    "node_modules/@iobroker/adapter-react/i18n/en.json"(exports, module) {
      module.exports = {
        "ra_Are you sure?": "Are you sure?",
        ra_Cancel: "Cancel",
        ra_Copied: "Copied",
        "ra_Copied %s": 'Copied "%s"',
        ra_Error: "Error",
        "ra_Define functions": "Define functions",
        "ra_Define rooms": "Define rooms",
        ra_Message: "Message",
        "ra_Please select object ID...": "Please select object ID...",
        ra_Selected: "Selected",
        ra_Value: "Value",
        ra_Ok: "Ok",
        ra_dow_Su: "Su",
        ra_dow_Mo: "Mo",
        ra_dow_Tu: "Tu",
        ra_dow_We: "We",
        ra_dow_Th: "Th",
        ra_dow_Fr: "Fr",
        ra_dow_Sa: "Sa",
        ra_months_Jan: "Jan",
        ra_months_Feb: "Feb",
        ra_months_Mar: "Mar",
        ra_months_Apr: "Apr",
        ra_months_Mai: "Mai",
        ra_months_Jun: "Jun",
        ra_months_Jul: "Jul",
        ra_months_Aug: "Aug",
        ra_months_Sep: "Sep",
        ra_months_Oct: "Oct",
        ra_months_Nov: "Nov",
        ra_months_Dec: "Dec",
        "ra_Unknown error!": "Unknown error!",
        ra_filter_customs: "Settings",
        ra_filter_func: "Function",
        ra_filter_id: "ID",
        ra_filter_name: "Name",
        ra_filter_role: "Role",
        ra_filter_room: "Room",
        ra_filter_type: "Type",
        ra_invalidConfig: "Invalid settings",
        ra_otherConfig: "Settings from other adapter %s",
        ra_tooltip_ack: "Acknowledged",
        ra_tooltip_from: "From",
        ra_tooltip_lc: "Last changed",
        ra_tooltip_quality: "Quality",
        ra_tooltip_ts: "Time stamp",
        ra_tooltip_user: "User",
        ra_tooltip_value: "Value",
        ra_tooltip_editObject: "Edit object",
        ra_tooltip_deleteObject: "Delete object",
        ra_tooltip_customConfig: "Custom settings",
        ra_tooltip_copyState: "Copy the state value",
        ra_tooltip_editState: "Edit the state value",
        "ra_Listen on all IPs": "Listen on all IPs",
        ra_Save: "Save",
        "ra_Save and close": "Save and close",
        ra_Close: "Close",
        "ra_Auto (no custom columns)": "Auto (no custom columns)",
        "ra_Transparent dialog": "Transparent dialog",
        ra_Width: "Width",
        ra_val: "Value",
        ra_buttons: "Buttons",
        "ra_Configure visible columns": "Configure visible columns",
        "ra_Cannot update attribute, because not found in the object": "Cannot update attribute, because not found in the object",
        "ra_Edit object field": "Edit object field",
        "ra_Hide empty folders": "Hide empty folders",
        "ra_Reload files": "Reload files",
        "ra_Create folder": "Create folder",
        "ra_Upload file": "Upload file",
        "ra_User files": "User files",
        "ra_Confirm deletion of %s": "Confirm deletion of %s",
        "ra_Delete (no confirm for 5 mins)": "Delete (no confirm for 5 mins)",
        ra_Delete: "Delete",
        "ra_Toggle expert mode": "Toggle expert mode",
        "ra_Toggle view mode": "Toggle view mode",
        re_Root: "Root",
        "re_Back to %s": "Back to %s",
        "ra_Place your files here or click here to open the browse dialog": "Place your files here or click here to open the browse dialog",
        "ra_If no file will be created in the folder, it will disappear after the browser closed": "If no file will be created in the folder, it will disappear after the browser closed",
        "ra_Folder name": "Folder name",
        "ra_Create new folder in %s": "Create new folder in %s",
        "ra_Duplicate name": "Duplicate name",
        "ra_Invalid parent folder!": "Invalid parent folder!",
        "ra_Drop file here": "Drop file here",
        "ra_Suppress question for next %s minutes": "Suppress question for next %s minutes",
        "ra_Clear filter": "Clear filter",
        ra_Update: "Update",
        "ra_Load configuration from file": "Load configuration from file",
        "ra_Save configuration to file": "Save configuration to file",
        sc_cron: "CRON",
        sc_date: "Date",
        sc_dates: "Dates",
        sc_dows: "Day of week",
        sc_every: "Every",
        sc_everyN_dates: "every N days",
        sc_everyN_dows: "every N day of week",
        sc_everyN_hours: "every N hours",
        sc_everyN_minutes: "every N minutes",
        sc_everyN_months: "every N months",
        sc_everyN_seconds: "every N seconds",
        sc_every_dates: "every day",
        sc_every_dows: "every day of the week",
        sc_every_hours: "every hour",
        sc_every_minutes: "every minute",
        sc_every_months: "every month",
        sc_every_seconds: "every second",
        sc_from: "From",
        sc_hours: "Hours",
        sc_interval: "Interval",
        sc_intervalBetween: "Interval between",
        sc_minutes: "Minutes",
        sc_months: "months",
        sc_once: "Once",
        sc_period: "Period",
        sc_seconds: "Seconds",
        sc_simple: "Simple",
        sc_specific: "Specific time",
        sc_specific_dates: "specific dates",
        sc_specific_dows: "specific day of weeks",
        sc_specific_hours: "specific hours",
        sc_specific_minutes: "specific minutes",
        sc_specific_months: "specific months",
        sc_specific_seconds: "specific seconds",
        sc_time: "Time",
        sc_to: "To",
        sc_wizard: "Wizard",
        sch_all: "all",
        sch_astroDay: "Astro day",
        sch_astroNight: "Astro night",
        sch_astro_dawn: "Dawn",
        sch_astro_dusk: "Dusk",
        sch_astro_goldenHour: "Golden hour",
        sch_astro_goldenHourEnd: "Golden hour end",
        sch_astro_nadir: "Nadir",
        sch_astro_nauticalDawn: "Nautical dawn",
        sch_astro_nauticalDusk: "Nautical dusk",
        sch_astro_night: "Night",
        sch_astro_nightEnd: "Night end",
        sch_astro_solarNoon: "Solar noon",
        sch_astro_sunrise: "Sunrise",
        sch_astro_sunriseEnd: "Sunrise end",
        sch_astro_sunset: "Sunset",
        sch_astro_sunsetStart: "Sunset start",
        sch_at: "at",
        sch_desc_atTime: "at %s",
        sch_desc_everyDay: "every day",
        sch_desc_everyHour: "every hour",
        sch_desc_everyMinute: "every minute",
        sch_desc_everyMonth: "every month",
        sch_desc_everyNDay: "every %s day",
        sch_desc_everyNHours: "every %s hours",
        sch_desc_everyNMinutes: "every %s minutes",
        sch_desc_everyNMonths: "every %s months",
        sch_desc_everyNWeeks: "every %s weeks",
        sch_desc_everyNYears: "every %s years",
        sch_desc_everyWeek: "every week",
        sch_desc_everyYear: "every year",
        sch_desc_intervalFromTo: "from %s to %s",
        sch_desc_never: "never",
        sch_desc_onDate: "on %s of %s",
        sch_desc_onDates: "on %s and %s of",
        sch_desc_onEveryDate: "on every date of",
        sch_desc_onMonth: "%s",
        sch_desc_onMonths: "%s and %s",
        sch_desc_onWeekday: "on %s",
        sch_desc_onWeekdays: "on %s and %s",
        sch_desc_onWeekends: "on weekends",
        sch_desc_onWorkdays: "on working days",
        sch_desc_onceInPast: "will ne be not executed any more, because start is in the past",
        sch_desc_once_on: "on %s",
        sch_desc_validFrom: "from %s",
        sch_desc_validFromTo: "Execute from to",
        sch_desc_validTo: "to %s",
        sch_every: "every",
        sch_exactTime: "Specific time",
        sch_from: "from",
        sch_fromTo: "From-to",
        sch_intervalTime: "Interval time",
        sch_invert: "invert",
        sch_no_one: "none",
        sch_on: "on",
        sch_period: "Period",
        sch_periodDaily: "Daily",
        sch_periodDates: "Dates",
        sch_periodDay: "Day",
        sch_periodEvery: "Every",
        sch_periodEveryDay: "Every day",
        sch_periodEveryMonth: "Every month",
        sch_periodEveryWeek: "Every week",
        sch_periodEveryYear: "Every year",
        sch_periodHours: "Hours",
        sch_periodMinutes: "Minutes",
        sch_periodMonth: "month",
        sch_periodMonthly: "Monthly",
        sch_periodOnce: "Once",
        sch_periodSpecificMonths: "Specific months",
        sch_periodWeek: "Week",
        sch_periodWeekdays: "Weekdays",
        sch_periodWeekend: "Weekend",
        sch_periodWeekly: "Weekly",
        sch_periodWorkdays: "Workdays",
        sch_periodYear: "Year",
        sch_periodYearly: "Yearly",
        sch_specificTime: "Specific time",
        sch_time: "Time",
        sch_to: "to",
        sch_valid: "Valid",
        sch_validFrom: "from",
        sch_validTo: "to",
        sch_wholeDay: "Whole day",
        sch_yearEveryMonth: "every month",
        "ra_Define schedule...": "Define schedule...",
        ra_Repeat: "Repeat",
        "ra_use seconds": "use seconds",
        ra_close: "close",
        "ra_Toggle the states view": "Toggle the states view",
        "ra_Add new child object to selected parent": "Add new child object to selected parent",
        "ra_Add objects tree from JSON file": "Add objects tree from JSON file",
        "ra_Save objects tree as JSON file": "Save objects tree as JSON file",
        ra_Objects: "Objects",
        ra_States: "States",
        ra_object_changed_by_user: "Object last changed at",
        ra_object_changed_by: "Object changed by",
        ra_state_changed_from: "Object changed from",
        ra_state_changed_by: "State changed by",
        ra_aclOwner_read_object: "Owner can read object",
        ra_aclOwner_read_state: "Owner can read state",
        ra_aclOwner_write_object: "Owner can write object",
        ra_aclOwner_write_state: "Owner can write state",
        ra_aclGroup_read_object: "Group can read object",
        ra_aclGroup_read_state: "Group can read state",
        ra_aclGroup_write_object: "Group can write object",
        ra_aclGroup_write_state: "Group can write state",
        ra_aclEveryone_read_object: "Everyone can read object",
        ra_aclEveryone_read_state: "Everyone can read state",
        ra_aclEveryone_write_object: "Everyone can write object",
        ra_aclEveryone_write_state: "Everyone can write state",
        "ra_Folders always first": "Folders always first",
        ra_changedFrom: "Changed from",
        ra_qualityCode: "Quality code",
        ra_timestamp: "Timestamp",
        ra_lastChange: "Last change",
        "ra_Owner group": "Owner group",
        "ra_Owner user": "Owner user",
        ra_Create: "Create",
        "ra_Changed from": "Changed from",
        "ra_Quality code": "Quality",
        ra_Timestamp: "Timestamp",
        "ra_Last change": "Last change",
        "ra_Collapse all nodes": "Collapse all nodes",
        "ra_Edit custom config": "Edit custom config",
        "ra_Collapse one step node": "Collapse one level",
        "ra_Expand one step node": "Expand one level",
        "ra_Refresh tree": "Refresh tree",
        "ra_Expand all nodes": "Expand all nodes",
        "ra_Deselect all": "Unselect all",
        "ra_Select all": "Select all",
        "ra_%s object(s) processed": "%s object(s) processed",
        "ra_Invalid structure": "Invalid structure",
        "ra_%s was imported": "%s was imported",
        "ra_Failed to open JSON File": "Failed to open JSON File",
        "ra_Only following structures of objects are available:": "Only following structures of objects are available:",
        "ra_Folder \u2192 State": "Folder \u2192 State",
        "ra_Folder \u2192 Channel \u2192 State": "Folder \u2192 Channel \u2192 State",
        "ra_Folder \u2192 Device \u2192 Channel \u2192 State": "Folder \u2192 Device \u2192 Channel \u2192 State",
        "ra_Device \u2192 Channel \u2192 State": "Device \u2192 Channel \u2192 State",
        "ra_Channel \u2192 State": "Channel \u2192 State",
        'ra_Non-experts may create new objects only in "0_userdata.0" or "alias.0".': 'Non-experts may create new objects only in "0_userdata.0" or "alias.0".',
        'ra_The experts may create objects everywhere but from second level (e.g. "vis.0" or "javascript.0").': 'The experts may create objects everywhere but from second level (e.g. "vis.0" or "javascript.0").',
        ra_expertMode: "Expert mode",
        "ra_On weekdays": "On weekdays",
        "ra_Drop the files here...": "Drop the file here...",
        "ra_Drag 'n' drop some files here, or click to select files": "Drag 'n' drop some files here, or click to select files",
        ra_Clear: "Delete",
        "ra_Clear icon": "Clear icon",
        ra_none: "none",
        "ra_Select predefined icon": "Select predefined icon",
        "ra_Show lines between rows": "Show lines between rows"
      };
    }
  });

  // node_modules/@iobroker/adapter-react/i18n/de.json
  var require_de = __commonJS({
    "node_modules/@iobroker/adapter-react/i18n/de.json"(exports, module) {
      module.exports = {
        ra_filter_func: "Funktion",
        ra_filter_id: "ID",
        ra_filter_name: "Name",
        ra_filter_type: "Typ",
        ra_filter_customs: "Einstellungen",
        ra_filter_role: "Rolle",
        ra_filter_room: "Raum",
        ra_tooltip_ack: "Best\xE4tigt",
        ra_tooltip_from: "Von",
        ra_tooltip_lc: "Zuletzt ge\xE4ndert",
        ra_tooltip_quality: "Qualit\xE4t",
        ra_tooltip_ts: "Zeitstempel",
        ra_tooltip_user: "Benutzer",
        ra_tooltip_value: "Wert",
        "ra_Are you sure?": "Bist du sicher?",
        ra_Cancel: "Abbrechen",
        ra_Copied: "Kopiert",
        "ra_Copied %s": '"%s" kopiert',
        "ra_Define functions": "Funktionen definieren",
        "ra_Define rooms": "R\xE4ume definieren",
        ra_Error: "Fehler",
        ra_Message: "Meldung",
        ra_Ok: "OK",
        "ra_Please select object ID...": "Bitte Objekt-ID ausw\xE4hlen...",
        ra_Selected: "Ausgew\xE4hlt",
        "ra_Unknown error!": "Unbekannter Fehler!",
        ra_Value: "Wert",
        ra_invalidConfig: "Ung\xFCltige Einstellungen",
        ra_otherConfig: "Einstellungen von anderen Adaptern %s",
        ra_tooltip_copyState: "Kopieren Sie den Statuswert",
        ra_tooltip_customConfig: "Benutzerdefinierte Einstellungen",
        ra_tooltip_deleteObject: "Objekt l\xF6schen",
        ra_tooltip_editObject: "Objekt bearbeiten",
        ra_tooltip_editState: "Bearbeiten Sie den Statuswert",
        ra_dow_Fr: "Fr",
        ra_dow_Mo: "Mo",
        ra_dow_Sa: "Sa",
        ra_dow_Su: "So",
        ra_dow_Th: "Do",
        ra_dow_Tu: "Di",
        ra_dow_We: "Mi",
        "ra_Listen on all IPs": "Zugriff von allen IPs zulassen",
        ra_Save: "Speichern",
        "ra_Save and close": "Speichern und schlie\xDFen",
        ra_Close: "Schlie\xDFen",
        "ra_Auto (no custom columns)": "Auto (keine benutzerdefinierten Spalten)",
        "ra_Transparent dialog": "Transparenter Dialog",
        ra_Width: "Breite",
        ra_val: "Wert",
        ra_buttons: "Tasten",
        "ra_Configure visible columns": "Spalten Konfigurieren",
        ra_close: "Schlie\xDFen",
        "ra_Cannot update attribute, because not found in the object": "Attribut kann nicht aktualisiert werden, da es nicht im Objekt gefunden wurde",
        "ra_Edit object field": "Objektfeld bearbeiten",
        "ra_Hide empty folders": "Leere Ordner ausblenden",
        "ra_Reload files": "Dateien neu laden",
        "ra_Create folder": "Ordner erstellen",
        "ra_Upload file": "Datei hochladen",
        "ra_User files": "Benutzerdaten",
        "ra_Confirm deletion of %s": "Best\xE4tigen Sie das L\xF6schen von %s",
        "ra_Delete (no confirm for 5 mins)": "L\xF6schen (keine Best\xE4tigung f\xFCr 5 Minuten)",
        ra_Delete: "L\xF6schen",
        "ra_Toggle expert mode": "Expertenmodus umschalten",
        "ra_Toggle view mode": "Ansichtsmodus umschalten",
        re_Root: "Anfang",
        "re_Back to %s": "Zur\xFCck zu %s",
        "ra_Place your files here or click here to open the browse dialog": "Platzieren Sie Ihre Dateien hier oder klicken Sie hier, um den Suchdialog zu \xF6ffnen",
        "ra_If no file will be created in the folder, it will disappear after the browser closed": "Wenn im Ordner keine Datei erstellt wird, verschwindet dieser nach dem Schlie\xDFen des Browsers",
        "ra_Folder name": "Ordnernamen",
        "ra_Create new folder in %s": 'Neuen Ordner in "%s" erstellen',
        "ra_Duplicate name": "Doppelter Name",
        "ra_Invalid parent folder!": "Ung\xFCltiger \xFCbergeordneter Ordner!",
        "ra_Drop file here": "Datei hier ablegen",
        "ra_Suppress question for next %s minutes": "Frage f\xFCr die n\xE4chsten %s Minuten unterdr\xFCcken",
        "ra_Clear filter": "Filter l\xF6schen",
        ra_Update: "Aktualisieren",
        "ra_Load configuration from file": "Konfiguration aus Datei laden",
        "ra_Save configuration to file": "Konfiguration in Datei speichern",
        sc_cron: "CRON",
        sc_date: "Datum",
        sc_dates: "Tage",
        sc_dows: "Wochentage",
        sc_every: "Jeden",
        sc_everyN_dates: "alle N Tage",
        sc_everyN_dows: "alle N Wochentage",
        sc_everyN_hours: "alle N Stunden",
        sc_everyN_minutes: "alle N Minuten",
        sc_everyN_months: "alle N Monate",
        sc_everyN_seconds: "alle N Sekunden",
        sc_every_dates: "jeden Tag",
        sc_every_dows: "jeden Tag der Woche",
        sc_every_hours: "jede Stunde",
        sc_every_minutes: "jede Minute",
        sc_every_months: "jeden Monat",
        sc_every_seconds: "jede Sekunde",
        sc_from: "Von",
        sc_hours: "Stunden",
        sc_interval: "Intervall",
        sc_intervalBetween: "Intervall zwischen",
        sc_minutes: "Minuten",
        sc_months: "Monate",
        sc_once: "Einmal",
        sc_period: "Zeitraum",
        sc_seconds: "Sekunden",
        sc_simple: "Einfach",
        sc_specific: "Bestimmte Zeit",
        sc_specific_dates: "bestimmte Tage",
        sc_specific_dows: "bestimmten Wochentag",
        sc_specific_hours: "bestimmte Stunden",
        sc_specific_minutes: "bestimmte Minuten",
        sc_specific_months: "bestimmte Monate",
        sc_specific_seconds: "bestimmte Sekunden",
        sc_time: "Zeit",
        sc_to: "Bis",
        sc_wizard: "Wizard",
        sch_all: "alle",
        sch_astroDay: "Astronomisch Tag",
        sch_astroNight: "Astronomisch Nacht",
        sch_astro_dawn: "Morgend\xE4mmerung",
        sch_astro_dusk: "Abendd\xE4mmerung",
        sch_astro_goldenHour: "Goldene Stunde",
        sch_astro_goldenHourEnd: "Goldene Stundenende",
        sch_astro_nadir: "Nadir",
        sch_astro_nauticalDawn: "Nautische Morgend\xE4mmerung",
        sch_astro_nauticalDusk: "Nautische Abendd\xE4mmerung",
        sch_astro_night: "Nacht",
        sch_astro_nightEnd: "Nachtende",
        sch_astro_solarNoon: "Sonnenmittag",
        sch_astro_sunrise: "Sonnenaufgang",
        sch_astro_sunriseEnd: "Sonnenaufgangende",
        sch_astro_sunset: "Sonnenuntergang",
        sch_astro_sunsetStart: "Sonnenuntergangstart",
        sch_at: "am",
        sch_desc_atTime: "um %s",
        sch_desc_everyDay: "jeden Tag",
        sch_desc_everyHour: "jede Stunde",
        sch_desc_everyMinute: "jede Minute",
        sch_desc_everyMonth: "jeden Monat",
        sch_desc_everyNDay: "jeden %s Tag",
        sch_desc_everyNHours: "alle %s Stunden",
        sch_desc_everyNMinutes: "alle %s Minuten",
        sch_desc_everyNMonths: "alle %s Monate",
        sch_desc_everyNWeeks: "alle %s Wochen",
        sch_desc_everyNYears: "alle %s Jahre",
        sch_desc_everyWeek: "jede Woche",
        sch_desc_everyYear: "jedes Jahr",
        sch_desc_intervalFromTo: "von %s bis %s",
        sch_desc_never: "noch nie",
        sch_desc_onDate: "am %s von %s",
        sch_desc_onDates: "am %s und %s von",
        sch_desc_onEveryDate: "an jedem Datum von",
        sch_desc_onMonth: "%s",
        sch_desc_onMonths: "%s und %s",
        sch_desc_onWeekday: "auf %s",
        sch_desc_onWeekdays: "auf %s und %s",
        sch_desc_onWeekends: "an Wochenenden",
        sch_desc_onWorkdays: "an Werktagen",
        sch_desc_onceInPast: "wird nicht mehr ausgef\xFChrt, weil der Start in der Vergangenheit ist",
        sch_desc_once_on: "auf %s",
        sch_desc_validFrom: "von %s",
        sch_desc_validFromTo: "Ausf\xFChren von bis",
        sch_desc_validTo: "bis %s",
        sch_every: "jeden",
        sch_exactTime: "Bestimmte Zeit",
        sch_from: "von",
        sch_fromTo: "Von bis",
        sch_intervalTime: "Zeitintervall",
        sch_invert: "umkehren",
        sch_no_one: "keiner",
        sch_on: "am",
        sch_period: "Zeitraum",
        sch_periodDaily: "T\xE4glich",
        sch_periodDates: "Daten",
        sch_periodDay: "Tag",
        sch_periodEvery: "Jeden",
        sch_periodEveryDay: "Jeden Tag",
        sch_periodEveryMonth: "Jeden Monat",
        sch_periodEveryWeek: "Jede Woche",
        sch_periodEveryYear: "Jedes Jahr",
        sch_periodHours: "Stunden",
        sch_periodMinutes: "Minuten",
        sch_periodMonth: "Monat",
        sch_periodMonthly: "Monatlich",
        sch_periodOnce: "Einmal",
        sch_periodSpecificMonths: "Bestimmte Monate",
        sch_periodWeek: "Woche",
        sch_periodWeekdays: "Wochentage",
        sch_periodWeekend: "Wochenende",
        sch_periodWeekly: "W\xF6chentlich",
        sch_periodWorkdays: "Arbeitstage",
        sch_periodYear: "Jahr",
        sch_periodYearly: "J\xE4hrlich",
        sch_specificTime: "Bestimmte Zeit",
        sch_time: "Zeit",
        sch_to: "zu",
        sch_valid: "G\xFCltigkeit",
        sch_validFrom: "von",
        sch_validTo: "bis",
        sch_wholeDay: "Ganzer Tag",
        sch_yearEveryMonth: "jeden Monat",
        "ra_Define schedule...": "Zeitplan definieren ...",
        ra_Repeat: "Wiederholen",
        "ra_use seconds": "Sekunden benutzen",
        ra_months_Apr: "Apr",
        ra_months_Aug: "Aug",
        ra_months_Dec: "Dez",
        ra_months_Jan: "Jan",
        ra_months_Feb: "Feb",
        ra_months_Jul: "Jul",
        ra_months_Jun: "Jun",
        ra_months_Mai: "Mai",
        ra_months_Mar: "M\xE4r",
        ra_months_Nov: "Nov",
        ra_months_Oct: "Okt",
        ra_months_Sep: "Sep",
        "ra_Toggle the states view": "Statusansicht umschalten",
        "ra_Add new child object to selected parent": "Dem ausgew\xE4hlten \xFCbergeordneten Objekt ein neues untergeordnetes Objekt hinzuf\xFCgen",
        "ra_Add objects tree from JSON file": "Objektbaum aus JSON-Datei hinzuf\xFCgen",
        "ra_Save objects tree as JSON file": "Objektbaum als JSON-Datei speichern",
        ra_Objects: "Objekte",
        ra_States: "Zust\xE4nde",
        ra_object_changed_by_user: "Objekt zuletzt ge\xE4ndert um",
        ra_object_changed_by: "Objekt ge\xE4ndert von",
        ra_state_changed_from: "Objekt ge\xE4ndert von",
        ra_state_changed_by: "Zustand ge\xE4ndert durch",
        ra_aclOwner_read_object: "Besitzer kann Objekt lesen",
        ra_aclOwner_read_state: "Besitzer kann Zustand lesen",
        ra_aclOwner_write_object: "Besitzer kann Objekt schreiben",
        ra_aclOwner_write_state: "Besitzer kann Zustand schreiben",
        ra_aclGroup_read_object: "Gruppe kann Objekt lesen",
        ra_aclGroup_read_state: "Gruppe kann Status lesen",
        ra_aclGroup_write_object: "Gruppe kann Objekt schreiben",
        ra_aclGroup_write_state: "Gruppe kann Status schreiben",
        ra_aclEveryone_read_object: "Jeder kann Objekt lesen",
        ra_aclEveryone_read_state: "Jeder kann Zustand lesen",
        ra_aclEveryone_write_object: "Jeder kann ein Objekt schreiben",
        ra_aclEveryone_write_state: "Jeder kann Zustand schreiben",
        "ra_Folders always first": "Ordner immer zuerst",
        ra_changedFrom: "Ge\xE4ndert von",
        ra_qualityCode: "Qualit\xE4tscode",
        ra_timestamp: "Zeitstempel",
        ra_lastChange: "Letzte \xC4nderung",
        "ra_Owner group": "Besitzergruppe",
        "ra_Owner user": "Besitzer Benutzer",
        ra_Create: "Erstellen",
        "ra_Changed from": "Ge\xE4ndert von",
        "ra_Quality code": "Qualit\xE4t",
        ra_Timestamp: "Zeitstempel",
        "ra_Last change": "Letzte \xC4nderung",
        "ra_Collapse all nodes": "Alle Knoten zuklappen",
        "ra_Edit custom config": "Bearbeite Benutzerdefinierte Konfiguration",
        "ra_Collapse one step node": "Eine Ebene zuklappen",
        "ra_Expand one step node": "Eine Ebene aufklappen",
        "ra_Refresh tree": "Baum aktualisieren",
        "ra_Expand all nodes": "Alle Knoten aufklappen",
        "ra_Deselect all": "Alles abw\xE4hlen",
        "ra_Select all": "Alle ausw\xE4hlen",
        "ra_%s object(s) processed": "%s Objekt(e) verarbeitet",
        "ra_Invalid structure": "Ung\xFCltige Struktur",
        "ra_%s was imported": "%s wurde importiert",
        "ra_Failed to open JSON File": "Fehler beim \xD6ffnen der JSON-Datei",
        "ra_Only following structures of objects are available:": "Es stehen nur folgende Objektstrukturen zur Verf\xFCgung:",
        "ra_Folder \u2192 State": "Ordner \u2192 Zustand",
        "ra_Folder \u2192 Channel \u2192 State": "Ordner \u2192 Kanal \u2192 Zustand",
        "ra_Folder \u2192 Device \u2192 Channel \u2192 State": "Ordner \u2192 Ger\xE4t \u2192 Kanal \u2192 Zustand",
        "ra_Device \u2192 Channel \u2192 State": "Ger\xE4t \u2192 Kanal \u2192 Status",
        "ra_Channel \u2192 State": "Kanal \u2192 Status",
        'ra_Non-experts may create new objects only in "0_userdata.0" or "alias.0".': 'Nicht-Experten d\xFCrfen neue Objekte nur in "0_userdata.0" oder "alias.0" erstellen.',
        'ra_The experts may create objects everywhere but from second level (e.g. "vis.0" or "javascript.0").': 'Die Experten k\xF6nnen Objekte \xFCberall erstellen, au\xDFer auf der zweiten Ebene (z. B. "vis.0" oder "javascript.0").',
        ra_expertMode: "Expertenmodus",
        "ra_On weekdays": "An Wochentagen",
        "ra_Drop the files here...": "Datei hier ablegen...",
        "ra_Drag 'n' drop some files here, or click to select files": "Die Datei hierher ziehen und ablegen, oder klicken, um die Datei auszuw\xE4hlen",
        ra_Clear: "L\xF6schen",
        "ra_Clear icon": "Symbol l\xF6schen",
        ra_none: "kein",
        "ra_Select predefined icon": "Vordefiniertes Symbol ausw\xE4hlen",
        "ra_Show lines between rows": "Zeilen zwischen Zeilen anzeigen"
      };
    }
  });

  // node_modules/@iobroker/adapter-react/i18n/ru.json
  var require_ru = __commonJS({
    "node_modules/@iobroker/adapter-react/i18n/ru.json"(exports, module) {
      module.exports = {
        ra_filter_func: "\u0444\u0443\u043D\u043A\u0446\u0438\u044F",
        ra_filter_id: "ID",
        ra_filter_name: "\u0418\u043C\u044F",
        ra_filter_role: "\u0440\u043E\u043B\u044C",
        ra_filter_room: "\u043A\u043E\u043C\u043D\u0430\u0442\u0430",
        ra_tooltip_ack: "\u041F\u043E\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043D\u043E",
        ra_tooltip_from: "\u041E\u0442",
        ra_tooltip_lc: "\u041F\u043E\u0441\u043B\u0435\u0434\u043D\u0435\u0435 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0435",
        ra_tooltip_quality: "\u041A\u0430\u0447\u0435\u0441\u0442\u0432\u043E",
        ra_tooltip_ts: "\u041E\u0442\u043C\u0435\u0442\u043A\u0430 \u0432\u0440\u0435\u043C\u0435\u043D\u0438",
        ra_tooltip_user: "\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C",
        ra_tooltip_value: "\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435",
        "ra_Are you sure?": "\u0412\u044B \u0443\u0432\u0435\u0440\u0435\u043D\u044B?",
        ra_Cancel: "\u041E\u0442\u043C\u0435\u043D\u0430",
        ra_Copied: "\u0441\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u043E",
        "ra_Copied %s": '\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u043E "%s"',
        "ra_Define functions": "\u0417\u0430\u0434\u0430\u0442\u044C \u0444\u0443\u043D\u043A\u0446\u0438\u0438",
        "ra_Define rooms": "\u0417\u0430\u0434\u0430\u0442\u044C \u043A\u043E\u043C\u043D\u0430\u0442\u044B",
        ra_Error: "\u041E\u0448\u0438\u0431\u043A\u0430",
        ra_Message: "\u0421\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435",
        ra_Ok: "Ok",
        "ra_Please select object ID...": "\u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u0432\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440 \u043E\u0431\u044A\u0435\u043A\u0442\u0430 ...",
        ra_Selected: "\u0432\u044B\u0431\u0440\u0430\u043D\u043D\u044B\u0439",
        "ra_Unknown error!": "\u041D\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043D\u0430\u044F \u043E\u0448\u0438\u0431\u043A\u0430!",
        ra_Value: "\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435",
        ra_filter_type: "\u0422\u0438\u043F",
        ra_invalidConfig: "\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0435 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438",
        ra_otherConfig: "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 \u0438\u0437 \u0434\u0440\u0443\u0433\u043E\u0433\u043E \u0430\u0434\u0430\u043F\u0442\u0435\u0440\u0430 %s",
        ra_tooltip_copyState: "\u0421\u043A\u043E\u043F\u0438\u0440\u0443\u0439\u0442\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u044F",
        ra_tooltip_customConfig: "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0435 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438",
        ra_tooltip_deleteObject: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u043E\u0431\u044A\u0435\u043A\u0442",
        ra_tooltip_editObject: "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043E\u0431\u044A\u0435\u043A\u0442",
        ra_tooltip_editState: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u044F",
        ra_filter_customs: "\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438",
        ra_dow_Fr: "\u041F\u0442",
        ra_dow_Mo: "\u041F\u043D",
        ra_dow_Sa: "\u0421\u0431",
        ra_dow_Su: "\u0412\u0441",
        ra_dow_Th: "\u0427\u0442",
        ra_dow_Tu: "\u0412\u0442",
        ra_dow_We: "\u0421\u0440",
        "ra_Listen on all IPs": "\u0421\u043B\u0443\u0448\u0430\u0439 \u043D\u0430 \u0432\u0441\u0435\u0445 IP",
        ra_Save: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C",
        "ra_Save and close": "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u0438 \u0437\u0430\u043A\u0440\u044B\u0442\u044C",
        ra_Close: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
        "ra_Auto (no custom columns)": "\u0410\u0432\u0442\u043E (\u0431\u0435\u0437 \u043D\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043C\u044B\u0445 \u0441\u0442\u043E\u043B\u0431\u0446\u043E\u0432)",
        "ra_Transparent dialog": "\u041F\u0440\u043E\u0437\u0440\u0430\u0447\u043D\u044B\u0439 \u0434\u0438\u0430\u043B\u043E\u0433",
        ra_Width: "\u0428\u0438\u0440\u0438\u043D\u0430",
        ra_val: "\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435",
        ra_buttons: "\u041A\u043D\u043E\u043F\u043A\u0438",
        "ra_Configure visible columns": "\u041D\u0430\u0441\u0442\u0440\u043E\u0438\u0442\u044C \u0432\u0438\u0434\u0438\u043C\u044B\u0435 \u0441\u0442\u043E\u043B\u0431\u0446\u044B",
        "ra_Cannot update attribute, because not found in the object": "\u041D\u0435\u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u043E\u0431\u043D\u043E\u0432\u0438\u0442\u044C \u0430\u0442\u0440\u0438\u0431\u0443\u0442, \u043F\u043E\u0442\u043E\u043C\u0443 \u0447\u0442\u043E \u043E\u043D \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D \u0432 \u043E\u0431\u044A\u0435\u043A\u0442\u0435",
        "ra_Edit object field": "\u041F\u043E\u043B\u0435 \u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043E\u0431\u044A\u0435\u043A\u0442\u0430",
        "ra_Hide empty folders": "\u0421\u043A\u0440\u044B\u0442\u044C \u043F\u0443\u0441\u0442\u044B\u0435 \u043F\u0430\u043F\u043A\u0438",
        "ra_Reload files": "\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C",
        "ra_Create folder": "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043F\u0430\u043F\u043A\u0443",
        "ra_Upload file": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0444\u0430\u0439\u043B",
        "ra_User files": "\u0424\u0430\u0439\u043B\u044B \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F",
        "ra_Confirm deletion of %s": "\u041F\u043E\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0435 %s",
        "ra_Delete (no confirm for 5 mins)": "\u0423\u0434\u0430\u043B\u0438\u0442\u044C (\u0431\u0435\u0437 \u043F\u043E\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043D\u0438\u044F \u0432 \u0442\u0435\u0447\u0435\u043D\u0438\u0435 5 \u043C\u0438\u043D\u0443\u0442)",
        ra_Delete: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C",
        "ra_Toggle expert mode": "\u041F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u044D\u043A\u0441\u043F\u0435\u0440\u0442\u043D\u044B\u0439 \u0440\u0435\u0436\u0438\u043C",
        "ra_Toggle view mode": "\u041F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0440\u0435\u0436\u0438\u043C \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0430",
        re_Root: "\u041D\u0430\u0447\u0430\u043B\u043E",
        "re_Back to %s": "\u0412\u0435\u0440\u043D\u0443\u0442\u044C\u0441\u044F \u043A %s",
        "ra_Place your files here or click here to open the browse dialog": "\u041F\u043E\u043C\u0435\u0441\u0442\u0438\u0442\u0435 \u0441\u0432\u043E\u0438 \u0444\u0430\u0439\u043B\u044B \u0441\u044E\u0434\u0430 \u0438\u043B\u0438 \u0449\u0435\u043B\u043A\u043D\u0438\u0442\u0435 \u0437\u0434\u0435\u0441\u044C, \u0447\u0442\u043E\u0431\u044B \u043E\u0442\u043A\u0440\u044B\u0442\u044C \u0434\u0438\u0430\u043B\u043E\u0433\u043E\u0432\u043E\u0435 \u043E\u043A\u043D\u043E \u0432\u044B\u0431\u043E\u0440\u0430",
        "ra_If no file will be created in the folder, it will disappear after the browser closed": "\u0415\u0441\u043B\u0438 \u0432 \u043F\u0430\u043F\u043A\u0435 \u043D\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u043E\u0437\u0434\u0430\u043D \u0444\u0430\u0439\u043B, \u043E\u043D \u0438\u0441\u0447\u0435\u0437\u043D\u0435\u0442 \u043F\u043E\u0441\u043B\u0435 \u0437\u0430\u043A\u0440\u044B\u0442\u0438\u044F \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430.",
        "ra_Folder name": "\u0418\u043C\u044F \u043F\u0430\u043F\u043A\u0438",
        "ra_Create new folder in %s": "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043D\u043E\u0432\u0443\u044E \u043F\u0430\u043F\u043A\u0443 \u0432 %s",
        "ra_Duplicate name": "\u041F\u043E\u0432\u0442\u043E\u0440\u044F\u044E\u0449\u0435\u0435\u0441\u044F \u0438\u043C\u044F",
        "ra_Invalid parent folder!": "\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0440\u043E\u0434\u0438\u0442\u0435\u043B\u044C\u0441\u043A\u0430\u044F \u043F\u0430\u043F\u043A\u0430!",
        "ra_Drop file here": "\u041F\u0435\u0440\u0435\u0442\u0430\u0449\u0438\u0442\u0435 \u0444\u0430\u0439\u043B \u0441\u044E\u0434\u0430",
        "ra_Suppress question for next %s minutes": "\u0421\u043A\u0440\u044B\u0442\u044C \u0432\u043E\u043F\u0440\u043E\u0441 \u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0435 %s \u043C\u0438\u043D\u0443\u0442(\u044B)",
        "ra_Clear filter": "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u0444\u0438\u043B\u044C\u0442\u0440",
        ra_Update: "\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C",
        "ra_Load configuration from file": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044E \u0438\u0437 \u0444\u0430\u0439\u043B\u0430",
        "ra_Save configuration to file": "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044E \u0432 \u0444\u0430\u0439\u043B",
        sc_cron: "CRON",
        sc_date: "\u0414\u0430\u0442\u0430",
        sc_dates: "\u0414\u0430\u0442\u044B",
        sc_dows: "\u0414\u0435\u043D\u044C \u043D\u0435\u0434\u0435\u043B\u0438",
        sc_every: "\u043A\u0430\u0436\u0434\u044B\u0439(\u0443\u044E/\u044B\u0435)",
        sc_everyN_dates: "\u043A\u0430\u0436\u0434\u044B\u0439 N \u0434\u0435\u043D\u044C",
        sc_everyN_dows: "\u043A\u0430\u0436\u0434\u044B\u0439 N \u0434\u0435\u043D\u044C \u043D\u0435\u0434\u0435\u043B\u0438",
        sc_everyN_hours: "\u043A\u0430\u0436\u0434\u044B\u0435 N \u0447\u0430\u0441\u043E\u0432",
        sc_everyN_minutes: "\u043A\u0430\u0436\u0434\u044B\u0435 N \u043C\u0438\u043D\u0443\u0442",
        sc_everyN_months: "\u043A\u0430\u0436\u0434\u044B\u0435 N \u043C\u0435\u0441\u044F\u0446\u0435\u0432",
        sc_everyN_seconds: "\u043A\u0430\u0436\u0434\u044B\u0435 N \u0441\u0435\u043A\u0443\u043D\u0434",
        sc_every_dates: "\u043A\u0430\u0436\u0434\u044B\u0439 \u0434\u0435\u043D\u044C",
        sc_every_dows: "\u043A\u0430\u0436\u0434\u044B\u0439 \u0434\u0435\u043D\u044C \u043D\u0435\u0434\u0435\u043B\u0438",
        sc_every_hours: "\u043A\u0430\u0436\u0434\u044B\u0439 \u0447\u0430\u0441",
        sc_every_minutes: "\u043A\u0430\u0436\u0434\u0443\u044E \u043C\u0438\u043D\u0443\u0442\u0443",
        sc_every_months: "\u043A\u0430\u0436\u0434\u044B\u0439 \u043C\u0435\u0441\u044F\u0446",
        sc_every_seconds: "\u043A\u0430\u0436\u0434\u0443\u044E \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
        sc_from: "\u041E\u0442",
        sc_hours: "\u0447\u0430\u0441\u044B",
        sc_interval: "\u0418\u043D\u0442\u0435\u0440\u0432\u0430\u043B",
        sc_intervalBetween: "\u0418\u043D\u0442\u0435\u0440\u0432\u0430\u043B \u043C\u0435\u0436\u0434\u0443",
        sc_minutes: "\u043C\u0438\u043D\u0443\u0442\u044B",
        sc_months: "\u041C\u0435\u0441\u044F\u0446\u044B",
        sc_once: "\u043E\u0434\u0438\u043D \u0440\u0430\u0437",
        sc_period: "\u041F\u0435\u0440\u0438\u043E\u0434",
        sc_seconds: "\u0441\u0435\u043A\u0443\u043D\u0434\u044B",
        sc_simple: "\u041F\u0440\u043E\u0441\u0442\u043E",
        sc_specific: "\u041A\u043E\u043D\u043A\u0440\u0435\u0442\u043D\u043E\u0435 \u0432\u0440\u0435\u043C\u044F",
        sc_specific_dates: "\u043A\u043E\u043D\u043A\u0440\u0435\u0442\u043D\u044B\u0435 \u0434\u0430\u0442\u044B",
        sc_specific_dows: "\u043A\u043E\u043D\u043A\u0440\u0435\u0442\u043D\u044B\u0439 \u0434\u0435\u043D\u044C \u043D\u0435\u0434\u0435\u043B\u0438",
        sc_specific_hours: "\u043A\u043E\u043D\u043A\u0440\u0435\u0442\u043D\u044B\u0435 \u0447\u0430\u0441\u044B",
        sc_specific_minutes: "\u043A\u043E\u043D\u043A\u0440\u0435\u0442\u043D\u044B\u0435 \u043C\u0438\u043D\u0443\u0442\u044B",
        sc_specific_months: "\u043A\u043E\u043D\u043A\u0440\u0435\u0442\u043D\u044B\u0435 \u043C\u0435\u0441\u044F\u0446\u044B",
        sc_specific_seconds: "\u043A\u043E\u043D\u043A\u0440\u0435\u0442\u043D\u044B\u0435 \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
        sc_time: "\u0412\u0440\u0435\u043C\u044F",
        sc_to: "\u0414\u043E",
        sc_wizard: "\u0424\u043E\u0440\u043C\u0430",
        sch_all: "\u0432\u0441\u0435",
        sch_astroDay: "\u0434\u043D\u0451\u043C",
        sch_astroNight: "\u043D\u043E\u0447\u044C\u044E",
        sch_astro_dawn: "\u0420\u0430\u0441\u0441\u0432\u0435\u0442",
        sch_astro_dusk: "\u0421\u0443\u043C\u0435\u0440\u043A\u0438",
        sch_astro_goldenHour: "\u0417\u043E\u043B\u043E\u0442\u043E\u0439 \u0447\u0430\u0441",
        sch_astro_goldenHourEnd: "\u041A\u043E\u043D\u0435\u0446 \u0437\u043E\u043B\u043E\u0442\u043E\u0433\u043E \u0447\u0430\u0441\u0430",
        sch_astro_nadir: "\u041D\u0430\u0434\u0438\u0440",
        sch_astro_nauticalDawn: "\u041C\u043E\u0440\u0441\u043A\u043E\u0439 \u0440\u0430\u0441\u0441\u0432\u0435\u0442",
        sch_astro_nauticalDusk: "\u041C\u043E\u0440\u0441\u043A\u0438\u0435 \u0441\u0443\u043C\u0435\u0440\u043A\u0438",
        sch_astro_night: "\u041D\u043E\u0447\u044C",
        sch_astro_nightEnd: "\u041A\u043E\u043D\u0435\u0446 \u043D\u043E\u0447\u0438",
        sch_astro_solarNoon: "\u0421\u043E\u043B\u043D\u0435\u0447\u043D\u044B\u0439 \u043F\u043E\u043B\u0434\u0435\u043D\u044C",
        sch_astro_sunrise: "\u0412\u043E\u0441\u0445\u043E\u0434",
        sch_astro_sunriseEnd: "\u0412\u043E\u0441\u0445\u043E\u0434 \u0441\u043E\u043B\u043D\u0446\u0430",
        sch_astro_sunset: "\u0417\u0430\u0445\u043E\u0434 \u0441\u043E\u043B\u043D\u0446\u0430",
        sch_astro_sunsetStart: "\u041D\u0430\u0447\u0430\u043B\u043E \u0437\u0430\u043A\u0430\u0442\u0430",
        sch_at: "\u0434\u0430\u0442\u0430",
        sch_desc_atTime: "\u0432 %s",
        sch_desc_everyDay: "\u043A\u0430\u0436\u0434\u044B\u0439 \u0434\u0435\u043D\u044C",
        sch_desc_everyHour: "\u043A\u0430\u0436\u0434\u044B\u0439 \u0447\u0430\u0441",
        sch_desc_everyMinute: "\u043A\u0430\u0436\u0434\u0443\u044E \u043C\u0438\u043D\u0443\u0442\u0443",
        sch_desc_everyMonth: "\u043A\u0430\u0436\u0434\u044B\u0439 \u043C\u0435\u0441\u044F\u0446",
        sch_desc_everyNDay: "\u043A\u0430\u0436\u0434\u044B\u0439 %s \u0434\u0435\u043D\u044C",
        sch_desc_everyNHours: "\u043A\u0430\u0436\u0434\u044B\u0439 %s \u0447\u0430\u0441\u043E\u0432",
        sch_desc_everyNMinutes: "\u043A\u0430\u0436\u0434\u044B\u0435 %s \u043C\u0438\u043D\u0443\u0442",
        sch_desc_everyNMonths: "\u043A\u0430\u0436\u0434\u044B\u0435 %s \u043C\u0435\u0441\u044F\u0446\u0435\u0432",
        sch_desc_everyNWeeks: "\u043A\u0430\u0436\u0434\u044B\u0435 %s \u043D\u0435\u0434\u0435\u043B\u044C",
        sch_desc_everyNYears: "\u043A\u0430\u0436\u0434\u044B\u0435 %s \u043B\u0435\u0442",
        sch_desc_everyWeek: "\u043A\u0430\u0436\u0434\u0443\u044E \u043D\u0435\u0434\u0435\u043B\u044E",
        sch_desc_everyYear: "\u043A\u0430\u0436\u0434\u044B\u0439 \u0433\u043E\u0434",
        sch_desc_intervalFromTo: "\u043E\u0442 %s \u0434\u043E %s",
        sch_desc_never: "\u043D\u0438\u043A\u043E\u0433\u0434\u0430",
        sch_desc_onDate: "%s %s",
        sch_desc_onDates: "%s \u0438 %s",
        sch_desc_onEveryDate: "\u0432 \u043A\u0430\u0436\u0434\u044B\u0439 \u0434\u0435\u043D\u044C",
        sch_desc_onMonth: "%s",
        sch_desc_onMonths: "%s \u0438 %s",
        sch_desc_onWeekday: "%s",
        sch_desc_onWeekdays: "%s \u0438 %s",
        sch_desc_onWeekends: "\u043D\u0430 \u0432\u044B\u0445\u043E\u0434\u043D\u044B\u0445",
        sch_desc_onWorkdays: "\u0432 \u0440\u0430\u0431\u043E\u0447\u0438\u0435 \u0434\u043D\u0438",
        sch_desc_onceInPast: "\u043D\u0435 \u0431\u0443\u0434\u0435\u0442 \u0431\u043E\u043B\u044C\u0448\u0435 \u0432\u044B\u043F\u043E\u043B\u043D\u044F\u0442\u044C\u0441\u044F, \u043F\u043E\u0442\u043E\u043C\u0443 \u0447\u0442\u043E \u043D\u0430\u0447\u0430\u043B\u043E \u0432 \u043F\u0440\u043E\u0448\u043B\u043E\u043C",
        sch_desc_once_on: "%s",
        sch_desc_validFrom: "%s",
        sch_desc_validFromTo: "\u0412\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C \u0441",
        sch_desc_validTo: "%s",
        sch_every: "\u043A\u0430\u0436\u0434\u044B\u0439",
        sch_exactTime: "\u041A\u043E\u043D\u043A\u0440\u0435\u0442\u043D\u043E\u0435 \u0432\u0440\u0435\u043C\u044F",
        sch_from: "\u043E\u0442",
        sch_fromTo: "\u041E\u0442 \u0438 \u0434\u043E",
        sch_intervalTime: "\u0418\u043D\u0442\u0435\u0440\u0432\u0430\u043B \u0432\u0440\u0435\u043C\u0435\u043D\u0438",
        sch_invert: "\u0438\u043D\u0432\u0435\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C",
        sch_no_one: "\u043D\u0438\u043A\u0430\u043A\u043E\u0439",
        sch_on: "\u043D\u0430",
        sch_period: "\u043F\u0435\u0440\u0438\u043E\u0434",
        sch_periodDaily: "\u0415\u0436\u0435\u0434\u043D\u0435\u0432\u043D\u043E",
        sch_periodDates: "\u0414\u0430\u0442\u044B",
        sch_periodDay: "\u0414\u0435\u043D\u044C",
        sch_periodEvery: "\u043A\u0430\u0436\u0434\u044B\u0439",
        sch_periodEveryDay: "\u041A\u0430\u0436\u0434\u044B\u0439 \u0434\u0435\u043D\u044C",
        sch_periodEveryMonth: "\u041A\u0430\u0436\u0434\u044B\u0439 \u043C\u0435\u0441\u044F\u0446",
        sch_periodEveryWeek: "\u041A\u0430\u0436\u0434\u0443\u044E \u043D\u0435\u0434\u0435\u043B\u044E",
        sch_periodEveryYear: "\u041A\u0430\u0436\u0434\u044B\u0439 \u0433\u043E\u0434",
        sch_periodHours: "\u0447\u0430\u0441\u043E\u0432",
        sch_periodMinutes: "\u043C\u0438\u043D\u0443\u0442",
        sch_periodMonth: "\u043C\u0435\u0441\u044F\u0446",
        sch_periodMonthly: "\u0435\u0436\u0435\u043C\u0435\u0441\u044F\u0447\u043D\u043E",
        sch_periodOnce: "\u043E\u0434\u043D\u0430\u0436\u0434\u044B",
        sch_periodSpecificMonths: "\u041A\u043E\u043D\u043A\u0440\u0435\u0442\u043D\u044B\u0435 \u043C\u0435\u0441\u044F\u0446\u044B",
        sch_periodWeek: "\u041D\u0435\u0434\u0435\u043B\u044E",
        sch_periodWeekdays: "\u0411\u0443\u0434\u043D\u0438\u0435 \u0434\u043D\u0438",
        sch_periodWeekend: "\u0432\u044B\u0445\u043E\u0434\u043D\u044B\u0435",
        sch_periodWeekly: "\u0435\u0436\u0435\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u043E",
        sch_periodWorkdays: "\u0420\u0430\u0431\u043E\u0447\u0438\u0435 \u0434\u043D\u0438",
        sch_periodYear: "\u0413\u043E\u0434",
        sch_periodYearly: "\u043A\u0430\u0436\u0434\u044B\u0439 \u0433\u043E\u0434",
        sch_specificTime: "\u041A\u043E\u043D\u043A\u0440\u0435\u0442\u043D\u043E\u0435 \u0432\u0440\u0435\u043C\u044F",
        sch_time: "\u0412\u0440\u0435\u043C\u044F",
        sch_to: "\u0432",
        sch_valid: "\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0439",
        sch_validFrom: "\u043E\u0442",
        sch_validTo: "\u0432",
        sch_wholeDay: "\u0412\u0435\u0441\u044C \u0434\u0435\u043D\u044C",
        sch_yearEveryMonth: "\u043A\u0430\u0436\u0434\u044B\u0439 \u043C\u0435\u0441\u044F\u0446",
        "ra_Define schedule...": "\u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0438\u0442\u044C \u0440\u0430\u0441\u043F\u0438\u0441\u0430\u043D\u0438\u0435 ...",
        ra_Repeat: "\u041F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u0435",
        "ra_use seconds": "\u0441\u0435\u043A\u0443\u043D\u0434\u044B",
        ra_close: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
        ra_months_Sep: "\u0421\u0435\u043D",
        ra_months_Oct: "\u041E\u043A\u0442",
        ra_months_Nov: "\u041D\u043E\u044F",
        ra_months_Mar: "\u041C\u0430\u0440\u0442",
        ra_months_Mai: "\u041C\u0430\u0439",
        ra_months_Jun: "\u0418\u044E\u043B\u044C",
        ra_months_Jul: "\u0418\u044E\u043D\u044C",
        ra_months_Jan: "\u042F\u043D\u0432",
        ra_months_Feb: "\u0424\u0435\u0432",
        ra_months_Dec: "\u0414\u0435\u043A",
        ra_months_Aug: "\u0410\u0432\u0433",
        ra_months_Apr: "\u0410\u043F\u0440",
        "ra_Toggle the states view": "\u041F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0440\u0435\u0436\u0438\u043C \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0430 \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0439",
        "ra_Add new child object to selected parent": "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043D\u043E\u0432\u044B\u0439 \u0434\u043E\u0447\u0435\u0440\u043D\u0438\u0439 \u043E\u0431\u044A\u0435\u043A\u0442 \u043A \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u043E\u043C\u0443 \u0440\u043E\u0434\u0438\u0442\u0435\u043B\u044C\u0441\u043A\u043E\u043C\u0443 \u043E\u0431\u044A\u0435\u043A\u0442\u0443",
        "ra_Add objects tree from JSON file": "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0434\u0435\u0440\u0435\u0432\u043E \u043E\u0431\u044A\u0435\u043A\u0442\u043E\u0432 \u0438\u0437 \u0444\u0430\u0439\u043B\u0430 JSON",
        "ra_Save objects tree as JSON file": "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u0434\u0435\u0440\u0435\u0432\u043E \u043E\u0431\u044A\u0435\u043A\u0442\u043E\u0432 \u043A\u0430\u043A \u0444\u0430\u0439\u043B JSON",
        ra_Objects: "\u041E\u0431\u044A\u0435\u043A\u0442\u044B",
        ra_States: "\u0421\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u044F",
        ra_object_changed_by_user: "\u041F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0439 \u0440\u0430\u0437 \u043E\u0431\u044A\u0435\u043A\u0442 \u0438\u0437\u043C\u0435\u043D\u0435\u043D \u0432",
        ra_object_changed_by: "\u041E\u0431\u044A\u0435\u043A\u0442 \u0438\u0437\u043C\u0435\u043D\u0435\u043D",
        ra_state_changed_from: "\u041E\u0431\u044A\u0435\u043A\u0442 \u0438\u0437\u043C\u0435\u043D\u0435\u043D \u0441",
        ra_state_changed_by: "\u0421\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u043E",
        ra_aclOwner_read_object: "\u0412\u043B\u0430\u0434\u0435\u043B\u0435\u0446 \u043C\u043E\u0436\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044C \u043E\u0431\u044A\u0435\u043A\u0442",
        ra_aclOwner_read_state: "\u0412\u043B\u0430\u0434\u0435\u043B\u0435\u0446 \u043C\u043E\u0436\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044C \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435",
        ra_aclOwner_write_object: "\u0412\u043B\u0430\u0434\u0435\u043B\u0435\u0446 \u043C\u043E\u0436\u0435\u0442 \u043F\u0438\u0441\u0430\u0442\u044C \u043E\u0431\u044A\u0435\u043A\u0442",
        ra_aclOwner_write_state: "\u0412\u043B\u0430\u0434\u0435\u043B\u0435\u0446 \u043C\u043E\u0436\u0435\u0442 \u043F\u0438\u0441\u0430\u0442\u044C \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435",
        ra_aclGroup_read_object: "\u0413\u0440\u0443\u043F\u043F\u0430 \u043C\u043E\u0436\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044C \u043E\u0431\u044A\u0435\u043A\u0442",
        ra_aclGroup_read_state: "\u0413\u0440\u0443\u043F\u043F\u0430 \u043C\u043E\u0436\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044C \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435",
        ra_aclGroup_write_object: "\u0413\u0440\u0443\u043F\u043F\u0430 \u043C\u043E\u0436\u0435\u0442 \u043F\u0438\u0441\u0430\u0442\u044C \u043E\u0431\u044A\u0435\u043A\u0442",
        ra_aclGroup_write_state: "\u0413\u0440\u0443\u043F\u043F\u0430 \u043C\u043E\u0436\u0435\u0442 \u0437\u0430\u043F\u0438\u0441\u044B\u0432\u0430\u0442\u044C \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435",
        ra_aclEveryone_read_object: "\u041A\u0430\u0436\u0434\u044B\u0439 \u043C\u043E\u0436\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044C \u043E\u0431\u044A\u0435\u043A\u0442",
        ra_aclEveryone_read_state: "\u041A\u0430\u0436\u0434\u044B\u0439 \u043C\u043E\u0436\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044C \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435",
        ra_aclEveryone_write_object: "\u041A\u0430\u0436\u0434\u044B\u0439 \u043C\u043E\u0436\u0435\u0442 \u043D\u0430\u043F\u0438\u0441\u0430\u0442\u044C \u043E\u0431\u044A\u0435\u043A\u0442",
        ra_aclEveryone_write_state: "\u041A\u0430\u0436\u0434\u044B\u0439 \u043C\u043E\u0436\u0435\u0442 \u043D\u0430\u043F\u0438\u0441\u0430\u0442\u044C \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435",
        "ra_Folders always first": "\u041F\u0430\u043F\u043A\u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u043D\u0430 \u043F\u0435\u0440\u0432\u043E\u043C \u043C\u0435\u0441\u0442\u0435",
        ra_changedFrom: "\u0418\u0437\u043C\u0435\u043D\u0435\u043D\u043E \u0441",
        ra_qualityCode: "\u041A\u043E\u0434 \u043A\u0430\u0447\u0435\u0441\u0442\u0432\u0430",
        ra_timestamp: "\u041E\u0442\u043C\u0435\u0442\u043A\u0430 \u0432\u0440\u0435\u043C\u0435\u043D\u0438",
        ra_lastChange: "\u041F\u043E\u0441\u043B\u0435\u0434\u043D\u0435\u0435 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0435",
        "ra_Owner group": "\u0413\u0440\u0443\u043F\u043F\u0430 \u0432\u043B\u0430\u0434\u0435\u043B\u044C\u0446\u0435\u0432",
        "ra_Owner user": "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C-\u0432\u043B\u0430\u0434\u0435\u043B\u0435\u0446",
        ra_Create: "\u0421\u043E\u0437\u0434\u0430\u0442\u044C",
        "ra_Changed from": "\u0418\u0437\u043C\u0435\u043D\u0435\u043D\u043E",
        "ra_Quality code": "\u0412\u0430\u043B\u0438\u0434\u043D\u043E\u0441\u0442\u044C",
        ra_Timestamp: "\u0412\u0440\u0435\u043C\u0435\u043D\u0438",
        "ra_Last change": "\u041F\u043E\u0441\u043B\u0435\u0434\u043D\u0435\u0435 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0435",
        "ra_Collapse all nodes": "\u0421\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u0432\u0441\u0435 \u0443\u0437\u043B\u044B",
        "ra_Edit custom config": "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043D\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043C\u0443\u044E \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044E",
        "ra_Collapse one step node": "\u0421\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u043E\u0434\u0438\u043D \u0443\u0440\u043E\u0432\u0435\u043D\u044C",
        "ra_Expand one step node": "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043E\u0434\u0438\u043D \u0443\u0440\u043E\u0432\u0435\u043D\u044C",
        "ra_Refresh tree": "\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C \u0434\u0435\u0440\u0435\u0432\u043E",
        "ra_Expand all nodes": "\u0420\u0430\u0437\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u0432\u0441\u0435 \u0443\u0437\u043B\u044B",
        "ra_Deselect all": "\u0423\u0431\u0440\u0430\u0442\u044C \u0432\u044B\u0431\u043E\u0440 \u0432\u0435\u0437\u0434\u0435",
        "ra_Select all": "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0432\u0441\u0435",
        "ra_%s object(s) processed": "\u041E\u0431\u044A\u0435\u043A\u0442\u043E\u0432 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0430\u043D\u043E: %s",
        "ra_Invalid structure": "\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u0443\u043A\u0442\u0443\u0440\u0430",
        "ra_%s was imported": "%s \u0431\u044B\u043B \u0438\u043C\u043F\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u043D",
        "ra_Failed to open JSON File": "\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u043E\u0442\u043A\u0440\u044B\u0442\u044C \u0444\u0430\u0439\u043B JSON",
        "ra_Only following structures of objects are available:": "\u0414\u043E\u0441\u0442\u0443\u043F\u043D\u044B \u0442\u043E\u043B\u044C\u043A\u043E \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0435 \u0441\u0442\u0440\u0443\u043A\u0442\u0443\u0440\u044B \u043E\u0431\u044A\u0435\u043A\u0442\u043E\u0432:",
        "ra_Folder \u2192 State": "\u041F\u0430\u043F\u043A\u0430 \u2192 \u0421\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435",
        "ra_Folder \u2192 Channel \u2192 State": "\u041F\u0430\u043F\u043A\u0430 \u2192 \u041A\u0430\u043D\u0430\u043B \u2192 \u0421\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435",
        "ra_Folder \u2192 Device \u2192 Channel \u2192 State": "\u041F\u0430\u043F\u043A\u0430 \u2192 \u0423\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u043E \u2192 \u041A\u0430\u043D\u0430\u043B \u2192 \u0421\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435",
        "ra_Device \u2192 Channel \u2192 State": "\u0423\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u043E \u2192 \u041A\u0430\u043D\u0430\u043B \u2192 \u0421\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435",
        "ra_Channel \u2192 State": "\u041A\u0430\u043D\u0430\u043B \u2192 \u0421\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435",
        'ra_Non-experts may create new objects only in "0_userdata.0" or "alias.0".': "\u041D\u0435-\u044D\u043A\u0441\u043F\u0435\u0440\u0442\u044B \u043C\u043E\u0433\u0443\u0442 \u0441\u043E\u0437\u0434\u0430\u0432\u0430\u0442\u044C \u043D\u043E\u0432\u044B\u0435 \u043E\u0431\u044A\u0435\u043A\u0442\u044B \u0442\u043E\u043B\u044C\u043A\u043E \u0432 \xAB0_userdata.0\xBB \u0438\u043B\u0438 \xABalias.0\xBB.",
        'ra_The experts may create objects everywhere but from second level (e.g. "vis.0" or "javascript.0").': "\u042D\u043A\u0441\u043F\u0435\u0440\u0442\u044B \u043C\u043E\u0433\u0443\u0442 \u0441\u043E\u0437\u0434\u0430\u0432\u0430\u0442\u044C \u043E\u0431\u044A\u0435\u043A\u0442\u044B \u0432\u0435\u0437\u0434\u0435, \u043A\u0440\u043E\u043C\u0435 \u0432\u0442\u043E\u0440\u043E\u0433\u043E \u0443\u0440\u043E\u0432\u043D\u044F (\u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440, \xABvis.0\xBB \u0438\u043B\u0438 \xABjavascript.0\xBB).",
        ra_expertMode: "\u042D\u043A\u0441\u043F\u0435\u0440\u0442\u043D\u044B\u0439 \u0440\u0435\u0436\u0438\u043C",
        "ra_On weekdays": "\u041D\u0430 \u0432\u044B\u0445\u043E\u0434\u043D\u044B\u0445",
        "ra_Drop the files here...": "\u041F\u0435\u0440\u0435\u0442\u0430\u0449\u0438\u0442\u0435 \u0444\u0430\u0439\u043B \u0441\u044E\u0434\u0430 ...",
        "ra_Drag 'n' drop some files here, or click to select files": "\u041F\u0435\u0440\u0435\u0442\u0430\u0449\u0438\u0442\u0435 \u0441\u044E\u0434\u0430 \u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u0444\u0430\u0439\u043B\u043E\u0432 \u0438\u043B\u0438 \u0449\u0435\u043B\u043A\u043D\u0438\u0442\u0435, \u0447\u0442\u043E\u0431\u044B \u0432\u044B\u0431\u0440\u0430\u0442\u044C \u0444\u0430\u0439\u043B\u044B",
        ra_Clear: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C",
        "ra_Clear icon": "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u0437\u043D\u0430\u0447\u043E\u043A",
        ra_none: "\u043D\u0438\u0447\u0435\u0433\u043E",
        "ra_Select predefined icon": "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0439 \u0437\u043D\u0430\u0447\u043E\u043A",
        "ra_Show lines between rows": "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u043B\u0438\u043D\u0438\u0438 \u043C\u0435\u0436\u0434\u0443 \u0441\u0442\u0440\u043E\u043A\u0430\u043C\u0438"
      };
    }
  });

  // node_modules/@iobroker/adapter-react/i18n/pt.json
  var require_pt = __commonJS({
    "node_modules/@iobroker/adapter-react/i18n/pt.json"(exports, module) {
      module.exports = {
        ra_filter_func: "Fun\xE7\xE3o",
        ra_filter_id: "ID",
        ra_filter_name: "Nome",
        ra_filter_role: "Papel (Fun\xE7\xE3o)",
        ra_filter_room: "Quarto",
        ra_tooltip_ack: "Confirmado",
        ra_tooltip_from: "De",
        ra_tooltip_lc: "\xDAltima altera\xE7\xE3o",
        ra_tooltip_quality: "Qualidade",
        ra_tooltip_ts: "Timestamp",
        ra_tooltip_user: "Usu\xE1rio",
        ra_tooltip_value: "Valor",
        "ra_Are you sure?": "Voc\xEA tem certeza?",
        ra_Cancel: "Cancelar",
        ra_Copied: "Copiado",
        "ra_Copied %s": '"%s" copiado',
        "ra_Define functions": "Definir fun\xE7\xF5es",
        "ra_Define rooms": "Definir quartos",
        ra_Error: "Erro",
        ra_Message: "mensagem",
        ra_Ok: "Est\xE1 bem",
        "ra_Please select object ID...": "Selecione o ID do objeto ...",
        ra_Selected: "Selecionado",
        "ra_Unknown error!": "Erro desconhecido!",
        ra_Value: "Valor",
        ra_filter_type: "Tipo",
        ra_invalidConfig: "Configura\xE7\xF5es inv\xE1lidas",
        ra_otherConfig: "Configura\xE7\xF5es de outro adaptador %s",
        ra_tooltip_copyState: "Copie o valor do estado",
        ra_tooltip_customConfig: "Op\xE7\xF5es customizadas",
        ra_tooltip_deleteObject: "Excluir objeto",
        ra_tooltip_editObject: "Editar objeto",
        ra_tooltip_editState: "Edite o valor do estado",
        ra_filter_customs: "Configura\xE7\xF5es",
        "ra_Listen on all IPs": "Ou\xE7a em todos os IPs",
        ra_dow_Fr: "Fr",
        ra_dow_Mo: "Mo",
        ra_dow_Sa: "Sa",
        ra_dow_Su: "Su",
        ra_dow_Th: "\xBA",
        ra_Save: "Salve \uE051",
        "ra_Save and close": "Salvar e fechar",
        ra_Close: "Perto",
        "ra_Auto (no custom columns)": "Auto (sem colunas personalizadas)",
        "ra_Transparent dialog": "Di\xE1logo transparente",
        ra_Width: "Largura",
        ra_val: "Valor",
        ra_buttons: "Bot\xF5es",
        "ra_Configure visible columns": "Configurar colunas vis\xEDveis",
        "ra_Cannot update attribute, because not found in the object": "N\xE3o \xE9 poss\xEDvel atualizar o atributo, porque n\xE3o foi encontrado no objeto",
        "ra_Edit object field": "Editar campo de objeto",
        "ra_Hide empty folders": "Esconder pastas vazias",
        "ra_Reload files": "Recarregar arquivos",
        "ra_Create folder": "Criar pasta",
        "ra_Upload file": "Subir arquivo",
        "ra_User files": "Arquivos do usu\xE1rio",
        "ra_Confirm deletion of %s": "Confirme a exclus\xE3o de %s",
        "ra_Delete (no confirm for 5 mins)": "Excluir (sem confirma\xE7\xE3o por 5 minutos)",
        ra_Delete: "Excluir",
        "ra_Toggle expert mode": "Alternar modo especialista",
        "ra_Toggle view mode": "Alternar modo de visualiza\xE7\xE3o",
        re_Root: "Raiz",
        "re_Back to %s": "Voltar para %s",
        "ra_Place your files here or click here to open the browse dialog": "Coloque seus arquivos aqui ou clique aqui para abrir a janela de navega\xE7\xE3o",
        "ra_If no file will be created in the folder, it will disappear after the browser closed": "Se nenhum arquivo for criado na pasta, ele desaparecer\xE1 depois que o navegador for fechado",
        "ra_Folder name": "Nome da pasta",
        "ra_Create new folder in %s": "Crie uma nova pasta em %s",
        "ra_Duplicate name": "Nome duplicado",
        "ra_Invalid parent folder!": "Pasta pai inv\xE1lida!",
        "ra_Drop file here": "Solte o arquivo aqui",
        "ra_Suppress question for next %s minutes": "Suprimir pergunta nos pr\xF3ximos %s minutos",
        "ra_Clear filter": "Filtro limpo",
        ra_Update: "Atualizar",
        "ra_Load configuration from file": "Carregar configura\xE7\xE3o do arquivo",
        "ra_Save configuration to file": "Salvar configura\xE7\xE3o em arquivo",
        sc_cron: "CRON",
        sc_date: "Data",
        sc_dates: "Dias",
        sc_dows: "Dia da semana",
        sc_every: "todos",
        sc_everyN_dates: "a cada N dias",
        sc_everyN_dows: "todos os N dias da semana",
        sc_everyN_hours: "a cada N horas",
        sc_everyN_minutes: "a cada N minutos",
        sc_everyN_months: "a cada N meses",
        sc_everyN_seconds: "a cada N segundos",
        sc_every_dates: "todo dia",
        sc_every_dows: "todos os dias da semana",
        sc_every_hours: "toda hora",
        sc_every_minutes: "todo minuto",
        sc_every_months: "todo m\xEAs",
        sc_every_seconds: "todo segundo",
        sc_from: "de",
        sc_hours: "horas",
        sc_interval: "intervalo",
        sc_intervalBetween: "intervalo entre",
        sc_minutes: "minutos",
        sc_months: "meses",
        sc_once: "uma vez",
        sc_period: "per\xEDodo",
        sc_seconds: "segundos",
        sc_simple: "simples",
        sc_specific: "tempo espec\xEDfico",
        sc_specific_dates: "datas espec\xEDficas",
        sc_specific_dows: "dia espec\xEDfico de semanas",
        sc_specific_hours: "horas espec\xEDficas",
        sc_specific_minutes: "minutos espec\xEDficos",
        sc_specific_months: "meses espec\xEDficos",
        sc_specific_seconds: "segundos espec\xEDficos",
        sc_time: "tempo",
        sc_to: "para",
        sc_wizard: "assistente",
        sch_all: "tudo",
        sch_astroDay: "dia astral",
        sch_astroNight: "noite astral",
        sch_astro_dawn: "amanhecer",
        sch_astro_dusk: "anoitecer",
        sch_astro_goldenHour: "hora dourada",
        sch_astro_goldenHourEnd: "Fim da hora dourada",
        sch_astro_nadir: "nadir",
        sch_astro_nauticalDawn: "Amanhecer n\xE1utico",
        sch_astro_nauticalDusk: "Anoitecer n\xE1utico",
        sch_astro_night: "noite",
        sch_astro_nightEnd: "fim da noite",
        sch_astro_solarNoon: "meio-dia solar",
        sch_astro_sunrise: "nascer do sol",
        sch_astro_sunriseEnd: "fim do nascer do sol",
        sch_astro_sunset: "p\xF4r do sol",
        sch_astro_sunsetStart: "in\xEDcio do p\xF4r do sol",
        sch_at: "\xE0s",
        sch_desc_atTime: "em %s",
        sch_desc_everyDay: "todo dia",
        sch_desc_everyHour: "toda hora",
        sch_desc_everyMinute: "todo minuto",
        sch_desc_everyMonth: "todo m\xEAs",
        sch_desc_everyNDay: "a cada %s dias",
        sch_desc_everyNHours: "a cada %s horas",
        sch_desc_everyNMinutes: "a cada %s minutos",
        sch_desc_everyNMonths: "a cada %s meses",
        sch_desc_everyNWeeks: "a cada %s semanas",
        sch_desc_everyNYears: "a cada %s anos",
        sch_desc_everyWeek: "toda semana",
        sch_desc_everyYear: "todo ano",
        sch_desc_intervalFromTo: "de %s para %s",
        sch_desc_never: "nunca",
        sch_desc_onDate: "em %s de %s",
        sch_desc_onDates: "em %s e %s de",
        sch_desc_onEveryDate: "em toda data de",
        sch_desc_onMonth: "%s",
        sch_desc_onMonths: "%s e %s",
        sch_desc_onWeekday: "em %s",
        sch_desc_onWeekdays: "em %s e %s",
        sch_desc_onWeekends: "nos fins de semana",
        sch_desc_onWorkdays: "em dias \xFAteis",
        sch_desc_onceInPast: "n\xE3o ser\xE1 mais executado, porque o come\xE7o est\xE1 no passado",
        sch_desc_once_on: "em %s",
        sch_desc_validFrom: "de %s",
        sch_desc_validFromTo: "Executar de at\xE9",
        sch_desc_validTo: "at\xE9 %s",
        sch_every: "cada",
        sch_exactTime: "tempo espec\xEDfico",
        sch_from: "de",
        sch_fromTo: "de a\xB4t",
        sch_intervalTime: "tempo de intervalo",
        sch_invert: "invertido",
        sch_no_one: "nenhum",
        sch_on: "em",
        sch_period: "per\xEDodo",
        sch_periodDaily: "diariamente",
        sch_periodDates: "datas",
        sch_periodDay: "dia",
        sch_periodEvery: "todos",
        sch_periodEveryDay: "todo dia",
        sch_periodEveryMonth: "todo m\xEAs",
        sch_periodEveryWeek: "toda semana",
        sch_periodEveryYear: "todo ano",
        sch_periodHours: "horas",
        sch_periodMinutes: "minutos",
        sch_periodMonth: "m\xEAs",
        sch_periodMonthly: "por m\xEAs",
        sch_periodOnce: "uma vez",
        sch_periodSpecificMonths: "meses espec\xEDficos",
        sch_periodWeek: "semana",
        sch_periodWeekdays: "dias \xFAteis",
        sch_periodWeekend: "final de semana",
        sch_periodWeekly: "semanal",
        sch_periodWorkdays: "dias \xFAteis",
        sch_periodYear: "ano",
        sch_periodYearly: "anual",
        sch_specificTime: "tempo espec\xEDfico",
        sch_time: "tempo",
        sch_to: "para",
        sch_valid: "v\xE1lido",
        sch_validFrom: "de",
        sch_validTo: "para",
        sch_wholeDay: "dia inteiro",
        sch_yearEveryMonth: "todo m\xEAs",
        "ra_Define schedule...": "Definir programa\xE7\xE3o ...",
        ra_Repeat: "Repita",
        "ra_use seconds": "use segundos",
        ra_close: "fechar",
        ra_dow_Tu: "Tu",
        "ra_Toggle the states view": "Alternar a visualiza\xE7\xE3o dos estados",
        "ra_Add new child object to selected parent": "Adicionar novo objeto filho ao pai selecionado",
        "ra_Add objects tree from JSON file": "Adicionar \xE1rvore de objetos do arquivo JSON",
        "ra_Save objects tree as JSON file": "Salvar \xE1rvore de objetos como arquivo JSON",
        ra_Objects: "Objetos",
        ra_States: "Estados",
        ra_object_changed_by_user: "Objeto alterado pela \xFAltima vez em",
        ra_object_changed_by: "Objeto alterado por",
        ra_state_changed_from: "Objeto alterado de",
        ra_state_changed_by: "Estado alterado por",
        ra_aclOwner_read_object: "O propriet\xE1rio pode ler o objeto",
        ra_aclOwner_read_state: "O propriet\xE1rio pode ler o estado",
        ra_aclOwner_write_object: "O propriet\xE1rio pode escrever o objeto",
        ra_aclOwner_write_state: "O propriet\xE1rio pode escrever o estado",
        ra_aclGroup_read_object: "O grupo pode ler o objeto",
        ra_aclGroup_read_state: "O grupo pode ler o estado",
        ra_aclGroup_write_object: "O grupo pode escrever o objeto",
        ra_aclGroup_write_state: "O grupo pode escrever o estado",
        ra_aclEveryone_read_object: "Todos podem ler objetos",
        ra_aclEveryone_read_state: "Todos podem ler o estado",
        ra_aclEveryone_write_object: "Todos podem escrever objetos",
        ra_aclEveryone_write_state: "Todos podem escrever o estado",
        "ra_Folders always first": "Pastas sempre primeiro",
        ra_changedFrom: "Mudou de",
        ra_qualityCode: "C\xF3digo de qualidade",
        ra_timestamp: "Timestamp",
        ra_lastChange: "\xDAltima mudan\xE7a",
        "ra_Owner group": "Grupo propriet\xE1rio",
        "ra_Owner user": "Usu\xE1rio propriet\xE1rio",
        ra_Create: "Crio",
        "ra_Changed from": "Mudou de",
        "ra_Quality code": "Qualidade",
        ra_Timestamp: "Timestamp",
        "ra_Last change": "\xDAltima mudan\xE7a",
        "ra_Collapse all nodes": "Recolher todos os n\xF3s",
        "ra_Edit custom config": "Editar configura\xE7\xE3o personalizada",
        "ra_Collapse one step node": "Recolher um n\xEDvel",
        "ra_Expand one step node": "Expanda um n\xEDvel",
        "ra_Refresh tree": "Atualizar \xE1rvore",
        "ra_Expand all nodes": "Expanda todos os n\xF3s",
        "ra_Deselect all": "Desmarque todos",
        "ra_Select all": "Selecionar tudo",
        "ra_%s object(s) processed": "%s objeto(s) processado(s)",
        "ra_Invalid structure": "Estrutura inv\xE1lida",
        "ra_%s was imported": "%s foi importado",
        "ra_Failed to open JSON File": "Falha ao abrir arquivo JSON",
        "ra_Only following structures of objects are available:": "Apenas as seguintes estruturas de objetos est\xE3o dispon\xEDveis:",
        "ra_Folder \u2192 State": "Pasta \u2192 Estado",
        "ra_Folder \u2192 Channel \u2192 State": "Pasta \u2192 Canal \u2192 Estado",
        "ra_Folder \u2192 Device \u2192 Channel \u2192 State": "Pasta \u2192 Dispositivo \u2192 Canal \u2192 Estado",
        "ra_Device \u2192 Channel \u2192 State": "Dispositivo \u2192 Canal \u2192 Estado",
        "ra_Channel \u2192 State": "Canal \u2192 Estado",
        'ra_Non-experts may create new objects only in "0_userdata.0" or "alias.0".': 'Os n\xE3o especialistas podem criar novos objetos apenas em "0_userdata.0" ou "alias.0".',
        'ra_The experts may create objects everywhere but from second level (e.g. "vis.0" or "javascript.0").': 'Os especialistas podem criar objetos em qualquer lugar, exceto no segundo n\xEDvel (por exemplo, "vis.0" ou "javascript.0").',
        ra_expertMode: "Modo especialista",
        "ra_On weekdays": "Nos dias \xFAteis",
        "ra_Drop the files here...": "Solte o arquivo aqui ...",
        "ra_Drag 'n' drop some files here, or click to select files": "Arraste e solte alguns arquivos aqui ou clique para selecionar arquivos",
        ra_Clear: "Excluir",
        "ra_Clear icon": "\xCDcone de limpeza",
        ra_none: "Nenhum",
        "ra_Select predefined icon": "Selecione o \xEDcone predefinido",
        "ra_Show lines between rows": "Mostrar linhas entre as linhas"
      };
    }
  });

  // node_modules/@iobroker/adapter-react/i18n/nl.json
  var require_nl = __commonJS({
    "node_modules/@iobroker/adapter-react/i18n/nl.json"(exports, module) {
      module.exports = {
        ra_filter_func: "Functie",
        ra_filter_id: "ID",
        ra_filter_name: "Naam",
        ra_filter_role: "Rol",
        ra_filter_room: "Kamer",
        ra_tooltip_ack: "Erkende vlag",
        ra_tooltip_from: "Van",
        ra_tooltip_lc: "Laatst gewijzigd",
        ra_tooltip_ts: "Tijdstempel",
        ra_tooltip_user: "Gebruiker",
        ra_tooltip_value: "Waarde",
        "ra_Are you sure?": "Weet je het zeker?",
        ra_Cancel: "Annuleer",
        ra_Copied: "Gekopieerd",
        "ra_Copied %s": '"%s" gekopieerd',
        "ra_Define functions": "Definieer functies",
        "ra_Define rooms": "Definieer kamers",
        ra_Error: "Fout",
        ra_Message: "Bericht",
        ra_Ok: "OK",
        "ra_Please select object ID...": "Selecteer object-ID ...",
        ra_Selected: "Geselecteerd",
        "ra_Unknown error!": "Onbekende fout!",
        ra_Value: "Waarde",
        ra_filter_type: "Type",
        ra_invalidConfig: "Ongeldige instellingen",
        ra_otherConfig: "Instellingen van andere adapter %s",
        ra_tooltip_copyState: "Kopieer de statuswaarde",
        ra_tooltip_customConfig: "Aangepaste instellingen",
        ra_tooltip_deleteObject: "Object verwijderen",
        ra_tooltip_editObject: "Object bewerken",
        ra_tooltip_editState: "Bewerk de statuswaarde",
        ra_filter_customs: "Instellingen",
        ra_tooltip_quality: "Kwaliteit",
        "ra_Listen on all IPs": "Luister op alle IP's",
        ra_dow_Fr: "Fr",
        ra_dow_Mo: "Mo",
        ra_dow_Sa: "Za",
        ra_dow_Su: "Zo",
        ra_dow_Th: "Th",
        ra_Save: "Sparen",
        "ra_Save and close": "Opslaan en afsluiten",
        ra_Close: "Dichtbij",
        "ra_Auto (no custom columns)": "Auto (geen aangepaste kolommen)",
        "ra_Transparent dialog": "Transparant dialoogvenster",
        ra_Width: "Breedte",
        ra_val: "Waarde",
        ra_buttons: "Toetsen",
        "ra_Configure visible columns": "Configureer zichtbare kolommen",
        "ra_Cannot update attribute, because not found in the object": "Kan kenmerk niet bijwerken, omdat het niet in het object is gevonden",
        "ra_Edit object field": "Bewerk objectveld",
        "ra_Hide empty folders": "Verberg lege mappen",
        "ra_Reload files": "Laad bestanden opnieuw",
        "ra_Create folder": "Map aanmaken",
        "ra_Upload file": "Upload bestand",
        "ra_User files": "Gebruikersbestanden",
        "ra_Confirm deletion of %s": "Bevestig het verwijderen van %s",
        "ra_Delete (no confirm for 5 mins)": "Verwijderen (geen bevestiging gedurende 5 minuten)",
        ra_Delete: "Verwijderen",
        "ra_Toggle expert mode": "Schakel tussen expertmodus",
        "ra_Toggle view mode": "Schakelen tussen weergavemodus",
        re_Root: "Wortel",
        "re_Back to %s": "Terug naar %s",
        "ra_Place your files here or click here to open the browse dialog": "Plaats uw bestanden hier of klik hier om het bladervenster te openen",
        "ra_If no file will be created in the folder, it will disappear after the browser closed": "Als er geen bestand in de map wordt gemaakt, verdwijnt het nadat de browser is gesloten",
        "ra_Folder name": "Naam van de map",
        "ra_Create new folder in %s": "Maak een nieuwe map in %s",
        "ra_Duplicate name": "Dubbele naam",
        "ra_Invalid parent folder!": "Ongeldige bovenliggende map!",
        "ra_Drop file here": "Zet het bestand hier neer",
        "ra_Suppress question for next %s minutes": "Vraag de volgende %s minuten onderdrukken",
        "ra_Clear filter": "Filter wissen",
        ra_Update: "Bijwerken",
        "ra_Load configuration from file": "Laad configuratie uit bestand",
        "ra_Save configuration to file": "Sla de configuratie op in een bestand",
        sc_cron: "CRON",
        sc_date: "Datum",
        sc_dates: "data",
        sc_dows: "Dag van de week",
        sc_every: "elk",
        sc_everyN_dates: "elke N dagen",
        sc_everyN_dows: "elke N dag van de week",
        sc_everyN_hours: "elke N uur",
        sc_everyN_minutes: "elke N minuten",
        sc_everyN_months: "elke N maanden",
        sc_everyN_seconds: "elke N seconden",
        sc_every_dates: "elke dag",
        sc_every_dows: "elke dag van de week",
        sc_every_hours: "elk uur",
        sc_every_minutes: "elke minuut",
        sc_every_months: "elke maand",
        sc_every_seconds: "elke seconde",
        sc_from: "Van",
        sc_hours: "uren",
        sc_interval: "Interval",
        sc_intervalBetween: "Interval tussen",
        sc_minutes: "Notulen",
        sc_months: "maanden",
        sc_once: "Een keer",
        sc_period: "Periode",
        sc_seconds: "seconden",
        sc_simple: "Gemakkelijk",
        sc_specific: "Specifieke tijd",
        sc_specific_dates: "specifieke data",
        sc_specific_dows: "specifieke dag van weken",
        sc_specific_hours: "specifieke uren",
        sc_specific_minutes: "specifieke minuten",
        sc_specific_months: "specifieke maanden",
        sc_specific_seconds: "specifieke seconden",
        sc_time: "Tijd",
        sc_to: "Naar",
        sc_wizard: "tovenaar",
        sch_all: "allemaal",
        sch_astroDay: "Astro-dag",
        sch_astroNight: "Astro-nacht",
        sch_astro_dawn: "Dageraad",
        sch_astro_dusk: "Schemer",
        sch_astro_goldenHour: "gouden uur",
        sch_astro_goldenHourEnd: "Gouden uur einde",
        sch_astro_nadir: "Nadir",
        sch_astro_nauticalDawn: "Nautische dageraad",
        sch_astro_nauticalDusk: "Nautische schemering",
        sch_astro_night: "Nacht",
        sch_astro_nightEnd: "Nacht einde",
        sch_astro_solarNoon: "Zonne middag",
        sch_astro_sunrise: "zonsopkomst",
        sch_astro_sunriseEnd: "Sunrise einde",
        sch_astro_sunset: "Zonsondergang",
        sch_astro_sunsetStart: "Zonsondergang start",
        sch_at: "Bij",
        sch_desc_atTime: "op %s",
        sch_desc_everyDay: "elke dag",
        sch_desc_everyHour: "elk uur",
        sch_desc_everyMinute: "elke minuut",
        sch_desc_everyMonth: "elke maand",
        sch_desc_everyNDay: "elke %s dag",
        sch_desc_everyNHours: "elke %s uur",
        sch_desc_everyNMinutes: "elke %s minuten",
        sch_desc_everyNMonths: "elke %s maanden",
        sch_desc_everyNWeeks: "elke %s weken",
        sch_desc_everyNYears: "elke %s jaar",
        sch_desc_everyWeek: "elke week",
        sch_desc_everyYear: "elk jaar",
        sch_desc_intervalFromTo: "van %s tot %s",
        sch_desc_never: "nooit",
        sch_desc_onDate: "op %s van %s",
        sch_desc_onDates: "op %s en %s van",
        sch_desc_onEveryDate: "op elke datum van",
        sch_desc_onMonth: "%s",
        sch_desc_onMonths: "%s en %s",
        sch_desc_onWeekday: "op %s",
        sch_desc_onWeekdays: "op %s en %s",
        sch_desc_onWeekends: "in het weekend",
        sch_desc_onWorkdays: "op werkdagen",
        sch_desc_onceInPast: "zal niet meer worden uitgevoerd, omdat start verleden tijd is",
        sch_desc_once_on: "op %s",
        sch_desc_validFrom: "van %s",
        sch_desc_validFromTo: "Uitvoeren van tot",
        sch_desc_validTo: "tot %s",
        sch_every: "elk",
        sch_exactTime: "Specifieke tijd",
        sch_from: "van",
        sch_fromTo: "Van naar",
        sch_intervalTime: "Interval tijd",
        sch_invert: "omkeren",
        sch_no_one: "geen",
        sch_on: "Aan",
        sch_period: "Periode",
        sch_periodDaily: "Dagelijks",
        sch_periodDates: "data",
        sch_periodDay: "Dag",
        sch_periodEvery: "elk",
        sch_periodEveryDay: "Elke dag",
        sch_periodEveryMonth: "Elke maand",
        sch_periodEveryWeek: "Elke week",
        sch_periodEveryYear: "Elk jaar",
        sch_periodHours: "uren",
        sch_periodMinutes: "Notulen",
        sch_periodMonth: "maand",
        sch_periodMonthly: "Maandelijks",
        sch_periodOnce: "Een keer",
        sch_periodSpecificMonths: "Specifieke maanden",
        sch_periodWeek: "Week",
        sch_periodWeekdays: "Doordeweekse dagen",
        sch_periodWeekend: "Weekend",
        sch_periodWeekly: "Wekelijks",
        sch_periodWorkdays: "werkdagen",
        sch_periodYear: "Jaar",
        sch_periodYearly: "jaar-",
        sch_specificTime: "Specifieke tijd",
        sch_time: "Tijd",
        sch_to: "naar",
        sch_valid: "Geldig",
        sch_validFrom: "van",
        sch_validTo: "naar",
        sch_wholeDay: "Hele dag",
        sch_yearEveryMonth: "elke maand",
        "ra_Define schedule...": "Schema defini\xEBren ...",
        ra_Repeat: "Herhaling",
        "ra_use seconds": "gebruik seconden",
        ra_close: "dichtbij",
        ra_dow_Tu: "Tu",
        "ra_Toggle the states view": "Schakel de statusweergave in of uit",
        "ra_Add new child object to selected parent": "Voeg een nieuw kindobject toe aan het geselecteerde bovenliggende object",
        "ra_Add objects tree from JSON file": "Objectenboom toevoegen vanuit JSON-bestand",
        "ra_Save objects tree as JSON file": "Sla de objectenboom op als JSON-bestand",
        ra_Objects: "Voorwerpen",
        ra_States: "Staten",
        ra_object_changed_by_user: "Object voor het laatst gewijzigd om",
        ra_object_changed_by: "Object veranderd door",
        ra_state_changed_from: "Object veranderd van",
        ra_state_changed_by: "Staat veranderd door",
        ra_aclOwner_read_object: "Eigenaar kan object lezen",
        ra_aclOwner_read_state: "Eigenaar kan staat lezen",
        ra_aclOwner_write_object: "Eigenaar kan object schrijven",
        ra_aclOwner_write_state: "Eigenaar kan staat schrijven",
        ra_aclGroup_read_object: "Groep kan object lezen",
        ra_aclGroup_read_state: "Groep kan status lezen",
        ra_aclGroup_write_object: "Groep kan object schrijven",
        ra_aclGroup_write_state: "Groep kan staat schrijven",
        ra_aclEveryone_read_object: "Iedereen kan object lezen",
        ra_aclEveryone_read_state: "Iedereen kan staat lezen",
        ra_aclEveryone_write_object: "Iedereen kan object schrijven",
        ra_aclEveryone_write_state: "Iedereen kan staat schrijven",
        "ra_Folders always first": "Mappen altijd eerst",
        ra_changedFrom: "Veranderd van",
        ra_qualityCode: "Kwaliteitscode",
        ra_timestamp: "Tijdstempel",
        ra_lastChange: "Laatste wijziging",
        "ra_Owner group": "Eigenaarsgroep",
        "ra_Owner user": "Eigenaar gebruiker",
        ra_Create: "Cre\xEBer",
        "ra_Changed from": "Veranderd van",
        "ra_Quality code": "Kwaliteit",
        ra_Timestamp: "Tijdstempel",
        "ra_Last change": "Laatste wijziging",
        "ra_Collapse all nodes": "Vouw alle knooppunten samen",
        "ra_Edit custom config": "Bewerk aangepaste config",
        "ra_Collapse one step node": "E\xE9n niveau samenvouwen",
        "ra_Expand one step node": "Vouw een niveau uit",
        "ra_Refresh tree": "Vernieuw de boom",
        "ra_Expand all nodes": "Vouw alle knooppunten uit",
        "ra_Deselect all": "Deselecteer alles",
        "ra_Select all": "Selecteer alles",
        "ra_%s object(s) processed": "%s object(en) verwerkt",
        "ra_Invalid structure": "Ongeldige structuur",
        "ra_%s was imported": "%s is ge\xEFmporteerd",
        "ra_Failed to open JSON File": "JSON-bestand kan niet worden geopend",
        "ra_Only following structures of objects are available:": "Alleen de volgende structuren van objecten zijn beschikbaar:",
        "ra_Folder \u2192 State": "Map \u2192 Staat",
        "ra_Folder \u2192 Channel \u2192 State": "Map \u2192 Kanaal \u2192 Staat",
        "ra_Folder \u2192 Device \u2192 Channel \u2192 State": "Map \u2192 Apparaat \u2192 Kanaal \u2192 Staat",
        "ra_Device \u2192 Channel \u2192 State": "Apparaat \u2192 Kanaal \u2192 Staat",
        "ra_Channel \u2192 State": "Kanaal \u2192 Staat",
        'ra_Non-experts may create new objects only in "0_userdata.0" or "alias.0".': 'Niet-experts mogen alleen nieuwe objecten maken in "0_userdata.0" of "alias.0".',
        'ra_The experts may create objects everywhere but from second level (e.g. "vis.0" or "javascript.0").': 'De experts kunnen overal objecten maken, behalve vanaf het tweede niveau (bijv. "Vis.0" of "javascript.0").',
        ra_expertMode: "Expert modus",
        "ra_On weekdays": "Op weekdagen",
        "ra_Drop the files here...": "Zet het bestand hier neer...",
        "ra_Drag 'n' drop some files here, or click to select files": "Sleep enkele bestanden hierheen, of klik om bestanden te selecteren",
        ra_Clear: "Verwijderen",
        "ra_Clear icon": "Pictogram wissen",
        ra_none: "geen",
        "ra_Select predefined icon": "Selecteer voorgedefinieerd pictogram",
        "ra_Show lines between rows": "Toon lijnen tussen rijen"
      };
    }
  });

  // node_modules/@iobroker/adapter-react/i18n/fr.json
  var require_fr = __commonJS({
    "node_modules/@iobroker/adapter-react/i18n/fr.json"(exports, module) {
      module.exports = {
        ra_filter_func: "Une fonction",
        ra_filter_id: "ID",
        ra_filter_name: "Pr\xE9nom",
        ra_filter_role: "R\xF4le",
        ra_filter_room: "Pi\xE8ce",
        ra_tooltip_ack: "Drapeau reconnu",
        ra_tooltip_from: "De",
        ra_tooltip_lc: "Derni\xE8re modification",
        ra_tooltip_quality: "Qualit\xE9",
        ra_tooltip_ts: "Horodatage",
        ra_tooltip_user: "Utilisateur",
        ra_tooltip_value: "Valeur",
        "ra_Are you sure?": "\xCAtes-vous s\xFBr?",
        ra_Cancel: "Annuler",
        ra_Copied: "Copi\xE9",
        "ra_Copied %s": '"%s" copi\xE9',
        "ra_Define functions": "D\xE9finir des fonctions",
        "ra_Define rooms": "D\xE9finir des pi\xE8ces",
        ra_Error: "Erreur",
        ra_Message: "Message",
        ra_Ok: "D'accord",
        "ra_Please select object ID...": "Veuillez s\xE9lectionner l'ID d'objet ...",
        ra_Selected: "Choisi",
        "ra_Unknown error!": "Erreur inconnue!",
        ra_Value: "Valeur",
        ra_filter_type: "Type",
        ra_invalidConfig: "Param\xE8tres invalides",
        ra_otherConfig: "Param\xE8tres d'un autre adaptateur %s",
        ra_tooltip_copyState: "Copiez la valeur d'\xE9tat",
        ra_tooltip_customConfig: "Param\xE8tres personnalis\xE9s",
        ra_tooltip_deleteObject: "Supprimer un objet",
        ra_tooltip_editObject: "Modifier l'objet",
        ra_tooltip_editState: "Modifier la valeur d'\xE9tat",
        ra_filter_customs: "Param\xE8tres",
        "ra_Listen on all IPs": "\xC9coutez sur toutes les adresses IP",
        ra_dow_Fr: "Fr",
        ra_dow_Mo: "Mo",
        ra_dow_Sa: "Sa",
        ra_dow_Su: "Su",
        ra_dow_Th: "Th",
        ra_Save: "sauver",
        "ra_Save and close": "Sauver et fermer",
        ra_Close: "Fermer",
        "ra_Auto (no custom columns)": "Auto (pas de colonnes personnalis\xE9es)",
        "ra_Transparent dialog": "Dialogue transparent",
        ra_Width: "Largeur",
        ra_val: "Valeur",
        ra_buttons: "Boutons",
        "ra_Configure visible columns": "Configurer les colonnes visibles",
        "ra_Cannot update attribute, because not found in the object": "Impossible de mettre \xE0 jour l'attribut, car il est introuvable dans l'objet",
        "ra_Edit object field": "Modifier le champ d'objet",
        "ra_Hide empty folders": "Masquer les dossiers vides",
        "ra_Reload files": "Recharger les fichiers",
        "ra_Create folder": "Cr\xE9er le dossier",
        "ra_Upload file": "T\xE9l\xE9verser un fichier",
        "ra_User files": "Fichiers utilisateurs",
        "ra_Confirm deletion of %s": "Confirmer la suppression de %s",
        "ra_Delete (no confirm for 5 mins)": "Supprimer (pas de confirmation pendant 5 minutes)",
        ra_Delete: "Supprimer",
        "ra_Toggle expert mode": "Basculer en mode expert",
        "ra_Toggle view mode": "Basculer le mode d'affichage",
        re_Root: "Racine",
        "re_Back to %s": "Retour \xE0 %s",
        "ra_Place your files here or click here to open the browse dialog": "Placez vos fichiers ici ou cliquez ici pour ouvrir la bo\xEEte de dialogue de navigation",
        "ra_If no file will be created in the folder, it will disappear after the browser closed": "Si aucun fichier ne sera cr\xE9\xE9 dans le dossier, il dispara\xEEtra apr\xE8s la fermeture du navigateur",
        "ra_Folder name": "Nom de dossier",
        "ra_Create new folder in %s": "Cr\xE9er un nouveau dossier dans %s",
        "ra_Duplicate name": "Nom en double",
        "ra_Invalid parent folder!": "Dossier parent non valide!",
        "ra_Drop file here": "D\xE9poser le fichier ici",
        "ra_Suppress question for next %s minutes": "Supprimer la question pour les %s prochaines minutes",
        "ra_Clear filter": "Effacer le filtre",
        ra_Update: "Mise \xE0 jour",
        "ra_Load configuration from file": "Charger la configuration \xE0 partir du fichier",
        "ra_Save configuration to file": "Enregistrer la configuration dans un fichier",
        sc_cron: "CRON",
        sc_date: "Date",
        sc_dates: "Rendez-vous",
        sc_dows: "Jour de la semaine",
        sc_every: "Chaque",
        sc_everyN_dates: "tous les N jours",
        sc_everyN_dows: "tous les N jours de la semaine",
        sc_everyN_hours: "toutes les N heures",
        sc_everyN_minutes: "toutes les N minutes",
        sc_everyN_months: "tous les N mois",
        sc_everyN_seconds: "toutes les N secondes",
        sc_every_dates: "tous les jours",
        sc_every_dows: "Chaque jour de la semaine",
        sc_every_hours: "Toutes les heures",
        sc_every_minutes: "chaque minute",
        sc_every_months: "chaque mois",
        sc_every_seconds: "chaque seconde",
        sc_from: "De",
        sc_hours: "Heures",
        sc_interval: "Intervalle",
        sc_intervalBetween: "Intervalle entre",
        sc_minutes: "Minutes",
        sc_months: "mois",
        sc_once: "Une fois que",
        sc_period: "P\xE9riode",
        sc_seconds: "Secondes",
        sc_simple: "Facile",
        sc_specific: "Temps sp\xE9cifique",
        sc_specific_dates: "dates sp\xE9cifiques",
        sc_specific_dows: "jour sp\xE9cifique de semaines",
        sc_specific_hours: "heures sp\xE9cifiques",
        sc_specific_minutes: "minutes sp\xE9cifiques",
        sc_specific_months: "mois sp\xE9cifiques",
        sc_specific_seconds: "secondes sp\xE9cifiques",
        sc_time: "Temps",
        sc_to: "\xC0",
        sc_wizard: "sorcier",
        sch_all: "tout",
        sch_astroDay: "Journ\xE9e astronomique",
        sch_astroNight: "Nuit astronomique",
        sch_astro_dawn: "Aube",
        sch_astro_dusk: "Cr\xE9puscule",
        sch_astro_goldenHour: "Heure d'or",
        sch_astro_goldenHourEnd: "Fin de l'heure d'or",
        sch_astro_nadir: "Nadir",
        sch_astro_nauticalDawn: "Aube nautique",
        sch_astro_nauticalDusk: "Cr\xE9puscule nautique",
        sch_astro_night: "Nuit",
        sch_astro_nightEnd: "Fin de nuit",
        sch_astro_solarNoon: "Midi solaire",
        sch_astro_sunrise: "lever du soleil",
        sch_astro_sunriseEnd: "Fin du lever du soleil",
        sch_astro_sunset: "Le coucher du soleil",
        sch_astro_sunsetStart: "Coucher du soleil",
        sch_at: "\xE0",
        sch_desc_atTime: "\xE0 %s",
        sch_desc_everyDay: "tous les jours",
        sch_desc_everyHour: "Toutes les heures",
        sch_desc_everyMinute: "chaque minute",
        sch_desc_everyMonth: "chaque mois",
        sch_desc_everyNDay: "chaque %s jour",
        sch_desc_everyNHours: "chaque %s heures",
        sch_desc_everyNMinutes: "toutes les %s minutes",
        sch_desc_everyNMonths: "tous les %s mois",
        sch_desc_everyNWeeks: "chaque %s semaines",
        sch_desc_everyNYears: "tous les %s ans",
        sch_desc_everyWeek: "toutes les semaines",
        sch_desc_everyYear: "chaque ann\xE9e",
        sch_desc_intervalFromTo: "de %s \xE0 %s",
        sch_desc_never: "jamais",
        sch_desc_onDate: "sur %s de %s",
        sch_desc_onDates: "sur %s et %s de",
        sch_desc_onEveryDate: "\xE0 chaque date de",
        sch_desc_onMonth: "%s",
        sch_desc_onMonths: "%s et %s",
        sch_desc_onWeekday: "sur %s",
        sch_desc_onWeekdays: "sur %s et %s",
        sch_desc_onWeekends: "les weekends",
        sch_desc_onWorkdays: "les jours ouvrables",
        sch_desc_onceInPast: "ne sera plus ex\xE9cut\xE9, car start est dans le pass\xE9",
        sch_desc_once_on: "sur %s",
        sch_desc_validFrom: "de %s",
        sch_desc_validFromTo: "Ex\xE9cuter de \xE0",
        sch_desc_validTo: "\xE0 %s",
        sch_every: "chaque",
        sch_exactTime: "Temps sp\xE9cifique",
        sch_from: "de",
        sch_fromTo: "De \xE0",
        sch_intervalTime: "Temps d'interval",
        sch_invert: "inverser",
        sch_no_one: "aucun",
        sch_on: "sur",
        sch_period: "P\xE9riode",
        sch_periodDaily: "du quotidien",
        sch_periodDates: "Rendez-vous",
        sch_periodDay: "journ\xE9e",
        sch_periodEvery: "Chaque",
        sch_periodEveryDay: "Tous les jours",
        sch_periodEveryMonth: "Chaque mois",
        sch_periodEveryWeek: "Toutes les semaines",
        sch_periodEveryYear: "Chaque ann\xE9e",
        sch_periodHours: "Heures",
        sch_periodMinutes: "Minutes",
        sch_periodMonth: "mois",
        sch_periodMonthly: "Mensuel",
        sch_periodOnce: "Une fois que",
        sch_periodSpecificMonths: "Mois sp\xE9cifiques",
        sch_periodWeek: "La semaine",
        sch_periodWeekdays: "Jours de la semaine",
        sch_periodWeekend: "Weekend",
        sch_periodWeekly: "Hebdomadaire",
        sch_periodWorkdays: "Jours ouvrables",
        sch_periodYear: "Ann\xE9e",
        sch_periodYearly: "Annuel",
        sch_specificTime: "Temps sp\xE9cifique",
        sch_time: "Temps",
        sch_to: "\xE0",
        sch_valid: "Valide",
        sch_validFrom: "de",
        sch_validTo: "\xE0",
        sch_wholeDay: "Toute la journ\xE9e",
        sch_yearEveryMonth: "chaque mois",
        "ra_Define schedule...": "D\xE9finir le calendrier ...",
        ra_Repeat: "R\xE9p\xE9ter",
        "ra_use seconds": "utiliser les secondes",
        ra_close: "Fermer",
        ra_dow_Tu: "Tu",
        "ra_Toggle the states view": "Basculer la vue des \xE9tats",
        "ra_Add new child object to selected parent": "Ajouter un nouvel objet enfant au parent s\xE9lectionn\xE9",
        "ra_Add objects tree from JSON file": "Ajouter une arborescence d'objets \xE0 partir d'un fichier JSON",
        "ra_Save objects tree as JSON file": "Enregistrer l'arborescence des objets en tant que fichier JSON",
        ra_Objects: "Objets",
        ra_States: "\xC9tats",
        ra_object_changed_by_user: "Objet modifi\xE9 pour la derni\xE8re fois \xE0",
        ra_object_changed_by: "Objet modifi\xE9 par",
        ra_state_changed_from: "Objet chang\xE9 de",
        ra_state_changed_by: "\xC9tat modifi\xE9 par",
        ra_aclOwner_read_object: "Le propri\xE9taire peut lire l'objet",
        ra_aclOwner_read_state: "Le propri\xE9taire peut lire l'\xE9tat",
        ra_aclOwner_write_object: "Le propri\xE9taire peut \xE9crire un objet",
        ra_aclOwner_write_state: "Le propri\xE9taire peut \xE9crire l'\xE9tat",
        ra_aclGroup_read_object: "Le groupe peut lire l'objet",
        ra_aclGroup_read_state: "Le groupe peut lire l'\xE9tat",
        ra_aclGroup_write_object: "Le groupe peut \xE9crire un objet",
        ra_aclGroup_write_state: "Le groupe peut \xE9crire l'\xE9tat",
        ra_aclEveryone_read_object: "Tout le monde peut lire un objet",
        ra_aclEveryone_read_state: "Tout le monde peut lire l'\xE9tat",
        ra_aclEveryone_write_object: "Tout le monde peut \xE9crire un objet",
        ra_aclEveryone_write_state: "Tout le monde peut \xE9crire l'\xE9tat",
        "ra_Folders always first": "Les dossiers toujours en premier",
        ra_changedFrom: "Chang\xE9 de",
        ra_qualityCode: "Code de qualit\xE9",
        ra_timestamp: "Horodatage",
        ra_lastChange: "Dernier changement",
        "ra_Owner group": "Groupe propri\xE9taire",
        "ra_Owner user": "Utilisateur propri\xE9taire",
        ra_Create: "Cr\xE9er",
        "ra_Changed from": "Chang\xE9 de",
        "ra_Quality code": "Qualit\xE9",
        ra_Timestamp: "Horodatage",
        "ra_Last change": "Dernier changement",
        "ra_Collapse all nodes": "R\xE9duire tous les n\u0153uds",
        "ra_Edit custom config": "Modifier la configuration personnalis\xE9e",
        "ra_Collapse one step node": "R\xE9duire d'un niveau",
        "ra_Expand one step node": "D\xE9velopper un niveau",
        "ra_Refresh tree": "Rafra\xEEchir l'arborescence",
        "ra_Expand all nodes": "D\xE9velopper tous les n\u0153uds",
        "ra_Deselect all": "Tout d\xE9selectionner",
        "ra_Select all": "Tout s\xE9lectionner",
        "ra_%s object(s) processed": "%s objet(s) trait\xE9(s)",
        "ra_Invalid structure": "Structure invalide",
        "ra_%s was imported": "%s a \xE9t\xE9 import\xE9",
        "ra_Failed to open JSON File": "\xC9chec de l'ouverture du fichier JSON",
        "ra_Only following structures of objects are available:": "Seules les structures d'objets suivantes sont disponibles:",
        "ra_Folder \u2192 State": "Dossier \u2192 \xC9tat",
        "ra_Folder \u2192 Channel \u2192 State": "Dossier \u2192 Cha\xEEne \u2192 \xC9tat",
        "ra_Folder \u2192 Device \u2192 Channel \u2192 State": "Dossier \u2192 Appareil \u2192 Canal \u2192 \xC9tat",
        "ra_Device \u2192 Channel \u2192 State": "Appareil \u2192 Canal \u2192 \xC9tat",
        "ra_Channel \u2192 State": "Canal \u2192 \xC9tat",
        'ra_Non-experts may create new objects only in "0_userdata.0" or "alias.0".': 'Les non-experts ne peuvent cr\xE9er de nouveaux objets que dans "0_userdata.0" ou "alias.0".',
        'ra_The experts may create objects everywhere but from second level (e.g. "vis.0" or "javascript.0").': 'Les experts peuvent cr\xE9er des objets partout mais \xE0 partir du deuxi\xE8me niveau (par exemple "vis.0" ou "javascript.0").',
        ra_expertMode: "Mode expert",
        "ra_On weekdays": "En semaine",
        "ra_Drop the files here...": "D\xE9posez le fichier ici...",
        "ra_Drag 'n' drop some files here, or click to select files": "Glissez-d\xE9posez des fichiers ici, ou cliquez pour s\xE9lectionner des fichiers",
        ra_Clear: "Effacer",
        "ra_Clear icon": "Effacer l'ic\xF4ne",
        ra_none: "rien",
        "ra_Select predefined icon": "S\xE9lectionnez l'ic\xF4ne pr\xE9d\xE9finie",
        "ra_Show lines between rows": "Afficher les lignes entre les lignes"
      };
    }
  });

  // node_modules/@iobroker/adapter-react/i18n/it.json
  var require_it = __commonJS({
    "node_modules/@iobroker/adapter-react/i18n/it.json"(exports, module) {
      module.exports = {
        ra_filter_func: "Funzione",
        ra_filter_id: "ID",
        ra_filter_name: "Nome",
        ra_filter_role: "Ruolo",
        ra_filter_room: "Camera",
        ra_tooltip_ack: "Bandiera riconosciuta",
        ra_tooltip_from: "A partire dal",
        ra_tooltip_lc: "Ultima modifica",
        ra_tooltip_quality: "Qualit\xE0",
        ra_tooltip_ts: "Data e ora",
        ra_tooltip_user: "Utente",
        ra_tooltip_value: "Valore",
        "ra_Are you sure?": "Sei sicuro?",
        ra_Cancel: "Annulla",
        ra_Copied: "Copiato",
        "ra_Copied %s": '"%s" copiato',
        "ra_Define functions": "Definire le funzioni",
        "ra_Define rooms": "Definisci le stanze",
        ra_Error: "Errore",
        ra_Message: "Messaggio",
        ra_Ok: "Ok",
        "ra_Please select object ID...": "Seleziona l'ID oggetto ...",
        ra_Selected: "Selezionato",
        "ra_Unknown error!": "Errore sconosciuto!",
        ra_Value: "Valore",
        ra_filter_type: "genere",
        ra_invalidConfig: "Impostazioni non valide",
        ra_otherConfig: "Impostazioni dall'altro adattatore %s",
        ra_tooltip_copyState: "Copia il valore dello stato",
        ra_tooltip_customConfig: "Impostazioni personalizzate",
        ra_tooltip_deleteObject: "Elimina oggetto",
        ra_tooltip_editObject: "Modifica oggetto",
        ra_tooltip_editState: "Modifica il valore dello stato",
        ra_filter_customs: "impostazioni",
        "ra_Listen on all IPs": "Ascolta su tutti gli IP",
        ra_dow_Fr: "fr",
        ra_dow_Mo: "momento",
        ra_dow_Sa: "Sa",
        ra_dow_Su: "su",
        ra_dow_Th: "th",
        ra_Save: "Salva",
        "ra_Save and close": "Salva e chiudi",
        ra_Close: "Vicino",
        "ra_Auto (no custom columns)": "Auto (nessuna colonna personalizzata)",
        "ra_Transparent dialog": "Finestra di dialogo trasparente",
        ra_Width: "Larghezza",
        ra_val: "Valore",
        ra_buttons: "Bottoni",
        "ra_Configure visible columns": "Configura colonne visibili",
        "ra_Cannot update attribute, because not found in the object": "Impossibile aggiornare l'attributo, perch\xE9 non trovato nell'oggetto",
        "ra_Edit object field": "Modifica campo oggetto",
        "ra_Hide empty folders": "Nascondi cartelle vuote",
        "ra_Reload files": "Ricarica i file",
        "ra_Create folder": "Creare una cartella",
        "ra_Upload file": "Caricare un file",
        "ra_User files": "File utente",
        "ra_Confirm deletion of %s": "Conferma l'eliminazione di %s",
        "ra_Delete (no confirm for 5 mins)": "Elimina (nessuna conferma per 5 minuti)",
        ra_Delete: "Elimina",
        "ra_Toggle expert mode": "Attiva / disattiva la modalit\xE0 esperto",
        "ra_Toggle view mode": "Attiva / disattiva la modalit\xE0 di visualizzazione",
        re_Root: "Radice",
        "re_Back to %s": "Torna a %s",
        "ra_Place your files here or click here to open the browse dialog": "Posiziona i file qui o fai clic qui per aprire la finestra di dialogo Sfoglia",
        "ra_If no file will be created in the folder, it will disappear after the browser closed": "Se nessun file verr\xE0 creato nella cartella, scomparir\xE0 dopo la chiusura del browser",
        "ra_Folder name": "Nome della cartella",
        "ra_Create new folder in %s": "Crea nuova cartella in %s",
        "ra_Duplicate name": "Nome duplicato",
        "ra_Invalid parent folder!": "Cartella principale non valida!",
        "ra_Drop file here": "Trascina il file qui",
        "ra_Suppress question for next %s minutes": "Sopprimi la domanda per i prossimi %s minuti",
        "ra_Clear filter": "Filtro pulito",
        ra_Update: "Aggiornare",
        "ra_Load configuration from file": "Carica la configurazione dal file",
        "ra_Save configuration to file": "Salva la configurazione su file",
        sc_cron: "CRON",
        sc_date: "Data",
        sc_dates: "Date",
        sc_dows: "Giorno della settimana",
        sc_every: "Ogni",
        sc_everyN_dates: "ogni N giorni",
        sc_everyN_dows: "ogni N giorno della settimana",
        sc_everyN_hours: "ogni N ore",
        sc_everyN_minutes: "ogni N minuti",
        sc_everyN_months: "ogni N mesi",
        sc_everyN_seconds: "ogni N secondi",
        sc_every_dates: "ogni giorno",
        sc_every_dows: "Tutti i giorni della settimana",
        sc_every_hours: "ogni ora",
        sc_every_minutes: "ogni minuto",
        sc_every_months: "ogni mese",
        sc_every_seconds: "ogni secondo",
        sc_from: "A partire dal",
        sc_hours: "Ore",
        sc_interval: "Intervallo",
        sc_intervalBetween: "Intervallo tra",
        sc_minutes: "Minuti",
        sc_months: "mesi",
        sc_once: "Una volta",
        sc_period: "Periodo",
        sc_seconds: "secondi",
        sc_simple: "Semplice",
        sc_specific: "Orario preciso",
        sc_specific_dates: "date specifiche",
        sc_specific_dows: "giorno specifico delle settimane",
        sc_specific_hours: "orari specifici",
        sc_specific_minutes: "minuti specifici",
        sc_specific_months: "mesi specifici",
        sc_specific_seconds: "secondi specifici",
        sc_time: "Tempo",
        sc_to: "Per",
        sc_wizard: "procedura guidata",
        sch_all: "tutti",
        sch_astroDay: "Astro day",
        sch_astroNight: "Astro night",
        sch_astro_dawn: "Alba",
        sch_astro_dusk: "Crepuscolo",
        sch_astro_goldenHour: "Ora d'oro",
        sch_astro_goldenHourEnd: "Fine dell'ora d'oro",
        sch_astro_nadir: "Nadir",
        sch_astro_nauticalDawn: "Alba nautica",
        sch_astro_nauticalDusk: "Crepuscolo nautico",
        sch_astro_night: "Notte",
        sch_astro_nightEnd: "Fine della notte",
        sch_astro_solarNoon: "Mezzogiorno solare",
        sch_astro_sunrise: "Alba",
        sch_astro_sunriseEnd: "Fine dell'alba",
        sch_astro_sunset: "Tramonto",
        sch_astro_sunsetStart: "Inizio del tramonto",
        sch_at: "a",
        sch_desc_atTime: "a %s",
        sch_desc_everyDay: "ogni giorno",
        sch_desc_everyHour: "ogni ora",
        sch_desc_everyMinute: "ogni minuto",
        sch_desc_everyMonth: "ogni mese",
        sch_desc_everyNDay: "ogni %s giorno",
        sch_desc_everyNHours: "ogni %s ore",
        sch_desc_everyNMinutes: "ogni %s minuti",
        sch_desc_everyNMonths: "ogni %s mesi",
        sch_desc_everyNWeeks: "ogni %s settimane",
        sch_desc_everyNYears: "ogni %s anni",
        sch_desc_everyWeek: "ogni settimana",
        sch_desc_everyYear: "ogni anno",
        sch_desc_intervalFromTo: "da %s a %s",
        sch_desc_never: "mai",
        sch_desc_onDate: "su %s di %s",
        sch_desc_onDates: "su %s e %s di",
        sch_desc_onEveryDate: "in ogni data di",
        sch_desc_onMonth: "%s",
        sch_desc_onMonths: "%s e %s",
        sch_desc_onWeekday: "su %s",
        sch_desc_onWeekdays: "su %s e %s",
        sch_desc_onWeekends: "nei finesettimana",
        sch_desc_onWorkdays: "nei giorni lavorativi",
        sch_desc_onceInPast: "non verr\xE0 pi\xF9 eseguito, perch\xE9 start \xE8 nel passato",
        sch_desc_once_on: "su %s",
        sch_desc_validFrom: "da %s",
        sch_desc_validFromTo: "Eseguire da a",
        sch_desc_validTo: "a %s",
        sch_every: "ogni",
        sch_exactTime: "Orario preciso",
        sch_from: "a partire dal",
        sch_fromTo: "Da A",
        sch_intervalTime: "Intervallo di tempo",
        sch_invert: "invertire",
        sch_no_one: "nessuna",
        sch_on: "sopra",
        sch_period: "Periodo",
        sch_periodDaily: "Quotidiano",
        sch_periodDates: "Date",
        sch_periodDay: "Giorno",
        sch_periodEvery: "Ogni",
        sch_periodEveryDay: "Ogni giorno",
        sch_periodEveryMonth: "Ogni mese",
        sch_periodEveryWeek: "Ogni settimana",
        sch_periodEveryYear: "Ogni anno",
        sch_periodHours: "Ore",
        sch_periodMinutes: "Minuti",
        sch_periodMonth: "mese",
        sch_periodMonthly: "Mensile",
        sch_periodOnce: "Una volta",
        sch_periodSpecificMonths: "Mesi specifici",
        sch_periodWeek: "Settimana",
        sch_periodWeekdays: "Giorni della settimana",
        sch_periodWeekend: "Fine settimana",
        sch_periodWeekly: "settimanalmente",
        sch_periodWorkdays: "giorni feriali",
        sch_periodYear: "Anno",
        sch_periodYearly: "Annuale",
        sch_specificTime: "Orario preciso",
        sch_time: "Tempo",
        sch_to: "per",
        sch_valid: "Valido",
        sch_validFrom: "a partire dal",
        sch_validTo: "per",
        sch_wholeDay: "Giorno intero",
        sch_yearEveryMonth: "ogni mese",
        "ra_Define schedule...": "Definisci pianificazione ...",
        ra_Repeat: "Ripetere",
        "ra_use seconds": "usa i secondi",
        ra_close: "vicino",
        ra_dow_Tu: "Tu",
        "ra_Toggle the states view": "Attiva o disattiva la visualizzazione degli stati",
        "ra_Add new child object to selected parent": "Aggiungi un nuovo oggetto figlio al genitore selezionato",
        "ra_Add objects tree from JSON file": "Aggiungi l'albero degli oggetti dal file JSON",
        "ra_Save objects tree as JSON file": "Salva l'albero degli oggetti come file JSON",
        ra_Objects: "Oggetti",
        ra_States: "stati",
        ra_object_changed_by_user: "L'oggetto \xE8 stato modificato l'ultima volta alle",
        ra_object_changed_by: "Oggetto modificato da",
        ra_state_changed_from: "Oggetto cambiato da",
        ra_state_changed_by: "Stato cambiato da",
        ra_aclOwner_read_object: "Il proprietario pu\xF2 leggere l'oggetto",
        ra_aclOwner_read_state: "Il proprietario pu\xF2 leggere lo stato",
        ra_aclOwner_write_object: "Il proprietario pu\xF2 scrivere l'oggetto",
        ra_aclOwner_write_state: "Il proprietario pu\xF2 scrivere lo stato",
        ra_aclGroup_read_object: "Il gruppo pu\xF2 leggere l'oggetto",
        ra_aclGroup_read_state: "Il gruppo pu\xF2 leggere lo stato",
        ra_aclGroup_write_object: "Il gruppo pu\xF2 scrivere l'oggetto",
        ra_aclGroup_write_state: "Il gruppo pu\xF2 scrivere lo stato",
        ra_aclEveryone_read_object: "Tutti possono leggere gli oggetti",
        ra_aclEveryone_read_state: "Tutti possono leggere lo stato",
        ra_aclEveryone_write_object: "Tutti possono scrivere oggetti",
        ra_aclEveryone_write_state: "Tutti possono scrivere stato",
        "ra_Folders always first": "Le cartelle sono sempre al primo posto",
        ra_changedFrom: "Cambiato da",
        ra_qualityCode: "Codice di qualit\xE0",
        ra_timestamp: "Timestamp",
        ra_lastChange: "Ultima modifica",
        "ra_Owner group": "Gruppo di proprietari",
        "ra_Owner user": "Utente proprietario",
        ra_Create: "Creare",
        "ra_Changed from": "Cambiato da",
        "ra_Quality code": "Qualit\xE0",
        ra_Timestamp: "Timestamp",
        "ra_Last change": "Ultima modifica",
        "ra_Collapse all nodes": "Comprimi tutti i nodi",
        "ra_Edit custom config": "Modifica configurazione personalizzata",
        "ra_Collapse one step node": "Comprimi un livello",
        "ra_Expand one step node": "Espandi un livello",
        "ra_Refresh tree": "Aggiorna l'albero",
        "ra_Expand all nodes": "Espandi tutti i nodi",
        "ra_Deselect all": "Deseleziona tutto",
        "ra_Select all": "Seleziona tutto",
        "ra_%s object(s) processed": "%s oggetti elaborati",
        "ra_Invalid structure": "Struttura non valida",
        "ra_%s was imported": "%s \xE8 stato importato",
        "ra_Failed to open JSON File": "Impossibile aprire il file JSON",
        "ra_Only following structures of objects are available:": "Sono disponibili solo le seguenti strutture di oggetti:",
        "ra_Folder \u2192 State": "Cartella \u2192 Stato",
        "ra_Folder \u2192 Channel \u2192 State": "Cartella \u2192 Canale \u2192 Stato",
        "ra_Folder \u2192 Device \u2192 Channel \u2192 State": "Cartella \u2192 Dispositivo \u2192 Canale \u2192 Stato",
        "ra_Device \u2192 Channel \u2192 State": "Dispositivo \u2192 Canale \u2192 Stato",
        "ra_Channel \u2192 State": "Canale \u2192 Stato",
        'ra_Non-experts may create new objects only in "0_userdata.0" or "alias.0".': 'I non esperti possono creare nuovi oggetti solo in "0_userdata.0" o "alias.0".',
        'ra_The experts may create objects everywhere but from second level (e.g. "vis.0" or "javascript.0").': 'Gli esperti possono creare oggetti ovunque ma dal secondo livello (es. "Vis.0" o "javascript.0").',
        ra_expertMode: "Modalit\xE0 esperto",
        "ra_On weekdays": "Nei giorni della settimana",
        "ra_Drop the files here...": "Trascina qui il file...",
        "ra_Drag 'n' drop some files here, or click to select files": "Trascina e rilascia alcuni file qui o fai clic per selezionare i file",
        ra_Clear: "Elimina",
        "ra_Clear icon": "Cancella icona",
        ra_none: "nessuna",
        "ra_Select predefined icon": "Seleziona l'icona predefinita",
        "ra_Show lines between rows": "Mostra linee tra le righe"
      };
    }
  });

  // node_modules/@iobroker/adapter-react/i18n/es.json
  var require_es = __commonJS({
    "node_modules/@iobroker/adapter-react/i18n/es.json"(exports, module) {
      module.exports = {
        ra_filter_func: "Funci\xF3n",
        ra_filter_id: "ID",
        ra_filter_name: "Nombre",
        ra_filter_role: "Papel",
        ra_filter_room: "Habitaci\xF3n",
        ra_tooltip_ack: "Bandera reconocida",
        ra_tooltip_from: "Desde",
        ra_tooltip_lc: "\xDAltimo cambio",
        ra_tooltip_quality: "Calidad",
        ra_tooltip_ts: "Sello de tiempo",
        ra_tooltip_user: "Usuario",
        ra_tooltip_value: "Valor",
        "ra_Are you sure?": "\xBFEst\xE1s seguro?",
        ra_Cancel: "Cancelar",
        ra_Copied: "Copiado",
        "ra_Copied %s": 'Copiado "%s"',
        "ra_Define functions": "Definir funciones",
        "ra_Define rooms": "Definir habitaciones",
        ra_Error: "Error",
        ra_Message: "Mensaje",
        ra_Ok: "Okay",
        "ra_Please select object ID...": "Por favor seleccione ID de objeto ...",
        ra_Selected: "Seleccionado",
        "ra_Unknown error!": "\xA1Error desconocido!",
        ra_Value: "Valor",
        ra_filter_type: "Tipo",
        ra_invalidConfig: "Configuraciones inv\xE1lidas",
        ra_otherConfig: "Configuraciones de otro adaptador %s",
        ra_tooltip_copyState: "Copie el valor del estado",
        ra_tooltip_customConfig: "Ajustes personalizados",
        ra_tooltip_deleteObject: "Eliminar objeto",
        ra_tooltip_editObject: "Editar objeto",
        ra_tooltip_editState: "Edite el valor del estado",
        ra_filter_customs: "Configuraciones",
        "ra_Listen on all IPs": "Escuche en todas las IP",
        ra_dow_Fr: "Fr",
        ra_dow_Mo: "Mes",
        ra_dow_Sa: "Sa",
        ra_dow_Su: "Su",
        ra_dow_Th: "Th",
        ra_Save: "Salvar",
        "ra_Save and close": "Guardar y cerrar",
        ra_Close: "Cerca",
        "ra_Auto (no custom columns)": "Autom\xE1tico (sin columnas personalizadas)",
        "ra_Transparent dialog": "Di\xE1logo transparente",
        ra_Width: "Anchura",
        ra_val: "Valor",
        ra_buttons: "Botones",
        "ra_Configure visible columns": "Configurar columnas visibles",
        "ra_Cannot update attribute, because not found in the object": "No se puede actualizar el atributo porque no se encuentra en el objeto",
        "ra_Edit object field": "Editar campo de objeto",
        "ra_Hide empty folders": "Ocultar carpetas vac\xEDas",
        "ra_Reload files": "Recargar archivos",
        "ra_Create folder": "Crear carpeta",
        "ra_Upload file": "Subir archivo",
        "ra_User files": "Archivos de usuario",
        "ra_Confirm deletion of %s": "Confirmar la eliminaci\xF3n de %s",
        "ra_Delete (no confirm for 5 mins)": "Eliminar (sin confirmar durante 5 minutos)",
        ra_Delete: "Eliminar",
        "ra_Toggle expert mode": "Alternar modo experto",
        "ra_Toggle view mode": "Alternar modo de vista",
        re_Root: "Ra\xEDz",
        "re_Back to %s": "Volver a %s",
        "ra_Place your files here or click here to open the browse dialog": "Coloque sus archivos aqu\xED o haga clic aqu\xED para abrir el cuadro de di\xE1logo de exploraci\xF3n",
        "ra_If no file will be created in the folder, it will disappear after the browser closed": "Si no se crear\xE1 ning\xFAn archivo en la carpeta, desaparecer\xE1 despu\xE9s de que se cierre el navegador.",
        "ra_Folder name": "Nombre de la carpeta",
        "ra_Create new folder in %s": "Crear nueva carpeta en %s",
        "ra_Duplicate name": "Nombre duplicado",
        "ra_Invalid parent folder!": "Carpeta principal no v\xE1lida.",
        "ra_Drop file here": "Suelta el archivo aqu\xED",
        "ra_Suppress question for next %s minutes": "Suprimir pregunta durante los pr\xF3ximos %s minutos",
        "ra_Clear filter": "Filtro claro",
        ra_Update: "Actualizar",
        "ra_Load configuration from file": "Cargar configuraci\xF3n desde archivo",
        "ra_Save configuration to file": "Guardar configuraci\xF3n en archivo",
        sc_cron: "CRON",
        sc_date: "Fecha",
        sc_dates: "fechas",
        sc_dows: "D\xEDa de la semana",
        sc_every: "Cada",
        sc_everyN_dates: "cada N d\xEDas",
        sc_everyN_dows: "cada N d\xEDa de la semana",
        sc_everyN_hours: "cada N horas",
        sc_everyN_minutes: "cada N minutos",
        sc_everyN_months: "cada N meses",
        sc_everyN_seconds: "cada N segundos",
        sc_every_dates: "cada d\xEDa",
        sc_every_dows: "Cada d\xEDa de la semana",
        sc_every_hours: "cada hora",
        sc_every_minutes: "cada minuto",
        sc_every_months: "cada mes",
        sc_every_seconds: "cada segundo",
        sc_from: "De",
        sc_hours: "Horas",
        sc_interval: "Intervalo",
        sc_intervalBetween: "Intervalo entre",
        sc_minutes: "Minutos",
        sc_months: "meses",
        sc_once: "Una vez",
        sc_period: "Per\xEDodo",
        sc_seconds: "Segundos",
        sc_simple: "Sencillo",
        sc_specific: "Tiempo espec\xEDfico",
        sc_specific_dates: "fechas especificas",
        sc_specific_dows: "d\xEDa espec\xEDfico de semanas",
        sc_specific_hours: "horas espec\xEDficas",
        sc_specific_minutes: "minutos espec\xEDficos",
        sc_specific_months: "meses espec\xEDficos",
        sc_specific_seconds: "segundos espec\xEDficos",
        sc_time: "Hora",
        sc_to: "A",
        sc_wizard: "Mago",
        sch_all: "todas",
        sch_astroDay: "D\xEDa astro",
        sch_astroNight: "Noche astro",
        sch_astro_dawn: "Amanecer",
        sch_astro_dusk: "Oscuridad",
        sch_astro_goldenHour: "hora dorada",
        sch_astro_goldenHourEnd: "Fin de la hora dorada",
        sch_astro_nadir: "Nadir",
        sch_astro_nauticalDawn: "Amanecer n\xE1utico",
        sch_astro_nauticalDusk: "Anochecer n\xE1utico",
        sch_astro_night: "Noche",
        sch_astro_nightEnd: "Fin de la noche",
        sch_astro_solarNoon: "Mediod\xEDa solar",
        sch_astro_sunrise: "amanecer",
        sch_astro_sunriseEnd: "Fin del amanecer",
        sch_astro_sunset: "Puesta de sol",
        sch_astro_sunsetStart: "Puesta de sol",
        sch_at: "a",
        sch_desc_atTime: "en %s",
        sch_desc_everyDay: "cada d\xEDa",
        sch_desc_everyHour: "cada hora",
        sch_desc_everyMinute: "cada minuto",
        sch_desc_everyMonth: "cada mes",
        sch_desc_everyNDay: "cada %s d\xEDas",
        sch_desc_everyNHours: "cada %s horas",
        sch_desc_everyNMinutes: "cada %s minutos",
        sch_desc_everyNMonths: "cada %s meses",
        sch_desc_everyNWeeks: "cada %s semanas",
        sch_desc_everyNYears: "cada %s a\xF1os",
        sch_desc_everyWeek: "cada semana",
        sch_desc_everyYear: "todos los a\xF1os",
        sch_desc_intervalFromTo: "de %s a %s",
        sch_desc_never: "Nunca",
        sch_desc_onDate: "en %s de %s",
        sch_desc_onDates: "en %s y %s de",
        sch_desc_onEveryDate: "en cada fecha de",
        sch_desc_onMonth: "%s",
        sch_desc_onMonths: "%s y %s",
        sch_desc_onWeekday: "en %s",
        sch_desc_onWeekdays: "en %s y %s",
        sch_desc_onWeekends: "en los fines de semana",
        sch_desc_onWorkdays: "en d\xEDas laborables",
        sch_desc_onceInPast: "ya no se ejecutar\xE1 m\xE1s, porque el inicio est\xE1 en el pasado",
        sch_desc_once_on: "en %s",
        sch_desc_validFrom: "de %s",
        sch_desc_validFromTo: "Ejecutar desde hasta",
        sch_desc_validTo: "a %s",
        sch_every: "cada",
        sch_exactTime: "Tiempo espec\xEDfico",
        sch_from: "de",
        sch_fromTo: "De-a",
        sch_intervalTime: "Tiempo de intervalo",
        sch_invert: "invertir; poner boca abajo o en la posici\xF3n opuesta, orden o arreglo; Boca abajo",
        sch_no_one: "ninguna",
        sch_on: "en",
        sch_period: "Per\xEDodo",
        sch_periodDaily: "Diario",
        sch_periodDates: "fechas",
        sch_periodDay: "D\xEDa",
        sch_periodEvery: "Cada",
        sch_periodEveryDay: "Cada d\xEDa",
        sch_periodEveryMonth: "Cada mes",
        sch_periodEveryWeek: "Cada semana",
        sch_periodEveryYear: "Todos los a\xF1os",
        sch_periodHours: "Horas",
        sch_periodMinutes: "Minutos",
        sch_periodMonth: "mes",
        sch_periodMonthly: "Mensual",
        sch_periodOnce: "Una vez",
        sch_periodSpecificMonths: "Meses espec\xEDficos",
        sch_periodWeek: "Semana",
        sch_periodWeekdays: "D\xEDas laborables",
        sch_periodWeekend: "Fin de semana",
        sch_periodWeekly: "Semanal",
        sch_periodWorkdays: "D\xEDas laborables",
        sch_periodYear: "A\xF1o",
        sch_periodYearly: "Anual",
        sch_specificTime: "Tiempo espec\xEDfico",
        sch_time: "Hora",
        sch_to: "a",
        sch_valid: "V\xE1lido",
        sch_validFrom: "de",
        sch_validTo: "a",
        sch_wholeDay: "Todo el dia",
        sch_yearEveryMonth: "cada mes",
        "ra_Define schedule...": "Definir horario ...",
        ra_Repeat: "Repetir",
        "ra_use seconds": "usar segundos",
        ra_close: "cerrar",
        ra_dow_Tu: "Tu",
        "ra_Toggle the states view": "Alternar la vista de estados",
        "ra_Add new child object to selected parent": "Agregar nuevo objeto hijo al padre seleccionado",
        "ra_Add objects tree from JSON file": "Agregar \xE1rbol de objetos desde el archivo JSON",
        "ra_Save objects tree as JSON file": "Guardar el \xE1rbol de objetos como archivo JSON",
        ra_Objects: "Objetos",
        ra_States: "Estados",
        ra_object_changed_by_user: "Objeto cambiado por \xFAltima vez a las",
        ra_object_changed_by: "Objeto cambiado por",
        ra_state_changed_from: "Objeto cambiado de",
        ra_state_changed_by: "Estado cambiado por",
        ra_aclOwner_read_object: "El propietario puede leer el objeto",
        ra_aclOwner_read_state: "El propietario puede leer el estado",
        ra_aclOwner_write_object: "El propietario puede escribir el objeto",
        ra_aclOwner_write_state: "El propietario puede escribir el estado",
        ra_aclGroup_read_object: "El grupo puede leer el objeto",
        ra_aclGroup_read_state: "El grupo puede leer el estado",
        ra_aclGroup_write_object: "El grupo puede escribir un objeto",
        ra_aclGroup_write_state: "El grupo puede escribir el estado",
        ra_aclEveryone_read_object: "Todo el mundo puede leer el objeto",
        ra_aclEveryone_read_state: "Todos pueden leer el estado",
        ra_aclEveryone_write_object: "Todos pueden escribir objetos",
        ra_aclEveryone_write_state: "Todos pueden escribir el estado",
        "ra_Folders always first": "Carpetas siempre primero",
        ra_changedFrom: "Cambiaron desde",
        ra_qualityCode: "C\xF3digo de calidad",
        ra_timestamp: "Marca de tiempo",
        ra_lastChange: "Ultimo cambio",
        "ra_Owner group": "Grupo propietario",
        "ra_Owner user": "Usuario propietario",
        ra_Create: "Crear",
        "ra_Changed from": "Cambiaron desde",
        "ra_Quality code": "Calidad",
        ra_Timestamp: "Marca de tiempo",
        "ra_Last change": "Ultimo cambio",
        "ra_Collapse all nodes": "Contraer todos los nodos",
        "ra_Edit custom config": "Editar configuraci\xF3n personalizada",
        "ra_Collapse one step node": "Contraer un nivel",
        "ra_Expand one step node": "Expandir un nivel",
        "ra_Refresh tree": "Actualizar \xE1rbol",
        "ra_Expand all nodes": "Expandir todos los nodos",
        "ra_Deselect all": "Deselecciona todo",
        "ra_Select all": "Seleccionar todo",
        "ra_%s object(s) processed": "%s objeto(s) procesados",
        "ra_Invalid structure": "Estructura inv\xE1lida",
        "ra_%s was imported": "%s fue importado",
        "ra_Failed to open JSON File": "No se pudo abrir el archivo JSON",
        "ra_Only following structures of objects are available:": "Solo est\xE1n disponibles las siguientes estructuras de objetos:",
        "ra_Folder \u2192 State": "Carpeta \u2192 Estado",
        "ra_Folder \u2192 Channel \u2192 State": "Carpeta \u2192 Canal \u2192 Estado",
        "ra_Folder \u2192 Device \u2192 Channel \u2192 State": "Carpeta \u2192 Dispositivo \u2192 Canal \u2192 Estado",
        "ra_Device \u2192 Channel \u2192 State": "Dispositivo \u2192 Canal \u2192 Estado",
        "ra_Channel \u2192 State": "Canal \u2192 Estado",
        'ra_Non-experts may create new objects only in "0_userdata.0" or "alias.0".': 'Los no expertos pueden crear nuevos objetos solo en "0_userdata.0" o "alias.0".',
        'ra_The experts may create objects everywhere but from second level (e.g. "vis.0" or "javascript.0").': 'Los expertos pueden crear objetos en todas partes excepto desde el segundo nivel (por ejemplo, "vis.0" o "javascript.0").',
        ra_expertMode: "Modo experto",
        "ra_On weekdays": "De lunes a viernes",
        "ra_Drop the files here...": "Suelta el archivo aqu\xED ...",
        "ra_Drag 'n' drop some files here, or click to select files": "Arrastre y suelte algunos archivos aqu\xED, o haga clic para seleccionar archivos",
        ra_Clear: "Borrar",
        "ra_Clear icon": "Icono claro",
        ra_none: "ninguno",
        "ra_Select predefined icon": "Seleccionar icono predefinido",
        "ra_Show lines between rows": "Mostrar l\xEDneas entre filas"
      };
    }
  });

  // node_modules/@iobroker/adapter-react/i18n/pl.json
  var require_pl = __commonJS({
    "node_modules/@iobroker/adapter-react/i18n/pl.json"(exports, module) {
      module.exports = {
        ra_filter_func: "Funkcjonowa\u0107",
        ra_filter_id: "ID",
        ra_filter_name: "Imi\u0119",
        ra_filter_role: "Rola",
        ra_filter_room: "Sala",
        ra_tooltip_ack: "Potwierdzon",
        ra_tooltip_from: "Z",
        ra_tooltip_lc: "Ostatnia zmiana",
        ra_tooltip_quality: "Jako\u015B\u0107",
        ra_tooltip_ts: "Znak czasu",
        ra_tooltip_user: "U\u017Cytkownik",
        ra_tooltip_value: "Warto\u015B\u0107",
        "ra_Are you sure?": "Jeste\u015B pewny?",
        ra_Cancel: "Anuluj",
        ra_Copied: "Skopiowano",
        "ra_Copied %s": 'Skopiowano "%s"',
        "ra_Define functions": "Zdefiniuj funkcje",
        "ra_Define rooms": "Zdefiniuj pokoje",
        ra_Error: "B\u0142\u0105d",
        ra_Message: "Wiadomo\u015B\u0107",
        ra_Ok: "Dobrze",
        "ra_Please select object ID...": "Wybierz identyfikator obiektu ...",
        ra_Selected: "Wybrany",
        "ra_Unknown error!": "Nieznany b\u0142\u0105d!",
        ra_Value: "Warto\u015B\u0107",
        ra_filter_type: "Rodzaj",
        ra_invalidConfig: "Nieprawid\u0142owe ustawienia",
        ra_otherConfig: "Ustawienia z innego adaptera %s",
        ra_tooltip_copyState: "Skopiuj warto\u015B\u0107 stanu",
        ra_tooltip_customConfig: "W\u0142asne ustawienia",
        ra_tooltip_deleteObject: "Usu\u0144 obiekt",
        ra_tooltip_editObject: "Edytuj obiekt",
        ra_tooltip_editState: "Edytuj warto\u015B\u0107 stanu",
        ra_filter_customs: "Ustawienia",
        "ra_Listen on all IPs": "S\u0142uchaj na wszystkich adresach IP",
        ra_dow_Fr: "Ks",
        ra_dow_Mo: "Mo",
        ra_dow_Sa: "Sa",
        ra_dow_Su: "Su",
        ra_dow_Th: "Th",
        ra_Save: "Zapisa\u0107",
        "ra_Save and close": "Zapisz i zamknij",
        ra_Close: "Blisko",
        "ra_Auto (no custom columns)": "Auto (bez kolumn niestandardowych)",
        "ra_Transparent dialog": "Przejrzyste okno dialogowe",
        ra_Width: "Szeroko\u015B\u0107",
        ra_val: "Warto\u015B\u0107",
        ra_buttons: "guziki",
        "ra_Configure visible columns": "Skonfiguruj widoczne kolumny",
        "ra_Cannot update attribute, because not found in the object": "Nie mo\u017Cna zaktualizowa\u0107 atrybutu, poniewa\u017C nie znaleziono go w obiekcie",
        "ra_Edit object field": "Edytuj pole obiektu",
        "ra_Hide empty folders": "Ukryj puste foldery",
        "ra_Reload files": "Za\u0142aduj ponownie pliki",
        "ra_Create folder": "Utw\xF3rz folder",
        "ra_Upload file": "Przesy\u0142anie pliku",
        "ra_User files": "Pliki u\u017Cytkownika",
        "ra_Confirm deletion of %s": "Potwierd\u017A usuni\u0119cie %s",
        "ra_Delete (no confirm for 5 mins)": "Usu\u0144 (bez potwierdzenia przez 5 minut)",
        ra_Delete: "Usun\u0105\u0107",
        "ra_Toggle expert mode": "Prze\u0142\u0105cz tryb eksperta",
        "ra_Toggle view mode": "Prze\u0142\u0105cz tryb widoku",
        re_Root: "Korze\u0144",
        "re_Back to %s": "Powr\xF3t do %s",
        "ra_Place your files here or click here to open the browse dialog": "Umie\u015B\u0107 swoje pliki tutaj lub kliknij tutaj, aby otworzy\u0107 okno dialogowe przegl\u0105dania",
        "ra_If no file will be created in the folder, it will disappear after the browser closed": "Je\u015Bli w folderze nie zostanie utworzony \u017Caden plik, zniknie on po zamkni\u0119ciu przegl\u0105darki",
        "ra_Folder name": "Nazwa folderu",
        "ra_Create new folder in %s": "Utw\xF3rz nowy folder w %s",
        "ra_Duplicate name": "Zduplikowana nazwa",
        "ra_Invalid parent folder!": "Nieprawid\u0142owy folder nadrz\u0119dny!",
        "ra_Drop file here": "Upu\u015B\u0107 plik tutaj",
        "ra_Suppress question for next %s minutes": "Ukryj pytanie przez nast\u0119pne %s minut",
        "ra_Clear filter": "Czysty filtr",
        ra_Update: "Aktualizacja",
        "ra_Load configuration from file": "Za\u0142aduj konfiguracj\u0119 z pliku",
        "ra_Save configuration to file": "Zapisz konfiguracj\u0119 do pliku",
        sc_cron: "CRON",
        sc_date: "Data",
        sc_dates: "Daktyle",
        sc_dows: "Dzie\u0144 tygodnia",
        sc_every: "Ka\u017Cdy",
        sc_everyN_dates: "co N dni",
        sc_everyN_dows: "co N dnia tygodnia",
        sc_everyN_hours: "co N godzin",
        sc_everyN_minutes: "co N minut",
        sc_everyN_months: "co N miesi\u0119cy",
        sc_everyN_seconds: "co N sekund",
        sc_every_dates: "codziennie",
        sc_every_dows: "ka\u017Cdy dzie\u0144 tygodnia",
        sc_every_hours: "co godzin\u0119",
        sc_every_minutes: "ka\u017Cda minuta",
        sc_every_months: "ka\u017Cdego miesi\u0105ca",
        sc_every_seconds: "ka\u017Cda sekunda",
        sc_from: "Od",
        sc_hours: "godziny",
        sc_interval: "Interwa\u0142",
        sc_intervalBetween: "Interwa\u0142 mi\u0119dzy",
        sc_minutes: "Minuty",
        sc_months: "miesi\u0119cy",
        sc_once: "Pewnego razu",
        sc_period: "Kropka",
        sc_seconds: "sekundy",
        sc_simple: "Prosty",
        sc_specific: "Okre\u015Blony czas",
        sc_specific_dates: "konkretne daty",
        sc_specific_dows: "okre\u015Blony dzie\u0144 tygodni",
        sc_specific_hours: "okre\u015Blone godziny",
        sc_specific_minutes: "okre\u015Blone minuty",
        sc_specific_months: "okre\u015Blone miesi\u0105ce",
        sc_specific_seconds: "okre\u015Blone sekundy",
        sc_time: "Czas",
        sc_to: "Do",
        sc_wizard: "Czarodziej",
        sch_all: "wszystko",
        sch_astroDay: "Dzie\u0144 Astro",
        sch_astroNight: "Noc Astro",
        sch_astro_dawn: "\u015Awit",
        sch_astro_dusk: "Zmierzch",
        sch_astro_goldenHour: "z\u0142ota godzina",
        sch_astro_goldenHourEnd: "Koniec z\u0142otej godziny",
        sch_astro_nadir: "Nadir",
        sch_astro_nauticalDawn: "Morski \u015Bwit",
        sch_astro_nauticalDusk: "Morski zmierzch",
        sch_astro_night: "Noc",
        sch_astro_nightEnd: "Koniec nocy",
        sch_astro_solarNoon: "Po\u0142udnie s\u0142oneczne",
        sch_astro_sunrise: "wsch\xF3d s\u0142o\u0144ca",
        sch_astro_sunriseEnd: "Koniec wschodu s\u0142o\u0144ca",
        sch_astro_sunset: "Zach\xF3d s\u0142o\u0144ca",
        sch_astro_sunsetStart: "Pocz\u0105tek zachodu s\u0142o\u0144ca",
        sch_at: "w",
        sch_desc_atTime: "na %s",
        sch_desc_everyDay: "codziennie",
        sch_desc_everyHour: "co godzin\u0119",
        sch_desc_everyMinute: "ka\u017Cda minuta",
        sch_desc_everyMonth: "ka\u017Cdego miesi\u0105ca",
        sch_desc_everyNDay: "ka\u017Cdego dnia %s",
        sch_desc_everyNHours: "co %s godzin",
        sch_desc_everyNMinutes: "co %s minut",
        sch_desc_everyNMonths: "co %s miesi\u0119cy",
        sch_desc_everyNWeeks: "co %s tygodni",
        sch_desc_everyNYears: "co %s lat",
        sch_desc_everyWeek: "co tydzie\u0144",
        sch_desc_everyYear: "ka\u017Cdego roku",
        sch_desc_intervalFromTo: "od %s do %s",
        sch_desc_never: "nigdy",
        sch_desc_onDate: "na %s z %s",
        sch_desc_onDates: "na %s i %s z",
        sch_desc_onEveryDate: "w ka\u017Cd\u0105 dat\u0119",
        sch_desc_onMonth: "%s",
        sch_desc_onMonths: "%s i %s",
        sch_desc_onWeekday: "na %s",
        sch_desc_onWeekdays: "na %s i %s",
        sch_desc_onWeekends: "w weekendy",
        sch_desc_onWorkdays: "w dni robocze",
        sch_desc_onceInPast: "nie b\u0119dzie ju\u017C wykonywany, poniewa\u017C start jest w przesz\u0142o\u015Bci",
        sch_desc_once_on: "na %s",
        sch_desc_validFrom: "z %s",
        sch_desc_validFromTo: "Wykonaj od do",
        sch_desc_validTo: "do %s",
        sch_every: "ka\u017Cdy",
        sch_exactTime: "Okre\u015Blony czas",
        sch_from: "od",
        sch_fromTo: "Od-do",
        sch_intervalTime: "Czas przerwy",
        sch_invert: "odwraca\u0107",
        sch_no_one: "\u017Baden",
        sch_on: "na",
        sch_period: "Kropka",
        sch_periodDaily: "Codziennie",
        sch_periodDates: "Daktyle",
        sch_periodDay: "Dzie\u0144",
        sch_periodEvery: "Ka\u017Cdy",
        sch_periodEveryDay: "Codziennie",
        sch_periodEveryMonth: "Ka\u017Cdego miesi\u0105ca",
        sch_periodEveryWeek: "Co tydzie\u0144",
        sch_periodEveryYear: "Ka\u017Cdego roku",
        sch_periodHours: "godziny",
        sch_periodMinutes: "Minuty",
        sch_periodMonth: "miesi\u0105c",
        sch_periodMonthly: "Miesi\u0119czny",
        sch_periodOnce: "Pewnego razu",
        sch_periodSpecificMonths: "Okre\u015Blone miesi\u0105ce",
        sch_periodWeek: "Tydzie\u0144",
        sch_periodWeekdays: "Dni powszednie",
        sch_periodWeekend: "Weekend",
        sch_periodWeekly: "Co tydzie\u0144",
        sch_periodWorkdays: "Dni robocze",
        sch_periodYear: "Rok",
        sch_periodYearly: "Rocznie",
        sch_specificTime: "Okre\u015Blony czas",
        sch_time: "Czas",
        sch_to: "do",
        sch_valid: "Wa\u017Cny",
        sch_validFrom: "od",
        sch_validTo: "do",
        sch_wholeDay: "Ca\u0142y dzie\u0144",
        sch_yearEveryMonth: "ka\u017Cdego miesi\u0105ca",
        "ra_Define schedule...": "Zdefiniuj harmonogram ...",
        ra_Repeat: "Powtarza\u0107",
        "ra_use seconds": "u\u017Cyj sekund",
        ra_close: "blisko",
        ra_dow_Tu: "Tu",
        "ra_Toggle the states view": "Prze\u0142\u0105cz widok stan\xF3w",
        "ra_Add new child object to selected parent": "Dodaj nowy obiekt potomny do wybranego rodzica",
        "ra_Add objects tree from JSON file": "Dodaj drzewo obiekt\xF3w z pliku JSON",
        "ra_Save objects tree as JSON file": "Zapisz drzewo obiekt\xF3w jako plik JSON",
        ra_Objects: "Obiekty",
        ra_States: "Stany",
        ra_object_changed_by_user: "Obiekt ostatnio zmieniony o godz",
        ra_object_changed_by: "Obiekt zmieniony przez",
        ra_state_changed_from: "Obiekt zmieniony z",
        ra_state_changed_by: "Stan zmieniony przez",
        ra_aclOwner_read_object: "W\u0142a\u015Bciciel mo\u017Ce czyta\u0107 obiekt",
        ra_aclOwner_read_state: "W\u0142a\u015Bciciel mo\u017Ce odczyta\u0107 stan",
        ra_aclOwner_write_object: "W\u0142a\u015Bciciel mo\u017Ce napisa\u0107 obiekt",
        ra_aclOwner_write_state: "W\u0142a\u015Bciciel mo\u017Ce pisa\u0107 stan",
        ra_aclGroup_read_object: "Grupa mo\u017Ce odczyta\u0107 obiekt",
        ra_aclGroup_read_state: "Grupa mo\u017Ce odczyta\u0107 stan",
        ra_aclGroup_write_object: "Grupa mo\u017Ce pisa\u0107 obiekt",
        ra_aclGroup_write_state: "Grupa mo\u017Ce pisa\u0107 stan",
        ra_aclEveryone_read_object: "Ka\u017Cdy mo\u017Ce czyta\u0107 obiekt",
        ra_aclEveryone_read_state: "Ka\u017Cdy mo\u017Ce czyta\u0107 stan",
        ra_aclEveryone_write_object: "Ka\u017Cdy mo\u017Ce pisa\u0107 przedmiot",
        ra_aclEveryone_write_state: "Ka\u017Cdy mo\u017Ce pisa\u0107 stan",
        "ra_Folders always first": "Foldery zawsze na pierwszym miejscu",
        ra_changedFrom: "Zmieniony z",
        ra_qualityCode: "Kod jako\u015Bci",
        ra_timestamp: "Znak czasu",
        ra_lastChange: "Ostatnia zmiana",
        "ra_Owner group": "Grupa w\u0142a\u015Bcicieli",
        "ra_Owner user": "W\u0142a\u015Bciciel u\u017Cytkownika",
        ra_Create: "Stw\xF3rz",
        "ra_Changed from": "Zmieniony z",
        "ra_Quality code": "Jako\u015Bci",
        ra_Timestamp: "Znak czasu",
        "ra_Last change": "Ostatnia zmiana",
        "ra_Collapse all nodes": "Zwi\u0144 wszystkie w\u0119z\u0142y",
        "ra_Edit custom config": "Edytuj konfiguracj\u0119 niestandardow\u0105",
        "ra_Collapse one step node": "Zwi\u0144 o jeden poziom",
        "ra_Expand one step node": "Rozwi\u0144 o jeden poziom",
        "ra_Refresh tree": "Od\u015Bwie\u017C drzewo",
        "ra_Expand all nodes": "Rozwi\u0144 wszystkie w\u0119z\u0142y",
        "ra_Deselect all": "Odznacz wszystko",
        "ra_Select all": "Zaznacz wszystko",
        "ra_%s object(s) processed": "Przetworzono %s obiekt\xF3w",
        "ra_Invalid structure": "Nieprawid\u0142owa struktura",
        "ra_%s was imported": "%s zosta\u0142 zaimportowany",
        "ra_Failed to open JSON File": "Nie uda\u0142o si\u0119 otworzy\u0107 pliku JSON",
        "ra_Only following structures of objects are available:": "Dost\u0119pne s\u0105 tylko nast\u0119puj\u0105ce struktury obiekt\xF3w:",
        "ra_Folder \u2192 State": "Folder \u2192 Stan",
        "ra_Folder \u2192 Channel \u2192 State": "Folder \u2192 Kana\u0142 \u2192 Stan",
        "ra_Folder \u2192 Device \u2192 Channel \u2192 State": "Folder \u2192 Urz\u0105dzenie \u2192 Kana\u0142 \u2192 Stan",
        "ra_Device \u2192 Channel \u2192 State": "Urz\u0105dzenie \u2192 Kana\u0142 \u2192 Stan",
        "ra_Channel \u2192 State": "Kana\u0142 \u2192 Stan",
        'ra_Non-experts may create new objects only in "0_userdata.0" or "alias.0".': "Osoby nie b\u0119d\u0105ce ekspertami mog\u0105 tworzy\u0107 nowe obiekty tylko w \u201E0_userdata.0\u201D lub \u201Ealias.0\u201D.",
        'ra_The experts may create objects everywhere but from second level (e.g. "vis.0" or "javascript.0").': "Eksperci mog\u0105 tworzy\u0107 obiekty wsz\u0119dzie poza drugim poziomem (np. \u201EVis.0\u201D lub \u201Ejavascript.0\u201D).",
        ra_expertMode: "Tryb ekspercki",
        "ra_On weekdays": "W dni powszednie",
        "ra_Drop the files here...": "Upu\u015B\u0107 plik tutaj...",
        "ra_Drag 'n' drop some files here, or click to select files": "Przeci\u0105gnij i upu\u015B\u0107 kilka plik\xF3w tutaj lub kliknij, aby wybra\u0107 pliki",
        ra_Clear: "Kasowa\u0107",
        "ra_Clear icon": "Wyczy\u015B\u0107 ikon\u0119",
        ra_none: "\u017Baden",
        "ra_Select predefined icon": "Wybierz predefiniowan\u0105 ikon\u0119",
        "ra_Show lines between rows": "Poka\u017C linie mi\u0119dzy rz\u0119dami"
      };
    }
  });

  // node_modules/@iobroker/adapter-react/i18n/zh-cn.json
  var require_zh_cn = __commonJS({
    "node_modules/@iobroker/adapter-react/i18n/zh-cn.json"(exports, module) {
      module.exports = {
        ra_filter_func: "\u529F\u80FD",
        ra_filter_id: "ID",
        ra_filter_name: "\u540D\u79F0",
        ra_filter_role: "\u89D2\u8272",
        ra_filter_room: "\u623F\u95F4",
        ra_tooltip_ack: "\u81F4\u8C22\u56FD\u65D7",
        ra_tooltip_from: "\u4ECE",
        ra_tooltip_lc: "\u6700\u540E\u6539\u53D8\u4E86",
        ra_tooltip_quality: "\u8D28\u91CF",
        ra_tooltip_ts: "\u65F6\u95F4\u6233",
        ra_tooltip_user: "\u7528\u6237",
        ra_tooltip_value: "\u503C",
        "ra_Are you sure?": "\u4F60\u786E\u5B9A\u5417\uFF1F",
        ra_Cancel: "\u53D6\u6D88",
        ra_Copied: "\u590D\u5236\u7684",
        "ra_Copied %s": '\u590D\u5236\u7684"%s"',
        "ra_Define functions": "\u5B9A\u4E49\u529F\u80FD",
        "ra_Define rooms": "\u5B9A\u4E49\u623F\u95F4",
        ra_Error: "\u9519\u8BEF",
        ra_Message: "\u4FE1\u606F",
        ra_Ok: "\u597D",
        "ra_Please select object ID...": "\u8BF7\u9009\u62E9\u5BF9\u8C61ID ...",
        ra_Selected: "\u5DF2\u9009",
        "ra_Unknown error!": "\u672A\u77E5\u9519\u8BEF\uFF01",
        ra_Value: "\u503C",
        ra_filter_type: "\u7C7B\u578B",
        ra_invalidConfig: "\u65E0\u6548\u7684\u8BBE\u5B9A",
        ra_otherConfig: "\u6765\u81EA\u5176\u4ED6\u9002\u914D\u5668%s\u7684\u8BBE\u7F6E",
        ra_tooltip_copyState: "\u590D\u5236\u72B6\u6001\u503C",
        ra_tooltip_customConfig: "\u81EA\u5B9A\u4E49\u8BBE\u7F6E",
        ra_tooltip_deleteObject: "\u5220\u9664\u7269\u4EF6",
        ra_tooltip_editObject: "\u7F16\u8F91\u7269\u4EF6",
        ra_tooltip_editState: "\u7F16\u8F91\u72B6\u6001\u503C",
        ra_filter_customs: "\u8BBE\u5B9A\u503C",
        "ra_Listen on all IPs": "\u76D1\u542C\u6240\u6709IP",
        ra_dow_Fr: "r",
        ra_dow_Mo: "\u83AB",
        ra_dow_Sa: "\u8428",
        ra_dow_Su: "\u82CF",
        ra_Save: "\u4FDD\u5B58",
        "ra_Save and close": "\u4FDD\u5B58\u5E76\u5173\u95ED",
        ra_Close: "\u5173",
        "ra_Auto (no custom columns)": "\u81EA\u52A8\uFF08\u65E0\u81EA\u5B9A\u4E49\u5217\uFF09",
        "ra_Transparent dialog": "\u900F\u660E\u5BF9\u8BDD\u6846",
        ra_Width: "\u5BBD\u5EA6",
        ra_val: "\u503C",
        ra_buttons: "\u7EBD\u6263",
        "ra_Configure visible columns": "\u914D\u7F6E\u53EF\u89C1\u5217",
        "ra_Cannot update attribute, because not found in the object": "\u65E0\u6CD5\u66F4\u65B0\u5C5E\u6027\uFF0C\u56E0\u4E3A\u5728\u5BF9\u8C61\u4E2D\u627E\u4E0D\u5230",
        "ra_Edit object field": "\u7F16\u8F91\u5BF9\u8C61\u5B57\u6BB5",
        "ra_Hide empty folders": "\u9690\u85CF\u7A7A\u6587\u4EF6\u5939",
        "ra_Reload files": "\u91CD\u65B0\u8F7D\u5165\u6587\u4EF6",
        "ra_Create folder": "\u521B\u5EFA\u6587\u4EF6\u5939",
        "ra_Upload file": "\u4E0A\u4F20\u6587\u4EF6",
        "ra_User files": "\u7528\u6237\u6863\u6848",
        "ra_Confirm deletion of %s": "\u786E\u8BA4\u5220\u9664%s",
        "ra_Delete (no confirm for 5 mins)": "\u5220\u9664\uFF085\u5206\u949F\u5185\u672A\u786E\u8BA4\uFF09",
        ra_Delete: "\u5220\u9664",
        "ra_Toggle expert mode": "\u5207\u6362\u4E13\u5BB6\u6A21\u5F0F",
        "ra_Toggle view mode": "\u5207\u6362\u68C0\u89C6\u6A21\u5F0F",
        re_Root: "\u6839",
        "re_Back to %s": "\u8FD4\u56DE%s",
        "ra_Place your files here or click here to open the browse dialog": "\u5C06\u6587\u4EF6\u653E\u5728\u6B64\u5904\u6216\u5355\u51FB\u6B64\u5904\u6253\u5F00\u6D4F\u89C8\u5BF9\u8BDD\u6846",
        "ra_If no file will be created in the folder, it will disappear after the browser closed": "\u5982\u679C\u5728\u8BE5\u6587\u4EF6\u5939\u4E2D\u672A\u521B\u5EFA\u4EFB\u4F55\u6587\u4EF6\uFF0C\u5219\u8BE5\u6587\u4EF6\u5C06\u5728\u6D4F\u89C8\u5668\u5173\u95ED\u540E\u6D88\u5931",
        "ra_Folder name": "\u6587\u4EF6\u5939\u540D\u79F0",
        "ra_Create new folder in %s": "\u5728%s\u4E2D\u521B\u5EFA\u65B0\u6587\u4EF6\u5939",
        "ra_Duplicate name": "\u540D\u79F0\u91CD\u590D",
        "ra_Invalid parent folder!": "\u7236\u6587\u4EF6\u5939\u65E0\u6548\uFF01",
        "ra_Drop file here": "\u5C06\u6863\u6848\u653E\u5728\u8FD9\u91CC",
        "ra_Suppress question for next %s minutes": "\u5728\u63A5\u4E0B\u6765\u7684%s\u5206\u949F\u5185\u53D6\u6D88\u63D0\u95EE",
        "ra_Clear filter": "\u6E05\u9664\u7B5B\u9009",
        ra_Update: "\u66F4\u65B0\u8D44\u6599",
        "ra_Load configuration from file": "\u4ECE\u6587\u4EF6\u52A0\u8F7D\u914D\u7F6E",
        "ra_Save configuration to file": "\u5C06\u914D\u7F6E\u4FDD\u5B58\u5230\u6587\u4EF6",
        sc_cron: "\u5468\u671F\u4EFB\u52A1",
        sc_date: "\u65E5\u671F",
        sc_dates: "\u65E5",
        sc_dows: "\u661F\u671F",
        sc_every: "\u6BCF",
        sc_everyN_dates: "\u6BCFN\u5929",
        sc_everyN_dows: "\u6BCF\u5468N\u5929",
        sc_everyN_hours: "\u6BCFN\u5C0F\u65F6\u4E00\u6B21",
        sc_everyN_minutes: "\u6BCFN\u5206\u949F",
        sc_everyN_months: "\u6BCFN\u4E2A\u6708",
        sc_everyN_seconds: "\u6BCFN\u79D2",
        sc_every_dates: "\u6BCF\u5929",
        sc_every_dows: "\u4E00\u5468\u7684\u6BCF\u4E00\u5929",
        sc_every_hours: "\u6BCF\u5C0F\u65F6",
        sc_every_minutes: "\u6BCF\u5206\u949F",
        sc_every_months: "\u6BCF\u6708",
        sc_every_seconds: "\u6BCF\u79D2",
        sc_from: "\u4ECE",
        sc_hours: "\u5C0F\u65F6",
        sc_interval: "\u95F4\u9694",
        sc_intervalBetween: "\u95F4\u9694\u65F6\u95F4",
        sc_minutes: "\u5206\u949F",
        sc_months: "\u6708",
        sc_once: "\u4E00\u6B21",
        sc_period: "\u5468\u671F",
        sc_seconds: "\u79D2",
        sc_simple: "\u7B80\u5355\u6A21\u5F0F",
        sc_specific: "\u7279\u5B9A\u7684\u65F6\u95F4",
        sc_specific_dates: "\u7279\u5B9A\u7684\u65E5\u5B50",
        sc_specific_dows: "\u7279\u5B9A\u7684\u4E00\u5468",
        sc_specific_hours: "\u7279\u5B9A\u7684\u5C0F\u65F6",
        sc_specific_minutes: "\u7279\u5B9A\u7684\u5206\u949F",
        sc_specific_months: "\u7279\u5B9A\u7684\u6708\u4EFD",
        sc_specific_seconds: "\u7279\u5B9A\u7684\u63CF\u8FF0",
        sc_time: "\u65F6\u95F4",
        sc_to: "\u81F3",
        sc_wizard: "\u5411\u5BFC\u6A21\u5F0F",
        sch_all: "\u5168\u9009",
        sch_astroDay: "\u5929\u6587\u767D\u5929",
        sch_astroNight: "\u5929\u6587\u591C\u665A",
        sch_astro_dawn: "\u9ECE\u660E",
        sch_astro_dusk: "\u9EC4\u660F",
        sch_astro_goldenHour: "\u9EC4\u91D1\u65F6\u6BB5",
        sch_astro_goldenHourEnd: "\u9EC4\u91D1\u65F6\u6BB5\u7ED3\u675F",
        sch_astro_nadir: "\u5929\u5E95",
        sch_astro_nauticalDawn: "\u822A\u6D77\u9ECE\u660E",
        sch_astro_nauticalDusk: "\u822A\u6D77\u9EC4\u660F",
        sch_astro_night: "\u591C\u665A",
        sch_astro_nightEnd: "\u591C\u665A\u7ED3\u675F",
        sch_astro_solarNoon: "\u6B63\u5348",
        sch_astro_sunrise: "\u65E5\u51FA",
        sch_astro_sunriseEnd: "\u65E5\u51FA\u7ED3\u675F",
        sch_astro_sunset: "\u65E5\u843D",
        sch_astro_sunsetStart: "\u65E5\u843D\u5F00\u59CB",
        sch_at: "\u5728",
        sch_desc_atTime: "\u7684%s",
        sch_desc_everyDay: "\u6BCF\u5929",
        sch_desc_everyHour: "\u6BCF\u5C0F\u65F6",
        sch_desc_everyMinute: "\u6BCF\u5206\u949F",
        sch_desc_everyMonth: "\u6BCF\u6708",
        sch_desc_everyNDay: "\u6BCF%s\u5929",
        sch_desc_everyNHours: "\u6BCF%s\u5C0F\u65F6",
        sch_desc_everyNMinutes: "\u6BCF%s\u5206\u949F",
        sch_desc_everyNMonths: "\u6BCF%s\u6708",
        sch_desc_everyNWeeks: "\u6BCF%s\u5468",
        sch_desc_everyNYears: "\u6BCF%s\u5E74",
        sch_desc_everyWeek: "\u6BCF\u5468",
        sch_desc_everyYear: "\u6BCF\u5E74",
        sch_desc_intervalFromTo: "\u4ECE%s\u5230%s",
        sch_desc_never: "\u51B3\u4E0D",
        sch_desc_onDate: "\u5728%s\u7684%s\u4E0A",
        sch_desc_onDates: "\u5728%s\u548C%s\u4E0A",
        sch_desc_onEveryDate: "\u5728\u6BCF\u5929",
        sch_desc_onMonth: "%s",
        sch_desc_onMonths: "%s\u548C%s",
        sch_desc_onWeekday: "\u5728%s\u4E0A",
        sch_desc_onWeekdays: "\u5728%s\u548C%s\u4E0A",
        sch_desc_onWeekends: "\u5728\u5468\u672B",
        sch_desc_onWorkdays: "\u5728\u5DE5\u4F5C\u65E5",
        sch_desc_onceInPast: "\u5C06\u4E0D\u518D\u6267\u884C\uFF0C\u56E0\u4E3A\u8D77\u59CB\u65F6\u95F4\u5DF2\u7ECF\u662F\u8FC7\u53BB\u7684\u65F6\u95F4\u4E86\u3002",
        sch_desc_once_on: "\u5728%s\u4E0A",
        sch_desc_validFrom: "\u6765\u81EA%s",
        sch_desc_validFromTo: "\u4ECE\u6267\u884C\u5230",
        sch_desc_validTo: "\u5230%s",
        sch_every: "\u6BCF",
        sch_exactTime: "\u7279\u5B9A\u7684\u65F6\u95F4",
        sch_from: "\u4ECE",
        sch_fromTo: "\u4ECE\u5230",
        sch_intervalTime: "\u95F4\u9694\u65F6\u95F4",
        sch_invert: "\u5012\u7F6E",
        sch_no_one: "\u53D6\u6D88\u5168\u9009",
        sch_on: "\u7684",
        sch_period: "\u5468\u671F",
        sch_periodDaily: "\u6BCF\u5929",
        sch_periodDates: "\u65E5\u671F",
        sch_periodDay: "\u5929",
        sch_periodEvery: "\u6BCF",
        sch_periodEveryDay: "\u6BCF\u5929",
        sch_periodEveryMonth: "\u6BCF\u6708",
        sch_periodEveryWeek: "\u6BCF\u5468",
        sch_periodEveryYear: "\u6BCF\u5E74",
        sch_periodHours: "\u5C0F\u65F6",
        sch_periodMinutes: "\u5206\u949F",
        sch_periodMonth: "\u6708",
        sch_periodMonthly: "\u6BCF\u6708\u4E00\u6B21",
        sch_periodOnce: "\u4E00\u6B21",
        sch_periodSpecificMonths: "\u7279\u5B9A\u7684\u6708\u4EFD",
        sch_periodWeek: "\u5468",
        sch_periodWeekdays: "\u5DE5\u4F5C\u65E5",
        sch_periodWeekend: "\u5468\u672B",
        sch_periodWeekly: "\u6BCF\u5468",
        sch_periodWorkdays: "\u5DE5\u4F5C\u65E5",
        sch_periodYear: "\u5E74",
        sch_periodYearly: "\u6BCF\u5E74",
        sch_specificTime: "\u7279\u5B9A\u7684\u65F6\u95F4",
        sch_time: "\u65F6\u95F4",
        sch_to: "\u81F3",
        sch_valid: "\u751F\u6548",
        sch_validFrom: "\u4ECE",
        sch_validTo: "\u81F3",
        sch_wholeDay: "\u4E00\u6574\u5929",
        sch_yearEveryMonth: "\u6BCF\u6708",
        "ra_Define schedule...": "\u5B9A\u4E49\u65F6\u95F4\u8868...",
        ra_Repeat: "\u91CD\u590D",
        "ra_use seconds": "\u7528\u79D2",
        ra_close: "\u5173\u95ED",
        ra_dow_Th: "Th",
        ra_dow_Tu: "Tu",
        "ra_Toggle the states view": "\u5207\u6362\u72B6\u6001\u89C6\u56FE",
        "ra_Add new child object to selected parent": "\u5C06\u65B0\u7684\u5B50\u5BF9\u8C61\u6DFB\u52A0\u5230\u9009\u5B9A\u7684\u7236\u5BF9\u8C61",
        "ra_Add objects tree from JSON file": "\u4ECEJSON\u6587\u4EF6\u6DFB\u52A0\u5BF9\u8C61\u6811",
        "ra_Save objects tree as JSON file": "\u5C06\u5BF9\u8C61\u6811\u53E6\u5B58\u4E3AJSON\u6587\u4EF6",
        ra_Objects: "\u5BF9\u8C61",
        ra_States: "\u72B6\u6001",
        ra_object_changed_by_user: "\u5BF9\u8C61\u4E0A\u6B21\u66F4\u6539\u65F6\u95F4\u4E3A",
        ra_object_changed_by: "\u7269\u4EF6\u53D8\u66F4\u8005",
        ra_state_changed_from: "\u5BF9\u8C61\u5DF2\u4ECE\u66F4\u6539",
        ra_state_changed_by: "\u72B6\u6001\u7531",
        ra_aclOwner_read_object: "\u6240\u6709\u8005\u53EF\u4EE5\u8BFB\u53D6\u5BF9\u8C61",
        ra_aclOwner_read_state: "\u6240\u6709\u8005\u53EF\u4EE5\u8BFB\u53D6\u72B6\u6001",
        ra_aclOwner_write_object: "\u6240\u6709\u8005\u53EF\u4EE5\u5199\u5BF9\u8C61",
        ra_aclOwner_write_state: "\u6240\u6709\u8005\u53EF\u4EE5\u5199\u72B6\u6001",
        ra_aclGroup_read_object: "\u7EC4\u53EF\u4EE5\u8BFB\u53D6\u5BF9\u8C61",
        ra_aclGroup_read_state: "\u7FA4\u7EC4\u53EF\u4EE5\u8BFB\u53D6\u72B6\u6001",
        ra_aclGroup_write_object: "\u7EC4\u53EF\u4EE5\u5199\u5BF9\u8C61",
        ra_aclGroup_write_state: "\u7EC4\u53EF\u4EE5\u5199\u72B6\u6001",
        ra_aclEveryone_read_object: "\u6BCF\u4E2A\u4EBA\u90FD\u53EF\u4EE5\u9605\u8BFB\u5BF9\u8C61",
        ra_aclEveryone_read_state: "\u6BCF\u4E2A\u4EBA\u90FD\u53EF\u4EE5\u9605\u8BFB\u72B6\u6001",
        ra_aclEveryone_write_object: "\u6BCF\u4E2A\u4EBA\u90FD\u53EF\u4EE5\u5199\u5BF9\u8C61",
        ra_aclEveryone_write_state: "\u6BCF\u4E2A\u4EBA\u90FD\u53EF\u4EE5\u5199\u72B6\u6001",
        "ra_Folders always first": "\u8D44\u6599\u5939\u6C38\u8FDC\u4F18\u5148",
        ra_changedFrom: "\u66F4\u6539\u4E3A",
        ra_qualityCode: "\u8D28\u91CF\u4EE3\u7801",
        ra_timestamp: "\u65F6\u95F4\u6233\u8BB0",
        ra_lastChange: "\u6700\u540E\u4E00\u6B21\u53D8\u66F4",
        "ra_Owner group": "\u6240\u6709\u8005\u7EC4",
        "ra_Owner user": "\u6240\u6709\u8005\u7528\u6237",
        ra_Create: "\u521B\u5EFA",
        "ra_Changed from": "\u66F4\u6539\u4E3A",
        "ra_Quality code": "\u8D28\u91CF\u4EE3\u7801",
        ra_Timestamp: "\u65F6\u95F4\u6233\u8BB0",
        "ra_Last change": "\u6700\u540E\u4E00\u6B21\u53D8\u66F4",
        "ra_Collapse all nodes": "\u6536\u5408\u6240\u6709\u8282\u70B9",
        "ra_Edit custom config": "\u7F16\u8F91\u81EA\u5B9A\u4E49\u914D\u7F6E",
        "ra_Collapse one step node": "\u6298\u53E0\u4E00\u7EA7",
        "ra_Expand one step node": "\u6269\u5927\u4E00\u7EA7",
        "ra_Refresh tree": "\u5237\u65B0\u6811",
        "ra_Expand all nodes": "\u5C55\u5F00\u6240\u6709\u8282\u70B9",
        "ra_Deselect all": "\u5168\u90E8\u53D6\u6D88\u9009\u62E9",
        "ra_Select all": "\u5168\u9009",
        "ra_%s object(s) processed": "\u5DF2\u5904\u7406%s\u4E2A\u5BF9\u8C61",
        "ra_Invalid structure": "\u7ED3\u6784\u65E0\u6548",
        "ra_%s was imported": "\u5BF9\u8C61\u5DF2\u5BFC\u5165",
        "ra_Failed to open JSON File": "\u65E0\u6CD5\u6253\u5F00JSON\u6587\u4EF6",
        "ra_Only following structures of objects are available:": "\u4EC5\u4EE5\u4E0B\u5BF9\u8C61\u7ED3\u6784\u53EF\u7528\uFF1A",
        "ra_Folder \u2192 State": "\u6587\u4EF6\u5939\u2192\u72B6\u6001",
        "ra_Folder \u2192 Channel \u2192 State": "\u6587\u4EF6\u5939\u2192\u9891\u9053\u2192\u72B6\u6001",
        "ra_Folder \u2192 Device \u2192 Channel \u2192 State": "\u6587\u4EF6\u5939\u2192\u8BBE\u5907\u2192\u9891\u9053\u2192\u72B6\u6001",
        "ra_Device \u2192 Channel \u2192 State": "\u8BBE\u5907\u2192\u9891\u9053\u2192\u72B6\u6001",
        "ra_Channel \u2192 State": "\u9891\u9053\u2192\u72B6\u6001",
        'ra_Non-experts may create new objects only in "0_userdata.0" or "alias.0".': "\u975E\u4E13\u5BB6\u53EA\u80FD\u5728\u201C 0_userdata.0\u201D\u6216\u201C alias.0\u201D\u4E2D\u521B\u5EFA\u65B0\u5BF9\u8C61\u3002",
        'ra_The experts may create objects everywhere but from second level (e.g. "vis.0" or "javascript.0").': "\u4E13\u5BB6\u53EF\u4EE5\u5728\u4EFB\u4F55\u5730\u65B9\u521B\u5EFA\u5BF9\u8C61\uFF0C\u4F46\u8981\u4ECE\u7B2C\u4E8C\u5C42\u5F00\u59CB\uFF08\u4F8B\u5982\u201C vis.0\u201D\u6216\u201C javascript.0\u201D\uFF09\u3002",
        ra_expertMode: "\u4E13\u5BB6\u6A21\u5F0F",
        "ra_On weekdays": "\u5728\u5DE5\u4F5C\u65E5",
        "ra_Drop the files here...": "\u628A\u6587\u4EF6\u653E\u5728\u8FD9\u91CC...",
        "ra_Drag 'n' drop some files here, or click to select files": "\u5C06\u4E00\u4E9B\u6587\u4EF6\u62D6\u653E\u5230\u6B64\u5904\uFF0C\u6216\u5355\u51FB\u4EE5\u9009\u62E9\u6587\u4EF6",
        ra_Clear: "\u5220\u9664",
        "ra_Clear icon": "\u6E05\u9664\u56FE\u6807",
        ra_none: "\u6CA1\u6709\u4EFB\u4F55",
        "ra_Select predefined icon": "\u9009\u62E9\u9884\u5B9A\u4E49\u56FE\u6807",
        "ra_Show lines between rows": "\u663E\u793A\u884C\u4E4B\u95F4\u7684\u7EBF"
      };
    }
  });

  // node_modules/@iobroker/adapter-react/GenericApp.js
  var require_GenericApp = __commonJS({
    "node_modules/@iobroker/adapter-react/GenericApp.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      var _typeof3 = require_typeof();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _typeof22 = _interopRequireDefault(require_typeof());
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
      var _get2 = _interopRequireDefault(require_get());
      var _inherits2 = _interopRequireDefault(require_inherits());
      var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
      var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
      var _defineProperty2 = _interopRequireDefault(require_defineProperty());
      var _react = _interopRequireDefault(require_react());
      var _Connection = _interopRequireWildcard(require_Connection());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var Sentry = _interopRequireWildcard(require_dist7());
      var SentryIntegrations = _interopRequireWildcard(require_dist8());
      var _Error = _interopRequireDefault(require_Error());
      var _Snackbar = _interopRequireDefault(require_Snackbar2());
      var _IconButton = _interopRequireDefault(require_IconButton2());
      var _Close = _interopRequireDefault(require_Close());
      var _Prompt = _interopRequireDefault(require_Prompt());
      var _Theme = _interopRequireDefault(require_Theme());
      var _Loader = _interopRequireDefault(require_Loader());
      var _Router2 = _interopRequireDefault(require_Router());
      var _Utils = _interopRequireDefault(require_Utils());
      var _SaveCloseButtons = _interopRequireDefault(require_SaveCloseButtons());
      var _i18n = _interopRequireDefault(require_i18n());
      require_2();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = (0, _getPrototypeOf2["default"])(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return (0, _possibleConstructorReturn2["default"])(this, result);
        };
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      if (!window.localStorage) {
        window.localStorage = {
          getItem: function getItem() {
            return null;
          },
          setItem: function setItem() {
            return null;
          }
        };
      }
      var GenericApp2 = /* @__PURE__ */ function(_Router) {
        (0, _inherits2["default"])(GenericApp3, _Router);
        var _super = _createSuper(GenericApp3);
        function GenericApp3(props, settings) {
          var _this;
          (0, _classCallCheck2["default"])(this, GenericApp3);
          if (!_Connection["default"].isWeb() && window.io && window.location.port === "3000") {
            try {
              var io = new window.SocketClient();
              delete window.io;
              window.io = io;
            } catch (e) {
            }
          }
          _this = _super.call(this, props);
          (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onSystemConfigChanged", function(id, obj) {
            if (obj && id === "system.config") {
              var _obj$common;
              if (_this.socket.systemLang !== (obj === null || obj === void 0 ? void 0 : obj.common.language)) {
                _this.socket.systemLang = (obj === null || obj === void 0 ? void 0 : obj.common.language) || "en";
                _i18n["default"].setLanguage(_this.socket.systemLang);
              }
              if (_this._systemConfig.expertMode !== !!(obj !== null && obj !== void 0 && (_obj$common = obj.common) !== null && _obj$common !== void 0 && _obj$common.expertMode)) {
                _this._systemConfig = (obj === null || obj === void 0 ? void 0 : obj.common) || {};
                _this.setState({
                  expertMode: _this.getExpertMode()
                });
              } else {
                _this._systemConfig = (obj === null || obj === void 0 ? void 0 : obj.common) || {};
              }
            }
          });
          (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onReceiveMessage", function(message) {
            if (message !== null && message !== void 0 && message.data) {
              if (message.data === "updateTheme") {
                var newThemeName = _Utils["default"].getThemeName();
                _Utils["default"].setThemeName(_Utils["default"].getThemeName());
                var _theme = _this.createTheme(newThemeName);
                _this.setState({
                  theme: _theme,
                  themeName: _this.getThemeName(_theme),
                  themeType: _this.getThemeType(_theme)
                }, function() {
                  _this.props.onThemeChange && _this.props.onThemeChange(newThemeName);
                  _this.onThemeChanged && _this.onThemeChanged(newThemeName);
                });
              } else if (message.data === "updateExpertMode") {
                _this.onToggleExpertMode && _this.onToggleExpertMode(_this.getExpertMode());
              } else {
                console.warn("Received unknown message: " + JSON.stringify(message.data));
              }
            }
          });
          (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onResize", function() {
            _this.resizeTimer && clearTimeout(_this.resizeTimer);
            _this.resizeTimer = setTimeout(function() {
              _this.resizeTimer = null;
              _this.setState({
                width: GenericApp3.getWidth()
              });
            }, 200);
          });
          (0, _Prompt["default"])();
          var query = (window.location.search || "").replace(/^\?/, "").replace(/#.*$/, "");
          var args = {};
          query.trim().split("&").filter(function(t) {
            return t.trim();
          }).forEach(function(b) {
            var parts = b.split("=");
            args[parts[0]] = parts.length === 2 ? parts[1] : true;
            if (args[parts[0]] === "true") {
              args[parts[0]] = true;
            } else if (args[parts[0]] === "false") {
              args[parts[0]] = false;
            }
          });
          _this.instance = args.instance !== void 0 ? parseInt(args.instance, 10) || 0 : parseInt(window.location.search.slice(1), 10) || 0;
          var tmp = window.location.pathname.split("/");
          _this.adapterName = (settings === null || settings === void 0 ? void 0 : settings.adapterName) || props.adapterName || window.adapterName || tmp[tmp.length - 2] || "iot";
          _this.instanceId = "system.adapter.".concat(_this.adapterName, ".").concat(_this.instance);
          _this.newReact = args.newReact === true;
          var location = _Router2["default"].getLocation();
          location.tab = location.tab || window.localStorage.getItem(_this.adapterName + "-adapter") || "";
          var themeInstance = _this.createTheme();
          _this.state = {
            selectedTab: window.localStorage.getItem(_this.adapterName + "-adapter") || "",
            selectedTabNum: -1,
            "native": {},
            errorText: "",
            changed: false,
            connected: false,
            loaded: false,
            isConfigurationError: "",
            expertMode: false,
            toast: "",
            theme: themeInstance,
            themeName: _this.getThemeName(themeInstance),
            themeType: _this.getThemeType(themeInstance),
            bottomButtons: (settings && settings.bottomButtons) === false ? false : (props && props.bottomButtons) === false ? false : true,
            width: GenericApp3.getWidth()
          };
          var translations = {
            "en": require_en(),
            "de": require_de(),
            "ru": require_ru(),
            "pt": require_pt(),
            "nl": require_nl(),
            "fr": require_fr(),
            "it": require_it(),
            "es": require_es(),
            "pl": require_pl(),
            "zh-cn": require_zh_cn()
          };
          if (settings && settings.translations) {
            Object.keys(settings.translations).forEach(function(lang) {
              return translations[lang] = Object.assign(translations[lang], settings.translations[lang]);
            });
          } else if (props.translations) {
            Object.keys(props.translations).forEach(function(lang) {
              return translations[lang] = Object.assign(translations[lang], props.translations[lang]);
            });
          }
          _i18n["default"].setTranslations(translations);
          _this.savedNative = {};
          _this.encryptedFields = props.encryptedFields || (settings === null || settings === void 0 ? void 0 : settings.encryptedFields) || [];
          _this.sentryDSN = settings && settings.sentryDSN || props.sentryDSN;
          _this.socket = new _Connection["default"](_objectSpread(_objectSpread({}, (props === null || props === void 0 ? void 0 : props.socket) || (settings === null || settings === void 0 ? void 0 : settings.socket)), {}, {
            name: _this.adapterName,
            doNotLoadAllObjects: settings === null || settings === void 0 ? void 0 : settings.doNotLoadAllObjects,
            onProgress: function onProgress(progress) {
              if (progress === _Connection.PROGRESS.CONNECTING) {
                _this.setState({
                  connected: false
                });
              } else if (progress === _Connection.PROGRESS.READY) {
                _this.setState({
                  connected: true
                });
              } else {
                _this.setState({
                  connected: true
                });
              }
            },
            onReady: function onReady(objects, scripts) {
              _i18n["default"].setLanguage(_this.socket.systemLang);
              _this.socket.subscribeObject("system.config", _this.onSystemConfigChanged).then(function() {
                return _this.getSystemConfig();
              }).then(function(obj) {
                _this._secret = typeof obj !== "undefined" && obj["native"] && obj["native"].secret || "Zgfr56gFe87jJOM";
                _this._systemConfig = (obj === null || obj === void 0 ? void 0 : obj.common) || {};
                return _this.socket.getObject(_this.instanceId);
              }).then(function(instanceObj) {
                var waitPromise;
                var sentryEnabled = _this._systemConfig.diag !== "none" && instanceObj && instanceObj.common && instanceObj.common.name && instanceObj.common.version && !instanceObj.common.disableDataReporting && window.location.host !== "localhost:3000";
                if (!_this.sentryStarted && _this.sentryDSN && sentryEnabled) {
                  _this.sentryStarted = true;
                  Sentry.init({
                    dsn: _this.sentryDSN,
                    release: "iobroker.".concat(instanceObj.common.name, "@").concat(instanceObj.common.version),
                    integrations: [new SentryIntegrations.Dedupe()]
                  });
                }
                if (!_this.sentryInited && sentryEnabled) {
                  _this.sentryInited = true;
                  waitPromise = _this.socket.getObject("system.meta.uuid").then(function(uuidObj) {
                    if (uuidObj && uuidObj["native"] && uuidObj["native"].uuid) {
                      Sentry.configureScope(function(scope) {
                        return scope.setUser({
                          id: uuidObj["native"].uuid
                        });
                      });
                    }
                  });
                }
                waitPromise = waitPromise || Promise.resolve();
                waitPromise.then(function() {
                  if (instanceObj) {
                    _this.common = instanceObj === null || instanceObj === void 0 ? void 0 : instanceObj.common;
                    _this.onPrepareLoad(instanceObj["native"], instanceObj.encryptedNative);
                    _this.savedNative = JSON.parse(JSON.stringify(instanceObj["native"]));
                    _this.setState({
                      "native": instanceObj["native"],
                      loaded: true,
                      expertMode: _this.getExpertMode()
                    }, function() {
                      return _this.onConnectionReady && _this.onConnectionReady();
                    });
                  } else {
                    console.warn("Cannot load instance settings");
                    _this.setState({
                      "native": {},
                      loaded: true,
                      expertMode: _this.getExpertMode()
                    }, function() {
                      return _this.onConnectionReady && _this.onConnectionReady();
                    });
                  }
                });
              });
            },
            onError: function onError(err) {
              console.error(err);
              _this.showError(err);
            }
          }));
          return _this;
        }
        (0, _createClass2["default"])(GenericApp3, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            window.addEventListener("resize", this.onResize, true);
            window.addEventListener("message", this.onReceiveMessage, false);
            (0, _get2["default"])((0, _getPrototypeOf2["default"])(GenericApp3.prototype), "componentDidMount", this).call(this);
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            window.removeEventListener("resize", this.onResize, true);
            window.removeEventListener("message", this.onReceiveMessage, false);
            (0, _get2["default"])((0, _getPrototypeOf2["default"])(GenericApp3.prototype), "componentWillUnmount", this).call(this);
          }
        }, {
          key: "createTheme",
          value: function createTheme2() {
            var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
            return (0, _Theme["default"])(_Utils["default"].getThemeName(name));
          }
        }, {
          key: "getThemeName",
          value: function getThemeName(theme2) {
            return theme2.name;
          }
        }, {
          key: "getThemeType",
          value: function getThemeType(theme2) {
            return theme2.palette.type;
          }
        }, {
          key: "toggleTheme",
          value: function toggleTheme() {
            var _this2 = this;
            var themeName2 = this.state.themeName;
            var newThemeName = themeName2 === "dark" ? "blue" : themeName2 === "blue" ? "colored" : themeName2 === "colored" ? "light" : "dark";
            _Utils["default"].setThemeName(newThemeName);
            var theme2 = this.createTheme(newThemeName);
            this.setState({
              theme: theme2,
              themeName: this.getThemeName(theme2),
              themeType: this.getThemeType(theme2)
            }, function() {
              _this2.props.onThemeChange && _this2.props.onThemeChange(newThemeName);
              _this2.onThemeChanged && _this2.onThemeChanged(newThemeName);
            });
          }
        }, {
          key: "getSystemConfig",
          value: function getSystemConfig() {
            return this.socket.getSystemConfig();
          }
        }, {
          key: "getExpertMode",
          value: function getExpertMode() {
            return window.sessionStorage.getItem("App.expertMode") === "true" || !!this._systemConfig.expertMode;
          }
        }, {
          key: "onConnectionReady",
          value: function onConnectionReady() {
          }
        }, {
          key: "encrypt",
          value: function encrypt(value) {
            var result = "";
            for (var i = 0; i < value.length; i++) {
              result += String.fromCharCode(this._secret[i % this._secret.length].charCodeAt(0) ^ value.charCodeAt(i));
            }
            return result;
          }
        }, {
          key: "decrypt",
          value: function decrypt(value) {
            var result = "";
            for (var i = 0; i < value.length; i++) {
              result += String.fromCharCode(this._secret[i % this._secret.length].charCodeAt(0) ^ value.charCodeAt(i));
            }
            return result;
          }
        }, {
          key: "onHashChanged",
          value: function onHashChanged() {
            var location = _Router2["default"].getLocation();
            if (location.tab !== this.state.selectedTab) {
              this.selectTab(location.tab);
            }
          }
        }, {
          key: "selectTab",
          value: function selectTab(tab, index) {
            window.localStorage[this.adapterName + "-adapter"] = tab;
            this.setState({
              selectedTab: tab,
              selectedTabNum: index
            });
          }
        }, {
          key: "onPrepareSave",
          value: function onPrepareSave(settings) {
            var _this3 = this;
            this.encryptedFields && this.encryptedFields.forEach(function(attr) {
              if (settings[attr]) {
                settings[attr] = _this3.encrypt(settings[attr]);
              }
            });
            return true;
          }
        }, {
          key: "onPrepareLoad",
          value: function onPrepareLoad(settings, encryptedNative) {
            var _this4 = this;
            this.encryptedFields && this.encryptedFields.forEach(function(attr) {
              if (settings[attr]) {
                settings[attr] = _this4.decrypt(settings[attr]);
              }
            });
            encryptedNative && encryptedNative.forEach(function(attr) {
              _this4.encryptedFields = _this4.encryptedFields || [];
              !_this4.encryptedFields.includes(attr) && _this4.encryptedFields.push(attr);
              if (settings[attr]) {
                settings[attr] = _this4.decrypt(settings[attr]);
              }
            });
          }
        }, {
          key: "getExtendableInstances",
          value: function getExtendableInstances() {
            var _this5 = this;
            return new Promise(function(resolve) {
              _this5.socket._socket.emit("getObjectView", "system", "instance", null, function(err, doc) {
                if (err) {
                  resolve([]);
                } else {
                  resolve(doc.rows.filter(function(item) {
                    return item.value.common.webExtendable;
                  }).map(function(item) {
                    return item.value;
                  }));
                }
              });
            });
          }
        }, {
          key: "getIpAddresses",
          value: function getIpAddresses(host) {
            var _this6 = this;
            return new Promise(function(resolve, reject) {
              _this6.socket._socket.emit("getHostByIp", host || _this6.common.host, function(ip, _host) {
                var IPs4 = [{
                  name: "[IPv4] 0.0.0.0 - " + _i18n["default"].t("ra_Listen on all IPs"),
                  address: "0.0.0.0",
                  family: "ipv4"
                }];
                var IPs6 = [{
                  name: "[IPv6] ::",
                  address: "::",
                  family: "ipv6"
                }];
                if (_host) {
                  host = _host;
                  if (host["native"].hardware && host["native"].hardware.networkInterfaces) {
                    Object.keys(host["native"].hardware.networkInterfaces).forEach(function(eth) {
                      return host["native"].hardware.networkInterfaces[eth].forEach(function(inter) {
                        if (inter.family !== "IPv6") {
                          IPs4.push({
                            name: "[" + inter.family + "] " + inter.address + " - " + eth,
                            address: inter.address,
                            family: "ipv4"
                          });
                        } else {
                          IPs6.push({
                            name: "[" + inter.family + "] " + inter.address + " - " + eth,
                            address: inter.address,
                            family: "ipv6"
                          });
                        }
                      });
                    });
                  }
                  IPs6.forEach(function(ip2) {
                    return IPs4.push(ip2);
                  });
                }
                resolve(IPs4);
              });
            });
          }
        }, {
          key: "onSave",
          value: function onSave(isClose) {
            var _this7 = this;
            var oldObj;
            if (this.state.isConfigurationError) {
              this.setState({
                errorText: this.state.isConfigurationError
              });
              return;
            }
            this.socket.getObject(this.instanceId).then(function(_oldObj) {
              oldObj = _oldObj || {};
              for (var a in _this7.state["native"]) {
                if (_this7.state["native"].hasOwnProperty(a)) {
                  if (_this7.state["native"][a] === null) {
                    oldObj["native"][a] = null;
                  } else if (_this7.state["native"][a] !== void 0) {
                    oldObj["native"][a] = JSON.parse(JSON.stringify(_this7.state["native"][a]));
                  } else {
                    delete oldObj["native"][a];
                  }
                }
              }
              if (_this7.state.common) {
                for (var b in _this7.state.common) {
                  if (_this7.state.common[b] === null) {
                    oldObj.common[b] = null;
                  } else if (_this7.state.common[b] !== void 0) {
                    oldObj.common[b] = JSON.parse(JSON.stringify(_this7.state.common[b]));
                  } else {
                    delete oldObj.common[b];
                  }
                }
              }
              if (_this7.onPrepareSave(oldObj["native"]) !== false) {
                return _this7.socket.setObject(_this7.instanceId, oldObj);
              } else {
                return Promise.reject("Invalid configuration");
              }
            }).then(function() {
              _this7.savedNative = oldObj["native"];
              globalThis.changed = false;
              _this7.setState({
                changed: false
              });
              isClose && GenericApp3.onClose();
            })["catch"](function(e) {
              console.error("Cannot save configuration: ".concat(e));
            });
          }
        }, {
          key: "renderToast",
          value: function renderToast() {
            var _this8 = this;
            if (!this.state.toast)
              return null;
            return /* @__PURE__ */ _react["default"].createElement(_Snackbar["default"], {
              anchorOrigin: {
                vertical: "bottom",
                horizontal: "left"
              },
              open: true,
              autoHideDuration: 6e3,
              onClose: function onClose() {
                return _this8.setState({
                  toast: ""
                });
              },
              ContentProps: {
                "aria-describedby": "message-id"
              },
              message: /* @__PURE__ */ _react["default"].createElement("span", {
                id: "message-id"
              }, this.state.toast),
              action: [/* @__PURE__ */ _react["default"].createElement(_IconButton["default"], {
                key: "close",
                "aria-label": "Close",
                color: "inherit",
                className: this.props.classes.close,
                onClick: function onClick() {
                  return _this8.setState({
                    toast: ""
                  });
                }
              }, /* @__PURE__ */ _react["default"].createElement(_Close["default"], null))]
            });
          }
        }, {
          key: "renderError",
          value: function renderError() {
            var _this9 = this;
            if (!this.state.errorText) {
              return null;
            } else {
              return /* @__PURE__ */ _react["default"].createElement(_Error["default"], {
                text: this.state.errorText,
                onClose: function onClose() {
                  return _this9.setState({
                    errorText: ""
                  });
                }
              });
            }
          }
        }, {
          key: "getIsChanged",
          value: function getIsChanged(_native) {
            _native = _native || this.state["native"];
            var isChanged = JSON.stringify(_native) !== JSON.stringify(this.savedNative);
            if (isChanged) {
              globalThis.changed = true;
            } else {
              globalThis.changed = false;
            }
            return isChanged;
          }
        }, {
          key: "onLoadConfig",
          value: function onLoadConfig(newNative) {
            if (JSON.stringify(newNative) !== JSON.stringify(this.state["native"])) {
              this.setState({
                "native": newNative,
                changed: this.getIsChanged(newNative)
              });
            }
          }
        }, {
          key: "setConfigurationError",
          value: function setConfigurationError(errorText) {
            if (this.state.isConfigurationError !== errorText) {
              this.setState({
                isConfigurationError: errorText
              });
            }
          }
        }, {
          key: "renderSaveCloseButtons",
          value: function renderSaveCloseButtons() {
            var _this10 = this;
            if (this.state.bottomButtons) {
              return /* @__PURE__ */ _react["default"].createElement(_SaveCloseButtons["default"], {
                theme: this.state.theme,
                newReact: this.newReact,
                noTextOnButtons: this.state.width === "xs" || this.state.width === "sm" || this.state.width === "md",
                changed: this.state.changed,
                onSave: function onSave(isClose) {
                  return _this10.onSave(isClose);
                },
                onClose: function onClose() {
                  return GenericApp3.onClose();
                }
              });
            } else {
              return null;
            }
          }
        }, {
          key: "_updateNativeValue",
          value: function _updateNativeValue(obj, attrs, value) {
            if ((0, _typeof22["default"])(attrs) !== "object") {
              attrs = attrs.split(".");
            }
            var attr = attrs.shift();
            if (!attrs.length) {
              if (value && (0, _typeof22["default"])(value) === "object") {
                if (JSON.stringify(obj[attr]) !== JSON.stringify(value)) {
                  obj[attr] = value;
                  return true;
                }
              } else if (obj[attr] !== value) {
                obj[attr] = value;
                return true;
              } else {
                return false;
              }
            } else {
              obj[attr] = obj[attr] || {};
              if ((0, _typeof22["default"])(obj[attr]) !== "object") {
                throw new Error("attribute " + attr + " is no object, but " + (0, _typeof22["default"])(obj[attr]));
              }
              return this._updateNativeValue(obj[attr], attrs, value);
            }
          }
        }, {
          key: "updateNativeValue",
          value: function updateNativeValue(attr, value, cb) {
            var _native2 = JSON.parse(JSON.stringify(this.state["native"]));
            if (this._updateNativeValue(_native2, attr, value)) {
              var changed = this.getIsChanged(_native2);
              this.setState({
                "native": _native2,
                changed
              }, cb);
            }
          }
        }, {
          key: "showError",
          value: function showError(text) {
            this.setState({
              errorText: text
            });
          }
        }, {
          key: "showToast",
          value: function showToast(toast) {
            this.setState({
              toast
            });
          }
        }, {
          key: "render",
          value: function render() {
            if (!this.state.loaded) {
              return /* @__PURE__ */ _react["default"].createElement(_Loader["default"], {
                theme: this.state.themeType
              });
            }
            return /* @__PURE__ */ _react["default"].createElement("div", {
              className: "App"
            }, this.renderError(), this.renderToast(), this.renderSaveCloseButtons());
          }
        }], [{
          key: "getWidth",
          value: function getWidth() {
            var SIZES = {
              xs: 0,
              sm: 600,
              md: 960,
              lg: 1280,
              xl: 1920
            };
            var width = window.innerWidth;
            var keys2 = Object.keys(SIZES).reverse();
            var widthComputed = keys2.find(function(key) {
              return width >= SIZES[key];
            });
            return widthComputed || "xs";
          }
        }, {
          key: "onClose",
          value: function onClose() {
            if (typeof window.parent !== "undefined" && window.parent) {
              try {
                if (window.parent.$iframeDialog && typeof window.parent.$iframeDialog.close === "function") {
                  window.parent.$iframeDialog.close();
                } else {
                  window.parent.postMessage("close", "*");
                }
              } catch (e) {
                window.parent.postMessage("close", "*");
              }
            }
          }
        }]);
        return GenericApp3;
      }(_Router2["default"]);
      GenericApp2.propTypes = {
        adapterName: _propTypes["default"].string,
        onThemeChange: _propTypes["default"].func,
        socket: _propTypes["default"].object,
        encryptedFields: _propTypes["default"].array,
        bottomButtons: _propTypes["default"].bool
      };
      var _default = GenericApp2;
      exports["default"] = _default;
    }
  });

  // admin/src/i18n/en.json
  var require_en2 = __commonJS({
    "admin/src/i18n/en.json"(exports, module) {
      module.exports = {
        "atlas-scientific-ezo-i2c adapter settings": "Adapter settings for atlas-scientific-ezo-i2c",
        "Bus number": "I2C Bus Number",
        "Search Devices": "Device search",
        Unused: "Unused",
        Address: "Address",
        Name: "Name",
        Command: "Command",
        Description: "Description",
        "Polling Interval": "Polling Interval (min. 10000ms)",
        General: "General",
        "Set Parameter": "Set Parameter",
        "DO Parameters Configuration": "DO Parameters Configuration",
        "Pump Parameters Configuration": "Pump Parameters Configuration",
        "DO Calibration": "DO Sensor Calibration",
        "Start Calibration": "Start Calibration",
        Functionalities: "Common Functionalities",
        "Find EZO Board": "Find EZO Board",
        "General Configuration": "General Configuration",
        "Dispensed Volume": "Dispensed Volume",
        "Total Dispensed Volume": "Total Dispensed Volume",
        "Absolute Dispensed Volume": "Absolute Dispensed Volume",
        "Clear Calibration": "Clear Calibration",
        "Atmospheric Calibration": "Calibrate Atmospheric",
        "0 DO Calibration": "Calibrate 0DO",
        "Factory Reset": "Factory Reset",
        "Change I2C Address": "Change I2C Address",
        "New Address": "Address (97-127)",
        Calibrate: "Calibrate",
        "Calibrate Low": "Calibrate Low",
        "Calibrate Mid": "Calibrate Mid",
        "Calibrate High": "Calibrate High",
        "PH value": "PH (0.0 - 10.0)",
        "Calibration Volume": "Calibration Volume",
        "PH Sensor Calibration": "PH Sensor Calibration",
        "Pump Calibration": "Pump Calibration",
        "Temp. compensation value": "Temperature e.g. 20.4",
        "Set TC Value": "Set Temp. compensation",
        "Pressure compensation value": "Pressure in (kPA) e.g.101.3",
        "Set PC Value": "Set pressure compensation",
        "Salinity compensation value": "Salinity value",
        "Set SC Value": "Set salinity compensation",
        IsPpt: "Is Ppt",
        "ORP Sensor Calibration": "ORP Sensor Calibration",
        "ORP value": "ORP value",
        "RTD Sensor Calibration": "RTD Sensor Calibration",
        "RTD value": "Temperature value",
        Active: "Active",
        IsLedActive: "LED active",
        "Pump Control": "Pump Control",
        "pump reverse": "Reverse",
        ClearDispensedVolume: "Clear dispensed Volume",
        "Set Dose over Time": "Set Dose over Time",
        "Dose over time value": "Format: 85,10 -> e.g. 85ml over 10 minutes",
        "Dispense Volume": "Dispense Volume",
        "Dispense volume value": "Format: 15 -> e.g. 15 ml",
        "Set constant flow rate": "Set constant flow rate",
        "Constant flow rate value": "Format: 25,40 -> e.g. 25ml/min for 40 minutes ",
        "Pause Pump": "Pause Pump",
        "Stop Dispense": "Stop Dispense",
        "Find Pump": "Find Pump",
        "EC Sensor Calibration": "EC Sensor Calibration",
        "Calibrate Dry": "Calibrate Dry",
        "EC value": "EC value",
        "Set Probe Type": "Set Probe Type",
        "Probe Type": "Probe Type",
        "EC Probe Type Setting": "EC Probe Type Setting",
        "EC Parameters Configuration": "EC Parameters Configuration",
        "EC(uS)": "EC(uS)",
        "TDS(ppm)": "TDS(ppm)",
        "S(ppt)": "S(ppt)",
        SG: "SG",
        "Set TDS Conversion": "Set TDS Conversion",
        "TDS conversion value": "TDS conversion value",
        "Calibrate Singlepoint": "Calibrate Singlepoint"
      };
    }
  });

  // admin/src/i18n/de.json
  var require_de2 = __commonJS({
    "admin/src/i18n/de.json"(exports, module) {
      module.exports = {
        "atlas-scientific-ezo-i2c adapter settings": "Adaptereinstellungen f\xFCr atlas-scientific-ezo-i2c",
        "Bus number": "I2C-Busnummer",
        "Search Devices": "Ger\xE4tesuche",
        Unused: "Ungenutzt",
        Address: "Adresse",
        Name: "Name",
        Command: "Befehl",
        Description: "Beschreibung",
        "Polling Interval": "Abfrageintervall (min. 10000 ms)",
        General: "Allgemein",
        "Set Parameter": "Parameter festlegen",
        "DO Parameters Configuration": "Konfiguration der DO-Parameter",
        "DO Calibration": "Kalibrierung des DO-Sensors",
        "Start Calibration": "Kalibrierung starten",
        Functionalities: "Gemeinsame Funktionalit\xE4ten",
        "Find EZO Board": "EZO-Board finden",
        "General Configuration": "Allgemeine Konfiguration",
        "Clear Calibration": "Kalibrierung l\xF6schen",
        "Atmospheric Calibration": "Atmosph\xE4risch kalibrieren",
        "0 DO Calibration": "0DO kalibrieren",
        "Factory Reset": "Werkseinstellungen",
        "Change I2C Address": "I2C-Adresse \xE4ndern",
        "New Address": "Adresse (97-127)",
        Calibrate: "Kalibrieren",
        "Calibrate Low": "Niedrig kalibrieren",
        "Calibrate Mid": "Mitte kalibrieren",
        "Calibrate High": "Hoch kalibrieren",
        "PH value": "PH (0,0 - 10,0)",
        "PH Sensor Calibration": "Kalibrierung des PH-Sensors",
        "Temp. compensation value": "Temperatur z.B. 20.4",
        "Set TC Value": "Temp. einstellen. Entsch\xE4digung",
        "Pressure compensation value": "Druck in (kPA), z. B. 101,3",
        "Set PC Value": "Druckausgleich einstellen",
        "Salinity compensation value": "Salzgehaltswert",
        "Set SC Value": "Salzgehaltskompensation einstellen",
        IsPpt: "Ist Ppt",
        "ORP Sensor Calibration": "Kalibrierung des ORP-Sensors",
        "ORP value": "ORP-Wert",
        "RTD Sensor Calibration": "Kalibrierung des RTD-Sensors",
        "RTD value": "Temperaturwert",
        Active: "Aktiv",
        IsLedActive: "LED aktiv",
        "Pump Parameters Configuration": "Konfiguration der Pumpenparameter",
        "Dispensed Volume": "Abgabevolumen",
        "Total Dispensed Volume": "Gesamtes abgegebenes Volumen",
        "Absolute Dispensed Volume": "Absolut abgegebenes Volumen",
        "Calibration Volume": "Kalibrierungsvolumen",
        "Pump Calibration": "Pumpenkalibrierung",
        "Pump Control": "Pumpensteuerung",
        "pump reverse": "Umkehren",
        ClearDispensedVolume: "Gesamtvolumen l\xF6schen",
        "Set Dose over Time": "Dosis \xFCber Zeit",
        "Dose over time value": "Format: 85,10 -> z.B. 85 ml \xFCber 10 Minuten",
        "Dispense Volume": "Dosis abgeben",
        "Dispense volume value": "Format: 15 -> z.B. 15 ml",
        "Set constant flow rate": "Konstante Flussrate",
        "Constant flow rate value": "Format: 25,40 -> z.B. 25 ml/min f\xFCr 40 Minuten",
        "Pause Pump": "Pumpe anhalten",
        "Stop Dispense": "Abgabe stoppen",
        "Find Pump": "Pumpe finden",
        "EC Sensor Calibration": "Kalibrierung des EC-Sensors",
        "Calibrate Dry": "Trocken kalibrieren",
        "EC value": "EC-Wert",
        "Set Probe Type": "Stellen Sie den Sondentyp ein",
        "Probe Type": "Sondentyp",
        "EC Probe Type Setting": "Einstellung des EC-Sondentyps",
        "EC Parameters Configuration": "Konfiguration der EC-Parameter",
        "EC(uS)": "EG (USA)",
        "TDS(ppm)": "TDS (ppm)",
        "S(ppt)": "S(ppt)",
        SG: "SG",
        "Set TDS Conversion": "Legen Sie die TDS-Konvertierung fest",
        "TDS conversion value": "TDS-Umrechnungswert",
        "Calibrate Singlepoint": "Singlepoint kalibrieren"
      };
    }
  });

  // admin/src/i18n/ru.json
  var require_ru2 = __commonJS({
    "admin/src/i18n/ru.json"(exports, module) {
      module.exports = {
        "atlas-scientific-ezo-i2c adapter settings": "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 \u0430\u0434\u0430\u043F\u0442\u0435\u0440\u0430 \u0434\u043B\u044F atlas-scientific-ezo-i2c",
        "Bus number": "\u041D\u043E\u043C\u0435\u0440 \u0448\u0438\u043D\u044B I2C",
        "Search Devices": "\u041F\u043E\u0438\u0441\u043A \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432",
        Unused: "\u041D\u0435\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u043D\u044B\u0439",
        Address: "\u0410\u0434\u0440\u0435\u0441",
        Name: "\u0418\u043C\u044F",
        Command: "\u041A\u043E\u043C\u0430\u043D\u0434\u0430",
        Description: "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435",
        "Polling Interval": "\u0418\u043D\u0442\u0435\u0440\u0432\u0430\u043B \u043E\u043F\u0440\u043E\u0441\u0430 (\u043C\u0438\u043D. 10000 \u043C\u0441)",
        General: "\u041E\u0431\u0449\u0438\u0439",
        "Set Parameter": "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440",
        "DO Parameters Configuration": "\u041A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u043E\u0432 DO",
        "DO Calibration": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430 \u0434\u0430\u0442\u0447\u0438\u043A\u0430 \u0440\u0430\u0441\u0442\u0432\u043E\u0440\u0435\u043D\u043D\u043E\u0433\u043E \u043A\u0438\u0441\u043B\u043E\u0440\u043E\u0434\u0430",
        "Start Calibration": "\u041D\u0430\u0447\u0430\u0442\u044C \u043A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0443",
        Functionalities: "\u041E\u0431\u0449\u0438\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u0438",
        "Find EZO Board": "\u041D\u0430\u0439\u0442\u0438 \u0434\u043E\u0441\u043A\u0443 EZO",
        "General Configuration": "\u041E\u0431\u0449\u0430\u044F \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F",
        "Clear Calibration": "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u043A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0443",
        "Atmospheric Calibration": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430 \u0430\u0442\u043C\u043E\u0441\u0444\u0435\u0440\u043D\u043E\u0433\u043E",
        "0 DO Calibration": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430 0DO",
        "Factory Reset": "\u0421\u0431\u0440\u043E\u0441 \u043A \u0437\u0430\u0432\u043E\u0434\u0441\u043A\u0438\u043C \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430\u043C",
        "Change I2C Address": "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u0430\u0434\u0440\u0435\u0441 I2C",
        "New Address": "\u0410\u0434\u0440\u0435\u0441 (97-127)",
        Calibrate: "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430",
        "Calibrate Low": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430 \u043F\u043E \u043D\u0438\u0437\u043A\u043E\u043C\u0443 \u0443\u0440\u043E\u0432\u043D\u044E",
        "Calibrate Mid": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430 \u0441\u0435\u0440\u0435\u0434\u0438\u043D\u044B",
        "Calibrate High": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430 \u0432\u044B\u0441\u043E\u043A\u043E\u0433\u043E",
        "PH value": "\u0440\u041D (0,0\u201310,0)",
        "PH Sensor Calibration": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430 \u0434\u0430\u0442\u0447\u0438\u043A\u0430 pH",
        "Temp. compensation value": "\u0422\u0435\u043C\u043F\u0435\u0440\u0430\u0442\u0443\u0440\u0430 \u043D\u0430\u043F\u0440. 20,4",
        "Set TC Value": "\u0417\u0430\u0434\u0430\u043D\u043D\u0430\u044F \u0442\u0435\u043C\u043F\u0435\u0440\u0430\u0442\u0443\u0440\u0430. \u043A\u043E\u043C\u043F\u0435\u043D\u0441\u0430\u0446\u0438\u044F",
        "Pressure compensation value": "\u0414\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u0432 (\u043A\u041F\u0430), \u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440, 101,3",
        "Set PC Value": "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u043A\u043E\u043C\u043F\u0435\u043D\u0441\u0430\u0446\u0438\u044E \u0434\u0430\u0432\u043B\u0435\u043D\u0438\u044F",
        "Salinity compensation value": "\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0441\u043E\u043B\u0435\u043D\u043E\u0441\u0442\u0438",
        "Set SC Value": "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u043A\u043E\u043C\u043F\u0435\u043D\u0441\u0430\u0446\u0438\u044E \u0441\u043E\u043B\u0435\u043D\u043E\u0441\u0442\u0438",
        IsPpt: "\u0420\u043F\u0442",
        "ORP Sensor Calibration": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430 \u0434\u0430\u0442\u0447\u0438\u043A\u0430 \u041E\u0412\u041F",
        "ORP value": "\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u041E\u0412\u041F",
        "RTD Sensor Calibration": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430 \u0434\u0430\u0442\u0447\u0438\u043A\u0430 RTD",
        "RTD value": "\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0442\u0435\u043C\u043F\u0435\u0440\u0430\u0442\u0443\u0440\u044B",
        Active: "\u0410\u043A\u0442\u0438\u0432\u043D\u044B\u0439",
        IsLedActive: "\u0441\u0432\u0435\u0442\u043E\u0434\u0438\u043E\u0434 \u0430\u043A\u0442\u0438\u0432\u0435\u043D",
        "Pump Parameters Configuration": "\u041A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u043E\u0432 \u043D\u0430\u0441\u043E\u0441\u0430",
        "Dispensed Volume": "\u0412\u044B\u0434\u0430\u043D\u043D\u044B\u0439 \u043E\u0431\u044A\u0435\u043C",
        "Total Dispensed Volume": "\u041E\u0431\u0449\u0438\u0439 \u0434\u043E\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439 \u043E\u0431\u044A\u0435\u043C",
        "Absolute Dispensed Volume": "\u0410\u0431\u0441\u043E\u043B\u044E\u0442\u043D\u044B\u0439 \u0434\u043E\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439 \u043E\u0431\u044A\u0435\u043C",
        "Calibration Volume": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043E\u0447\u043D\u044B\u0439 \u043E\u0431\u044A\u0435\u043C",
        "Pump Calibration": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430 \u043D\u0430\u0441\u043E\u0441\u0430",
        "Pump Control": "\u0423\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u043D\u0430\u0441\u043E\u0441\u043E\u043C",
        "pump reverse": "\u041E\u0431\u0435\u0441\u043F\u0435\u0447\u0438\u0442\u044C \u0440\u0435\u0433\u0440\u0435\u0441\u0441",
        ClearDispensedVolume: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u0434\u043E\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439 \u043E\u0431\u044A\u0435\u043C",
        "Set Dose over Time": "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0434\u043E\u0437\u0443 \u043F\u043E \u0432\u0440\u0435\u043C\u0435\u043D\u0438",
        "Dose over time value": "\u0424\u043E\u0440\u043C\u0430\u0442: 85,10 -> \u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440. 85 \u043C\u043B \u0437\u0430 10 \u043C\u0438\u043D\u0443\u0442",
        "Dispense Volume": "\u041E\u0431\u044A\u0435\u043C \u0434\u043E\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F",
        "Dispense volume value": "\u0424\u043E\u0440\u043C\u0430\u0442: 15 -> \u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440. 15 \u043C\u043B",
        "Set constant flow rate": "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u0435 \u043F\u043E\u0441\u0442\u043E\u044F\u043D\u043D\u044B\u0439 \u0440\u0430\u0441\u0445\u043E\u0434",
        "Constant flow rate value": "\u0424\u043E\u0440\u043C\u0430\u0442: 25,40 -> \u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440. 25 \u043C\u043B/\u043C\u0438\u043D \u0432 \u0442\u0435\u0447\u0435\u043D\u0438\u0435 40 \u043C\u0438\u043D\u0443\u0442",
        "Pause Pump": "\u041F\u0430\u0443\u0437\u0430 \u043D\u0430\u0441\u043E\u0441\u0430",
        "Stop Dispense": "\u041E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0434\u043E\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435",
        "Find Pump": "\u041D\u0430\u0439\u0442\u0438 \u043D\u0430\u0441\u043E\u0441",
        "EC Sensor Calibration": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430 \u0434\u0430\u0442\u0447\u0438\u043A\u0430 \u0415\u0421",
        "Calibrate Dry": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430 \u0432\u0441\u0443\u0445\u0443\u044E",
        "EC value": "\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0415\u0421",
        "Set Probe Type": "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0442\u0438\u043F \u0437\u043E\u043D\u0434\u0430",
        "Probe Type": "\u0422\u0438\u043F \u0437\u043E\u043D\u0434\u0430",
        "EC Probe Type Setting": "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430 \u0442\u0438\u043F\u0430 \u0434\u0430\u0442\u0447\u0438\u043A\u0430 EC",
        "EC Parameters Configuration": "\u041A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u043E\u0432 \u0415\u0421",
        "EC(uS)": "\u0415\u0421 (\u0421\u0428\u0410)",
        "TDS(ppm)": "TDS (\u0447\u0430\u0441\u0442\u0435\u0439 \u043D\u0430 \u043C\u0438\u043B\u043B\u0438\u043E\u043D)",
        "S(ppt)": "S (ppt)",
        SG: "\u0421\u0413",
        "Set TDS Conversion": "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435 TDS",
        "TDS conversion value": "\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043A\u043E\u043D\u0432\u0435\u0440\u0441\u0438\u0438 TDS",
        "Calibrate Singlepoint": "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430 \u043E\u0434\u043D\u043E\u0439 \u0442\u043E\u0447\u043A\u0438"
      };
    }
  });

  // admin/src/i18n/pt.json
  var require_pt2 = __commonJS({
    "admin/src/i18n/pt.json"(exports, module) {
      module.exports = {
        "atlas-scientific-ezo-i2c adapter settings": "Configura\xE7\xF5es do adaptador para atlas-scientific-ezo-i2c",
        "Bus number": "N\xFAmero do barramento I2C",
        "Search Devices": "Pesquisa de dispositivo",
        Unused: "n\xE3o utilizado",
        Address: "Endere\xE7o",
        Name: "Nome",
        Command: "Comando",
        Description: "Descri\xE7\xE3o",
        "Polling Interval": "Intervalo de sondagem (min. 10000ms)",
        General: "Em geral",
        "Set Parameter": "Definir par\xE2metro",
        "DO Parameters Configuration": "Configura\xE7\xE3o dos Par\xE2metros DO",
        "DO Calibration": "Calibra\xE7\xE3o do Sensor DO",
        "Start Calibration": "Iniciar Calibra\xE7\xE3o",
        Functionalities: "Funcionalidades Comuns",
        "Find EZO Board": "Encontrar placa EZO",
        "General Configuration": "Configura\xE7\xE3o Geral",
        "Clear Calibration": "Limpar Calibra\xE7\xE3o",
        "Atmospheric Calibration": "Calibrar Atmosf\xE9rico",
        "0 DO Calibration": "Calibrar 0DO",
        "Factory Reset": "Restaura\xE7\xE3o de f\xE1brica",
        "Change I2C Address": "Alterar endere\xE7o I2C",
        "New Address": "Endere\xE7o (97-127)",
        Calibrate: "Calibrar",
        "Calibrate Low": "Calibrar baixo",
        "Calibrate Mid": "Calibrar meio",
        "Calibrate High": "Calibrar alto",
        "PH value": "PH (0,0 - 10,0)",
        "PH Sensor Calibration": "Calibra\xE7\xE3o do Sensor de PH",
        "Temp. compensation value": "Temperatura, por ex. 20.4",
        "Set TC Value": "Definir temperatura compensa\xE7\xE3o",
        "Pressure compensation value": "Press\xE3o em (kPA), por exemplo, 101,3",
        "Set PC Value": "Definir compensa\xE7\xE3o de press\xE3o",
        "Salinity compensation value": "valor de salinidade",
        "Set SC Value": "Definir compensa\xE7\xE3o de salinidade",
        IsPpt: "\xE9 ppt",
        "ORP Sensor Calibration": "Calibra\xE7\xE3o do Sensor ORP",
        "ORP value": "valor ORP",
        "RTD Sensor Calibration": "Calibra\xE7\xE3o do Sensor RTD",
        "RTD value": "Valor da temperatura",
        Active: "Ativo",
        IsLedActive: "LED ativo",
        "Pump Parameters Configuration": "Configura\xE7\xE3o dos Par\xE2metros da Bomba",
        "Dispensed Volume": "Volume Dispensado",
        "Total Dispensed Volume": "Volume total dispensado",
        "Absolute Dispensed Volume": "Volume Dispensado Absoluto",
        "Calibration Volume": "Volume de calibra\xE7\xE3o",
        "Pump Calibration": "Calibra\xE7\xE3o da bomba",
        "Pump Control": "Controle da bomba",
        "pump reverse": "Reverter",
        ClearDispensedVolume: "Limpar volume dispensado",
        "Set Dose over Time": "Definir dose ao longo do tempo",
        "Dose over time value": "Formato: 85,10 -> e. 85ml em 10 minutos",
        "Dispense Volume": "Dispensar Volume",
        "Dispense volume value": "Formato: 15 -> e. 15ml",
        "Set constant flow rate": "Definir taxa de fluxo constante",
        "Constant flow rate value": "Formato: 25,40 -> e. 25ml/min durante 40 minutos",
        "Pause Pump": "Pausar bomba",
        "Stop Dispense": "Parar distribui\xE7\xE3o",
        "Find Pump": "Localizar bomba",
        "EC Sensor Calibration": "Calibra\xE7\xE3o do Sensor EC",
        "Calibrate Dry": "Calibrar seco",
        "EC value": "valor CE",
        "Set Probe Type": "Definir tipo de sonda",
        "Probe Type": "Tipo de Sonda",
        "EC Probe Type Setting": "Configura\xE7\xE3o do tipo de sonda EC",
        "EC Parameters Configuration": "Configura\xE7\xE3o dos Par\xE2metros EC",
        "EC(uS)": "EC(EUA)",
        "TDS(ppm)": "TDS (ppm)",
        "S(ppt)": "S(ppt)",
        SG: "SG",
        "Set TDS Conversion": "Definir convers\xE3o de TDS",
        "TDS conversion value": "Valor de convers\xE3o TDS",
        "Calibrate Singlepoint": "Calibrar ponto \xFAnico"
      };
    }
  });

  // admin/src/i18n/nl.json
  var require_nl2 = __commonJS({
    "admin/src/i18n/nl.json"(exports, module) {
      module.exports = {
        "atlas-scientific-ezo-i2c adapter settings": "Adapterinstellingen voor atlas-scientific-ezo-i2c",
        "Bus number": "I2C-busnummer",
        "Search Devices": "Apparaat zoeken",
        Unused: "Ongebruikt",
        Address: "Adres",
        Name: "Naam",
        Command: "Commando",
        Description: "Beschrijving",
        "Polling Interval": "Polling-interval (min. 10000 ms)",
        General: "Algemeen",
        "Set Parameter": "Parameter instellen",
        "DO Parameters Configuration": "DO-parameterconfiguratie",
        "DO Calibration": "DO Sensorkalibratie",
        "Start Calibration": "Kalibratie starten",
        Functionalities: "Gemeenschappelijke functionaliteiten",
        "Find EZO Board": "Zoek EZO-bord",
        "General Configuration": "Algemene configuratie",
        "Clear Calibration": "Kalibratie wissen",
        "Atmospheric Calibration": "Kalibreer atmosferisch",
        "0 DO Calibration": "Kalibreer 0DO",
        "Factory Reset": "Fabrieksinstellingen",
        "Change I2C Address": "I2C-adres wijzigen",
        "New Address": "Adres (97-127)",
        Calibrate: "Ijken",
        "Calibrate Low": "Kalibreer laag",
        "Calibrate Mid": "Midden kalibreren",
        "Calibrate High": "Kalibreer hoog",
        "PH value": "PH (0,0 - 10,0)",
        "PH Sensor Calibration": "Kalibratie PH-sensor",
        "Temp. compensation value": "Temperatuur b.v. 20.4",
        "Set TC Value": "Temp. instellen een vergoeding",
        "Pressure compensation value": "Druk in (kPA) bijv. 101,3",
        "Set PC Value": "Drukcompensatie instellen",
        "Salinity compensation value": "Zoutgehalte waarde",
        "Set SC Value": "Stel saliniteitscompensatie in",
        IsPpt: "Is Ppt",
        "ORP Sensor Calibration": "ORP-sensorkalibratie",
        "ORP value": "ORP-waarde",
        "RTD Sensor Calibration": "RTD-sensorkalibratie",
        "RTD value": "Temperatuur waarde",
        Active: "Actief",
        IsLedActive: "LED actief",
        "Pump Parameters Configuration": "Configuratie pompparameters",
        "Dispensed Volume": "Afgegeven volume",
        "Total Dispensed Volume": "Totaal afgegeven volume",
        "Absolute Dispensed Volume": "Absoluut afgegeven volume",
        "Calibration Volume": "Kalibratievolume",
        "Pump Calibration": "Pomp Kalibratie",
        "Pump Control": "Pomp controle",
        "pump reverse": "Achteruit",
        ClearDispensedVolume: "Wis afgegeven volume",
        "Set Dose over Time": "Stel dosis over tijd in",
        "Dose over time value": "Formaat: 85,10 -> b.v. 85 ml gedurende 10 minuten",
        "Dispense Volume": "Doseer volume",
        "Dispense volume value": "Formaat: 15 -> b.v. 15ml",
        "Set constant flow rate": "Stel constant debiet in",
        "Constant flow rate value": "Formaat: 25,40 -> b.v. 25 ml/min gedurende 40 minuten",
        "Pause Pump": "Pomp pauzeren",
        "Stop Dispense": "Stop met doseren",
        "Find Pump": "Zoek pomp",
        "EC Sensor Calibration": "EC-sensorkalibratie",
        "Calibrate Dry": "Kalibreer droog",
        "EC value": "EC-waarde",
        "Set Probe Type": "Sondetype instellen",
        "Probe Type": "sonde type",
        "EC Probe Type Setting": "Instelling type EC-sonde",
        "EC Parameters Configuration": "Configuratie EC-parameters",
        "EC(uS)": "EG(VS)",
        "TDS(ppm)": "TDS (ppm)",
        "S(ppt)": "S(ppt)",
        SG: "SG",
        "Set TDS Conversion": "TDS-conversie instellen",
        "TDS conversion value": "TDS-conversiewaarde",
        "Calibrate Singlepoint": "Singlepoint kalibreren"
      };
    }
  });

  // admin/src/i18n/fr.json
  var require_fr2 = __commonJS({
    "admin/src/i18n/fr.json"(exports, module) {
      module.exports = {
        "atlas-scientific-ezo-i2c adapter settings": "Param\xE8tres d'adaptateur pour atlas-scientific-ezo-i2c",
        "Bus number": "Num\xE9ro de bus I2C",
        "Search Devices": "Recherche d'appareil",
        Unused: "Inutilis\xE9",
        Address: "Adresse",
        Name: "Nom",
        Command: "Commande",
        Description: "Description",
        "Polling Interval": "Intervalle d'interrogation (min. 10000ms)",
        General: "G\xE9n\xE9ral",
        "Set Parameter": "D\xE9finir le param\xE8tre",
        "DO Parameters Configuration": "Configuration des param\xE8tres DO",
        "DO Calibration": "\xC9talonnage du capteur d'OD",
        "Start Calibration": "D\xE9marrer l'\xE9talonnage",
        Functionalities: "Fonctionnalit\xE9s communes",
        "Find EZO Board": "Trouver le tableau EZO",
        "General Configuration": "Param\xE9trage g\xE9n\xE9ral",
        "Clear Calibration": "Effacer l'\xE9talonnage",
        "Atmospheric Calibration": "Calibrer Atmosph\xE9rique",
        "0 DO Calibration": "Calibrer 0DO",
        "Factory Reset": "Retour aux param\xE8tres d'usine",
        "Change I2C Address": "Modifier l'adresse I2C",
        "New Address": "Adresse (97-127)",
        Calibrate: "\xC9talonner",
        "Calibrate Low": "Calibrer bas",
        "Calibrate Mid": "Calibrer le milieu",
        "Calibrate High": "Calibrer haut",
        "PH value": "pH (0.0 - 10.0)",
        "PH Sensor Calibration": "\xC9talonnage du capteur de pH",
        "Temp. compensation value": "Temp\xE9rature par ex. 20.4",
        "Set TC Value": "R\xE9gler la temp\xE9rature. compensation",
        "Pressure compensation value": "Pression en (kPA) par exemple 101,3",
        "Set PC Value": "R\xE9gler la compensation de pression",
        "Salinity compensation value": "Valeur de salinit\xE9",
        "Set SC Value": "R\xE9gler la compensation de salinit\xE9",
        IsPpt: "Est ppt",
        "ORP Sensor Calibration": "\xC9talonnage du capteur ORP",
        "ORP value": "Valeur redox",
        "RTD Sensor Calibration": "\xC9talonnage du capteur RTD",
        "RTD value": "Valeur de temp\xE9rature",
        Active: "Actif",
        IsLedActive: "DEL active",
        "Pump Parameters Configuration": "Configuration des param\xE8tres de la pompe",
        "Dispensed Volume": "Volume distribu\xE9",
        "Total Dispensed Volume": "Volume distribu\xE9 total",
        "Absolute Dispensed Volume": "Volume distribu\xE9 absolu",
        "Calibration Volume": "Volume d'\xE9talonnage",
        "Pump Calibration": "\xC9talonnage de la pompe",
        "Pump Control": "Contr\xF4le de la pompe",
        "pump reverse": "Inverse",
        ClearDispensedVolume: "Effacer le volume distribu\xE9",
        "Set Dose over Time": "D\xE9finir la dose au fil du temps",
        "Dose over time value": "Format : 85,10 -> par ex. 85 ml en 10 minutes",
        "Dispense Volume": "Volume de distribution",
        "Dispense volume value": "Format : 15 -> par ex. 15ml",
        "Set constant flow rate": "R\xE9gler le d\xE9bit constant",
        "Constant flow rate value": "Format : 25,40 -> par ex. 25 ml/min pendant 40 minutes",
        "Pause Pump": "Mettre la pompe en pause",
        "Stop Dispense": "Arr\xEAter la distribution",
        "Find Pump": "Trouver la pompe",
        "EC Sensor Calibration": "\xC9talonnage du capteur EC",
        "Calibrate Dry": "Calibrer sec",
        "EC value": "Valeur CE",
        "Set Probe Type": "D\xE9finir le type de sonde",
        "Probe Type": "Type de sonde",
        "EC Probe Type Setting": "R\xE9glage du type de sonde EC",
        "EC Parameters Configuration": "Configuration des param\xE8tres EC",
        "EC(uS)": "CE (\xC9tats-Unis)",
        "TDS(ppm)": "TDS(ppm)",
        "S(ppt)": "S(ppt)",
        SG: "SG",
        "Set TDS Conversion": "D\xE9finir la conversion TDS",
        "TDS conversion value": "Valeur de conversion TDS",
        "Calibrate Singlepoint": "Calibrer un seul point"
      };
    }
  });

  // admin/src/i18n/it.json
  var require_it2 = __commonJS({
    "admin/src/i18n/it.json"(exports, module) {
      module.exports = {
        "atlas-scientific-ezo-i2c adapter settings": "Impostazioni dell'adattatore per atlas-scientific-ezo-i2c",
        "Bus number": "Numero bus I2C",
        "Search Devices": "Ricerca dispositivi",
        Unused: "Inutilizzato",
        Address: "Indirizzo",
        Name: "Nome",
        Command: "Comando",
        Description: "Descrizione",
        "Polling Interval": "Intervallo di polling (min. 10000ms)",
        General: "Generale",
        "Set Parameter": "Imposta parametro",
        "DO Parameters Configuration": "Configurazione parametri DO",
        "DO Calibration": "Calibrazione sensore DO",
        "Start Calibration": "Avvia la calibrazione",
        Functionalities: "Funzionalit\xE0 comuni",
        "Find EZO Board": "Trova la scheda EZO",
        "General Configuration": "Configurazione generale",
        "Clear Calibration": "Chiara calibrazione",
        "Atmospheric Calibration": "Calibra Atmosferico",
        "0 DO Calibration": "Calibrare 0DO",
        "Factory Reset": "Ripristino delle impostazioni di fabbrica",
        "Change I2C Address": "Cambia indirizzo I2C",
        "New Address": "Indirizzo (97-127)",
        Calibrate: "Calibrare",
        "Calibrate Low": "Calibra basso",
        "Calibrate Mid": "Calibra met\xE0",
        "Calibrate High": "Calibra alto",
        "PH value": "pH (0,0 - 10,0)",
        "PH Sensor Calibration": "Calibrazione sensore pH",
        "Temp. compensation value": "Temperatura ad es. 20.4",
        "Set TC Value": "Imposta temp. compenso",
        "Pressure compensation value": "Pressione in (kPA) es.101.3",
        "Set PC Value": "Impostare la compensazione della pressione",
        "Salinity compensation value": "Valore di salinit\xE0",
        "Set SC Value": "Impostare la compensazione della salinit\xE0",
        IsPpt: "\xC8 Ppt",
        "ORP Sensor Calibration": "Calibrazione sensore ORP",
        "ORP value": "Valore Redox",
        "RTD Sensor Calibration": "Calibrazione del sensore RTD",
        "RTD value": "Valore di temperatura",
        Active: "Attivo",
        IsLedActive: "LED attivo",
        "Pump Parameters Configuration": "Configurazione dei parametri della pompa",
        "Dispensed Volume": "Volume erogato",
        "Total Dispensed Volume": "Volume totale erogato",
        "Absolute Dispensed Volume": "Volume erogato assoluto",
        "Calibration Volume": "Volume di calibrazione",
        "Pump Calibration": "Calibrazione della pompa",
        "Pump Control": "Controllo della pompa",
        "pump reverse": "Inversione",
        ClearDispensedVolume: "Cancella volume erogato",
        "Set Dose over Time": "Imposta la dose nel tempo",
        "Dose over time value": "Formato: 85,10 -> es. 85 ml in 10 minuti",
        "Dispense Volume": "Volume di erogazione",
        "Dispense volume value": "Formato: 15 -> ad es. 15 millilitri",
        "Set constant flow rate": "Impostare la portata costante",
        "Constant flow rate value": "Formato: 25,40 -> es. 25ml/min per 40 minuti",
        "Pause Pump": "Pompa in pausa",
        "Stop Dispense": "Interrompere l'erogazione",
        "Find Pump": "Trova Pompa",
        "EC Sensor Calibration": "Calibrazione del sensore EC",
        "Calibrate Dry": "Calibrare a secco",
        "EC value": "Valore CE",
        "Set Probe Type": "Imposta il tipo di sonda",
        "Probe Type": "Tipo di sonda",
        "EC Probe Type Setting": "Impostazione del tipo di sonda EC",
        "EC Parameters Configuration": "Configurazione parametri EC",
        "EC(uS)": "CE(uS)",
        "TDS(ppm)": "TDS (ppm)",
        "S(ppt)": "S(ppt)",
        SG: "SG",
        "Set TDS Conversion": "Imposta conversione TDS",
        "TDS conversion value": "Valore di conversione TDS",
        "Calibrate Singlepoint": "Calibra punto singolo"
      };
    }
  });

  // admin/src/i18n/es.json
  var require_es2 = __commonJS({
    "admin/src/i18n/es.json"(exports, module) {
      module.exports = {
        "atlas-scientific-ezo-i2c adapter settings": "Ajustes del adaptador para atlas-scientific-ezo-i2c",
        "Bus number": "N\xFAmero de autob\xFAs I2C",
        "Search Devices": "B\xFAsqueda de dispositivos",
        Unused: "No usado",
        Address: "DIRECCI\xD3N",
        Name: "Nombre",
        Command: "Dominio",
        Description: "Descripci\xF3n",
        "Polling Interval": "Intervalo de sondeo (m\xEDn. 10000ms)",
        General: "General",
        "Set Parameter": "Establecer par\xE1metro",
        "DO Parameters Configuration": "Configuraci\xF3n de par\xE1metros DO",
        "DO Calibration": "Calibraci\xF3n del sensor de ox\xEDgeno disuelto",
        "Start Calibration": "Iniciar calibraci\xF3n",
        Functionalities: "Funcionalidades Comunes",
        "Find EZO Board": "Encuentre el tablero EZO",
        "General Configuration": "Configuraci\xF3n general",
        "Clear Calibration": "Borrar calibraci\xF3n",
        "Atmospheric Calibration": "Calibrar Atmosf\xE9rico",
        "0 DO Calibration": "Calibrar 0DO",
        "Factory Reset": "Restablecimiento de f\xE1brica",
        "Change I2C Address": "Cambiar direcci\xF3n I2C",
        "New Address": "Direcci\xF3n (97-127)",
        Calibrate: "Calibrar",
        "Calibrate Low": "Calibrar bajo",
        "Calibrate Mid": "Calibrar medio",
        "Calibrate High": "Calibrar alto",
        "PH value": "pH (0,0 - 10,0)",
        "PH Sensor Calibration": "Calibraci\xF3n del sensor de PH",
        "Temp. compensation value": "Temperatura, p. 20.4",
        "Set TC Value": "Establecer temperatura compensaci\xF3n",
        "Pressure compensation value": "Presi\xF3n en (kPA) p. ej. 101,3",
        "Set PC Value": "Ajuste la compensaci\xF3n de presi\xF3n",
        "Salinity compensation value": "Valor de salinidad",
        "Set SC Value": "Establecer compensaci\xF3n de salinidad",
        IsPpt: "es ppt",
        "ORP Sensor Calibration": "Calibraci\xF3n del sensor de ORP",
        "ORP value": "valor redox",
        "RTD Sensor Calibration": "Calibraci\xF3n del sensor RTD",
        "RTD value": "Valor de temperatura",
        Active: "Activo",
        IsLedActive: "LED activo",
        "Pump Parameters Configuration": "Configuraci\xF3n de los par\xE1metros de la bomba",
        "Dispensed Volume": "Volumen dispensado",
        "Total Dispensed Volume": "Volumen total dispensado",
        "Absolute Dispensed Volume": "Volumen Dispensado Absoluto",
        "Calibration Volume": "Volumen de calibraci\xF3n",
        "Pump Calibration": "Calibraci\xF3n de la bomba",
        "Pump Control": "control de bomba",
        "pump reverse": "Contrarrestar",
        ClearDispensedVolume: "Borrar volumen dispensado",
        "Set Dose over Time": "Establecer dosis a lo largo del tiempo",
        "Dose over time value": "Formato: 85,10 -> ej. 85 ml durante 10 minutos",
        "Dispense Volume": "Volumen de dispensaci\xF3n",
        "Dispense volume value": "Formato: 15 -> ej. 15ml",
        "Set constant flow rate": "Establecer caudal constante",
        "Constant flow rate value": "Formato: 25,40 -> ej. 25 ml/min durante 40 minutos",
        "Pause Pump": "bomba de pausa",
        "Stop Dispense": "Detener dosificaci\xF3n",
        "Find Pump": "encontrar bomba",
        "EC Sensor Calibration": "Calibraci\xF3n del sensor de CE",
        "Calibrate Dry": "Calibrar Seco",
        "EC value": "valor CE",
        "Set Probe Type": "Establecer tipo de sonda",
        "Probe Type": "Tipo de sonda",
        "EC Probe Type Setting": "Configuraci\xF3n del tipo de sonda EC",
        "EC Parameters Configuration": "Configuraci\xF3n de par\xE1metros EC",
        "EC(uS)": "CE (EE. UU.)",
        "TDS(ppm)": "TDS (ppm)",
        "S(ppt)": "S(ppt)",
        SG: "SG",
        "Set TDS Conversion": "Establecer conversi\xF3n de TDS",
        "TDS conversion value": "valor de conversi\xF3n TDS",
        "Calibrate Singlepoint": "Calibrar punto \xFAnico"
      };
    }
  });

  // admin/src/i18n/pl.json
  var require_pl2 = __commonJS({
    "admin/src/i18n/pl.json"(exports, module) {
      module.exports = {
        "atlas-scientific-ezo-i2c adapter settings": "Ustawienia adaptera dla atlas-scientific-ezo-i2c",
        "Bus number": "Numer magistrali I2C",
        "Search Devices": "Wyszukiwanie urz\u0105dze\u0144",
        Unused: "Nie u\u017Cywany",
        Address: "Adres",
        Name: "Nazwa",
        Command: "Komenda",
        Description: "Opis",
        "Polling Interval": "Interwa\u0142 odpytywania (min. 10000ms)",
        General: "Og\xF3lny",
        "Set Parameter": "Ustaw parametr",
        "DO Parameters Configuration": "Konfiguracja parametr\xF3w DO",
        "DO Calibration": "Kalibracja czujnika DO",
        "Start Calibration": "Rozpocznij kalibracj\u0119",
        Functionalities: "Wsp\xF3lne funkcje",
        "Find EZO Board": "Znajd\u017A tablic\u0119 EZO",
        "General Configuration": "Konfiguracja og\xF3lna",
        "Clear Calibration": "Wyczy\u015B\u0107 kalibracj\u0119",
        "Atmospheric Calibration": "Kalibracja atmosferyczna",
        "0 DO Calibration": "Skalibruj 0DO",
        "Factory Reset": "Przywr\xF3cenie ustawie\u0144 fabrycznych",
        "Change I2C Address": "Zmie\u0144 adres I2C",
        "New Address": "Adres (97-127)",
        Calibrate: "Kalibrowa\u0107",
        "Calibrate Low": "Kalibruj niski",
        "Calibrate Mid": "Kalibruj \u015Brodek",
        "Calibrate High": "Kalibruj wysoki",
        "PH value": "pH (0,0 - 10,0)",
        "PH Sensor Calibration": "Kalibracja czujnika PH",
        "Temp. compensation value": "temperatura 20.4",
        "Set TC Value": "Nastaw temperatur\u0119. odszkodowanie",
        "Pressure compensation value": "Ci\u015Bnienie w (kPA) np. 101,3",
        "Set PC Value": "Ustaw kompensacj\u0119 ci\u015Bnienia",
        "Salinity compensation value": "Warto\u015B\u0107 zasolenia",
        "Set SC Value": "Ustaw kompensacj\u0119 zasolenia",
        IsPpt: "Czy ppt",
        "ORP Sensor Calibration": "Kalibracja czujnika ORP",
        "ORP value": "warto\u015B\u0107 ORP",
        "RTD Sensor Calibration": "Kalibracja czujnika RTD",
        "RTD value": "Warto\u015B\u0107 temperatury",
        Active: "Aktywny",
        IsLedActive: "LED aktywny",
        "Pump Parameters Configuration": "Konfiguracja parametr\xF3w pompy",
        "Dispensed Volume": "Dozowana obj\u0119to\u015B\u0107",
        "Total Dispensed Volume": "Ca\u0142kowita dozowana obj\u0119to\u015B\u0107",
        "Absolute Dispensed Volume": "Absolutna dozowana obj\u0119to\u015B\u0107",
        "Calibration Volume": "Obj\u0119to\u015B\u0107 kalibracji",
        "Pump Calibration": "Kalibracja pompy",
        "Pump Control": "Sterowanie pomp\u0105",
        "pump reverse": "Odwraca\u0107",
        ClearDispensedVolume: "Wyczy\u015B\u0107 dozowan\u0105 obj\u0119to\u015B\u0107",
        "Set Dose over Time": "Ustaw dawk\u0119 w czasie",
        "Dose over time value": "Format: 85,10 -> np. 85 ml w ci\u0105gu 10 minut",
        "Dispense Volume": "Dozuj obj\u0119to\u015B\u0107",
        "Dispense volume value": "Format: 15 -> np. 15 ml",
        "Set constant flow rate": "Ustaw sta\u0142\u0105 szybko\u015B\u0107 przep\u0142ywu",
        "Constant flow rate value": "Format: 25,40 -> np. 25 ml/min przez 40 minut",
        "Pause Pump": "Wstrzymaj pomp\u0119",
        "Stop Dispense": "Zatrzymaj dozowanie",
        "Find Pump": "Znajd\u017A pomp\u0119",
        "EC Sensor Calibration": "Kalibracja czujnika EC",
        "Calibrate Dry": "Kalibruj na sucho",
        "EC value": "warto\u015B\u0107 WE",
        "Set Probe Type": "Ustaw typ sondy",
        "Probe Type": "Typ sondy",
        "EC Probe Type Setting": "Ustawienie typu sondy EC",
        "EC Parameters Configuration": "Konfiguracja parametr\xF3w EC",
        "EC(uS)": "EC(uS)",
        "TDS(ppm)": "TDS(ppm)",
        "S(ppt)": "S(ppt)",
        SG: "SG",
        "Set TDS Conversion": "Ustaw konwersj\u0119 TDS",
        "TDS conversion value": "Warto\u015B\u0107 konwersji TDS",
        "Calibrate Singlepoint": "Kalibruj pojedynczy punkt"
      };
    }
  });

  // admin/src/i18n/zh-cn.json
  var require_zh_cn2 = __commonJS({
    "admin/src/i18n/zh-cn.json"(exports, module) {
      module.exports = {
        "atlas-scientific-ezo-i2c adapter settings": "atlas-scientific-ezo-i2c\u7684\u9002\u914D\u5668\u8BBE\u7F6E",
        "Bus number": "I2C \u603B\u7EBF\u7F16\u53F7",
        "Search Devices": "\u8BBE\u5907\u641C\u7D22",
        Unused: "\u6CA1\u7528\u8FC7",
        Address: "\u5730\u5740",
        Name: "\u59D3\u540D",
        Command: "\u547D\u4EE4",
        Description: "\u63CF\u8FF0",
        "Polling Interval": "\u8F6E\u8BE2\u95F4\u9694\uFF08\u6700\u5C0F 10000 \u6BEB\u79D2\uFF09",
        General: "\u4E00\u822C\u7684",
        "Set Parameter": "\u8BBE\u7F6E\u53C2\u6570",
        "DO Parameters Configuration": "DO\u53C2\u6570\u914D\u7F6E",
        "DO Calibration": "\u6EB6\u89E3\u6C27\u4F20\u611F\u5668\u6821\u51C6",
        "Start Calibration": "\u5F00\u59CB\u6821\u51C6",
        Functionalities: "\u5E38\u7528\u529F\u80FD",
        "Find EZO Board": "\u5BFB\u627E EZO \u677F",
        "General Configuration": "\u4E00\u822C\u914D\u7F6E",
        "Clear Calibration": "\u6E05\u9664\u6821\u51C6",
        "Atmospheric Calibration": "\u6821\u51C6\u5927\u6C14",
        "0 DO Calibration": "\u6821\u51C6 0DO",
        "Factory Reset": "\u6062\u590D\u51FA\u5382\u8BBE\u7F6E",
        "Change I2C Address": "\u66F4\u6539 I2C \u5730\u5740",
        "New Address": "\u5730\u5740 (97-127)",
        Calibrate: "\u6821\u51C6",
        "Calibrate Low": "\u6821\u51C6\u4F4E",
        "Calibrate Mid": "\u6821\u51C6\u4E2D\u97F3",
        "Calibrate High": "\u6821\u51C6\u9AD8",
        "PH value": "\u9178\u78B1\u5EA6 (0.0 - 10.0)",
        "PH Sensor Calibration": "PH \u4F20\u611F\u5668\u6821\u51C6",
        "Temp. compensation value": "\u6E29\u5EA620.4",
        "Set TC Value": "\u8BBE\u7F6E\u6E29\u5EA6\u3002\u8D54\u507F",
        "Pressure compensation value": "\u538B\u529B (kPA) \u4F8B\u5982 101.3",
        "Set PC Value": "\u8BBE\u5B9A\u538B\u529B\u8865\u507F",
        "Salinity compensation value": "\u76D0\u5EA6\u503C",
        "Set SC Value": "\u8BBE\u7F6E\u76D0\u5EA6\u8865\u507F",
        IsPpt: "\u662FPPT",
        "ORP Sensor Calibration": "ORP \u4F20\u611F\u5668\u6821\u51C6",
        "ORP value": "\u6C27\u5316\u8FD8\u539F\u503C",
        "RTD Sensor Calibration": "RTD \u4F20\u611F\u5668\u6821\u51C6",
        "RTD value": "\u6E29\u5EA6\u503C",
        Active: "\u79EF\u6781\u7684",
        IsLedActive: "LED \u6709\u6E90",
        "Pump Parameters Configuration": "\u6CF5\u53C2\u6570\u914D\u7F6E",
        "Dispensed Volume": "\u5206\u914D\u91CF",
        "Total Dispensed Volume": "\u603B\u5206\u914D\u91CF",
        "Absolute Dispensed Volume": "\u7EDD\u5BF9\u5206\u914D\u91CF",
        "Calibration Volume": "\u6821\u51C6\u4F53\u79EF",
        "Pump Calibration": "\u6CF5\u6821\u51C6",
        "Pump Control": "\u6CF5\u63A7\u5236",
        "pump reverse": "\u64A4\u9500",
        ClearDispensedVolume: "\u6E05\u9664\u5206\u914D\u91CF",
        "Set Dose over Time": "\u968F\u7740\u65F6\u95F4\u7684\u63A8\u79FB\u8BBE\u5B9A\u5242\u91CF",
        "Dose over time value": "\u683C\u5F0F\uFF1A85,10 -> \u4F8B\u598210 \u5206\u949F\u5185 85 \u6BEB\u5347",
        "Dispense Volume": "\u5206\u914D\u91CF",
        "Dispense volume value": "\u683C\u5F0F\uFF1A15 -> \u4F8B\u598215\u6BEB\u5347",
        "Set constant flow rate": "\u8BBE\u7F6E\u6052\u5B9A\u6D41\u91CF",
        "Constant flow rate value": "\u683C\u5F0F\uFF1A25,40 -> \u4F8B\u598225\u6BEB\u5347/\u5206\u949F 40\u5206\u949F",
        "Pause Pump": "\u6682\u505C\u6CF5",
        "Stop Dispense": "\u505C\u6B62\u5206\u914D",
        "Find Pump": "\u67E5\u627E\u6CF5",
        "EC Sensor Calibration": "EC \u4F20\u611F\u5668\u6821\u51C6",
        "Calibrate Dry": "\u5E72\u71E5\u6821\u51C6",
        "EC value": "EC\u503C",
        "Set Probe Type": "\u8BBE\u7F6E\u63A2\u5934\u7C7B\u578B",
        "Probe Type": "\u63A2\u5934\u7C7B\u578B",
        "EC Probe Type Setting": "EC \u63A2\u5934\u7C7B\u578B\u8BBE\u7F6E",
        "EC Parameters Configuration": "EC\u53C2\u6570\u914D\u7F6E",
        "EC(uS)": "\u6B27\u5171\u4F53\uFF08\u7F8E\u5236\uFF09",
        "TDS(ppm)": "\u603B\u6EB6\u89E3\u56FA\u4F53(ppm)",
        "S(ppt)": "\u5C0F\u518C\u5B50(ppt)",
        SG: "SG",
        "Set TDS Conversion": "\u8BBE\u7F6E TDS \u8F6C\u6362",
        "TDS conversion value": "TDS \u8F6C\u6362\u503C",
        "Calibrate Singlepoint": "\u6821\u51C6\u5355\u70B9"
      };
    }
  });

  // admin/src/index.tsx
  var import_react15 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());
  var import_styles8 = __toESM(require_styles2());
  var import_Theme = __toESM(require_Theme());
  var import_Utils = __toESM(require_Utils());

  // admin/src/app.tsx
  var import_GenericApp = __toESM(require_GenericApp());
  var import_styles7 = __toESM(require_styles2());
  var import_react14 = __toESM(require_react());

  // admin/src/components/settings.tsx
  var import_i18n10 = __toESM(require_i18n());

  // node_modules/@material-ui/core/esm/Box/Box.js
  var import_system2 = __toESM(require_system());

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/@material-ui/core/esm/styles/styled.js
  var import_styles = __toESM(require_styles());

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  }

  // node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  // node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
  }

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }

  // node_modules/@material-ui/core/esm/styles/createTheme.js
  var import_utils3 = __toESM(require_utils());

  // node_modules/@material-ui/core/esm/styles/createBreakpoints.js
  var keys = ["xs", "sm", "md", "lg", "xl"];
  function createBreakpoints(breakpoints) {
    var _breakpoints$values = breakpoints.values, values = _breakpoints$values === void 0 ? {
      xs: 0,
      sm: 600,
      md: 960,
      lg: 1280,
      xl: 1920
    } : _breakpoints$values, _breakpoints$unit = breakpoints.unit, unit = _breakpoints$unit === void 0 ? "px" : _breakpoints$unit, _breakpoints$step = breakpoints.step, step = _breakpoints$step === void 0 ? 5 : _breakpoints$step, other = _objectWithoutProperties(breakpoints, ["values", "unit", "step"]);
    function up(key) {
      var value = typeof values[key] === "number" ? values[key] : key;
      return "@media (min-width:".concat(value).concat(unit, ")");
    }
    function down(key) {
      var endIndex = keys.indexOf(key) + 1;
      var upperbound = values[keys[endIndex]];
      if (endIndex === keys.length) {
        return up("xs");
      }
      var value = typeof upperbound === "number" && endIndex > 0 ? upperbound : key;
      return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
    }
    function between(start, end) {
      var endIndex = keys.indexOf(end);
      if (endIndex === keys.length - 1) {
        return up(start);
      }
      return "@media (min-width:".concat(typeof values[start] === "number" ? values[start] : start).concat(unit, ") and ") + "(max-width:".concat((endIndex !== -1 && typeof values[keys[endIndex + 1]] === "number" ? values[keys[endIndex + 1]] : end) - step / 100).concat(unit, ")");
    }
    function only(key) {
      return between(key, key);
    }
    var warnedOnce2 = false;
    function width(key) {
      if (true) {
        if (!warnedOnce2) {
          warnedOnce2 = true;
          console.warn(["Material-UI: The `theme.breakpoints.width` utility is deprecated because it's redundant.", "Use the `theme.breakpoints.values` instead."].join("\n"));
        }
      }
      return values[key];
    }
    return _extends({
      keys,
      values,
      up,
      down,
      between,
      only,
      width
    }, other);
  }

  // node_modules/@material-ui/core/esm/styles/createMixins.js
  function createMixins(breakpoints, spacing2, mixins) {
    var _toolbar;
    return _extends({
      gutters: function gutters() {
        var styles61 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        console.warn(["Material-UI: theme.mixins.gutters() is deprecated.", "You can use the source of the mixin directly:", "\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n      },\n      "].join("\n"));
        return _extends({
          paddingLeft: spacing2(2),
          paddingRight: spacing2(2)
        }, styles61, _defineProperty({}, breakpoints.up("sm"), _extends({
          paddingLeft: spacing2(3),
          paddingRight: spacing2(3)
        }, styles61[breakpoints.up("sm")])));
      },
      toolbar: (_toolbar = {
        minHeight: 56
      }, _defineProperty(_toolbar, "".concat(breakpoints.up("xs"), " and (orientation: landscape)"), {
        minHeight: 48
      }), _defineProperty(_toolbar, breakpoints.up("sm"), {
        minHeight: 64
      }), _toolbar)
    }, mixins);
  }

  // node_modules/@material-ui/core/esm/styles/createPalette.js
  var import_utils = __toESM(require_utils());

  // node_modules/@material-ui/core/esm/colors/common.js
  var common = {
    black: "#000",
    white: "#fff"
  };
  var common_default = common;

  // node_modules/@material-ui/core/esm/colors/grey.js
  var grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#d5d5d5",
    A200: "#aaaaaa",
    A400: "#303030",
    A700: "#616161"
  };
  var grey_default = grey;

  // node_modules/@material-ui/core/esm/colors/indigo.js
  var indigo = {
    50: "#e8eaf6",
    100: "#c5cae9",
    200: "#9fa8da",
    300: "#7986cb",
    400: "#5c6bc0",
    500: "#3f51b5",
    600: "#3949ab",
    700: "#303f9f",
    800: "#283593",
    900: "#1a237e",
    A100: "#8c9eff",
    A200: "#536dfe",
    A400: "#3d5afe",
    A700: "#304ffe"
  };
  var indigo_default = indigo;

  // node_modules/@material-ui/core/esm/colors/pink.js
  var pink = {
    50: "#fce4ec",
    100: "#f8bbd0",
    200: "#f48fb1",
    300: "#f06292",
    400: "#ec407a",
    500: "#e91e63",
    600: "#d81b60",
    700: "#c2185b",
    800: "#ad1457",
    900: "#880e4f",
    A100: "#ff80ab",
    A200: "#ff4081",
    A400: "#f50057",
    A700: "#c51162"
  };
  var pink_default = pink;

  // node_modules/@material-ui/core/esm/colors/red.js
  var red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  var red_default = red;

  // node_modules/@material-ui/core/esm/colors/orange.js
  var orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  var orange_default = orange;

  // node_modules/@material-ui/core/esm/colors/blue.js
  var blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  var blue_default = blue;

  // node_modules/@material-ui/core/esm/colors/green.js
  var green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  var green_default = green;

  // node_modules/@material-ui/core/esm/styles/colorManipulator.js
  function clamp(value) {
    var min = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var max = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
    if (true) {
      if (value < min || value > max) {
        console.error("Material-UI: The value provided ".concat(value, " is out of range [").concat(min, ", ").concat(max, "]."));
      }
    }
    return Math.min(Math.max(min, value), max);
  }
  function hexToRgb(color) {
    color = color.substr(1);
    var re = new RegExp(".{1,".concat(color.length >= 6 ? 2 : 1, "}"), "g");
    var colors = color.match(re);
    if (colors && colors[0].length === 1) {
      colors = colors.map(function(n) {
        return n + n;
      });
    }
    return colors ? "rgb".concat(colors.length === 4 ? "a" : "", "(").concat(colors.map(function(n, index) {
      return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
    }).join(", "), ")") : "";
  }
  function hslToRgb(color) {
    color = decomposeColor(color);
    var _color = color, values = _color.values;
    var h = values[0];
    var s = values[1] / 100;
    var l = values[2] / 100;
    var a = s * Math.min(l, 1 - l);
    var f = function f2(n) {
      var k = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : (n + h / 30) % 12;
      return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    };
    var type = "rgb";
    var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
    if (color.type === "hsla") {
      type += "a";
      rgb.push(values[3]);
    }
    return recomposeColor({
      type,
      values: rgb
    });
  }
  function decomposeColor(color) {
    if (color.type) {
      return color;
    }
    if (color.charAt(0) === "#") {
      return decomposeColor(hexToRgb(color));
    }
    var marker = color.indexOf("(");
    var type = color.substring(0, marker);
    if (["rgb", "rgba", "hsl", "hsla"].indexOf(type) === -1) {
      throw new Error(true ? "Material-UI: Unsupported `".concat(color, "` color.\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().") : (0, import_utils.formatMuiErrorMessage)(3, color));
    }
    var values = color.substring(marker + 1, color.length - 1).split(",");
    values = values.map(function(value) {
      return parseFloat(value);
    });
    return {
      type,
      values
    };
  }
  function recomposeColor(color) {
    var type = color.type;
    var values = color.values;
    if (type.indexOf("rgb") !== -1) {
      values = values.map(function(n, i) {
        return i < 3 ? parseInt(n, 10) : n;
      });
    } else if (type.indexOf("hsl") !== -1) {
      values[1] = "".concat(values[1], "%");
      values[2] = "".concat(values[2], "%");
    }
    return "".concat(type, "(").concat(values.join(", "), ")");
  }
  function getContrastRatio(foreground, background) {
    var lumA = getLuminance(foreground);
    var lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  function getLuminance(color) {
    color = decomposeColor(color);
    var rgb = color.type === "hsl" ? decomposeColor(hslToRgb(color)).values : color.values;
    rgb = rgb.map(function(val) {
      val /= 255;
      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
    });
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }
  function alpha(color, value) {
    color = decomposeColor(color);
    value = clamp(value);
    if (color.type === "rgb" || color.type === "hsl") {
      color.type += "a";
    }
    color.values[3] = value;
    return recomposeColor(color);
  }
  function darken(color, coefficient) {
    color = decomposeColor(color);
    coefficient = clamp(coefficient);
    if (color.type.indexOf("hsl") !== -1) {
      color.values[2] *= 1 - coefficient;
    } else if (color.type.indexOf("rgb") !== -1) {
      for (var i = 0; i < 3; i += 1) {
        color.values[i] *= 1 - coefficient;
      }
    }
    return recomposeColor(color);
  }
  function lighten(color, coefficient) {
    color = decomposeColor(color);
    coefficient = clamp(coefficient);
    if (color.type.indexOf("hsl") !== -1) {
      color.values[2] += (100 - color.values[2]) * coefficient;
    } else if (color.type.indexOf("rgb") !== -1) {
      for (var i = 0; i < 3; i += 1) {
        color.values[i] += (255 - color.values[i]) * coefficient;
      }
    }
    return recomposeColor(color);
  }

  // node_modules/@material-ui/core/esm/styles/createPalette.js
  var light = {
    text: {
      primary: "rgba(0, 0, 0, 0.87)",
      secondary: "rgba(0, 0, 0, 0.54)",
      disabled: "rgba(0, 0, 0, 0.38)",
      hint: "rgba(0, 0, 0, 0.38)"
    },
    divider: "rgba(0, 0, 0, 0.12)",
    background: {
      paper: common_default.white,
      default: grey_default[50]
    },
    action: {
      active: "rgba(0, 0, 0, 0.54)",
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      disabled: "rgba(0, 0, 0, 0.26)",
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  var dark = {
    text: {
      primary: common_default.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      hint: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: grey_default[800],
      default: "#303030"
    },
    action: {
      active: common_default.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    var tonalOffsetLight = tonalOffset.light || tonalOffset;
    var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = lighten(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = darken(intent.main, tonalOffsetDark);
      }
    }
  }
  function createPalette(palette2) {
    var _palette$primary = palette2.primary, primary = _palette$primary === void 0 ? {
      light: indigo_default[300],
      main: indigo_default[500],
      dark: indigo_default[700]
    } : _palette$primary, _palette$secondary = palette2.secondary, secondary = _palette$secondary === void 0 ? {
      light: pink_default.A200,
      main: pink_default.A400,
      dark: pink_default.A700
    } : _palette$secondary, _palette$error = palette2.error, error = _palette$error === void 0 ? {
      light: red_default[300],
      main: red_default[500],
      dark: red_default[700]
    } : _palette$error, _palette$warning = palette2.warning, warning = _palette$warning === void 0 ? {
      light: orange_default[300],
      main: orange_default[500],
      dark: orange_default[700]
    } : _palette$warning, _palette$info = palette2.info, info = _palette$info === void 0 ? {
      light: blue_default[300],
      main: blue_default[500],
      dark: blue_default[700]
    } : _palette$info, _palette$success = palette2.success, success = _palette$success === void 0 ? {
      light: green_default[300],
      main: green_default[500],
      dark: green_default[700]
    } : _palette$success, _palette$type = palette2.type, type = _palette$type === void 0 ? "light" : _palette$type, _palette$contrastThre = palette2.contrastThreshold, contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre, _palette$tonalOffset = palette2.tonalOffset, tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset, other = _objectWithoutProperties(palette2, ["primary", "secondary", "error", "warning", "info", "success", "type", "contrastThreshold", "tonalOffset"]);
    function getContrastText(background) {
      var contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        var contrast = getContrastRatio(background, contrastText);
        if (contrast < 3) {
          console.error(["Material-UI: The contrast ratio of ".concat(contrast, ":1 for ").concat(contrastText, " on ").concat(background), "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    var augmentColor = function augmentColor2(color) {
      var mainShade = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 500;
      var lightShade = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 300;
      var darkShade = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 700;
      color = _extends({}, color);
      if (!color.main && color[mainShade]) {
        color.main = color[mainShade];
      }
      if (!color.main) {
        throw new Error(true ? "Material-UI: The color provided to augmentColor(color) is invalid.\nThe color object needs to have a `main` property or a `".concat(mainShade, "` property.") : (0, import_utils.formatMuiErrorMessage)(4, mainShade));
      }
      if (typeof color.main !== "string") {
        throw new Error(true ? "Material-UI: The color provided to augmentColor(color) is invalid.\n`color.main` should be a string, but `".concat(JSON.stringify(color.main), '` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport {\xA0green } from "@material-ui/core/colors";\n\nconst theme1 = createTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createTheme({ palette: {\n  primary: { main: green[500] },\n} });') : (0, import_utils.formatMuiErrorMessage)(5, JSON.stringify(color.main)));
      }
      addLightOrDark(color, "light", lightShade, tonalOffset);
      addLightOrDark(color, "dark", darkShade, tonalOffset);
      if (!color.contrastText) {
        color.contrastText = getContrastText(color.main);
      }
      return color;
    };
    var types = {
      dark,
      light
    };
    if (true) {
      if (!types[type]) {
        console.error("Material-UI: The palette type `".concat(type, "` is not supported."));
      }
    }
    var paletteOutput = (0, import_utils.deepmerge)(_extends({
      common: common_default,
      type,
      primary: augmentColor(primary),
      secondary: augmentColor(secondary, "A400", "A200", "A700"),
      error: augmentColor(error),
      warning: augmentColor(warning),
      info: augmentColor(info),
      success: augmentColor(success),
      grey: grey_default,
      contrastThreshold,
      getContrastText,
      augmentColor,
      tonalOffset
    }, types[type]), other);
    return paletteOutput;
  }

  // node_modules/@material-ui/core/esm/styles/createTypography.js
  var import_utils2 = __toESM(require_utils());
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var warnedOnce = false;
  function roundWithDeprecationWarning(value) {
    if (true) {
      if (!warnedOnce) {
        console.warn(["Material-UI: The `theme.typography.round` helper is deprecated.", "Head to https://mui.com/r/migration-v4/#theme for a migration path."].join("\n"));
        warnedOnce = true;
      }
    }
    return round(value);
  }
  var caseAllCaps = {
    textTransform: "uppercase"
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette2, typography2) {
    var _ref4 = typeof typography2 === "function" ? typography2(palette2) : typography2, _ref$fontFamily = _ref4.fontFamily, fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily, _ref$fontSize = _ref4.fontSize, fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize, _ref$fontWeightLight = _ref4.fontWeightLight, fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight, _ref$fontWeightRegula = _ref4.fontWeightRegular, fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula, _ref$fontWeightMedium = _ref4.fontWeightMedium, fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium, _ref$fontWeightBold = _ref4.fontWeightBold, fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold, _ref$htmlFontSize = _ref4.htmlFontSize, htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize, allVariants = _ref4.allVariants, pxToRem2 = _ref4.pxToRem, other = _objectWithoutProperties(_ref4, ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"]);
    if (true) {
      if (typeof fontSize !== "number") {
        console.error("Material-UI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("Material-UI: `htmlFontSize` is required to be a number.");
      }
    }
    var coef = fontSize / 14;
    var pxToRem = pxToRem2 || function(size) {
      return "".concat(size / htmlFontSize * coef, "rem");
    };
    var buildVariant = function buildVariant2(fontWeight, size, lineHeight, letterSpacing, casing) {
      return _extends({
        fontFamily,
        fontWeight,
        fontSize: pxToRem(size),
        lineHeight
      }, fontFamily === defaultFontFamily ? {
        letterSpacing: "".concat(round(letterSpacing / size), "em")
      } : {}, casing, allVariants);
    };
    var variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
    };
    return (0, import_utils2.deepmerge)(_extends({
      htmlFontSize,
      pxToRem,
      round: roundWithDeprecationWarning,
      fontFamily,
      fontSize,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
    });
  }

  // node_modules/@material-ui/core/esm/styles/shadows.js
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow() {
    return ["".concat(arguments.length <= 0 ? void 0 : arguments[0], "px ").concat(arguments.length <= 1 ? void 0 : arguments[1], "px ").concat(arguments.length <= 2 ? void 0 : arguments[2], "px ").concat(arguments.length <= 3 ? void 0 : arguments[3], "px rgba(0,0,0,").concat(shadowKeyUmbraOpacity, ")"), "".concat(arguments.length <= 4 ? void 0 : arguments[4], "px ").concat(arguments.length <= 5 ? void 0 : arguments[5], "px ").concat(arguments.length <= 6 ? void 0 : arguments[6], "px ").concat(arguments.length <= 7 ? void 0 : arguments[7], "px rgba(0,0,0,").concat(shadowKeyPenumbraOpacity, ")"), "".concat(arguments.length <= 8 ? void 0 : arguments[8], "px ").concat(arguments.length <= 9 ? void 0 : arguments[9], "px ").concat(arguments.length <= 10 ? void 0 : arguments[10], "px ").concat(arguments.length <= 11 ? void 0 : arguments[11], "px rgba(0,0,0,").concat(shadowAmbientShadowOpacity, ")")].join(",");
  }
  var shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows_default = shadows;

  // node_modules/@material-ui/core/esm/styles/shape.js
  var shape = {
    borderRadius: 4
  };
  var shape_default = shape;

  // node_modules/@material-ui/core/esm/styles/createSpacing.js
  var import_system = __toESM(require_system());
  var warnOnce;
  function createSpacing() {
    var spacingInput = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8;
    if (spacingInput.mui) {
      return spacingInput;
    }
    var transform = (0, import_system.createUnarySpacing)({
      spacing: spacingInput
    });
    var spacing2 = function spacing3() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (true) {
        if (!(args.length <= 4)) {
          console.error("Material-UI: Too many arguments provided, expected between 0 and 4, got ".concat(args.length));
        }
      }
      if (args.length === 0) {
        return transform(1);
      }
      if (args.length === 1) {
        return transform(args[0]);
      }
      return args.map(function(argument) {
        if (typeof argument === "string") {
          return argument;
        }
        var output = transform(argument);
        return typeof output === "number" ? "".concat(output, "px") : output;
      }).join(" ");
    };
    Object.defineProperty(spacing2, "unit", {
      get: function get() {
        if (true) {
          if (!warnOnce || false) {
            console.error(["Material-UI: theme.spacing.unit usage has been deprecated.", "It will be removed in v5.", "You can replace `theme.spacing.unit * y` with `theme.spacing(y)`.", "", "You can use the `https://github.com/mui-org/material-ui/tree/master/packages/material-ui-codemod/README.md#theme-spacing-api` migration helper to make the process smoother."].join("\n"));
          }
          warnOnce = true;
        }
        return spacingInput;
      }
    });
    spacing2.mui = true;
    return spacing2;
  }

  // node_modules/@material-ui/core/esm/styles/transitions.js
  var easing = {
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    standard: 300,
    complex: 375,
    enteringScreen: 225,
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return "".concat(Math.round(milliseconds), "ms");
  }
  var transitions_default = {
    easing,
    duration,
    create: function create() {
      var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["all"];
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var _options$duration = options.duration, durationOption = _options$duration === void 0 ? duration.standard : _options$duration, _options$easing = options.easing, easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing, _options$delay = options.delay, delay = _options$delay === void 0 ? 0 : _options$delay, other = _objectWithoutProperties(options, ["duration", "easing", "delay"]);
      if (true) {
        var isString = function isString2(value) {
          return typeof value === "string";
        };
        var isNumber = function isNumber2(value) {
          return !isNaN(parseFloat(value));
        };
        if (!isString(props) && !Array.isArray(props)) {
          console.error('Material-UI: Argument "props" must be a string or Array.');
        }
        if (!isNumber(durationOption) && !isString(durationOption)) {
          console.error('Material-UI: Argument "duration" must be a number or a string but found '.concat(durationOption, "."));
        }
        if (!isString(easingOption)) {
          console.error('Material-UI: Argument "easing" must be a string.');
        }
        if (!isNumber(delay) && !isString(delay)) {
          console.error('Material-UI: Argument "delay" must be a number or a string.');
        }
        if (Object.keys(other).length !== 0) {
          console.error("Material-UI: Unrecognized argument(s) [".concat(Object.keys(other).join(","), "]."));
        }
      }
      return (Array.isArray(props) ? props : [props]).map(function(animatedProp) {
        return "".concat(animatedProp, " ").concat(typeof durationOption === "string" ? durationOption : formatMs(durationOption), " ").concat(easingOption, " ").concat(typeof delay === "string" ? delay : formatMs(delay));
      }).join(",");
    },
    getAutoHeightDuration: function getAutoHeightDuration(height) {
      if (!height) {
        return 0;
      }
      var constant = height / 36;
      return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
    }
  };

  // node_modules/@material-ui/core/esm/styles/zIndex.js
  var zIndex = {
    mobileStepper: 1e3,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex_default = zIndex;

  // node_modules/@material-ui/core/esm/styles/createTheme.js
  function createTheme() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var _options$breakpoints = options.breakpoints, breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints, _options$mixins = options.mixins, mixinsInput = _options$mixins === void 0 ? {} : _options$mixins, _options$palette = options.palette, paletteInput = _options$palette === void 0 ? {} : _options$palette, spacingInput = options.spacing, _options$typography = options.typography, typographyInput = _options$typography === void 0 ? {} : _options$typography, other = _objectWithoutProperties(options, ["breakpoints", "mixins", "palette", "spacing", "typography"]);
    var palette2 = createPalette(paletteInput);
    var breakpoints = createBreakpoints(breakpointsInput);
    var spacing2 = createSpacing(spacingInput);
    var muiTheme = (0, import_utils3.deepmerge)({
      breakpoints,
      direction: "ltr",
      mixins: createMixins(breakpoints, spacing2, mixinsInput),
      overrides: {},
      palette: palette2,
      props: {},
      shadows: shadows_default,
      typography: createTypography(palette2, typographyInput),
      spacing: spacing2,
      shape: shape_default,
      transitions: transitions_default,
      zIndex: zIndex_default
    }, other);
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    muiTheme = args.reduce(function(acc, argument) {
      return (0, import_utils3.deepmerge)(acc, argument);
    }, muiTheme);
    if (true) {
      var pseudoClasses = ["checked", "disabled", "error", "focused", "focusVisible", "required", "expanded", "selected"];
      var traverse = function traverse2(node, parentKey) {
        var depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
        var key;
        for (key in node) {
          var child = node[key];
          if (depth === 1) {
            if (key.indexOf("Mui") === 0 && child) {
              traverse2(child, key, depth + 1);
            }
          } else if (pseudoClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (true) {
              console.error(["Material-UI: The `".concat(parentKey, "` component increases ") + "the CSS specificity of the `".concat(key, "` internal state."), "You can not override it like this: ", JSON.stringify(node, null, 2), "", "Instead, you need to use the $ruleName syntax:", JSON.stringify({
                root: _defineProperty({}, "&$".concat(key), child)
              }, null, 2), "", "https://mui.com/r/pseudo-classes-guide"].join("\n"));
            }
            node[key] = {};
          }
        }
      };
      traverse(muiTheme.overrides);
    }
    return muiTheme;
  }
  var createTheme_default = createTheme;

  // node_modules/@material-ui/core/esm/styles/defaultTheme.js
  var defaultTheme = createTheme_default();
  var defaultTheme_default = defaultTheme;

  // node_modules/@material-ui/core/esm/styles/styled.js
  var styled = function styled2(Component4) {
    var componentCreator = (0, import_styles.styled)(Component4);
    return function(style, options) {
      return componentCreator(style, _extends({
        defaultTheme: defaultTheme_default
      }, options));
    };
  };
  var styled_default = styled;

  // node_modules/@material-ui/core/esm/Box/Box.js
  var styleFunction = (0, import_system2.styleFunctionSx)((0, import_system2.compose)(import_system2.borders, import_system2.display, import_system2.flexbox, import_system2.grid, import_system2.positions, import_system2.palette, import_system2.shadows, import_system2.sizing, import_system2.spacing, import_system2.typography));
  var Box = styled_default("div")(styleFunction, {
    name: "MuiBox"
  });
  var Box_default = Box;

  // node_modules/@material-ui/core/esm/Tab/Tab.js
  var React7 = __toESM(require_react());
  var import_prop_types4 = __toESM(require_prop_types());
  var import_clsx4 = __toESM(require_clsx());

  // node_modules/@material-ui/core/esm/styles/withStyles.js
  var import_styles2 = __toESM(require_styles());
  function withStyles(stylesOrCreator, options) {
    return (0, import_styles2.withStyles)(stylesOrCreator, _extends({
      defaultTheme: defaultTheme_default
    }, options));
  }
  var withStyles_default = withStyles;

  // node_modules/@material-ui/core/esm/ButtonBase/ButtonBase.js
  var React6 = __toESM(require_react());
  var import_prop_types3 = __toESM(require_prop_types());
  var ReactDOM2 = __toESM(require_react_dom());
  var import_clsx3 = __toESM(require_clsx());
  var import_utils4 = __toESM(require_utils());

  // node_modules/@material-ui/core/esm/utils/useForkRef.js
  var React = __toESM(require_react());

  // node_modules/@material-ui/core/esm/utils/setRef.js
  function setRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }

  // node_modules/@material-ui/core/esm/utils/useForkRef.js
  function useForkRef(refA, refB) {
    return React.useMemo(function() {
      if (refA == null && refB == null) {
        return null;
      }
      return function(refValue) {
        setRef(refA, refValue);
        setRef(refB, refValue);
      };
    }, [refA, refB]);
  }

  // node_modules/@material-ui/core/esm/utils/useEventCallback.js
  var React2 = __toESM(require_react());
  var useEnhancedEffect = typeof window !== "undefined" ? React2.useLayoutEffect : React2.useEffect;
  function useEventCallback(fn) {
    var ref = React2.useRef(fn);
    useEnhancedEffect(function() {
      ref.current = fn;
    });
    return React2.useCallback(function() {
      return (0, ref.current).apply(void 0, arguments);
    }, []);
  }

  // node_modules/@material-ui/core/esm/utils/deprecatedPropType.js
  function deprecatedPropType(validator, reason) {
    if (false) {
      return function() {
        return null;
      };
    }
    return function(props, propName, componentName, location, propFullName) {
      var componentNameSafe = componentName || "<<anonymous>>";
      var propFullNameSafe = propFullName || propName;
      if (typeof props[propName] !== "undefined") {
        return new Error("The ".concat(location, " `").concat(propFullNameSafe, "` of ") + "`".concat(componentNameSafe, "` is deprecated. ").concat(reason));
      }
      return null;
    };
  }

  // node_modules/@material-ui/core/esm/utils/useIsFocusVisible.js
  var React3 = __toESM(require_react());
  var ReactDOM = __toESM(require_react_dom());
  var hadKeyboardEvent = true;
  var hadFocusVisibleRecently = false;
  var hadFocusVisibleRecentlyTimeout = null;
  var inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    "datetime-local": true
  };
  function focusTriggersKeyboardModality(node) {
    var type = node.type, tagName = node.tagName;
    if (tagName === "INPUT" && inputTypesWhitelist[type] && !node.readOnly) {
      return true;
    }
    if (tagName === "TEXTAREA" && !node.readOnly) {
      return true;
    }
    if (node.isContentEditable) {
      return true;
    }
    return false;
  }
  function handleKeyDown(event2) {
    if (event2.metaKey || event2.altKey || event2.ctrlKey) {
      return;
    }
    hadKeyboardEvent = true;
  }
  function handlePointerDown() {
    hadKeyboardEvent = false;
  }
  function handleVisibilityChange() {
    if (this.visibilityState === "hidden") {
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
    }
  }
  function prepare(doc) {
    doc.addEventListener("keydown", handleKeyDown, true);
    doc.addEventListener("mousedown", handlePointerDown, true);
    doc.addEventListener("pointerdown", handlePointerDown, true);
    doc.addEventListener("touchstart", handlePointerDown, true);
    doc.addEventListener("visibilitychange", handleVisibilityChange, true);
  }
  function isFocusVisible(event2) {
    var target = event2.target;
    try {
      return target.matches(":focus-visible");
    } catch (error) {
    }
    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
  }
  function handleBlurVisible() {
    hadFocusVisibleRecently = true;
    window.clearTimeout(hadFocusVisibleRecentlyTimeout);
    hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {
      hadFocusVisibleRecently = false;
    }, 100);
  }
  function useIsFocusVisible() {
    var ref = React3.useCallback(function(instance) {
      var node = ReactDOM.findDOMNode(instance);
      if (node != null) {
        prepare(node.ownerDocument);
      }
    }, []);
    if (true) {
      React3.useDebugValue(isFocusVisible);
    }
    return {
      isFocusVisible,
      onBlurVisible: handleBlurVisible,
      ref
    };
  }

  // node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  }

  // node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArray.js
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }

  // node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  // node_modules/@material-ui/core/esm/ButtonBase/TouchRipple.js
  var React5 = __toESM(require_react());
  var import_prop_types2 = __toESM(require_prop_types());
  var import_react_transition_group = __toESM(require_cjs());
  var import_clsx2 = __toESM(require_clsx());

  // node_modules/@material-ui/core/esm/ButtonBase/Ripple.js
  var React4 = __toESM(require_react());
  var import_prop_types = __toESM(require_prop_types());
  var import_clsx = __toESM(require_clsx());
  var useEnhancedEffect2 = typeof window === "undefined" ? React4.useEffect : React4.useLayoutEffect;
  function Ripple(props) {
    var classes = props.classes, _props$pulsate = props.pulsate, pulsate = _props$pulsate === void 0 ? false : _props$pulsate, rippleX = props.rippleX, rippleY = props.rippleY, rippleSize = props.rippleSize, inProp = props.in, _props$onExited = props.onExited, onExited = _props$onExited === void 0 ? function() {
    } : _props$onExited, timeout = props.timeout;
    var _React$useState = React4.useState(false), leaving = _React$useState[0], setLeaving = _React$useState[1];
    var rippleClassName = (0, import_clsx.default)(classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    var rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    var childClassName = (0, import_clsx.default)(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    var handleExited = useEventCallback(onExited);
    useEnhancedEffect2(function() {
      if (!inProp) {
        setLeaving(true);
        var timeoutId = setTimeout(handleExited, timeout);
        return function() {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [handleExited, inProp, timeout]);
    return /* @__PURE__ */ React4.createElement("span", {
      className: rippleClassName,
      style: rippleStyles
    }, /* @__PURE__ */ React4.createElement("span", {
      className: childClassName
    }));
  }
  true ? Ripple.propTypes = {
    classes: import_prop_types.default.object.isRequired,
    in: import_prop_types.default.bool,
    onExited: import_prop_types.default.func,
    pulsate: import_prop_types.default.bool,
    rippleSize: import_prop_types.default.number,
    rippleX: import_prop_types.default.number,
    rippleY: import_prop_types.default.number,
    timeout: import_prop_types.default.number.isRequired
  } : void 0;
  var Ripple_default = Ripple;

  // node_modules/@material-ui/core/esm/ButtonBase/TouchRipple.js
  var DURATION = 550;
  var DELAY_RIPPLE = 80;
  var styles = function styles2(theme2) {
    return {
      root: {
        overflow: "hidden",
        pointerEvents: "none",
        position: "absolute",
        zIndex: 0,
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        borderRadius: "inherit"
      },
      ripple: {
        opacity: 0,
        position: "absolute"
      },
      rippleVisible: {
        opacity: 0.3,
        transform: "scale(1)",
        animation: "$enter ".concat(DURATION, "ms ").concat(theme2.transitions.easing.easeInOut)
      },
      ripplePulsate: {
        animationDuration: "".concat(theme2.transitions.duration.shorter, "ms")
      },
      child: {
        opacity: 1,
        display: "block",
        width: "100%",
        height: "100%",
        borderRadius: "50%",
        backgroundColor: "currentColor"
      },
      childLeaving: {
        opacity: 0,
        animation: "$exit ".concat(DURATION, "ms ").concat(theme2.transitions.easing.easeInOut)
      },
      childPulsate: {
        position: "absolute",
        left: 0,
        top: 0,
        animation: "$pulsate 2500ms ".concat(theme2.transitions.easing.easeInOut, " 200ms infinite")
      },
      "@keyframes enter": {
        "0%": {
          transform: "scale(0)",
          opacity: 0.1
        },
        "100%": {
          transform: "scale(1)",
          opacity: 0.3
        }
      },
      "@keyframes exit": {
        "0%": {
          opacity: 1
        },
        "100%": {
          opacity: 0
        }
      },
      "@keyframes pulsate": {
        "0%": {
          transform: "scale(1)"
        },
        "50%": {
          transform: "scale(0.92)"
        },
        "100%": {
          transform: "scale(1)"
        }
      }
    };
  };
  var TouchRipple = /* @__PURE__ */ React5.forwardRef(function TouchRipple2(props, ref) {
    var _props$center = props.center, centerProp = _props$center === void 0 ? false : _props$center, classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["center", "classes", "className"]);
    var _React$useState = React5.useState([]), ripples = _React$useState[0], setRipples = _React$useState[1];
    var nextKey = React5.useRef(0);
    var rippleCallback = React5.useRef(null);
    React5.useEffect(function() {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    var ignoringMouseDown = React5.useRef(false);
    var startTimer = React5.useRef(null);
    var startTimerCommit = React5.useRef(null);
    var container = React5.useRef(null);
    React5.useEffect(function() {
      return function() {
        clearTimeout(startTimer.current);
      };
    }, []);
    var startCommit = React5.useCallback(function(params) {
      var pulsate2 = params.pulsate, rippleX = params.rippleX, rippleY = params.rippleY, rippleSize = params.rippleSize, cb = params.cb;
      setRipples(function(oldRipples) {
        return [].concat(_toConsumableArray(oldRipples), [/* @__PURE__ */ React5.createElement(Ripple_default, {
          key: nextKey.current,
          classes,
          timeout: DURATION,
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize
        })]);
      });
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    var start = React5.useCallback(function() {
      var event2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var cb = arguments.length > 2 ? arguments[2] : void 0;
      var _options$pulsate = options.pulsate, pulsate2 = _options$pulsate === void 0 ? false : _options$pulsate, _options$center = options.center, center = _options$center === void 0 ? centerProp || options.pulsate : _options$center, _options$fakeElement = options.fakeElement, fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;
      if (event2.type === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if (event2.type === "touchstart") {
        ignoringMouseDown.current = true;
      }
      var element = fakeElement ? null : container.current;
      var rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      var rippleX;
      var rippleY;
      var rippleSize;
      if (center || event2.clientX === 0 && event2.clientY === 0 || !event2.clientX && !event2.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        var _ref4 = event2.touches ? event2.touches[0] : event2, clientX = _ref4.clientX, clientY = _ref4.clientY;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        var sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        var sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
      }
      if (event2.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = function() {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.current = setTimeout(function() {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          }, DELAY_RIPPLE);
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit]);
    var pulsate = React5.useCallback(function() {
      start({}, {
        pulsate: true
      });
    }, [start]);
    var stop = React5.useCallback(function(event2, cb) {
      clearTimeout(startTimer.current);
      if (event2.type === "touchend" && startTimerCommit.current) {
        event2.persist();
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.current = setTimeout(function() {
          stop(event2, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples(function(oldRipples) {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, []);
    React5.useImperativeHandle(ref, function() {
      return {
        pulsate,
        start,
        stop
      };
    }, [pulsate, start, stop]);
    return /* @__PURE__ */ React5.createElement("span", _extends({
      className: (0, import_clsx2.default)(classes.root, className),
      ref: container
    }, other), /* @__PURE__ */ React5.createElement(import_react_transition_group.TransitionGroup, {
      component: null,
      exit: true
    }, ripples));
  });
  true ? TouchRipple.propTypes = {
    center: import_prop_types2.default.bool,
    classes: import_prop_types2.default.object.isRequired,
    className: import_prop_types2.default.string
  } : void 0;
  var TouchRipple_default = withStyles_default(styles, {
    flip: false,
    name: "MuiTouchRipple"
  })(/* @__PURE__ */ React5.memo(TouchRipple));

  // node_modules/@material-ui/core/esm/ButtonBase/ButtonBase.js
  var styles3 = {
    root: {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      position: "relative",
      WebkitTapHighlightColor: "transparent",
      backgroundColor: "transparent",
      outline: 0,
      border: 0,
      margin: 0,
      borderRadius: 0,
      padding: 0,
      cursor: "pointer",
      userSelect: "none",
      verticalAlign: "middle",
      "-moz-appearance": "none",
      "-webkit-appearance": "none",
      textDecoration: "none",
      color: "inherit",
      "&::-moz-focus-inner": {
        borderStyle: "none"
      },
      "&$disabled": {
        pointerEvents: "none",
        cursor: "default"
      },
      "@media print": {
        colorAdjust: "exact"
      }
    },
    disabled: {},
    focusVisible: {}
  };
  var ButtonBase = /* @__PURE__ */ React6.forwardRef(function ButtonBase2(props, ref) {
    var action = props.action, buttonRefProp = props.buttonRef, _props$centerRipple = props.centerRipple, centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple, children = props.children, classes = props.classes, className = props.className, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableRipple = props.disableRipple, disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple, _props$disableTouchRi = props.disableTouchRipple, disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi, _props$focusRipple = props.focusRipple, focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple, focusVisibleClassName = props.focusVisibleClassName, onBlur = props.onBlur, onClick = props.onClick, onFocus = props.onFocus, onFocusVisible = props.onFocusVisible, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, onMouseDown = props.onMouseDown, onMouseLeave = props.onMouseLeave, onMouseUp = props.onMouseUp, onTouchEnd = props.onTouchEnd, onTouchMove = props.onTouchMove, onTouchStart = props.onTouchStart, onDragLeave = props.onDragLeave, _props$tabIndex = props.tabIndex, tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex, TouchRippleProps = props.TouchRippleProps, _props$type = props.type, type = _props$type === void 0 ? "button" : _props$type, other = _objectWithoutProperties(props, ["action", "buttonRef", "centerRipple", "children", "classes", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "onDragLeave", "tabIndex", "TouchRippleProps", "type"]);
    var buttonRef = React6.useRef(null);
    function getButtonNode() {
      return ReactDOM2.findDOMNode(buttonRef.current);
    }
    var rippleRef = React6.useRef(null);
    var _React$useState = React6.useState(false), focusVisible = _React$useState[0], setFocusVisible = _React$useState[1];
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    var _useIsFocusVisible = useIsFocusVisible(), isFocusVisible2 = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
    React6.useImperativeHandle(action, function() {
      return {
        focusVisible: function focusVisible2() {
          setFocusVisible(true);
          buttonRef.current.focus();
        }
      };
    }, []);
    React6.useEffect(function() {
      if (focusVisible && focusRipple && !disableRipple) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible]);
    function useRippleHandler(rippleAction, eventCallback) {
      var skipRippleAction = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : disableTouchRipple;
      return useEventCallback(function(event2) {
        if (eventCallback) {
          eventCallback(event2);
        }
        var ignore = skipRippleAction;
        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event2);
        }
        return true;
      });
    }
    var handleMouseDown = useRippleHandler("start", onMouseDown);
    var handleDragLeave = useRippleHandler("stop", onDragLeave);
    var handleMouseUp = useRippleHandler("stop", onMouseUp);
    var handleMouseLeave = useRippleHandler("stop", function(event2) {
      if (focusVisible) {
        event2.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event2);
      }
    });
    var handleTouchStart = useRippleHandler("start", onTouchStart);
    var handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    var handleTouchMove = useRippleHandler("stop", onTouchMove);
    var handleBlur = useRippleHandler("stop", function(event2) {
      if (focusVisible) {
        onBlurVisible(event2);
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event2);
      }
    }, false);
    var handleFocus = useEventCallback(function(event2) {
      if (!buttonRef.current) {
        buttonRef.current = event2.currentTarget;
      }
      if (isFocusVisible2(event2)) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event2);
        }
      }
      if (onFocus) {
        onFocus(event2);
      }
    });
    var isNonNativeButton = function isNonNativeButton2() {
      var button = getButtonNode();
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    var keydownRef = React6.useRef(false);
    var handleKeyDown2 = useEventCallback(function(event2) {
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event2.key === " ") {
        keydownRef.current = true;
        event2.persist();
        rippleRef.current.stop(event2, function() {
          rippleRef.current.start(event2);
        });
      }
      if (event2.target === event2.currentTarget && isNonNativeButton() && event2.key === " ") {
        event2.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event2);
      }
      if (event2.target === event2.currentTarget && isNonNativeButton() && event2.key === "Enter" && !disabled) {
        event2.preventDefault();
        if (onClick) {
          onClick(event2);
        }
      }
    });
    var handleKeyUp = useEventCallback(function(event2) {
      if (focusRipple && event2.key === " " && rippleRef.current && focusVisible && !event2.defaultPrevented) {
        keydownRef.current = false;
        event2.persist();
        rippleRef.current.stop(event2, function() {
          rippleRef.current.pulsate(event2);
        });
      }
      if (onKeyUp) {
        onKeyUp(event2);
      }
      if (onClick && event2.target === event2.currentTarget && isNonNativeButton() && event2.key === " " && !event2.defaultPrevented) {
        onClick(event2);
      }
    });
    var ComponentProp = component;
    if (ComponentProp === "button" && other.href) {
      ComponentProp = "a";
    }
    var buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type;
      buttonProps.disabled = disabled;
    } else {
      if (ComponentProp !== "a" || !other.href) {
        buttonProps.role = "button";
      }
      buttonProps["aria-disabled"] = disabled;
    }
    var handleUserRef = useForkRef(buttonRefProp, ref);
    var handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
    var handleRef = useForkRef(handleUserRef, handleOwnRef);
    var _React$useState2 = React6.useState(false), mountedState = _React$useState2[0], setMountedState = _React$useState2[1];
    React6.useEffect(function() {
      setMountedState(true);
    }, []);
    var enableTouchRipple = mountedState && !disableRipple && !disabled;
    if (true) {
      React6.useEffect(function() {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(["Material-UI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
        }
      }, [enableTouchRipple]);
    }
    return /* @__PURE__ */ React6.createElement(ComponentProp, _extends({
      className: (0, import_clsx3.default)(classes.root, className, focusVisible && [classes.focusVisible, focusVisibleClassName], disabled && classes.disabled),
      onBlur: handleBlur,
      onClick,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex
    }, buttonProps, other), children, enableTouchRipple ? /* @__PURE__ */ React6.createElement(TouchRipple_default, _extends({
      ref: rippleRef,
      center: centerRipple
    }, TouchRippleProps)) : null);
  });
  true ? ButtonBase.propTypes = {
    action: import_utils4.refType,
    buttonRef: deprecatedPropType(import_utils4.refType, "Use `ref` instead."),
    centerRipple: import_prop_types3.default.bool,
    children: import_prop_types3.default.node,
    classes: import_prop_types3.default.object,
    className: import_prop_types3.default.string,
    component: import_utils4.elementTypeAcceptingRef,
    disabled: import_prop_types3.default.bool,
    disableRipple: import_prop_types3.default.bool,
    disableTouchRipple: import_prop_types3.default.bool,
    focusRipple: import_prop_types3.default.bool,
    focusVisibleClassName: import_prop_types3.default.string,
    href: import_prop_types3.default.string,
    onBlur: import_prop_types3.default.func,
    onClick: import_prop_types3.default.func,
    onDragLeave: import_prop_types3.default.func,
    onFocus: import_prop_types3.default.func,
    onFocusVisible: import_prop_types3.default.func,
    onKeyDown: import_prop_types3.default.func,
    onKeyUp: import_prop_types3.default.func,
    onMouseDown: import_prop_types3.default.func,
    onMouseLeave: import_prop_types3.default.func,
    onMouseUp: import_prop_types3.default.func,
    onTouchEnd: import_prop_types3.default.func,
    onTouchMove: import_prop_types3.default.func,
    onTouchStart: import_prop_types3.default.func,
    tabIndex: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string]),
    TouchRippleProps: import_prop_types3.default.object,
    type: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["button", "reset", "submit"]), import_prop_types3.default.string])
  } : void 0;
  var ButtonBase_default = withStyles_default(styles3, {
    name: "MuiButtonBase"
  })(ButtonBase);

  // node_modules/@material-ui/core/esm/utils/capitalize.js
  function capitalize(string) {
    if (typeof string !== "string") {
      throw new Error(true ? "Material-UI: capitalize(string) expects a string argument." : (0, import_utils.formatMuiErrorMessage)(7));
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  // node_modules/@material-ui/core/esm/utils/unsupportedProp.js
  function unsupportedProp(props, propName, componentName, location, propFullName) {
    if (false) {
      return null;
    }
    var propFullNameSafe = propFullName || propName;
    if (typeof props[propName] !== "undefined") {
      return new Error("The prop `".concat(propFullNameSafe, "` is not supported. Please remove it."));
    }
    return null;
  }

  // node_modules/@material-ui/core/esm/Tab/Tab.js
  var styles4 = function styles5(theme2) {
    var _extends2;
    return {
      root: _extends({}, theme2.typography.button, (_extends2 = {
        maxWidth: 264,
        minWidth: 72,
        position: "relative",
        boxSizing: "border-box",
        minHeight: 48,
        flexShrink: 0,
        padding: "6px 12px"
      }, _defineProperty(_extends2, theme2.breakpoints.up("sm"), {
        padding: "6px 24px"
      }), _defineProperty(_extends2, "overflow", "hidden"), _defineProperty(_extends2, "whiteSpace", "normal"), _defineProperty(_extends2, "textAlign", "center"), _defineProperty(_extends2, theme2.breakpoints.up("sm"), {
        minWidth: 160
      }), _extends2)),
      labelIcon: {
        minHeight: 72,
        paddingTop: 9,
        "& $wrapper > *:first-child": {
          marginBottom: 6
        }
      },
      textColorInherit: {
        color: "inherit",
        opacity: 0.7,
        "&$selected": {
          opacity: 1
        },
        "&$disabled": {
          opacity: 0.5
        }
      },
      textColorPrimary: {
        color: theme2.palette.text.secondary,
        "&$selected": {
          color: theme2.palette.primary.main
        },
        "&$disabled": {
          color: theme2.palette.text.disabled
        }
      },
      textColorSecondary: {
        color: theme2.palette.text.secondary,
        "&$selected": {
          color: theme2.palette.secondary.main
        },
        "&$disabled": {
          color: theme2.palette.text.disabled
        }
      },
      selected: {},
      disabled: {},
      fullWidth: {
        flexShrink: 1,
        flexGrow: 1,
        flexBasis: 0,
        maxWidth: "none"
      },
      wrapped: {
        fontSize: theme2.typography.pxToRem(12),
        lineHeight: 1.5
      },
      wrapper: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        width: "100%",
        flexDirection: "column"
      }
    };
  };
  var Tab = /* @__PURE__ */ React7.forwardRef(function Tab2(props, ref) {
    var classes = props.classes, className = props.className, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, fullWidth = props.fullWidth, icon = props.icon, indicator = props.indicator, label = props.label, onChange = props.onChange, onClick = props.onClick, onFocus = props.onFocus, selected = props.selected, selectionFollowsFocus = props.selectionFollowsFocus, _props$textColor = props.textColor, textColor = _props$textColor === void 0 ? "inherit" : _props$textColor, value = props.value, _props$wrapped = props.wrapped, wrapped = _props$wrapped === void 0 ? false : _props$wrapped, other = _objectWithoutProperties(props, ["classes", "className", "disabled", "disableFocusRipple", "fullWidth", "icon", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"]);
    var handleClick = function handleClick2(event2) {
      if (onChange) {
        onChange(event2, value);
      }
      if (onClick) {
        onClick(event2);
      }
    };
    var handleFocus = function handleFocus2(event2) {
      if (selectionFollowsFocus && !selected && onChange) {
        onChange(event2, value);
      }
      if (onFocus) {
        onFocus(event2);
      }
    };
    return /* @__PURE__ */ React7.createElement(ButtonBase_default, _extends({
      focusRipple: !disableFocusRipple,
      className: (0, import_clsx4.default)(classes.root, classes["textColor".concat(capitalize(textColor))], className, disabled && classes.disabled, selected && classes.selected, label && icon && classes.labelIcon, fullWidth && classes.fullWidth, wrapped && classes.wrapped),
      ref,
      role: "tab",
      "aria-selected": selected,
      disabled,
      onClick: handleClick,
      onFocus: handleFocus,
      tabIndex: selected ? 0 : -1
    }, other), /* @__PURE__ */ React7.createElement("span", {
      className: classes.wrapper
    }, icon, label), indicator);
  });
  true ? Tab.propTypes = {
    children: unsupportedProp,
    classes: import_prop_types4.default.object.isRequired,
    className: import_prop_types4.default.string,
    disabled: import_prop_types4.default.bool,
    disableFocusRipple: import_prop_types4.default.bool,
    disableRipple: import_prop_types4.default.bool,
    fullWidth: import_prop_types4.default.bool,
    icon: import_prop_types4.default.node,
    indicator: import_prop_types4.default.node,
    label: import_prop_types4.default.node,
    onChange: import_prop_types4.default.func,
    onClick: import_prop_types4.default.func,
    onFocus: import_prop_types4.default.func,
    selected: import_prop_types4.default.bool,
    selectionFollowsFocus: import_prop_types4.default.bool,
    textColor: import_prop_types4.default.oneOf(["secondary", "primary", "inherit"]),
    value: import_prop_types4.default.any,
    wrapped: import_prop_types4.default.bool
  } : void 0;
  var Tab_default = withStyles_default(styles4, {
    name: "MuiTab"
  })(Tab);

  // node_modules/@material-ui/core/esm/Tabs/Tabs.js
  var React16 = __toESM(require_react());
  var import_react_is = __toESM(require_react_is2());
  var import_prop_types9 = __toESM(require_prop_types());
  var import_clsx8 = __toESM(require_clsx());
  var import_utils6 = __toESM(require_utils());

  // node_modules/@material-ui/core/esm/utils/debounce.js
  function debounce(func) {
    var wait = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 166;
    var timeout;
    function debounced() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var that = this;
      var later = function later2() {
        func.apply(that, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    }
    debounced.clear = function() {
      clearTimeout(timeout);
    };
    return debounced;
  }

  // node_modules/@material-ui/core/esm/utils/ownerDocument.js
  function ownerDocument(node) {
    return node && node.ownerDocument || document;
  }

  // node_modules/@material-ui/core/esm/utils/ownerWindow.js
  function ownerWindow(node) {
    var doc = ownerDocument(node);
    return doc.defaultView || window;
  }

  // node_modules/@material-ui/core/esm/utils/scrollLeft.js
  var cachedType;
  function detectScrollType() {
    if (cachedType) {
      return cachedType;
    }
    var dummy = document.createElement("div");
    var container = document.createElement("div");
    container.style.width = "10px";
    container.style.height = "1px";
    dummy.appendChild(container);
    dummy.dir = "rtl";
    dummy.style.fontSize = "14px";
    dummy.style.width = "4px";
    dummy.style.height = "1px";
    dummy.style.position = "absolute";
    dummy.style.top = "-1000px";
    dummy.style.overflow = "scroll";
    document.body.appendChild(dummy);
    cachedType = "reverse";
    if (dummy.scrollLeft > 0) {
      cachedType = "default";
    } else {
      dummy.scrollLeft = 1;
      if (dummy.scrollLeft === 0) {
        cachedType = "negative";
      }
    }
    document.body.removeChild(dummy);
    return cachedType;
  }
  function getNormalizedScrollLeft(element, direction) {
    var scrollLeft = element.scrollLeft;
    if (direction !== "rtl") {
      return scrollLeft;
    }
    var type = detectScrollType();
    switch (type) {
      case "negative":
        return element.scrollWidth - element.clientWidth + scrollLeft;
      case "reverse":
        return element.scrollWidth - element.clientWidth - scrollLeft;
      default:
        return scrollLeft;
    }
  }

  // node_modules/@material-ui/core/esm/internal/animate.js
  function easeInOutSin(time) {
    return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
  }
  function animate(property, element, to) {
    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    var cb = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : function() {
    };
    var _options$ease = options.ease, ease = _options$ease === void 0 ? easeInOutSin : _options$ease, _options$duration = options.duration, duration2 = _options$duration === void 0 ? 300 : _options$duration;
    var start = null;
    var from = element[property];
    var cancelled = false;
    var cancel = function cancel2() {
      cancelled = true;
    };
    var step = function step2(timestamp) {
      if (cancelled) {
        cb(new Error("Animation cancelled"));
        return;
      }
      if (start === null) {
        start = timestamp;
      }
      var time = Math.min(1, (timestamp - start) / duration2);
      element[property] = ease(time) * (to - from) + from;
      if (time >= 1) {
        requestAnimationFrame(function() {
          cb(null);
        });
        return;
      }
      requestAnimationFrame(step2);
    };
    if (from === to) {
      cb(new Error("Element already at target position"));
      return cancel;
    }
    requestAnimationFrame(step);
    return cancel;
  }

  // node_modules/@material-ui/core/esm/Tabs/ScrollbarSize.js
  var React8 = __toESM(require_react());
  var import_prop_types5 = __toESM(require_prop_types());
  var styles6 = {
    width: 99,
    height: 99,
    position: "absolute",
    top: -9999,
    overflow: "scroll"
  };
  function ScrollbarSize(props) {
    var onChange = props.onChange, other = _objectWithoutProperties(props, ["onChange"]);
    var scrollbarHeight = React8.useRef();
    var nodeRef = React8.useRef(null);
    var setMeasurements = function setMeasurements2() {
      scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
    };
    React8.useEffect(function() {
      var handleResize = debounce(function() {
        var prevHeight = scrollbarHeight.current;
        setMeasurements();
        if (prevHeight !== scrollbarHeight.current) {
          onChange(scrollbarHeight.current);
        }
      });
      window.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        window.removeEventListener("resize", handleResize);
      };
    }, [onChange]);
    React8.useEffect(function() {
      setMeasurements();
      onChange(scrollbarHeight.current);
    }, [onChange]);
    return /* @__PURE__ */ React8.createElement("div", _extends({
      style: styles6,
      ref: nodeRef
    }, other));
  }
  true ? ScrollbarSize.propTypes = {
    onChange: import_prop_types5.default.func.isRequired
  } : void 0;

  // node_modules/@material-ui/core/esm/Tabs/TabIndicator.js
  var React9 = __toESM(require_react());
  var import_prop_types6 = __toESM(require_prop_types());
  var import_clsx5 = __toESM(require_clsx());
  var styles7 = function styles8(theme2) {
    return {
      root: {
        position: "absolute",
        height: 2,
        bottom: 0,
        width: "100%",
        transition: theme2.transitions.create()
      },
      colorPrimary: {
        backgroundColor: theme2.palette.primary.main
      },
      colorSecondary: {
        backgroundColor: theme2.palette.secondary.main
      },
      vertical: {
        height: "100%",
        width: 2,
        right: 0
      }
    };
  };
  var TabIndicator = /* @__PURE__ */ React9.forwardRef(function TabIndicator2(props, ref) {
    var classes = props.classes, className = props.className, color = props.color, orientation = props.orientation, other = _objectWithoutProperties(props, ["classes", "className", "color", "orientation"]);
    return /* @__PURE__ */ React9.createElement("span", _extends({
      className: (0, import_clsx5.default)(classes.root, classes["color".concat(capitalize(color))], className, orientation === "vertical" && classes.vertical),
      ref
    }, other));
  });
  true ? TabIndicator.propTypes = {
    classes: import_prop_types6.default.object.isRequired,
    className: import_prop_types6.default.string,
    color: import_prop_types6.default.oneOf(["primary", "secondary"]).isRequired,
    orientation: import_prop_types6.default.oneOf(["horizontal", "vertical"]).isRequired
  } : void 0;
  var TabIndicator_default = withStyles_default(styles7, {
    name: "PrivateTabIndicator"
  })(TabIndicator);

  // node_modules/@material-ui/core/esm/TabScrollButton/TabScrollButton.js
  var React14 = __toESM(require_react());
  var import_prop_types8 = __toESM(require_prop_types());
  var import_clsx7 = __toESM(require_clsx());

  // node_modules/@material-ui/core/esm/internal/svg-icons/KeyboardArrowLeft.js
  var React12 = __toESM(require_react());

  // node_modules/@material-ui/core/esm/utils/createSvgIcon.js
  var import_react = __toESM(require_react());

  // node_modules/@material-ui/core/esm/SvgIcon/SvgIcon.js
  var React10 = __toESM(require_react());
  var import_prop_types7 = __toESM(require_prop_types());
  var import_clsx6 = __toESM(require_clsx());
  var import_utils5 = __toESM(require_utils());
  var styles9 = function styles10(theme2) {
    return {
      root: {
        userSelect: "none",
        width: "1em",
        height: "1em",
        display: "inline-block",
        fill: "currentColor",
        flexShrink: 0,
        fontSize: theme2.typography.pxToRem(24),
        transition: theme2.transitions.create("fill", {
          duration: theme2.transitions.duration.shorter
        })
      },
      colorPrimary: {
        color: theme2.palette.primary.main
      },
      colorSecondary: {
        color: theme2.palette.secondary.main
      },
      colorAction: {
        color: theme2.palette.action.active
      },
      colorError: {
        color: theme2.palette.error.main
      },
      colorDisabled: {
        color: theme2.palette.action.disabled
      },
      fontSizeInherit: {
        fontSize: "inherit"
      },
      fontSizeSmall: {
        fontSize: theme2.typography.pxToRem(20)
      },
      fontSizeLarge: {
        fontSize: theme2.typography.pxToRem(35)
      }
    };
  };
  var SvgIcon = /* @__PURE__ */ React10.forwardRef(function SvgIcon2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "inherit" : _props$color, _props$component = props.component, Component4 = _props$component === void 0 ? "svg" : _props$component, _props$fontSize = props.fontSize, fontSize = _props$fontSize === void 0 ? "medium" : _props$fontSize, htmlColor = props.htmlColor, titleAccess = props.titleAccess, _props$viewBox = props.viewBox, viewBox = _props$viewBox === void 0 ? "0 0 24 24" : _props$viewBox, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"]);
    return /* @__PURE__ */ React10.createElement(Component4, _extends({
      className: (0, import_clsx6.default)(classes.root, className, color !== "inherit" && classes["color".concat(capitalize(color))], fontSize !== "default" && fontSize !== "medium" && classes["fontSize".concat(capitalize(fontSize))]),
      focusable: "false",
      viewBox,
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref
    }, other), children, titleAccess ? /* @__PURE__ */ React10.createElement("title", null, titleAccess) : null);
  });
  true ? SvgIcon.propTypes = {
    children: import_prop_types7.default.node,
    classes: import_prop_types7.default.object,
    className: import_prop_types7.default.string,
    color: import_prop_types7.default.oneOf(["action", "disabled", "error", "inherit", "primary", "secondary"]),
    component: import_prop_types7.default.elementType,
    fontSize: (0, import_utils5.chainPropTypes)(import_prop_types7.default.oneOf(["default", "inherit", "large", "medium", "small"]), function(props) {
      var fontSize = props.fontSize;
      if (fontSize === "default") {
        throw new Error('Material-UI: `fontSize="default"` is deprecated. Use `fontSize="medium"` instead.');
      }
      return null;
    }),
    htmlColor: import_prop_types7.default.string,
    shapeRendering: import_prop_types7.default.string,
    titleAccess: import_prop_types7.default.string,
    viewBox: import_prop_types7.default.string
  } : void 0;
  SvgIcon.muiName = "SvgIcon";
  var SvgIcon_default = withStyles_default(styles9, {
    name: "MuiSvgIcon"
  })(SvgIcon);

  // node_modules/@material-ui/core/esm/utils/createSvgIcon.js
  function createSvgIcon(path, displayName) {
    var Component4 = function Component5(props, ref) {
      return /* @__PURE__ */ import_react.default.createElement(SvgIcon_default, _extends({
        ref
      }, props), path);
    };
    if (true) {
      Component4.displayName = "".concat(displayName, "Icon");
    }
    Component4.muiName = SvgIcon_default.muiName;
    return /* @__PURE__ */ import_react.default.memo(/* @__PURE__ */ import_react.default.forwardRef(Component4));
  }

  // node_modules/@material-ui/core/esm/internal/svg-icons/KeyboardArrowLeft.js
  var KeyboardArrowLeft_default = createSvgIcon(/* @__PURE__ */ React12.createElement("path", {
    d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
  }), "KeyboardArrowLeft");

  // node_modules/@material-ui/core/esm/internal/svg-icons/KeyboardArrowRight.js
  var React13 = __toESM(require_react());
  var KeyboardArrowRight_default = createSvgIcon(/* @__PURE__ */ React13.createElement("path", {
    d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
  }), "KeyboardArrowRight");

  // node_modules/@material-ui/core/esm/TabScrollButton/TabScrollButton.js
  var styles11 = {
    root: {
      width: 40,
      flexShrink: 0,
      opacity: 0.8,
      "&$disabled": {
        opacity: 0
      }
    },
    vertical: {
      width: "100%",
      height: 40,
      "& svg": {
        transform: "rotate(90deg)"
      }
    },
    disabled: {}
  };
  var _ref = /* @__PURE__ */ React14.createElement(KeyboardArrowLeft_default, {
    fontSize: "small"
  });
  var _ref2 = /* @__PURE__ */ React14.createElement(KeyboardArrowRight_default, {
    fontSize: "small"
  });
  var TabScrollButton = /* @__PURE__ */ React14.forwardRef(function TabScrollButton2(props, ref) {
    var classes = props.classes, classNameProp = props.className, direction = props.direction, orientation = props.orientation, disabled = props.disabled, other = _objectWithoutProperties(props, ["classes", "className", "direction", "orientation", "disabled"]);
    return /* @__PURE__ */ React14.createElement(ButtonBase_default, _extends({
      component: "div",
      className: (0, import_clsx7.default)(classes.root, classNameProp, disabled && classes.disabled, orientation === "vertical" && classes.vertical),
      ref,
      role: null,
      tabIndex: null
    }, other), direction === "left" ? _ref : _ref2);
  });
  true ? TabScrollButton.propTypes = {
    children: import_prop_types8.default.node,
    classes: import_prop_types8.default.object,
    className: import_prop_types8.default.string,
    direction: import_prop_types8.default.oneOf(["left", "right"]).isRequired,
    disabled: import_prop_types8.default.bool,
    orientation: import_prop_types8.default.oneOf(["horizontal", "vertical"]).isRequired
  } : void 0;
  var TabScrollButton_default = withStyles_default(styles11, {
    name: "MuiTabScrollButton"
  })(TabScrollButton);

  // node_modules/@material-ui/core/esm/styles/useTheme.js
  var import_styles3 = __toESM(require_styles());
  var import_react2 = __toESM(require_react());
  function useTheme() {
    var theme2 = (0, import_styles3.useTheme)() || defaultTheme_default;
    if (true) {
      import_react2.default.useDebugValue(theme2);
    }
    return theme2;
  }

  // node_modules/@material-ui/core/esm/Tabs/Tabs.js
  var styles12 = function styles13(theme2) {
    return {
      root: {
        overflow: "hidden",
        minHeight: 48,
        WebkitOverflowScrolling: "touch",
        display: "flex"
      },
      vertical: {
        flexDirection: "column"
      },
      flexContainer: {
        display: "flex"
      },
      flexContainerVertical: {
        flexDirection: "column"
      },
      centered: {
        justifyContent: "center"
      },
      scroller: {
        position: "relative",
        display: "inline-block",
        flex: "1 1 auto",
        whiteSpace: "nowrap"
      },
      fixed: {
        overflowX: "hidden",
        width: "100%"
      },
      scrollable: {
        overflowX: "scroll",
        scrollbarWidth: "none",
        "&::-webkit-scrollbar": {
          display: "none"
        }
      },
      scrollButtons: {},
      scrollButtonsDesktop: _defineProperty({}, theme2.breakpoints.down("xs"), {
        display: "none"
      }),
      indicator: {}
    };
  };
  var Tabs = /* @__PURE__ */ React16.forwardRef(function Tabs2(props, ref) {
    var ariaLabel = props["aria-label"], ariaLabelledBy = props["aria-labelledby"], action = props.action, _props$centered = props.centered, centered = _props$centered === void 0 ? false : _props$centered, childrenProp = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component4 = _props$component === void 0 ? "div" : _props$component, _props$indicatorColor = props.indicatorColor, indicatorColor = _props$indicatorColor === void 0 ? "secondary" : _props$indicatorColor, onChange = props.onChange, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, _props$ScrollButtonCo = props.ScrollButtonComponent, ScrollButtonComponent = _props$ScrollButtonCo === void 0 ? TabScrollButton_default : _props$ScrollButtonCo, _props$scrollButtons = props.scrollButtons, scrollButtons = _props$scrollButtons === void 0 ? "auto" : _props$scrollButtons, selectionFollowsFocus = props.selectionFollowsFocus, _props$TabIndicatorPr = props.TabIndicatorProps, TabIndicatorProps = _props$TabIndicatorPr === void 0 ? {} : _props$TabIndicatorPr, TabScrollButtonProps = props.TabScrollButtonProps, _props$textColor = props.textColor, textColor = _props$textColor === void 0 ? "inherit" : _props$textColor, value = props.value, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["aria-label", "aria-labelledby", "action", "centered", "children", "classes", "className", "component", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant"]);
    var theme2 = useTheme();
    var scrollable = variant === "scrollable";
    var isRtl = theme2.direction === "rtl";
    var vertical = orientation === "vertical";
    var scrollStart = vertical ? "scrollTop" : "scrollLeft";
    var start = vertical ? "top" : "left";
    var end = vertical ? "bottom" : "right";
    var clientSize = vertical ? "clientHeight" : "clientWidth";
    var size = vertical ? "height" : "width";
    if (true) {
      if (centered && scrollable) {
        console.error('Material-UI: You can not use the `centered={true}` and `variant="scrollable"` properties at the same time on a `Tabs` component.');
      }
    }
    var _React$useState = React16.useState(false), mounted = _React$useState[0], setMounted = _React$useState[1];
    var _React$useState2 = React16.useState({}), indicatorStyle = _React$useState2[0], setIndicatorStyle = _React$useState2[1];
    var _React$useState3 = React16.useState({
      start: false,
      end: false
    }), displayScroll = _React$useState3[0], setDisplayScroll = _React$useState3[1];
    var _React$useState4 = React16.useState({
      overflow: "hidden",
      marginBottom: null
    }), scrollerStyle = _React$useState4[0], setScrollerStyle = _React$useState4[1];
    var valueToIndex = /* @__PURE__ */ new Map();
    var tabsRef = React16.useRef(null);
    var tabListRef = React16.useRef(null);
    var getTabsMeta = function getTabsMeta2() {
      var tabsNode = tabsRef.current;
      var tabsMeta;
      if (tabsNode) {
        var rect = tabsNode.getBoundingClientRect();
        tabsMeta = {
          clientWidth: tabsNode.clientWidth,
          scrollLeft: tabsNode.scrollLeft,
          scrollTop: tabsNode.scrollTop,
          scrollLeftNormalized: getNormalizedScrollLeft(tabsNode, theme2.direction),
          scrollWidth: tabsNode.scrollWidth,
          top: rect.top,
          bottom: rect.bottom,
          left: rect.left,
          right: rect.right
        };
      }
      var tabMeta;
      if (tabsNode && value !== false) {
        var _children = tabListRef.current.children;
        if (_children.length > 0) {
          var tab = _children[valueToIndex.get(value)];
          if (true) {
            if (!tab) {
              console.error(["Material-UI: The value provided to the Tabs component is invalid.", "None of the Tabs' children match with `".concat(value, "`."), valueToIndex.keys ? "You can provide one of the following values: ".concat(Array.from(valueToIndex.keys()).join(", "), ".") : null].join("\n"));
            }
          }
          tabMeta = tab ? tab.getBoundingClientRect() : null;
        }
      }
      return {
        tabsMeta,
        tabMeta
      };
    };
    var updateIndicatorState = useEventCallback(function() {
      var _newIndicatorStyle;
      var _getTabsMeta = getTabsMeta(), tabsMeta = _getTabsMeta.tabsMeta, tabMeta = _getTabsMeta.tabMeta;
      var startValue = 0;
      if (tabMeta && tabsMeta) {
        if (vertical) {
          startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
        } else {
          var correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
          startValue = tabMeta.left - tabsMeta.left + correction;
        }
      }
      var newIndicatorStyle = (_newIndicatorStyle = {}, _defineProperty(_newIndicatorStyle, start, startValue), _defineProperty(_newIndicatorStyle, size, tabMeta ? tabMeta[size] : 0), _newIndicatorStyle);
      if (isNaN(indicatorStyle[start]) || isNaN(indicatorStyle[size])) {
        setIndicatorStyle(newIndicatorStyle);
      } else {
        var dStart = Math.abs(indicatorStyle[start] - newIndicatorStyle[start]);
        var dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);
        if (dStart >= 1 || dSize >= 1) {
          setIndicatorStyle(newIndicatorStyle);
        }
      }
    });
    var scroll = function scroll2(scrollValue) {
      animate(scrollStart, tabsRef.current, scrollValue);
    };
    var moveTabsScroll = function moveTabsScroll2(delta) {
      var scrollValue = tabsRef.current[scrollStart];
      if (vertical) {
        scrollValue += delta;
      } else {
        scrollValue += delta * (isRtl ? -1 : 1);
        scrollValue *= isRtl && detectScrollType() === "reverse" ? -1 : 1;
      }
      scroll(scrollValue);
    };
    var handleStartScrollClick = function handleStartScrollClick2() {
      moveTabsScroll(-tabsRef.current[clientSize]);
    };
    var handleEndScrollClick = function handleEndScrollClick2() {
      moveTabsScroll(tabsRef.current[clientSize]);
    };
    var handleScrollbarSizeChange = React16.useCallback(function(scrollbarHeight) {
      setScrollerStyle({
        overflow: null,
        marginBottom: -scrollbarHeight
      });
    }, []);
    var getConditionalElements = function getConditionalElements2() {
      var conditionalElements2 = {};
      conditionalElements2.scrollbarSizeListener = scrollable ? /* @__PURE__ */ React16.createElement(ScrollbarSize, {
        className: classes.scrollable,
        onChange: handleScrollbarSizeChange
      }) : null;
      var scrollButtonsActive = displayScroll.start || displayScroll.end;
      var showScrollButtons = scrollable && (scrollButtons === "auto" && scrollButtonsActive || scrollButtons === "desktop" || scrollButtons === "on");
      conditionalElements2.scrollButtonStart = showScrollButtons ? /* @__PURE__ */ React16.createElement(ScrollButtonComponent, _extends({
        orientation,
        direction: isRtl ? "right" : "left",
        onClick: handleStartScrollClick,
        disabled: !displayScroll.start,
        className: (0, import_clsx8.default)(classes.scrollButtons, scrollButtons !== "on" && classes.scrollButtonsDesktop)
      }, TabScrollButtonProps)) : null;
      conditionalElements2.scrollButtonEnd = showScrollButtons ? /* @__PURE__ */ React16.createElement(ScrollButtonComponent, _extends({
        orientation,
        direction: isRtl ? "left" : "right",
        onClick: handleEndScrollClick,
        disabled: !displayScroll.end,
        className: (0, import_clsx8.default)(classes.scrollButtons, scrollButtons !== "on" && classes.scrollButtonsDesktop)
      }, TabScrollButtonProps)) : null;
      return conditionalElements2;
    };
    var scrollSelectedIntoView = useEventCallback(function() {
      var _getTabsMeta2 = getTabsMeta(), tabsMeta = _getTabsMeta2.tabsMeta, tabMeta = _getTabsMeta2.tabMeta;
      if (!tabMeta || !tabsMeta) {
        return;
      }
      if (tabMeta[start] < tabsMeta[start]) {
        var nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start] - tabsMeta[start]);
        scroll(nextScrollStart);
      } else if (tabMeta[end] > tabsMeta[end]) {
        var _nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end] - tabsMeta[end]);
        scroll(_nextScrollStart);
      }
    });
    var updateScrollButtonState = useEventCallback(function() {
      if (scrollable && scrollButtons !== "off") {
        var _tabsRef$current = tabsRef.current, scrollTop = _tabsRef$current.scrollTop, scrollHeight = _tabsRef$current.scrollHeight, clientHeight = _tabsRef$current.clientHeight, scrollWidth = _tabsRef$current.scrollWidth, clientWidth = _tabsRef$current.clientWidth;
        var showStartScroll;
        var showEndScroll;
        if (vertical) {
          showStartScroll = scrollTop > 1;
          showEndScroll = scrollTop < scrollHeight - clientHeight - 1;
        } else {
          var scrollLeft = getNormalizedScrollLeft(tabsRef.current, theme2.direction);
          showStartScroll = isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
          showEndScroll = !isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
        }
        if (showStartScroll !== displayScroll.start || showEndScroll !== displayScroll.end) {
          setDisplayScroll({
            start: showStartScroll,
            end: showEndScroll
          });
        }
      }
    });
    React16.useEffect(function() {
      var handleResize = debounce(function() {
        updateIndicatorState();
        updateScrollButtonState();
      });
      var win = ownerWindow(tabsRef.current);
      win.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        win.removeEventListener("resize", handleResize);
      };
    }, [updateIndicatorState, updateScrollButtonState]);
    var handleTabsScroll = React16.useCallback(debounce(function() {
      updateScrollButtonState();
    }));
    React16.useEffect(function() {
      return function() {
        handleTabsScroll.clear();
      };
    }, [handleTabsScroll]);
    React16.useEffect(function() {
      setMounted(true);
    }, []);
    React16.useEffect(function() {
      updateIndicatorState();
      updateScrollButtonState();
    });
    React16.useEffect(function() {
      scrollSelectedIntoView();
    }, [scrollSelectedIntoView, indicatorStyle]);
    React16.useImperativeHandle(action, function() {
      return {
        updateIndicator: updateIndicatorState,
        updateScrollButtons: updateScrollButtonState
      };
    }, [updateIndicatorState, updateScrollButtonState]);
    var indicator = /* @__PURE__ */ React16.createElement(TabIndicator_default, _extends({
      className: classes.indicator,
      orientation,
      color: indicatorColor
    }, TabIndicatorProps, {
      style: _extends({}, indicatorStyle, TabIndicatorProps.style)
    }));
    var childIndex = 0;
    var children = React16.Children.map(childrenProp, function(child) {
      if (!/* @__PURE__ */ React16.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is.isFragment)(child)) {
          console.error(["Material-UI: The Tabs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      var childValue = child.props.value === void 0 ? childIndex : child.props.value;
      valueToIndex.set(childValue, childIndex);
      var selected = childValue === value;
      childIndex += 1;
      return /* @__PURE__ */ React16.cloneElement(child, {
        fullWidth: variant === "fullWidth",
        indicator: selected && !mounted && indicator,
        selected,
        selectionFollowsFocus,
        onChange,
        textColor,
        value: childValue
      });
    });
    var handleKeyDown2 = function handleKeyDown3(event2) {
      var target = event2.target;
      var role = target.getAttribute("role");
      if (role !== "tab") {
        return;
      }
      var newFocusTarget = null;
      var previousItemKey = orientation !== "vertical" ? "ArrowLeft" : "ArrowUp";
      var nextItemKey = orientation !== "vertical" ? "ArrowRight" : "ArrowDown";
      if (orientation !== "vertical" && theme2.direction === "rtl") {
        previousItemKey = "ArrowRight";
        nextItemKey = "ArrowLeft";
      }
      switch (event2.key) {
        case previousItemKey:
          newFocusTarget = target.previousElementSibling || tabListRef.current.lastChild;
          break;
        case nextItemKey:
          newFocusTarget = target.nextElementSibling || tabListRef.current.firstChild;
          break;
        case "Home":
          newFocusTarget = tabListRef.current.firstChild;
          break;
        case "End":
          newFocusTarget = tabListRef.current.lastChild;
          break;
        default:
          break;
      }
      if (newFocusTarget !== null) {
        newFocusTarget.focus();
        event2.preventDefault();
      }
    };
    var conditionalElements = getConditionalElements();
    return /* @__PURE__ */ React16.createElement(Component4, _extends({
      className: (0, import_clsx8.default)(classes.root, className, vertical && classes.vertical),
      ref
    }, other), conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, /* @__PURE__ */ React16.createElement("div", {
      className: (0, import_clsx8.default)(classes.scroller, scrollable ? classes.scrollable : classes.fixed),
      style: scrollerStyle,
      ref: tabsRef,
      onScroll: handleTabsScroll
    }, /* @__PURE__ */ React16.createElement("div", {
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      className: (0, import_clsx8.default)(classes.flexContainer, vertical && classes.flexContainerVertical, centered && !scrollable && classes.centered),
      onKeyDown: handleKeyDown2,
      ref: tabListRef,
      role: "tablist"
    }, children), mounted && indicator), conditionalElements.scrollButtonEnd);
  });
  true ? Tabs.propTypes = {
    action: import_utils6.refType,
    "aria-label": import_prop_types9.default.string,
    "aria-labelledby": import_prop_types9.default.string,
    centered: import_prop_types9.default.bool,
    children: import_prop_types9.default.node,
    classes: import_prop_types9.default.object,
    className: import_prop_types9.default.string,
    component: import_prop_types9.default.elementType,
    indicatorColor: import_prop_types9.default.oneOf(["primary", "secondary"]),
    onChange: import_prop_types9.default.func,
    orientation: import_prop_types9.default.oneOf(["horizontal", "vertical"]),
    ScrollButtonComponent: import_prop_types9.default.elementType,
    scrollButtons: import_prop_types9.default.oneOf(["auto", "desktop", "off", "on"]),
    selectionFollowsFocus: import_prop_types9.default.bool,
    TabIndicatorProps: import_prop_types9.default.object,
    TabScrollButtonProps: import_prop_types9.default.object,
    textColor: import_prop_types9.default.oneOf(["inherit", "primary", "secondary"]),
    value: import_prop_types9.default.any,
    variant: import_prop_types9.default.oneOf(["fullWidth", "scrollable", "standard"])
  } : void 0;
  var Tabs_default = withStyles_default(styles12, {
    name: "MuiTabs"
  })(Tabs);

  // admin/src/components/settings.tsx
  var import_styles6 = __toESM(require_styles2());

  // node_modules/autobind-decorator/lib/esm/index.js
  function _typeof2(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof2 = function _typeof3(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof2 = function _typeof3(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof2(obj);
  }
  function boundMethod(target, key, descriptor) {
    var fn = descriptor.value;
    if (typeof fn !== "function") {
      throw new TypeError("@boundMethod decorator can only be applied to methods not: ".concat(_typeof2(fn)));
    }
    var definingProperty = false;
    return {
      configurable: true,
      get: function get() {
        if (definingProperty || this === target.prototype || this.hasOwnProperty(key) || typeof fn !== "function") {
          return fn;
        }
        var boundFn = fn.bind(this);
        definingProperty = true;
        Object.defineProperty(this, key, {
          configurable: true,
          get: function get2() {
            return boundFn;
          },
          set: function set(value) {
            fn = value;
            delete this[key];
          }
        });
        definingProperty = false;
        return boundFn;
      },
      set: function set(value) {
        fn = value;
      }
    };
  }

  // admin/src/components/settings.tsx
  var import_react13 = __toESM(require_react());

  // src/lib/shared.ts
  function toHexString(value, length) {
    length = length || 2;
    let str = value.toString(16).toUpperCase();
    while (str.length < length) {
      str = "0" + str;
    }
    return "0x" + str;
  }

  // admin/src/components/ezo-general.tsx
  var import_i18n8 = __toESM(require_i18n());

  // node_modules/@material-ui/core/esm/Grid/Grid.js
  var React17 = __toESM(require_react());
  var import_prop_types10 = __toESM(require_prop_types());
  var import_clsx9 = __toESM(require_clsx());

  // node_modules/@material-ui/core/esm/utils/requirePropFactory.js
  function requirePropFactory(componentNameInError) {
    if (false) {
      return function() {
        return null;
      };
    }
    var requireProp = function requireProp2(requiredProp) {
      return function(props, propName, componentName, location, propFullName) {
        var propFullNameSafe = propFullName || propName;
        if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
          return new Error("The prop `".concat(propFullNameSafe, "` of ") + "`".concat(componentNameInError, "` must be used on `").concat(requiredProp, "`."));
        }
        return null;
      };
    };
    return requireProp;
  }

  // node_modules/@material-ui/core/esm/Grid/Grid.js
  var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  function generateGrid(globalStyles, theme2, breakpoint) {
    var styles61 = {};
    GRID_SIZES.forEach(function(size) {
      var key = "grid-".concat(breakpoint, "-").concat(size);
      if (size === true) {
        styles61[key] = {
          flexBasis: 0,
          flexGrow: 1,
          maxWidth: "100%"
        };
        return;
      }
      if (size === "auto") {
        styles61[key] = {
          flexBasis: "auto",
          flexGrow: 0,
          maxWidth: "none"
        };
        return;
      }
      var width = "".concat(Math.round(size / 12 * 1e8) / 1e6, "%");
      styles61[key] = {
        flexBasis: width,
        flexGrow: 0,
        maxWidth: width
      };
    });
    if (breakpoint === "xs") {
      _extends(globalStyles, styles61);
    } else {
      globalStyles[theme2.breakpoints.up(breakpoint)] = styles61;
    }
  }
  function getOffset(val) {
    var div = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var parse = parseFloat(val);
    return "".concat(parse / div).concat(String(val).replace(String(parse), "") || "px");
  }
  function generateGutter(theme2, breakpoint) {
    var styles61 = {};
    SPACINGS.forEach(function(spacing2) {
      var themeSpacing = theme2.spacing(spacing2);
      if (themeSpacing === 0) {
        return;
      }
      styles61["spacing-".concat(breakpoint, "-").concat(spacing2)] = {
        margin: "-".concat(getOffset(themeSpacing, 2)),
        width: "calc(100% + ".concat(getOffset(themeSpacing), ")"),
        "& > $item": {
          padding: getOffset(themeSpacing, 2)
        }
      };
    });
    return styles61;
  }
  var styles14 = function styles15(theme2) {
    return _extends({
      root: {},
      container: {
        boxSizing: "border-box",
        display: "flex",
        flexWrap: "wrap",
        width: "100%"
      },
      item: {
        boxSizing: "border-box",
        margin: "0"
      },
      zeroMinWidth: {
        minWidth: 0
      },
      "direction-xs-column": {
        flexDirection: "column"
      },
      "direction-xs-column-reverse": {
        flexDirection: "column-reverse"
      },
      "direction-xs-row-reverse": {
        flexDirection: "row-reverse"
      },
      "wrap-xs-nowrap": {
        flexWrap: "nowrap"
      },
      "wrap-xs-wrap-reverse": {
        flexWrap: "wrap-reverse"
      },
      "align-items-xs-center": {
        alignItems: "center"
      },
      "align-items-xs-flex-start": {
        alignItems: "flex-start"
      },
      "align-items-xs-flex-end": {
        alignItems: "flex-end"
      },
      "align-items-xs-baseline": {
        alignItems: "baseline"
      },
      "align-content-xs-center": {
        alignContent: "center"
      },
      "align-content-xs-flex-start": {
        alignContent: "flex-start"
      },
      "align-content-xs-flex-end": {
        alignContent: "flex-end"
      },
      "align-content-xs-space-between": {
        alignContent: "space-between"
      },
      "align-content-xs-space-around": {
        alignContent: "space-around"
      },
      "justify-content-xs-center": {
        justifyContent: "center"
      },
      "justify-content-xs-flex-end": {
        justifyContent: "flex-end"
      },
      "justify-content-xs-space-between": {
        justifyContent: "space-between"
      },
      "justify-content-xs-space-around": {
        justifyContent: "space-around"
      },
      "justify-content-xs-space-evenly": {
        justifyContent: "space-evenly"
      }
    }, generateGutter(theme2, "xs"), theme2.breakpoints.keys.reduce(function(accumulator, key) {
      generateGrid(accumulator, theme2, key);
      return accumulator;
    }, {}));
  };
  var Grid = /* @__PURE__ */ React17.forwardRef(function Grid2(props, ref) {
    var _props$alignContent = props.alignContent, alignContent = _props$alignContent === void 0 ? "stretch" : _props$alignContent, _props$alignItems = props.alignItems, alignItems = _props$alignItems === void 0 ? "stretch" : _props$alignItems, classes = props.classes, classNameProp = props.className, _props$component = props.component, Component4 = _props$component === void 0 ? "div" : _props$component, _props$container = props.container, container = _props$container === void 0 ? false : _props$container, _props$direction = props.direction, direction = _props$direction === void 0 ? "row" : _props$direction, _props$item = props.item, item = _props$item === void 0 ? false : _props$item, justify = props.justify, _props$justifyContent = props.justifyContent, justifyContent = _props$justifyContent === void 0 ? "flex-start" : _props$justifyContent, _props$lg = props.lg, lg = _props$lg === void 0 ? false : _props$lg, _props$md = props.md, md = _props$md === void 0 ? false : _props$md, _props$sm = props.sm, sm = _props$sm === void 0 ? false : _props$sm, _props$spacing = props.spacing, spacing2 = _props$spacing === void 0 ? 0 : _props$spacing, _props$wrap = props.wrap, wrap = _props$wrap === void 0 ? "wrap" : _props$wrap, _props$xl = props.xl, xl = _props$xl === void 0 ? false : _props$xl, _props$xs = props.xs, xs = _props$xs === void 0 ? false : _props$xs, _props$zeroMinWidth = props.zeroMinWidth, zeroMinWidth = _props$zeroMinWidth === void 0 ? false : _props$zeroMinWidth, other = _objectWithoutProperties(props, ["alignContent", "alignItems", "classes", "className", "component", "container", "direction", "item", "justify", "justifyContent", "lg", "md", "sm", "spacing", "wrap", "xl", "xs", "zeroMinWidth"]);
    var className = (0, import_clsx9.default)(classes.root, classNameProp, container && [classes.container, spacing2 !== 0 && classes["spacing-xs-".concat(String(spacing2))]], item && classes.item, zeroMinWidth && classes.zeroMinWidth, direction !== "row" && classes["direction-xs-".concat(String(direction))], wrap !== "wrap" && classes["wrap-xs-".concat(String(wrap))], alignItems !== "stretch" && classes["align-items-xs-".concat(String(alignItems))], alignContent !== "stretch" && classes["align-content-xs-".concat(String(alignContent))], (justify || justifyContent) !== "flex-start" && classes["justify-content-xs-".concat(String(justify || justifyContent))], xs !== false && classes["grid-xs-".concat(String(xs))], sm !== false && classes["grid-sm-".concat(String(sm))], md !== false && classes["grid-md-".concat(String(md))], lg !== false && classes["grid-lg-".concat(String(lg))], xl !== false && classes["grid-xl-".concat(String(xl))]);
    return /* @__PURE__ */ React17.createElement(Component4, _extends({
      className,
      ref
    }, other));
  });
  true ? Grid.propTypes = {
    alignContent: import_prop_types10.default.oneOf(["stretch", "center", "flex-start", "flex-end", "space-between", "space-around"]),
    alignItems: import_prop_types10.default.oneOf(["flex-start", "center", "flex-end", "stretch", "baseline"]),
    children: import_prop_types10.default.node,
    classes: import_prop_types10.default.object.isRequired,
    className: import_prop_types10.default.string,
    component: import_prop_types10.default.elementType,
    container: import_prop_types10.default.bool,
    direction: import_prop_types10.default.oneOf(["row", "row-reverse", "column", "column-reverse"]),
    item: import_prop_types10.default.bool,
    justify: deprecatedPropType(import_prop_types10.default.oneOf(["flex-start", "center", "flex-end", "space-between", "space-around", "space-evenly"]), "Use `justifyContent` instead, the prop was renamed."),
    justifyContent: import_prop_types10.default.oneOf(["flex-start", "center", "flex-end", "space-between", "space-around", "space-evenly"]),
    lg: import_prop_types10.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    md: import_prop_types10.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    sm: import_prop_types10.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    spacing: import_prop_types10.default.oneOf(SPACINGS),
    wrap: import_prop_types10.default.oneOf(["nowrap", "wrap", "wrap-reverse"]),
    xl: import_prop_types10.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    xs: import_prop_types10.default.oneOf([false, "auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    zeroMinWidth: import_prop_types10.default.bool
  } : void 0;
  var StyledGrid = withStyles_default(styles14, {
    name: "MuiGrid"
  })(Grid);
  if (true) {
    requireProp = requirePropFactory("Grid");
    StyledGrid.propTypes = _extends({}, StyledGrid.propTypes, {
      alignContent: requireProp("container"),
      alignItems: requireProp("container"),
      direction: requireProp("container"),
      justifyContent: requireProp("container"),
      lg: requireProp("item"),
      md: requireProp("item"),
      sm: requireProp("item"),
      spacing: requireProp("container"),
      wrap: requireProp("container"),
      xs: requireProp("item"),
      zeroMinWidth: requireProp("item")
    });
  }
  var requireProp;
  var Grid_default = StyledGrid;

  // node_modules/@material-ui/core/esm/TextField/TextField.js
  var React48 = __toESM(require_react());
  var import_prop_types35 = __toESM(require_prop_types());
  var import_clsx25 = __toESM(require_clsx());
  var import_utils23 = __toESM(require_utils());

  // node_modules/@material-ui/core/esm/Input/Input.js
  var React21 = __toESM(require_react());
  var import_prop_types13 = __toESM(require_prop_types());
  var import_clsx11 = __toESM(require_clsx());
  var import_utils9 = __toESM(require_utils());

  // node_modules/@material-ui/core/esm/InputBase/InputBase.js
  var React20 = __toESM(require_react());
  var import_prop_types12 = __toESM(require_prop_types());
  var import_clsx10 = __toESM(require_clsx());
  var import_utils7 = __toESM(require_utils());

  // node_modules/@material-ui/core/esm/FormControl/formControlState.js
  function formControlState(_ref4) {
    var props = _ref4.props, states = _ref4.states, muiFormControl = _ref4.muiFormControl;
    return states.reduce(function(acc, state) {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }

  // node_modules/@material-ui/core/esm/FormControl/FormControlContext.js
  var React18 = __toESM(require_react());
  var FormControlContext = React18.createContext();
  if (true) {
    FormControlContext.displayName = "FormControlContext";
  }
  function useFormControl() {
    return React18.useContext(FormControlContext);
  }
  var FormControlContext_default = FormControlContext;

  // node_modules/@material-ui/core/esm/TextareaAutosize/TextareaAutosize.js
  var React19 = __toESM(require_react());
  var import_prop_types11 = __toESM(require_prop_types());
  function getStyleValue(computedStyle, property) {
    return parseInt(computedStyle[property], 10) || 0;
  }
  var useEnhancedEffect3 = typeof window !== "undefined" ? React19.useLayoutEffect : React19.useEffect;
  var styles16 = {
    shadow: {
      visibility: "hidden",
      position: "absolute",
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      transform: "translateZ(0)"
    }
  };
  var TextareaAutosize = /* @__PURE__ */ React19.forwardRef(function TextareaAutosize2(props, ref) {
    var onChange = props.onChange, rows = props.rows, rowsMax = props.rowsMax, rowsMinProp = props.rowsMin, maxRowsProp = props.maxRows, _props$minRows = props.minRows, minRowsProp = _props$minRows === void 0 ? 1 : _props$minRows, style = props.style, value = props.value, other = _objectWithoutProperties(props, ["onChange", "rows", "rowsMax", "rowsMin", "maxRows", "minRows", "style", "value"]);
    var maxRows = maxRowsProp || rowsMax;
    var minRows = rows || rowsMinProp || minRowsProp;
    var _React$useRef = React19.useRef(value != null), isControlled = _React$useRef.current;
    var inputRef = React19.useRef(null);
    var handleRef = useForkRef(ref, inputRef);
    var shadowRef = React19.useRef(null);
    var renders = React19.useRef(0);
    var _React$useState = React19.useState({}), state = _React$useState[0], setState = _React$useState[1];
    var syncHeight = React19.useCallback(function() {
      var input = inputRef.current;
      var computedStyle = window.getComputedStyle(input);
      var inputShallow = shadowRef.current;
      inputShallow.style.width = computedStyle.width;
      inputShallow.value = input.value || props.placeholder || "x";
      if (inputShallow.value.slice(-1) === "\n") {
        inputShallow.value += " ";
      }
      var boxSizing = computedStyle["box-sizing"];
      var padding = getStyleValue(computedStyle, "padding-bottom") + getStyleValue(computedStyle, "padding-top");
      var border = getStyleValue(computedStyle, "border-bottom-width") + getStyleValue(computedStyle, "border-top-width");
      var innerHeight = inputShallow.scrollHeight - padding;
      inputShallow.value = "x";
      var singleRowHeight = inputShallow.scrollHeight - padding;
      var outerHeight = innerHeight;
      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }
      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      var outerHeightStyle = outerHeight + (boxSizing === "border-box" ? padding + border : 0);
      var overflow = Math.abs(outerHeight - innerHeight) <= 1;
      setState(function(prevState) {
        if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
          renders.current += 1;
          return {
            overflow,
            outerHeightStyle
          };
        }
        if (true) {
          if (renders.current === 20) {
            console.error(["Material-UI: Too many re-renders. The layout is unstable.", "TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n"));
          }
        }
        return prevState;
      });
    }, [maxRows, minRows, props.placeholder]);
    React19.useEffect(function() {
      var handleResize = debounce(function() {
        renders.current = 0;
        syncHeight();
      });
      window.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        window.removeEventListener("resize", handleResize);
      };
    }, [syncHeight]);
    useEnhancedEffect3(function() {
      syncHeight();
    });
    React19.useEffect(function() {
      renders.current = 0;
    }, [value]);
    var handleChange = function handleChange2(event2) {
      renders.current = 0;
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event2);
      }
    };
    return /* @__PURE__ */ React19.createElement(React19.Fragment, null, /* @__PURE__ */ React19.createElement("textarea", _extends({
      value,
      onChange: handleChange,
      ref: handleRef,
      rows: minRows,
      style: _extends({
        height: state.outerHeightStyle,
        overflow: state.overflow ? "hidden" : null
      }, style)
    }, other)), /* @__PURE__ */ React19.createElement("textarea", {
      "aria-hidden": true,
      className: props.className,
      readOnly: true,
      ref: shadowRef,
      tabIndex: -1,
      style: _extends({}, styles16.shadow, style)
    }));
  });
  true ? TextareaAutosize.propTypes = {
    className: import_prop_types11.default.string,
    maxRows: import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string]),
    minRows: import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string]),
    onChange: import_prop_types11.default.func,
    placeholder: import_prop_types11.default.string,
    rows: deprecatedPropType(import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string]), "Use `minRows` instead."),
    rowsMax: deprecatedPropType(import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string]), "Use `maxRows` instead."),
    rowsMin: deprecatedPropType(import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string]), "Use `minRows` instead."),
    style: import_prop_types11.default.object,
    value: import_prop_types11.default.oneOfType([import_prop_types11.default.arrayOf(import_prop_types11.default.string), import_prop_types11.default.number, import_prop_types11.default.string])
  } : void 0;
  var TextareaAutosize_default = TextareaAutosize;

  // node_modules/@material-ui/core/esm/InputBase/utils.js
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj) {
    var SSR = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }

  // node_modules/@material-ui/core/esm/InputBase/InputBase.js
  var styles17 = function styles18(theme2) {
    var light2 = theme2.palette.type === "light";
    var placeholder = {
      color: "currentColor",
      opacity: light2 ? 0.42 : 0.5,
      transition: theme2.transitions.create("opacity", {
        duration: theme2.transitions.duration.shorter
      })
    };
    var placeholderHidden = {
      opacity: "0 !important"
    };
    var placeholderVisible = {
      opacity: light2 ? 0.42 : 0.5
    };
    return {
      "@global": {
        "@keyframes mui-auto-fill": {},
        "@keyframes mui-auto-fill-cancel": {}
      },
      root: _extends({}, theme2.typography.body1, {
        color: theme2.palette.text.primary,
        lineHeight: "1.1876em",
        boxSizing: "border-box",
        position: "relative",
        cursor: "text",
        display: "inline-flex",
        alignItems: "center",
        "&$disabled": {
          color: theme2.palette.text.disabled,
          cursor: "default"
        }
      }),
      formControl: {},
      focused: {},
      disabled: {},
      adornedStart: {},
      adornedEnd: {},
      error: {},
      marginDense: {},
      multiline: {
        padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
        "&$marginDense": {
          paddingTop: 4 - 1
        }
      },
      colorSecondary: {},
      fullWidth: {
        width: "100%"
      },
      input: {
        font: "inherit",
        letterSpacing: "inherit",
        color: "currentColor",
        padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
        border: 0,
        boxSizing: "content-box",
        background: "none",
        height: "1.1876em",
        margin: 0,
        WebkitTapHighlightColor: "transparent",
        display: "block",
        minWidth: 0,
        width: "100%",
        animationName: "mui-auto-fill-cancel",
        animationDuration: "10ms",
        "&::-webkit-input-placeholder": placeholder,
        "&::-moz-placeholder": placeholder,
        "&:-ms-input-placeholder": placeholder,
        "&::-ms-input-placeholder": placeholder,
        "&:focus": {
          outline: 0
        },
        "&:invalid": {
          boxShadow: "none"
        },
        "&::-webkit-search-decoration": {
          "-webkit-appearance": "none"
        },
        "label[data-shrink=false] + $formControl &": {
          "&::-webkit-input-placeholder": placeholderHidden,
          "&::-moz-placeholder": placeholderHidden,
          "&:-ms-input-placeholder": placeholderHidden,
          "&::-ms-input-placeholder": placeholderHidden,
          "&:focus::-webkit-input-placeholder": placeholderVisible,
          "&:focus::-moz-placeholder": placeholderVisible,
          "&:focus:-ms-input-placeholder": placeholderVisible,
          "&:focus::-ms-input-placeholder": placeholderVisible
        },
        "&$disabled": {
          opacity: 1
        },
        "&:-webkit-autofill": {
          animationDuration: "5000s",
          animationName: "mui-auto-fill"
        }
      },
      inputMarginDense: {
        paddingTop: 4 - 1
      },
      inputMultiline: {
        height: "auto",
        resize: "none",
        padding: 0
      },
      inputTypeSearch: {
        "-moz-appearance": "textfield",
        "-webkit-appearance": "textfield"
      },
      inputAdornedStart: {},
      inputAdornedEnd: {},
      inputHiddenLabel: {}
    };
  };
  var useEnhancedEffect4 = typeof window === "undefined" ? React20.useEffect : React20.useLayoutEffect;
  var InputBase = /* @__PURE__ */ React20.forwardRef(function InputBase2(props, ref) {
    var ariaDescribedby = props["aria-describedby"], autoComplete = props.autoComplete, autoFocus = props.autoFocus, classes = props.classes, className = props.className, color = props.color, defaultValue = props.defaultValue, disabled = props.disabled, endAdornment = props.endAdornment, error = props.error, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, id = props.id, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? "input" : _props$inputComponent, _props$inputProps = props.inputProps, inputPropsProp = _props$inputProps === void 0 ? {} : _props$inputProps, inputRefProp = props.inputRef, margin = props.margin, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onClick = props.onClick, onFocus = props.onFocus, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, placeholder = props.placeholder, readOnly = props.readOnly, renderSuffix = props.renderSuffix, rows = props.rows, rowsMax = props.rowsMax, rowsMin = props.rowsMin, maxRows = props.maxRows, minRows = props.minRows, startAdornment = props.startAdornment, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, valueProp = props.value, other = _objectWithoutProperties(props, ["aria-describedby", "autoComplete", "autoFocus", "classes", "className", "color", "defaultValue", "disabled", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "rowsMax", "rowsMin", "maxRows", "minRows", "startAdornment", "type", "value"]);
    var value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    var _React$useRef = React20.useRef(value != null), isControlled = _React$useRef.current;
    var inputRef = React20.useRef();
    var handleInputRefWarning = React20.useCallback(function(instance) {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["Material-UI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `inputRef` prop.", "Make sure the `inputRef` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    var handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);
    var handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);
    var handleInputRef = useForkRef(inputRef, handleInputRefProp);
    var _React$useState = React20.useState(false), focused = _React$useState[0], setFocused = _React$useState[1];
    var muiFormControl = useFormControl();
    if (true) {
      React20.useEffect(function() {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "margin", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React20.useEffect(function() {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    var onFilled = muiFormControl && muiFormControl.onFilled;
    var onEmpty = muiFormControl && muiFormControl.onEmpty;
    var checkDirty = React20.useCallback(function(obj) {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect4(function() {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    var handleFocus = function handleFocus2(event2) {
      if (fcs.disabled) {
        event2.stopPropagation();
        return;
      }
      if (onFocus) {
        onFocus(event2);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event2);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event2);
      } else {
        setFocused(true);
      }
    };
    var handleBlur = function handleBlur2(event2) {
      if (onBlur) {
        onBlur(event2);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event2);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event2);
      } else {
        setFocused(false);
      }
    };
    var handleChange = function handleChange2(event2) {
      if (!isControlled) {
        var element = event2.target || inputRef.current;
        if (element == null) {
          throw new Error(true ? "Material-UI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info." : (0, import_utils.formatMuiErrorMessage)(1));
        }
        checkDirty({
          value: element.value
        });
      }
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange.apply(inputPropsProp, [event2].concat(args));
      }
      if (onChange) {
        onChange.apply(void 0, [event2].concat(args));
      }
    };
    React20.useEffect(function() {
      checkDirty(inputRef.current);
    }, []);
    var handleClick = function handleClick2(event2) {
      if (inputRef.current && event2.currentTarget === event2.target) {
        inputRef.current.focus();
      }
      if (onClick) {
        onClick(event2);
      }
    };
    var InputComponent = inputComponent;
    var inputProps = _extends({}, inputPropsProp, {
      ref: handleInputRef
    });
    if (typeof InputComponent !== "string") {
      inputProps = _extends({
        inputRef: handleInputRef,
        type
      }, inputProps, {
        ref: null
      });
    } else if (multiline) {
      if (rows && !maxRows && !minRows && !rowsMax && !rowsMin) {
        InputComponent = "textarea";
      } else {
        inputProps = _extends({
          minRows: rows || minRows,
          rowsMax,
          maxRows
        }, inputProps);
        InputComponent = TextareaAutosize_default;
      }
    } else {
      inputProps = _extends({
        type
      }, inputProps);
    }
    var handleAutoFill = function handleAutoFill2(event2) {
      checkDirty(event2.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React20.useEffect(function() {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    return /* @__PURE__ */ React20.createElement("div", _extends({
      className: (0, import_clsx10.default)(classes.root, classes["color".concat(capitalize(fcs.color || "primary"))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd, fcs.margin === "dense" && classes.marginDense),
      onClick: handleClick,
      ref
    }, other), startAdornment, /* @__PURE__ */ React20.createElement(FormControlContext_default.Provider, {
      value: null
    }, /* @__PURE__ */ React20.createElement(InputComponent, _extends({
      "aria-invalid": fcs.error,
      "aria-describedby": ariaDescribedby,
      autoComplete,
      autoFocus,
      defaultValue,
      disabled: fcs.disabled,
      id,
      onAnimationStart: handleAutoFill,
      name,
      placeholder,
      readOnly,
      required: fcs.required,
      rows,
      value,
      onKeyDown,
      onKeyUp
    }, inputProps, {
      className: (0, import_clsx10.default)(classes.input, inputPropsProp.className, fcs.disabled && classes.disabled, multiline && classes.inputMultiline, fcs.hiddenLabel && classes.inputHiddenLabel, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd, type === "search" && classes.inputTypeSearch, fcs.margin === "dense" && classes.inputMarginDense),
      onBlur: handleBlur,
      onChange: handleChange,
      onFocus: handleFocus
    }))), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
      startAdornment
    })) : null);
  });
  true ? InputBase.propTypes = {
    "aria-describedby": import_prop_types12.default.string,
    autoComplete: import_prop_types12.default.string,
    autoFocus: import_prop_types12.default.bool,
    classes: import_prop_types12.default.object,
    className: import_prop_types12.default.string,
    color: import_prop_types12.default.oneOf(["primary", "secondary"]),
    defaultValue: import_prop_types12.default.any,
    disabled: import_prop_types12.default.bool,
    endAdornment: import_prop_types12.default.node,
    error: import_prop_types12.default.bool,
    fullWidth: import_prop_types12.default.bool,
    id: import_prop_types12.default.string,
    inputComponent: import_prop_types12.default.elementType,
    inputProps: import_prop_types12.default.object,
    inputRef: import_utils7.refType,
    margin: import_prop_types12.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
    minRows: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
    multiline: import_prop_types12.default.bool,
    name: import_prop_types12.default.string,
    onBlur: import_prop_types12.default.func,
    onChange: import_prop_types12.default.func,
    onClick: import_prop_types12.default.func,
    onFocus: import_prop_types12.default.func,
    onKeyDown: import_prop_types12.default.func,
    onKeyUp: import_prop_types12.default.func,
    placeholder: import_prop_types12.default.string,
    readOnly: import_prop_types12.default.bool,
    renderSuffix: import_prop_types12.default.func,
    required: import_prop_types12.default.bool,
    rows: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
    rowsMax: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
    rowsMin: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
    startAdornment: import_prop_types12.default.node,
    type: import_prop_types12.default.string,
    value: import_prop_types12.default.any
  } : void 0;
  var InputBase_default = withStyles_default(styles17, {
    name: "MuiInputBase"
  })(InputBase);

  // node_modules/@material-ui/core/esm/Input/Input.js
  var styles19 = function styles20(theme2) {
    var light2 = theme2.palette.type === "light";
    var bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    return {
      root: {
        position: "relative"
      },
      formControl: {
        "label + &": {
          marginTop: 16
        }
      },
      focused: {},
      disabled: {},
      colorSecondary: {
        "&$underline:after": {
          borderBottomColor: theme2.palette.secondary.main
        }
      },
      underline: {
        "&:after": {
          borderBottom: "2px solid ".concat(theme2.palette.primary.main),
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: theme2.transitions.create("transform", {
            duration: theme2.transitions.duration.shorter,
            easing: theme2.transitions.easing.easeOut
          }),
          pointerEvents: "none"
        },
        "&$focused:after": {
          transform: "scaleX(1)"
        },
        "&$error:after": {
          borderBottomColor: theme2.palette.error.main,
          transform: "scaleX(1)"
        },
        "&:before": {
          borderBottom: "1px solid ".concat(bottomLineColor),
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: theme2.transitions.create("border-bottom-color", {
            duration: theme2.transitions.duration.shorter
          }),
          pointerEvents: "none"
        },
        "&:hover:not($disabled):before": {
          borderBottom: "2px solid ".concat(theme2.palette.text.primary),
          "@media (hover: none)": {
            borderBottom: "1px solid ".concat(bottomLineColor)
          }
        },
        "&$disabled:before": {
          borderBottomStyle: "dotted"
        }
      },
      error: {},
      marginDense: {},
      multiline: {},
      fullWidth: {},
      input: {},
      inputMarginDense: {},
      inputMultiline: {},
      inputTypeSearch: {}
    };
  };
  var Input = /* @__PURE__ */ React21.forwardRef(function Input2(props, ref) {
    var disableUnderline = props.disableUnderline, classes = props.classes, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? "input" : _props$inputComponent, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, other = _objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);
    return /* @__PURE__ */ React21.createElement(InputBase_default, _extends({
      classes: _extends({}, classes, {
        root: (0, import_clsx11.default)(classes.root, !disableUnderline && classes.underline),
        underline: null
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other));
  });
  true ? Input.propTypes = {
    autoComplete: import_prop_types13.default.string,
    autoFocus: import_prop_types13.default.bool,
    classes: import_prop_types13.default.object,
    color: import_prop_types13.default.oneOf(["primary", "secondary"]),
    defaultValue: import_prop_types13.default.any,
    disabled: import_prop_types13.default.bool,
    disableUnderline: import_prop_types13.default.bool,
    endAdornment: import_prop_types13.default.node,
    error: import_prop_types13.default.bool,
    fullWidth: import_prop_types13.default.bool,
    id: import_prop_types13.default.string,
    inputComponent: import_prop_types13.default.elementType,
    inputProps: import_prop_types13.default.object,
    inputRef: import_utils9.refType,
    margin: import_prop_types13.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    multiline: import_prop_types13.default.bool,
    name: import_prop_types13.default.string,
    onChange: import_prop_types13.default.func,
    placeholder: import_prop_types13.default.string,
    readOnly: import_prop_types13.default.bool,
    required: import_prop_types13.default.bool,
    rows: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    startAdornment: import_prop_types13.default.node,
    type: import_prop_types13.default.string,
    value: import_prop_types13.default.any
  } : void 0;
  Input.muiName = "Input";
  var Input_default = withStyles_default(styles19, {
    name: "MuiInput"
  })(Input);

  // node_modules/@material-ui/core/esm/FilledInput/FilledInput.js
  var React22 = __toESM(require_react());
  var import_prop_types14 = __toESM(require_prop_types());
  var import_clsx12 = __toESM(require_clsx());
  var import_utils10 = __toESM(require_utils());
  var styles21 = function styles22(theme2) {
    var light2 = theme2.palette.type === "light";
    var bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    var backgroundColor = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.09)";
    return {
      root: {
        position: "relative",
        backgroundColor,
        borderTopLeftRadius: theme2.shape.borderRadius,
        borderTopRightRadius: theme2.shape.borderRadius,
        transition: theme2.transitions.create("background-color", {
          duration: theme2.transitions.duration.shorter,
          easing: theme2.transitions.easing.easeOut
        }),
        "&:hover": {
          backgroundColor: light2 ? "rgba(0, 0, 0, 0.13)" : "rgba(255, 255, 255, 0.13)",
          "@media (hover: none)": {
            backgroundColor
          }
        },
        "&$focused": {
          backgroundColor: light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.09)"
        },
        "&$disabled": {
          backgroundColor: light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)"
        }
      },
      colorSecondary: {
        "&$underline:after": {
          borderBottomColor: theme2.palette.secondary.main
        }
      },
      underline: {
        "&:after": {
          borderBottom: "2px solid ".concat(theme2.palette.primary.main),
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: theme2.transitions.create("transform", {
            duration: theme2.transitions.duration.shorter,
            easing: theme2.transitions.easing.easeOut
          }),
          pointerEvents: "none"
        },
        "&$focused:after": {
          transform: "scaleX(1)"
        },
        "&$error:after": {
          borderBottomColor: theme2.palette.error.main,
          transform: "scaleX(1)"
        },
        "&:before": {
          borderBottom: "1px solid ".concat(bottomLineColor),
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: theme2.transitions.create("border-bottom-color", {
            duration: theme2.transitions.duration.shorter
          }),
          pointerEvents: "none"
        },
        "&:hover:before": {
          borderBottom: "1px solid ".concat(theme2.palette.text.primary)
        },
        "&$disabled:before": {
          borderBottomStyle: "dotted"
        }
      },
      focused: {},
      disabled: {},
      adornedStart: {
        paddingLeft: 12
      },
      adornedEnd: {
        paddingRight: 12
      },
      error: {},
      marginDense: {},
      multiline: {
        padding: "27px 12px 10px",
        "&$marginDense": {
          paddingTop: 23,
          paddingBottom: 6
        }
      },
      input: {
        padding: "27px 12px 10px",
        "&:-webkit-autofill": {
          WebkitBoxShadow: theme2.palette.type === "light" ? null : "0 0 0 100px #266798 inset",
          WebkitTextFillColor: theme2.palette.type === "light" ? null : "#fff",
          caretColor: theme2.palette.type === "light" ? null : "#fff",
          borderTopLeftRadius: "inherit",
          borderTopRightRadius: "inherit"
        }
      },
      inputMarginDense: {
        paddingTop: 23,
        paddingBottom: 6
      },
      inputHiddenLabel: {
        paddingTop: 18,
        paddingBottom: 19,
        "&$inputMarginDense": {
          paddingTop: 10,
          paddingBottom: 11
        }
      },
      inputMultiline: {
        padding: 0
      },
      inputAdornedStart: {
        paddingLeft: 0
      },
      inputAdornedEnd: {
        paddingRight: 0
      }
    };
  };
  var FilledInput = /* @__PURE__ */ React22.forwardRef(function FilledInput2(props, ref) {
    var disableUnderline = props.disableUnderline, classes = props.classes, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? "input" : _props$inputComponent, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, other = _objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);
    return /* @__PURE__ */ React22.createElement(InputBase_default, _extends({
      classes: _extends({}, classes, {
        root: (0, import_clsx12.default)(classes.root, !disableUnderline && classes.underline),
        underline: null
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other));
  });
  true ? FilledInput.propTypes = {
    autoComplete: import_prop_types14.default.string,
    autoFocus: import_prop_types14.default.bool,
    classes: import_prop_types14.default.object,
    color: import_prop_types14.default.oneOf(["primary", "secondary"]),
    defaultValue: import_prop_types14.default.any,
    disabled: import_prop_types14.default.bool,
    disableUnderline: import_prop_types14.default.bool,
    endAdornment: import_prop_types14.default.node,
    error: import_prop_types14.default.bool,
    fullWidth: import_prop_types14.default.bool,
    id: import_prop_types14.default.string,
    inputComponent: import_prop_types14.default.elementType,
    inputProps: import_prop_types14.default.object,
    inputRef: import_utils10.refType,
    margin: import_prop_types14.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]),
    multiline: import_prop_types14.default.bool,
    name: import_prop_types14.default.string,
    onChange: import_prop_types14.default.func,
    placeholder: import_prop_types14.default.string,
    readOnly: import_prop_types14.default.bool,
    required: import_prop_types14.default.bool,
    rows: import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]),
    startAdornment: import_prop_types14.default.node,
    type: import_prop_types14.default.string,
    value: import_prop_types14.default.any
  } : void 0;
  FilledInput.muiName = "Input";
  var FilledInput_default = withStyles_default(styles21, {
    name: "MuiFilledInput"
  })(FilledInput);

  // node_modules/@material-ui/core/esm/OutlinedInput/OutlinedInput.js
  var React24 = __toESM(require_react());
  var import_prop_types16 = __toESM(require_prop_types());
  var import_clsx14 = __toESM(require_clsx());
  var import_utils11 = __toESM(require_utils());

  // node_modules/@material-ui/core/esm/OutlinedInput/NotchedOutline.js
  var React23 = __toESM(require_react());
  var import_prop_types15 = __toESM(require_prop_types());
  var import_clsx13 = __toESM(require_clsx());
  var styles23 = function styles24(theme2) {
    return {
      root: {
        position: "absolute",
        bottom: 0,
        right: 0,
        top: -5,
        left: 0,
        margin: 0,
        padding: "0 8px",
        pointerEvents: "none",
        borderRadius: "inherit",
        borderStyle: "solid",
        borderWidth: 1,
        overflow: "hidden"
      },
      legend: {
        textAlign: "left",
        padding: 0,
        lineHeight: "11px",
        transition: theme2.transitions.create("width", {
          duration: 150,
          easing: theme2.transitions.easing.easeOut
        })
      },
      legendLabelled: {
        display: "block",
        width: "auto",
        textAlign: "left",
        padding: 0,
        height: 11,
        fontSize: "0.75em",
        visibility: "hidden",
        maxWidth: 0.01,
        transition: theme2.transitions.create("max-width", {
          duration: 50,
          easing: theme2.transitions.easing.easeOut
        }),
        "& > span": {
          paddingLeft: 5,
          paddingRight: 5,
          display: "inline-block"
        }
      },
      legendNotched: {
        maxWidth: 1e3,
        transition: theme2.transitions.create("max-width", {
          duration: 100,
          easing: theme2.transitions.easing.easeOut,
          delay: 50
        })
      }
    };
  };
  var NotchedOutline = /* @__PURE__ */ React23.forwardRef(function NotchedOutline2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, label = props.label, labelWidthProp = props.labelWidth, notched = props.notched, style = props.style, other = _objectWithoutProperties(props, ["children", "classes", "className", "label", "labelWidth", "notched", "style"]);
    var theme2 = useTheme();
    var align = theme2.direction === "rtl" ? "right" : "left";
    if (label !== void 0) {
      return /* @__PURE__ */ React23.createElement("fieldset", _extends({
        "aria-hidden": true,
        className: (0, import_clsx13.default)(classes.root, className),
        ref,
        style
      }, other), /* @__PURE__ */ React23.createElement("legend", {
        className: (0, import_clsx13.default)(classes.legendLabelled, notched && classes.legendNotched)
      }, label ? /* @__PURE__ */ React23.createElement("span", null, label) : /* @__PURE__ */ React23.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: "&#8203;"
        }
      })));
    }
    var labelWidth = labelWidthProp > 0 ? labelWidthProp * 0.75 + 8 : 0.01;
    return /* @__PURE__ */ React23.createElement("fieldset", _extends({
      "aria-hidden": true,
      style: _extends(_defineProperty({}, "padding".concat(capitalize(align)), 8), style),
      className: (0, import_clsx13.default)(classes.root, className),
      ref
    }, other), /* @__PURE__ */ React23.createElement("legend", {
      className: classes.legend,
      style: {
        width: notched ? labelWidth : 0.01
      }
    }, /* @__PURE__ */ React23.createElement("span", {
      dangerouslySetInnerHTML: {
        __html: "&#8203;"
      }
    })));
  });
  true ? NotchedOutline.propTypes = {
    children: import_prop_types15.default.node,
    classes: import_prop_types15.default.object,
    className: import_prop_types15.default.string,
    label: import_prop_types15.default.node,
    labelWidth: import_prop_types15.default.number.isRequired,
    notched: import_prop_types15.default.bool.isRequired,
    style: import_prop_types15.default.object
  } : void 0;
  var NotchedOutline_default = withStyles_default(styles23, {
    name: "PrivateNotchedOutline"
  })(NotchedOutline);

  // node_modules/@material-ui/core/esm/OutlinedInput/OutlinedInput.js
  var styles25 = function styles26(theme2) {
    var borderColor = theme2.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      root: {
        position: "relative",
        borderRadius: theme2.shape.borderRadius,
        "&:hover $notchedOutline": {
          borderColor: theme2.palette.text.primary
        },
        "@media (hover: none)": {
          "&:hover $notchedOutline": {
            borderColor
          }
        },
        "&$focused $notchedOutline": {
          borderColor: theme2.palette.primary.main,
          borderWidth: 2
        },
        "&$error $notchedOutline": {
          borderColor: theme2.palette.error.main
        },
        "&$disabled $notchedOutline": {
          borderColor: theme2.palette.action.disabled
        }
      },
      colorSecondary: {
        "&$focused $notchedOutline": {
          borderColor: theme2.palette.secondary.main
        }
      },
      focused: {},
      disabled: {},
      adornedStart: {
        paddingLeft: 14
      },
      adornedEnd: {
        paddingRight: 14
      },
      error: {},
      marginDense: {},
      multiline: {
        padding: "18.5px 14px",
        "&$marginDense": {
          paddingTop: 10.5,
          paddingBottom: 10.5
        }
      },
      notchedOutline: {
        borderColor
      },
      input: {
        padding: "18.5px 14px",
        "&:-webkit-autofill": {
          WebkitBoxShadow: theme2.palette.type === "light" ? null : "0 0 0 100px #266798 inset",
          WebkitTextFillColor: theme2.palette.type === "light" ? null : "#fff",
          caretColor: theme2.palette.type === "light" ? null : "#fff",
          borderRadius: "inherit"
        }
      },
      inputMarginDense: {
        paddingTop: 10.5,
        paddingBottom: 10.5
      },
      inputMultiline: {
        padding: 0
      },
      inputAdornedStart: {
        paddingLeft: 0
      },
      inputAdornedEnd: {
        paddingRight: 0
      }
    };
  };
  var OutlinedInput = /* @__PURE__ */ React24.forwardRef(function OutlinedInput2(props, ref) {
    var classes = props.classes, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? "input" : _props$inputComponent, label = props.label, _props$labelWidth = props.labelWidth, labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, notched = props.notched, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, other = _objectWithoutProperties(props, ["classes", "fullWidth", "inputComponent", "label", "labelWidth", "multiline", "notched", "type"]);
    return /* @__PURE__ */ React24.createElement(InputBase_default, _extends({
      renderSuffix: function renderSuffix(state) {
        return /* @__PURE__ */ React24.createElement(NotchedOutline_default, {
          className: classes.notchedOutline,
          label,
          labelWidth,
          notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
        });
      },
      classes: _extends({}, classes, {
        root: (0, import_clsx14.default)(classes.root, classes.underline),
        notchedOutline: null
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other));
  });
  true ? OutlinedInput.propTypes = {
    autoComplete: import_prop_types16.default.string,
    autoFocus: import_prop_types16.default.bool,
    classes: import_prop_types16.default.object,
    color: import_prop_types16.default.oneOf(["primary", "secondary"]),
    defaultValue: import_prop_types16.default.any,
    disabled: import_prop_types16.default.bool,
    endAdornment: import_prop_types16.default.node,
    error: import_prop_types16.default.bool,
    fullWidth: import_prop_types16.default.bool,
    id: import_prop_types16.default.string,
    inputComponent: import_prop_types16.default.elementType,
    inputProps: import_prop_types16.default.object,
    inputRef: import_utils11.refType,
    label: import_prop_types16.default.node,
    labelWidth: import_prop_types16.default.number,
    margin: import_prop_types16.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types16.default.oneOfType([import_prop_types16.default.number, import_prop_types16.default.string]),
    multiline: import_prop_types16.default.bool,
    name: import_prop_types16.default.string,
    notched: import_prop_types16.default.bool,
    onChange: import_prop_types16.default.func,
    placeholder: import_prop_types16.default.string,
    readOnly: import_prop_types16.default.bool,
    required: import_prop_types16.default.bool,
    rows: import_prop_types16.default.oneOfType([import_prop_types16.default.number, import_prop_types16.default.string]),
    startAdornment: import_prop_types16.default.node,
    type: import_prop_types16.default.string,
    value: import_prop_types16.default.any
  } : void 0;
  OutlinedInput.muiName = "Input";
  var OutlinedInput_default = withStyles_default(styles25, {
    name: "MuiOutlinedInput"
  })(OutlinedInput);

  // node_modules/@material-ui/core/esm/InputLabel/InputLabel.js
  var React27 = __toESM(require_react());
  var import_prop_types18 = __toESM(require_prop_types());
  var import_clsx16 = __toESM(require_clsx());

  // node_modules/@material-ui/core/esm/FormControl/useFormControl.js
  var React25 = __toESM(require_react());
  function useFormControl2() {
    return React25.useContext(FormControlContext_default);
  }

  // node_modules/@material-ui/core/esm/FormLabel/FormLabel.js
  var React26 = __toESM(require_react());
  var import_prop_types17 = __toESM(require_prop_types());
  var import_clsx15 = __toESM(require_clsx());
  var styles27 = function styles28(theme2) {
    return {
      root: _extends({
        color: theme2.palette.text.secondary
      }, theme2.typography.body1, {
        lineHeight: 1,
        padding: 0,
        "&$focused": {
          color: theme2.palette.primary.main
        },
        "&$disabled": {
          color: theme2.palette.text.disabled
        },
        "&$error": {
          color: theme2.palette.error.main
        }
      }),
      colorSecondary: {
        "&$focused": {
          color: theme2.palette.secondary.main
        }
      },
      focused: {},
      disabled: {},
      error: {},
      filled: {},
      required: {},
      asterisk: {
        "&$error": {
          color: theme2.palette.error.main
        }
      }
    };
  };
  var FormLabel = /* @__PURE__ */ React26.forwardRef(function FormLabel2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, color = props.color, _props$component = props.component, Component4 = _props$component === void 0 ? "label" : _props$component, disabled = props.disabled, error = props.error, filled = props.filled, focused = props.focused, required = props.required, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "error", "filled", "focused", "required"]);
    var muiFormControl = useFormControl2();
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    return /* @__PURE__ */ React26.createElement(Component4, _extends({
      className: (0, import_clsx15.default)(classes.root, classes["color".concat(capitalize(fcs.color || "primary"))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),
      ref
    }, other), children, fcs.required && /* @__PURE__ */ React26.createElement("span", {
      "aria-hidden": true,
      className: (0, import_clsx15.default)(classes.asterisk, fcs.error && classes.error)
    }, "\u2009", "*"));
  });
  true ? FormLabel.propTypes = {
    children: import_prop_types17.default.node,
    classes: import_prop_types17.default.object,
    className: import_prop_types17.default.string,
    color: import_prop_types17.default.oneOf(["primary", "secondary"]),
    component: import_prop_types17.default.elementType,
    disabled: import_prop_types17.default.bool,
    error: import_prop_types17.default.bool,
    filled: import_prop_types17.default.bool,
    focused: import_prop_types17.default.bool,
    required: import_prop_types17.default.bool
  } : void 0;
  var FormLabel_default = withStyles_default(styles27, {
    name: "MuiFormLabel"
  })(FormLabel);

  // node_modules/@material-ui/core/esm/InputLabel/InputLabel.js
  var styles29 = function styles30(theme2) {
    return {
      root: {
        display: "block",
        transformOrigin: "top left"
      },
      focused: {},
      disabled: {},
      error: {},
      required: {},
      asterisk: {},
      formControl: {
        position: "absolute",
        left: 0,
        top: 0,
        transform: "translate(0, 24px) scale(1)"
      },
      marginDense: {
        transform: "translate(0, 21px) scale(1)"
      },
      shrink: {
        transform: "translate(0, 1.5px) scale(0.75)",
        transformOrigin: "top left"
      },
      animated: {
        transition: theme2.transitions.create(["color", "transform"], {
          duration: theme2.transitions.duration.shorter,
          easing: theme2.transitions.easing.easeOut
        })
      },
      filled: {
        zIndex: 1,
        pointerEvents: "none",
        transform: "translate(12px, 20px) scale(1)",
        "&$marginDense": {
          transform: "translate(12px, 17px) scale(1)"
        },
        "&$shrink": {
          transform: "translate(12px, 10px) scale(0.75)",
          "&$marginDense": {
            transform: "translate(12px, 7px) scale(0.75)"
          }
        }
      },
      outlined: {
        zIndex: 1,
        pointerEvents: "none",
        transform: "translate(14px, 20px) scale(1)",
        "&$marginDense": {
          transform: "translate(14px, 12px) scale(1)"
        },
        "&$shrink": {
          transform: "translate(14px, -6px) scale(0.75)"
        }
      }
    };
  };
  var InputLabel = /* @__PURE__ */ React27.forwardRef(function InputLabel2(props, ref) {
    var classes = props.classes, className = props.className, _props$disableAnimati = props.disableAnimation, disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati, margin = props.margin, shrinkProp = props.shrink, variant = props.variant, other = _objectWithoutProperties(props, ["classes", "className", "disableAnimation", "margin", "shrink", "variant"]);
    var muiFormControl = useFormControl2();
    var shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["margin", "variant"]
    });
    return /* @__PURE__ */ React27.createElement(FormLabel_default, _extends({
      "data-shrink": shrink,
      className: (0, import_clsx16.default)(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, fcs.margin === "dense" && classes.marginDense, {
        "filled": classes.filled,
        "outlined": classes.outlined
      }[fcs.variant]),
      classes: {
        focused: classes.focused,
        disabled: classes.disabled,
        error: classes.error,
        required: classes.required,
        asterisk: classes.asterisk
      },
      ref
    }, other));
  });
  true ? InputLabel.propTypes = {
    children: import_prop_types18.default.node,
    classes: import_prop_types18.default.object,
    className: import_prop_types18.default.string,
    color: import_prop_types18.default.oneOf(["primary", "secondary"]),
    disableAnimation: import_prop_types18.default.bool,
    disabled: import_prop_types18.default.bool,
    error: import_prop_types18.default.bool,
    focused: import_prop_types18.default.bool,
    margin: import_prop_types18.default.oneOf(["dense"]),
    required: import_prop_types18.default.bool,
    shrink: import_prop_types18.default.bool,
    variant: import_prop_types18.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputLabel_default = withStyles_default(styles29, {
    name: "MuiInputLabel"
  })(InputLabel);

  // node_modules/@material-ui/core/esm/FormControl/FormControl.js
  var React29 = __toESM(require_react());
  var import_prop_types19 = __toESM(require_prop_types());
  var import_clsx17 = __toESM(require_clsx());

  // node_modules/@material-ui/core/esm/utils/isMuiElement.js
  var React28 = __toESM(require_react());
  function isMuiElement(element, muiNames) {
    return /* @__PURE__ */ React28.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
  }

  // node_modules/@material-ui/core/esm/FormControl/FormControl.js
  var styles31 = {
    root: {
      display: "inline-flex",
      flexDirection: "column",
      position: "relative",
      minWidth: 0,
      padding: 0,
      margin: 0,
      border: 0,
      verticalAlign: "top"
    },
    marginNormal: {
      marginTop: 16,
      marginBottom: 8
    },
    marginDense: {
      marginTop: 8,
      marginBottom: 4
    },
    fullWidth: {
      width: "100%"
    }
  };
  var FormControl = /* @__PURE__ */ React29.forwardRef(function FormControl2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "primary" : _props$color, _props$component = props.component, Component4 = _props$component === void 0 ? "div" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$error = props.error, error = _props$error === void 0 ? false : _props$error, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, visuallyFocused = props.focused, _props$hiddenLabel = props.hiddenLabel, hiddenLabel = _props$hiddenLabel === void 0 ? false : _props$hiddenLabel, _props$margin = props.margin, margin = _props$margin === void 0 ? "none" : _props$margin, _props$required = props.required, required = _props$required === void 0 ? false : _props$required, size = props.size, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "error", "fullWidth", "focused", "hiddenLabel", "margin", "required", "size", "variant"]);
    var _React$useState = React29.useState(function() {
      var initialAdornedStart = false;
      if (children) {
        React29.Children.forEach(children, function(child) {
          if (!isMuiElement(child, ["Input", "Select"])) {
            return;
          }
          var input = isMuiElement(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    }), adornedStart = _React$useState[0], setAdornedStart = _React$useState[1];
    var _React$useState2 = React29.useState(function() {
      var initialFilled = false;
      if (children) {
        React29.Children.forEach(children, function(child) {
          if (!isMuiElement(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    }), filled = _React$useState2[0], setFilled = _React$useState2[1];
    var _React$useState3 = React29.useState(false), _focused = _React$useState3[0], setFocused = _React$useState3[1];
    var focused = visuallyFocused !== void 0 ? visuallyFocused : _focused;
    if (disabled && focused) {
      setFocused(false);
    }
    var registerEffect;
    if (true) {
      var registeredInput = React29.useRef(false);
      registerEffect = function registerEffect2() {
        if (registeredInput.current) {
          console.error(["Material-UI: There are multiple InputBase components inside a FormControl.", "This is not supported. It might cause infinite rendering loops.", "Only use one InputBase."].join("\n"));
        }
        registeredInput.current = true;
        return function() {
          registeredInput.current = false;
        };
      };
    }
    var onFilled = React29.useCallback(function() {
      setFilled(true);
    }, []);
    var onEmpty = React29.useCallback(function() {
      setFilled(false);
    }, []);
    var childContext = {
      adornedStart,
      setAdornedStart,
      color,
      disabled,
      error,
      filled,
      focused,
      fullWidth,
      hiddenLabel,
      margin: (size === "small" ? "dense" : void 0) || margin,
      onBlur: function onBlur() {
        setFocused(false);
      },
      onEmpty,
      onFilled,
      onFocus: function onFocus() {
        setFocused(true);
      },
      registerEffect,
      required,
      variant
    };
    return /* @__PURE__ */ React29.createElement(FormControlContext_default.Provider, {
      value: childContext
    }, /* @__PURE__ */ React29.createElement(Component4, _extends({
      className: (0, import_clsx17.default)(classes.root, className, margin !== "none" && classes["margin".concat(capitalize(margin))], fullWidth && classes.fullWidth),
      ref
    }, other), children));
  });
  true ? FormControl.propTypes = {
    children: import_prop_types19.default.node,
    classes: import_prop_types19.default.object,
    className: import_prop_types19.default.string,
    color: import_prop_types19.default.oneOf(["primary", "secondary"]),
    component: import_prop_types19.default.elementType,
    disabled: import_prop_types19.default.bool,
    error: import_prop_types19.default.bool,
    focused: import_prop_types19.default.bool,
    fullWidth: import_prop_types19.default.bool,
    hiddenLabel: import_prop_types19.default.bool,
    margin: import_prop_types19.default.oneOf(["dense", "none", "normal"]),
    required: import_prop_types19.default.bool,
    size: import_prop_types19.default.oneOf(["medium", "small"]),
    variant: import_prop_types19.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormControl_default = withStyles_default(styles31, {
    name: "MuiFormControl"
  })(FormControl);

  // node_modules/@material-ui/core/esm/FormHelperText/FormHelperText.js
  var React30 = __toESM(require_react());
  var import_prop_types20 = __toESM(require_prop_types());
  var import_clsx18 = __toESM(require_clsx());
  var styles32 = function styles33(theme2) {
    return {
      root: _extends({
        color: theme2.palette.text.secondary
      }, theme2.typography.caption, {
        textAlign: "left",
        marginTop: 3,
        margin: 0,
        "&$disabled": {
          color: theme2.palette.text.disabled
        },
        "&$error": {
          color: theme2.palette.error.main
        }
      }),
      error: {},
      disabled: {},
      marginDense: {
        marginTop: 4
      },
      contained: {
        marginLeft: 14,
        marginRight: 14
      },
      focused: {},
      filled: {},
      required: {}
    };
  };
  var FormHelperText = /* @__PURE__ */ React30.forwardRef(function FormHelperText2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component4 = _props$component === void 0 ? "p" : _props$component, disabled = props.disabled, error = props.error, filled = props.filled, focused = props.focused, margin = props.margin, required = props.required, variant = props.variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"]);
    var muiFormControl = useFormControl2();
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "margin", "disabled", "error", "filled", "focused", "required"]
    });
    return /* @__PURE__ */ React30.createElement(Component4, _extends({
      className: (0, import_clsx18.default)(classes.root, (fcs.variant === "filled" || fcs.variant === "outlined") && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, fcs.margin === "dense" && classes.marginDense),
      ref
    }, other), children === " " ? /* @__PURE__ */ React30.createElement("span", {
      dangerouslySetInnerHTML: {
        __html: "&#8203;"
      }
    }) : children);
  });
  true ? FormHelperText.propTypes = {
    children: import_prop_types20.default.node,
    classes: import_prop_types20.default.object,
    className: import_prop_types20.default.string,
    component: import_prop_types20.default.elementType,
    disabled: import_prop_types20.default.bool,
    error: import_prop_types20.default.bool,
    filled: import_prop_types20.default.bool,
    focused: import_prop_types20.default.bool,
    margin: import_prop_types20.default.oneOf(["dense"]),
    required: import_prop_types20.default.bool,
    variant: import_prop_types20.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormHelperText_default = withStyles_default(styles32, {
    name: "MuiFormHelperText"
  })(FormHelperText);

  // node_modules/@material-ui/core/esm/Select/Select.js
  var React47 = __toESM(require_react());
  var import_prop_types34 = __toESM(require_prop_types());
  var import_styles5 = __toESM(require_styles());

  // node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
  function _iterableToArrayLimit(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
      var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
      try {
        if (_x = (_i = _i.call(arr)).next, 0 === i) {
          if (Object(_i) !== _i)
            return;
          _n = false;
        } else
          for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
            ;
      } catch (err) {
        _d = true, _e = err;
      } finally {
        try {
          if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r))
            return;
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/slicedToArray.js
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  // node_modules/@material-ui/core/esm/Select/SelectInput.js
  var React43 = __toESM(require_react());
  var import_react_is4 = __toESM(require_react_is2());
  var import_prop_types31 = __toESM(require_prop_types());
  var import_clsx23 = __toESM(require_clsx());
  var import_utils20 = __toESM(require_utils());

  // node_modules/@material-ui/core/esm/Menu/Menu.js
  var React41 = __toESM(require_react());
  var import_react_is3 = __toESM(require_react_is2());
  var import_prop_types30 = __toESM(require_prop_types());
  var import_clsx22 = __toESM(require_clsx());
  var import_utils19 = __toESM(require_utils());

  // node_modules/@material-ui/core/esm/Popover/Popover.js
  var React37 = __toESM(require_react());
  var import_prop_types27 = __toESM(require_prop_types());
  var ReactDOM6 = __toESM(require_react_dom());
  var import_utils18 = __toESM(require_utils());
  var import_clsx20 = __toESM(require_clsx());

  // node_modules/@material-ui/core/esm/utils/createChainedFunction.js
  function createChainedFunction() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    return funcs.reduce(function(acc, func) {
      if (func == null) {
        return acc;
      }
      if (true) {
        if (typeof func !== "function") {
          console.error("Material-UI: Invalid Argument Type, must only provide functions, undefined, or null.");
        }
      }
      return function chainedFunction() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, function() {
    });
  }

  // node_modules/@material-ui/core/esm/Modal/Modal.js
  var React34 = __toESM(require_react());
  var ReactDOM5 = __toESM(require_react_dom());
  var import_prop_types24 = __toESM(require_prop_types());
  var import_styles4 = __toESM(require_styles());
  var import_utils15 = __toESM(require_utils());

  // node_modules/@material-ui/core/esm/Portal/Portal.js
  var React31 = __toESM(require_react());
  var ReactDOM3 = __toESM(require_react_dom());
  var import_prop_types21 = __toESM(require_prop_types());
  var import_utils13 = __toESM(require_utils());
  function getContainer(container) {
    container = typeof container === "function" ? container() : container;
    return ReactDOM3.findDOMNode(container);
  }
  var useEnhancedEffect5 = typeof window !== "undefined" ? React31.useLayoutEffect : React31.useEffect;
  var Portal = /* @__PURE__ */ React31.forwardRef(function Portal2(props, ref) {
    var children = props.children, container = props.container, _props$disablePortal = props.disablePortal, disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal, onRendered = props.onRendered;
    var _React$useState = React31.useState(null), mountNode = _React$useState[0], setMountNode = _React$useState[1];
    var handleRef = useForkRef(/* @__PURE__ */ React31.isValidElement(children) ? children.ref : null, ref);
    useEnhancedEffect5(function() {
      if (!disablePortal) {
        setMountNode(getContainer(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect5(function() {
      if (mountNode && !disablePortal) {
        setRef(ref, mountNode);
        return function() {
          setRef(ref, null);
        };
      }
      return void 0;
    }, [ref, mountNode, disablePortal]);
    useEnhancedEffect5(function() {
      if (onRendered && (mountNode || disablePortal)) {
        onRendered();
      }
    }, [onRendered, mountNode, disablePortal]);
    if (disablePortal) {
      if (/* @__PURE__ */ React31.isValidElement(children)) {
        return /* @__PURE__ */ React31.cloneElement(children, {
          ref: handleRef
        });
      }
      return children;
    }
    return mountNode ? /* @__PURE__ */ ReactDOM3.createPortal(children, mountNode) : mountNode;
  });
  true ? Portal.propTypes = {
    children: import_prop_types21.default.node,
    container: import_prop_types21.default.oneOfType([import_utils13.HTMLElementType, import_prop_types21.default.instanceOf(React31.Component), import_prop_types21.default.func]),
    disablePortal: import_prop_types21.default.bool,
    onRendered: deprecatedPropType(import_prop_types21.default.func, "Use the ref instead.")
  } : void 0;
  if (true) {
    Portal["propTypes"] = (0, import_utils13.exactProp)(Portal.propTypes);
  }
  var Portal_default = Portal;

  // node_modules/@babel/runtime/helpers/esm/classCallCheck.js
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  // node_modules/@babel/runtime/helpers/esm/createClass.js
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  // node_modules/@material-ui/core/esm/utils/getScrollbarSize.js
  function getScrollbarSize() {
    var scrollDiv = document.createElement("div");
    scrollDiv.style.width = "99px";
    scrollDiv.style.height = "99px";
    scrollDiv.style.position = "absolute";
    scrollDiv.style.top = "-9999px";
    scrollDiv.style.overflow = "scroll";
    document.body.appendChild(scrollDiv);
    var scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarSize;
  }

  // node_modules/@material-ui/core/esm/Modal/ModalManager.js
  function isOverflowing(container) {
    var doc = ownerDocument(container);
    if (doc.body === container) {
      return ownerWindow(doc).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(node, show) {
    if (show) {
      node.setAttribute("aria-hidden", "true");
    } else {
      node.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(node) {
    return parseInt(window.getComputedStyle(node)["padding-right"], 10) || 0;
  }
  function ariaHiddenSiblings(container, mountNode, currentNode) {
    var nodesToExclude = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];
    var show = arguments.length > 4 ? arguments[4] : void 0;
    var blacklist = [mountNode, currentNode].concat(_toConsumableArray(nodesToExclude));
    var blacklistTagNames = ["TEMPLATE", "SCRIPT", "STYLE"];
    [].forEach.call(container.children, function(node) {
      if (node.nodeType === 1 && blacklist.indexOf(node) === -1 && blacklistTagNames.indexOf(node.tagName) === -1) {
        ariaHidden(node, show);
      }
    });
  }
  function findIndexOf(containerInfo, callback) {
    var idx = -1;
    containerInfo.some(function(item, index) {
      if (callback(item)) {
        idx = index;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    var restoreStyle = [];
    var restorePaddings = [];
    var container = containerInfo.container;
    var fixedNodes;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        var scrollbarSize = getScrollbarSize();
        restoreStyle.push({
          value: container.style.paddingRight,
          key: "padding-right",
          el: container
        });
        container.style["padding-right"] = "".concat(getPaddingRight(container) + scrollbarSize, "px");
        fixedNodes = ownerDocument(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedNodes, function(node) {
          restorePaddings.push(node.style.paddingRight);
          node.style.paddingRight = "".concat(getPaddingRight(node) + scrollbarSize, "px");
        });
      }
      var parent = container.parentElement;
      var scrollContainer = parent.nodeName === "HTML" && window.getComputedStyle(parent)["overflow-y"] === "scroll" ? parent : container;
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        key: "overflow",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    var restore = function restore2() {
      if (fixedNodes) {
        [].forEach.call(fixedNodes, function(node, i) {
          if (restorePaddings[i]) {
            node.style.paddingRight = restorePaddings[i];
          } else {
            node.style.removeProperty("padding-right");
          }
        });
      }
      restoreStyle.forEach(function(_ref4) {
        var value = _ref4.value, el = _ref4.el, key = _ref4.key;
        if (value) {
          el.style.setProperty(key, value);
        } else {
          el.style.removeProperty(key);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    var hiddenSiblings = [];
    [].forEach.call(container.children, function(node) {
      if (node.getAttribute && node.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(node);
      }
    });
    return hiddenSiblings;
  }
  var ModalManager = /* @__PURE__ */ function() {
    function ModalManager2() {
      _classCallCheck(this, ModalManager2);
      this.modals = [];
      this.containers = [];
    }
    _createClass(ModalManager2, [{
      key: "add",
      value: function add(modal, container) {
        var modalIndex = this.modals.indexOf(modal);
        if (modalIndex !== -1) {
          return modalIndex;
        }
        modalIndex = this.modals.length;
        this.modals.push(modal);
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, false);
        }
        var hiddenSiblingNodes = getHiddenSiblings(container);
        ariaHiddenSiblings(container, modal.mountNode, modal.modalRef, hiddenSiblingNodes, true);
        var containerIndex = findIndexOf(this.containers, function(item) {
          return item.container === container;
        });
        if (containerIndex !== -1) {
          this.containers[containerIndex].modals.push(modal);
          return modalIndex;
        }
        this.containers.push({
          modals: [modal],
          container,
          restore: null,
          hiddenSiblingNodes
        });
        return modalIndex;
      }
    }, {
      key: "mount",
      value: function mount(modal, props) {
        var containerIndex = findIndexOf(this.containers, function(item) {
          return item.modals.indexOf(modal) !== -1;
        });
        var containerInfo = this.containers[containerIndex];
        if (!containerInfo.restore) {
          containerInfo.restore = handleContainer(containerInfo, props);
        }
      }
    }, {
      key: "remove",
      value: function remove(modal) {
        var modalIndex = this.modals.indexOf(modal);
        if (modalIndex === -1) {
          return modalIndex;
        }
        var containerIndex = findIndexOf(this.containers, function(item) {
          return item.modals.indexOf(modal) !== -1;
        });
        var containerInfo = this.containers[containerIndex];
        containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
        this.modals.splice(modalIndex, 1);
        if (containerInfo.modals.length === 0) {
          if (containerInfo.restore) {
            containerInfo.restore();
          }
          if (modal.modalRef) {
            ariaHidden(modal.modalRef, true);
          }
          ariaHiddenSiblings(containerInfo.container, modal.mountNode, modal.modalRef, containerInfo.hiddenSiblingNodes, false);
          this.containers.splice(containerIndex, 1);
        } else {
          var nextTop = containerInfo.modals[containerInfo.modals.length - 1];
          if (nextTop.modalRef) {
            ariaHidden(nextTop.modalRef, false);
          }
        }
        return modalIndex;
      }
    }, {
      key: "isTopModal",
      value: function isTopModal(modal) {
        return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
      }
    }]);
    return ModalManager2;
  }();

  // node_modules/@material-ui/core/esm/Unstable_TrapFocus/Unstable_TrapFocus.js
  var React32 = __toESM(require_react());
  var ReactDOM4 = __toESM(require_react_dom());
  var import_prop_types22 = __toESM(require_prop_types());
  var import_utils14 = __toESM(require_utils());
  function Unstable_TrapFocus(props) {
    var children = props.children, _props$disableAutoFoc = props.disableAutoFocus, disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$disableEnforce = props.disableEnforceFocus, disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce, _props$disableRestore = props.disableRestoreFocus, disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore, getDoc = props.getDoc, isEnabled = props.isEnabled, open = props.open;
    var ignoreNextEnforceFocus = React32.useRef();
    var sentinelStart = React32.useRef(null);
    var sentinelEnd = React32.useRef(null);
    var nodeToRestore = React32.useRef();
    var rootRef = React32.useRef(null);
    var handleOwnRef = React32.useCallback(function(instance) {
      rootRef.current = ReactDOM4.findDOMNode(instance);
    }, []);
    var handleRef = useForkRef(children.ref, handleOwnRef);
    var prevOpenRef = React32.useRef();
    React32.useEffect(function() {
      prevOpenRef.current = open;
    }, [open]);
    if (!prevOpenRef.current && open && typeof window !== "undefined") {
      nodeToRestore.current = getDoc().activeElement;
    }
    React32.useEffect(function() {
      if (!open) {
        return;
      }
      var doc = ownerDocument(rootRef.current);
      if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (true) {
            console.error(["Material-UI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", -1);
        }
        rootRef.current.focus();
      }
      var contain = function contain2() {
        var rootElement = rootRef.current;
        if (rootElement === null) {
          return;
        }
        if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {
          rootRef.current.focus();
        }
      };
      var loopFocus = function loopFocus2(event2) {
        if (disableEnforceFocus || !isEnabled() || event2.keyCode !== 9) {
          return;
        }
        if (doc.activeElement === rootRef.current) {
          ignoreNextEnforceFocus.current = true;
          if (event2.shiftKey) {
            sentinelEnd.current.focus();
          } else {
            sentinelStart.current.focus();
          }
        }
      };
      doc.addEventListener("focus", contain, true);
      doc.addEventListener("keydown", loopFocus, true);
      var interval = setInterval(function() {
        contain();
      }, 50);
      return function() {
        clearInterval(interval);
        doc.removeEventListener("focus", contain, true);
        doc.removeEventListener("keydown", loopFocus, true);
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);
    return /* @__PURE__ */ React32.createElement(React32.Fragment, null, /* @__PURE__ */ React32.createElement("div", {
      tabIndex: 0,
      ref: sentinelStart,
      "data-test": "sentinelStart"
    }), /* @__PURE__ */ React32.cloneElement(children, {
      ref: handleRef
    }), /* @__PURE__ */ React32.createElement("div", {
      tabIndex: 0,
      ref: sentinelEnd,
      "data-test": "sentinelEnd"
    }));
  }
  true ? Unstable_TrapFocus.propTypes = {
    children: import_prop_types22.default.node,
    disableAutoFocus: import_prop_types22.default.bool,
    disableEnforceFocus: import_prop_types22.default.bool,
    disableRestoreFocus: import_prop_types22.default.bool,
    getDoc: import_prop_types22.default.func.isRequired,
    isEnabled: import_prop_types22.default.func.isRequired,
    open: import_prop_types22.default.bool.isRequired
  } : void 0;
  if (true) {
    Unstable_TrapFocus["propTypes"] = (0, import_utils14.exactProp)(Unstable_TrapFocus.propTypes);
  }
  var Unstable_TrapFocus_default = Unstable_TrapFocus;

  // node_modules/@material-ui/core/esm/Modal/SimpleBackdrop.js
  var React33 = __toESM(require_react());
  var import_prop_types23 = __toESM(require_prop_types());
  var styles34 = {
    root: {
      zIndex: -1,
      position: "fixed",
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: "rgba(0, 0, 0, 0.5)",
      WebkitTapHighlightColor: "transparent"
    },
    invisible: {
      backgroundColor: "transparent"
    }
  };
  var SimpleBackdrop = /* @__PURE__ */ React33.forwardRef(function SimpleBackdrop2(props, ref) {
    var _props$invisible = props.invisible, invisible = _props$invisible === void 0 ? false : _props$invisible, open = props.open, other = _objectWithoutProperties(props, ["invisible", "open"]);
    return open ? /* @__PURE__ */ React33.createElement("div", _extends({
      "aria-hidden": true,
      ref
    }, other, {
      style: _extends({}, styles34.root, invisible ? styles34.invisible : {}, other.style)
    })) : null;
  });
  true ? SimpleBackdrop.propTypes = {
    invisible: import_prop_types23.default.bool,
    open: import_prop_types23.default.bool.isRequired
  } : void 0;
  var SimpleBackdrop_default = SimpleBackdrop;

  // node_modules/@material-ui/core/esm/Modal/Modal.js
  function getContainer2(container) {
    container = typeof container === "function" ? container() : container;
    return ReactDOM5.findDOMNode(container);
  }
  function getHasTransition(props) {
    return props.children ? props.children.props.hasOwnProperty("in") : false;
  }
  var defaultManager = new ModalManager();
  var styles35 = function styles36(theme2) {
    return {
      root: {
        position: "fixed",
        zIndex: theme2.zIndex.modal,
        right: 0,
        bottom: 0,
        top: 0,
        left: 0
      },
      hidden: {
        visibility: "hidden"
      }
    };
  };
  var Modal = /* @__PURE__ */ React34.forwardRef(function Modal2(inProps, ref) {
    var theme2 = (0, import_styles4.useTheme)();
    var props = (0, import_styles4.getThemeProps)({
      name: "MuiModal",
      props: _extends({}, inProps),
      theme: theme2
    });
    var _props$BackdropCompon = props.BackdropComponent, BackdropComponent = _props$BackdropCompon === void 0 ? SimpleBackdrop_default : _props$BackdropCompon, BackdropProps = props.BackdropProps, children = props.children, _props$closeAfterTran = props.closeAfterTransition, closeAfterTransition = _props$closeAfterTran === void 0 ? false : _props$closeAfterTran, container = props.container, _props$disableAutoFoc = props.disableAutoFocus, disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$disableBackdro = props.disableBackdropClick, disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro, _props$disableEnforce = props.disableEnforceFocus, disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce, _props$disableEscapeK = props.disableEscapeKeyDown, disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK, _props$disablePortal = props.disablePortal, disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal, _props$disableRestore = props.disableRestoreFocus, disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore, _props$disableScrollL = props.disableScrollLock, disableScrollLock = _props$disableScrollL === void 0 ? false : _props$disableScrollL, _props$hideBackdrop = props.hideBackdrop, hideBackdrop = _props$hideBackdrop === void 0 ? false : _props$hideBackdrop, _props$keepMounted = props.keepMounted, keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted, _props$manager = props.manager, manager = _props$manager === void 0 ? defaultManager : _props$manager, onBackdropClick = props.onBackdropClick, onClose = props.onClose, onEscapeKeyDown = props.onEscapeKeyDown, onRendered = props.onRendered, open = props.open, other = _objectWithoutProperties(props, ["BackdropComponent", "BackdropProps", "children", "closeAfterTransition", "container", "disableAutoFocus", "disableBackdropClick", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onEscapeKeyDown", "onRendered", "open"]);
    var _React$useState = React34.useState(true), exited = _React$useState[0], setExited = _React$useState[1];
    var modal = React34.useRef({});
    var mountNodeRef = React34.useRef(null);
    var modalRef = React34.useRef(null);
    var handleRef = useForkRef(modalRef, ref);
    var hasTransition = getHasTransition(props);
    var getDoc = function getDoc2() {
      return ownerDocument(mountNodeRef.current);
    };
    var getModal = function getModal2() {
      modal.current.modalRef = modalRef.current;
      modal.current.mountNode = mountNodeRef.current;
      return modal.current;
    };
    var handleMounted = function handleMounted2() {
      manager.mount(getModal(), {
        disableScrollLock
      });
      modalRef.current.scrollTop = 0;
    };
    var handleOpen = useEventCallback(function() {
      var resolvedContainer = getContainer2(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    var isTopModal = React34.useCallback(function() {
      return manager.isTopModal(getModal());
    }, [manager]);
    var handlePortalRef = useEventCallback(function(node) {
      mountNodeRef.current = node;
      if (!node) {
        return;
      }
      if (onRendered) {
        onRendered();
      }
      if (open && isTopModal()) {
        handleMounted();
      } else {
        ariaHidden(modalRef.current, true);
      }
    });
    var handleClose = React34.useCallback(function() {
      manager.remove(getModal());
    }, [manager]);
    React34.useEffect(function() {
      return function() {
        handleClose();
      };
    }, [handleClose]);
    React34.useEffect(function() {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    var handleEnter = function handleEnter2() {
      setExited(false);
    };
    var handleExited = function handleExited2() {
      setExited(true);
      if (closeAfterTransition) {
        handleClose();
      }
    };
    var handleBackdropClick = function handleBackdropClick2(event2) {
      if (event2.target !== event2.currentTarget) {
        return;
      }
      if (onBackdropClick) {
        onBackdropClick(event2);
      }
      if (!disableBackdropClick && onClose) {
        onClose(event2, "backdropClick");
      }
    };
    var handleKeyDown2 = function handleKeyDown3(event2) {
      if (event2.key !== "Escape" || !isTopModal()) {
        return;
      }
      if (onEscapeKeyDown) {
        onEscapeKeyDown(event2);
      }
      if (!disableEscapeKeyDown) {
        event2.stopPropagation();
        if (onClose) {
          onClose(event2, "escapeKeyDown");
        }
      }
    };
    var inlineStyle = styles35(theme2 || {
      zIndex: zIndex_default
    });
    var childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = children.props.tabIndex || "-1";
    }
    if (hasTransition) {
      childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
      childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
    }
    return /* @__PURE__ */ React34.createElement(Portal_default, {
      ref: handlePortalRef,
      container,
      disablePortal
    }, /* @__PURE__ */ React34.createElement("div", _extends({
      ref: handleRef,
      onKeyDown: handleKeyDown2,
      role: "presentation"
    }, other, {
      style: _extends({}, inlineStyle.root, !open && exited ? inlineStyle.hidden : {}, other.style)
    }), hideBackdrop ? null : /* @__PURE__ */ React34.createElement(BackdropComponent, _extends({
      open,
      onClick: handleBackdropClick
    }, BackdropProps)), /* @__PURE__ */ React34.createElement(Unstable_TrapFocus_default, {
      disableEnforceFocus,
      disableAutoFocus,
      disableRestoreFocus,
      getDoc,
      isEnabled: isTopModal,
      open
    }, /* @__PURE__ */ React34.cloneElement(children, childProps))));
  });
  true ? Modal.propTypes = {
    BackdropComponent: import_prop_types24.default.elementType,
    BackdropProps: import_prop_types24.default.object,
    children: import_utils15.elementAcceptingRef.isRequired,
    closeAfterTransition: import_prop_types24.default.bool,
    container: import_prop_types24.default.oneOfType([import_utils15.HTMLElementType, import_prop_types24.default.instanceOf(React34.Component), import_prop_types24.default.func]),
    disableAutoFocus: import_prop_types24.default.bool,
    disableBackdropClick: deprecatedPropType(import_prop_types24.default.bool, "Use the onClose prop with the `reason` argument to filter the `backdropClick` events."),
    disableEnforceFocus: import_prop_types24.default.bool,
    disableEscapeKeyDown: import_prop_types24.default.bool,
    disablePortal: import_prop_types24.default.bool,
    disableRestoreFocus: import_prop_types24.default.bool,
    disableScrollLock: import_prop_types24.default.bool,
    hideBackdrop: import_prop_types24.default.bool,
    keepMounted: import_prop_types24.default.bool,
    manager: import_prop_types24.default.object,
    onBackdropClick: deprecatedPropType(import_prop_types24.default.func, "Use the onClose prop with the `reason` argument to handle the `backdropClick` events."),
    onClose: import_prop_types24.default.func,
    onEscapeKeyDown: deprecatedPropType(import_prop_types24.default.func, "Use the onClose prop with the `reason` argument to handle the `escapeKeyDown` events."),
    onRendered: deprecatedPropType(import_prop_types24.default.func, "Use the ref instead."),
    open: import_prop_types24.default.bool.isRequired
  } : void 0;
  var Modal_default = Modal;

  // node_modules/@material-ui/core/esm/Grow/Grow.js
  var React35 = __toESM(require_react());
  var import_prop_types25 = __toESM(require_prop_types());
  var import_react_transition_group2 = __toESM(require_cjs());

  // node_modules/@material-ui/core/esm/transitions/utils.js
  var reflow = function reflow2(node) {
    return node.scrollTop;
  };
  function getTransitionProps(props, options) {
    var timeout = props.timeout, _props$style = props.style, style = _props$style === void 0 ? {} : _props$style;
    return {
      duration: style.transitionDuration || typeof timeout === "number" ? timeout : timeout[options.mode] || 0,
      delay: style.transitionDelay
    };
  }

  // node_modules/@material-ui/core/esm/Grow/Grow.js
  function getScale(value) {
    return "scale(".concat(value, ", ").concat(Math.pow(value, 2), ")");
  }
  var styles37 = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  var Grow = /* @__PURE__ */ React35.forwardRef(function Grow2(props, ref) {
    var children = props.children, _props$disableStrictM = props.disableStrictModeCompat, disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style = props.style, _props$timeout = props.timeout, timeout = _props$timeout === void 0 ? "auto" : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? import_react_transition_group2.Transition : _props$TransitionComp, other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
    var timer = React35.useRef();
    var autoTimeout = React35.useRef();
    var theme2 = useTheme();
    var enableStrictModeCompat = theme2.unstable_strictMode && !disableStrictModeCompat;
    var nodeRef = React35.useRef(null);
    var foreignRef = useForkRef(children.ref, ref);
    var handleRef = useForkRef(enableStrictModeCompat ? nodeRef : void 0, foreignRef);
    var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
      return function(nodeOrAppearing, maybeAppearing) {
        if (callback) {
          var _ref4 = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing], _ref23 = _slicedToArray(_ref4, 2), node = _ref23[0], isAppearing = _ref23[1];
          if (isAppearing === void 0) {
            callback(node);
          } else {
            callback(node, isAppearing);
          }
        }
      };
    };
    var handleEntering = normalizedTransitionCallback(onEntering);
    var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
      reflow(node);
      var _getTransitionProps = getTransitionProps({
        style,
        timeout
      }, {
        mode: "enter"
      }), transitionDuration = _getTransitionProps.duration, delay = _getTransitionProps.delay;
      var duration2;
      if (timeout === "auto") {
        duration2 = theme2.transitions.getAutoHeightDuration(node.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node.style.transition = [theme2.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme2.transitions.create("transform", {
        duration: duration2 * 0.666,
        delay
      })].join(",");
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    var handleEntered = normalizedTransitionCallback(onEntered);
    var handleExiting = normalizedTransitionCallback(onExiting);
    var handleExit = normalizedTransitionCallback(function(node) {
      var _getTransitionProps2 = getTransitionProps({
        style,
        timeout
      }, {
        mode: "exit"
      }), transitionDuration = _getTransitionProps2.duration, delay = _getTransitionProps2.delay;
      var duration2;
      if (timeout === "auto") {
        duration2 = theme2.transitions.getAutoHeightDuration(node.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node.style.transition = [theme2.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme2.transitions.create("transform", {
        duration: duration2 * 0.666,
        delay: delay || duration2 * 0.333
      })].join(",");
      node.style.opacity = "0";
      node.style.transform = getScale(0.75);
      if (onExit) {
        onExit(node);
      }
    });
    var handleExited = normalizedTransitionCallback(onExited);
    var addEndListener = function addEndListener2(nodeOrNext, maybeNext) {
      var next = enableStrictModeCompat ? nodeOrNext : maybeNext;
      if (timeout === "auto") {
        timer.current = setTimeout(next, autoTimeout.current || 0);
      }
    };
    React35.useEffect(function() {
      return function() {
        clearTimeout(timer.current);
      };
    }, []);
    return /* @__PURE__ */ React35.createElement(TransitionComponent, _extends({
      appear: true,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener,
      timeout: timeout === "auto" ? null : timeout
    }, other), function(state, childProps) {
      return /* @__PURE__ */ React35.cloneElement(children, _extends({
        style: _extends({
          opacity: 0,
          transform: getScale(0.75),
          visibility: state === "exited" && !inProp ? "hidden" : void 0
        }, styles37[state], style, children.props.style),
        ref: handleRef
      }, childProps));
    });
  });
  true ? Grow.propTypes = {
    children: import_prop_types25.default.element,
    disableStrictModeCompat: import_prop_types25.default.bool,
    in: import_prop_types25.default.bool,
    onEnter: import_prop_types25.default.func,
    onEntered: import_prop_types25.default.func,
    onEntering: import_prop_types25.default.func,
    onExit: import_prop_types25.default.func,
    onExited: import_prop_types25.default.func,
    onExiting: import_prop_types25.default.func,
    style: import_prop_types25.default.object,
    timeout: import_prop_types25.default.oneOfType([import_prop_types25.default.oneOf(["auto"]), import_prop_types25.default.number, import_prop_types25.default.shape({
      appear: import_prop_types25.default.number,
      enter: import_prop_types25.default.number,
      exit: import_prop_types25.default.number
    })])
  } : void 0;
  Grow.muiSupportAuto = true;
  var Grow_default = Grow;

  // node_modules/@material-ui/core/esm/Paper/Paper.js
  var React36 = __toESM(require_react());
  var import_prop_types26 = __toESM(require_prop_types());
  var import_clsx19 = __toESM(require_clsx());
  var import_utils17 = __toESM(require_utils());
  var styles38 = function styles39(theme2) {
    var elevations = {};
    theme2.shadows.forEach(function(shadow, index) {
      elevations["elevation".concat(index)] = {
        boxShadow: shadow
      };
    });
    return _extends({
      root: {
        backgroundColor: theme2.palette.background.paper,
        color: theme2.palette.text.primary,
        transition: theme2.transitions.create("box-shadow")
      },
      rounded: {
        borderRadius: theme2.shape.borderRadius
      },
      outlined: {
        border: "1px solid ".concat(theme2.palette.divider)
      }
    }, elevations);
  };
  var Paper = /* @__PURE__ */ React36.forwardRef(function Paper2(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component4 = _props$component === void 0 ? "div" : _props$component, _props$square = props.square, square = _props$square === void 0 ? false : _props$square, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 1 : _props$elevation, _props$variant = props.variant, variant = _props$variant === void 0 ? "elevation" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "component", "square", "elevation", "variant"]);
    return /* @__PURE__ */ React36.createElement(Component4, _extends({
      className: (0, import_clsx19.default)(classes.root, className, variant === "outlined" ? classes.outlined : classes["elevation".concat(elevation)], !square && classes.rounded),
      ref
    }, other));
  });
  true ? Paper.propTypes = {
    children: import_prop_types26.default.node,
    classes: import_prop_types26.default.object,
    className: import_prop_types26.default.string,
    component: import_prop_types26.default.elementType,
    elevation: (0, import_utils17.chainPropTypes)(import_prop_types26.default.number, function(props) {
      var classes = props.classes, elevation = props.elevation;
      if (classes === void 0) {
        return null;
      }
      if (elevation != null && classes["elevation".concat(elevation)] === void 0) {
        return new Error("Material-UI: This elevation `".concat(elevation, "` is not implemented."));
      }
      return null;
    }),
    square: import_prop_types26.default.bool,
    variant: import_prop_types26.default.oneOf(["elevation", "outlined"])
  } : void 0;
  var Paper_default = withStyles_default(styles38, {
    name: "MuiPaper"
  })(Paper);

  // node_modules/@material-ui/core/esm/Popover/Popover.js
  function getOffsetTop(rect, vertical) {
    var offset = 0;
    if (typeof vertical === "number") {
      offset = vertical;
    } else if (vertical === "center") {
      offset = rect.height / 2;
    } else if (vertical === "bottom") {
      offset = rect.height;
    }
    return offset;
  }
  function getOffsetLeft(rect, horizontal) {
    var offset = 0;
    if (typeof horizontal === "number") {
      offset = horizontal;
    } else if (horizontal === "center") {
      offset = rect.width / 2;
    } else if (horizontal === "right") {
      offset = rect.width;
    }
    return offset;
  }
  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical].map(function(n) {
      return typeof n === "number" ? "".concat(n, "px") : n;
    }).join(" ");
  }
  function getScrollParent(parent, child) {
    var element = child;
    var scrollTop = 0;
    while (element && element !== parent) {
      element = element.parentElement;
      scrollTop += element.scrollTop;
    }
    return scrollTop;
  }
  function getAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var styles40 = {
    root: {},
    paper: {
      position: "absolute",
      overflowY: "auto",
      overflowX: "hidden",
      minWidth: 16,
      minHeight: 16,
      maxWidth: "calc(100% - 32px)",
      maxHeight: "calc(100% - 32px)",
      outline: 0
    }
  };
  var Popover = /* @__PURE__ */ React37.forwardRef(function Popover2(props, ref) {
    var action = props.action, anchorEl = props.anchorEl, _props$anchorOrigin = props.anchorOrigin, anchorOrigin = _props$anchorOrigin === void 0 ? {
      vertical: "top",
      horizontal: "left"
    } : _props$anchorOrigin, anchorPosition = props.anchorPosition, _props$anchorReferenc = props.anchorReference, anchorReference = _props$anchorReferenc === void 0 ? "anchorEl" : _props$anchorReferenc, children = props.children, classes = props.classes, className = props.className, containerProp = props.container, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 8 : _props$elevation, getContentAnchorEl = props.getContentAnchorEl, _props$marginThreshol = props.marginThreshold, marginThreshold = _props$marginThreshol === void 0 ? 16 : _props$marginThreshol, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, open = props.open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, _props$transformOrigi = props.transformOrigin, transformOrigin = _props$transformOrigi === void 0 ? {
      vertical: "top",
      horizontal: "left"
    } : _props$transformOrigi, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Grow_default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDurationProp = _props$transitionDura === void 0 ? "auto" : _props$transitionDura, _props$TransitionProp = props.TransitionProps, TransitionProps = _props$TransitionProp === void 0 ? {} : _props$TransitionProp, other = _objectWithoutProperties(props, ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "classes", "className", "container", "elevation", "getContentAnchorEl", "marginThreshold", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"]);
    var paperRef = React37.useRef();
    var getAnchorOffset = React37.useCallback(function(contentAnchorOffset) {
      if (anchorReference === "anchorPosition") {
        if (true) {
          if (!anchorPosition) {
            console.error('Material-UI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      var resolvedAnchorEl = getAnchorEl(anchorEl);
      var anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
      var anchorRect = anchorElement.getBoundingClientRect();
      if (true) {
        var box = anchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      var anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : "center";
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorVertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    var getContentAnchorOffset = React37.useCallback(function(element) {
      var contentAnchorOffset = 0;
      if (getContentAnchorEl && anchorReference === "anchorEl") {
        var contentAnchorEl = getContentAnchorEl(element);
        if (contentAnchorEl && element.contains(contentAnchorEl)) {
          var scrollTop = getScrollParent(element, contentAnchorEl);
          contentAnchorOffset = contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;
        }
        if (true) {
          if (anchorOrigin.vertical !== "top") {
            console.error(["Material-UI: You can not change the default `anchorOrigin.vertical` value ", "when also providing the `getContentAnchorEl` prop to the popover component.", "Only use one of the two props.", "Set `getContentAnchorEl` to `null | undefined` or leave `anchorOrigin.vertical` unchanged."].join("\n"));
          }
        }
      }
      return contentAnchorOffset;
    }, [anchorOrigin.vertical, anchorReference, getContentAnchorEl]);
    var getTransformOrigin = React37.useCallback(function(elemRect) {
      var contentAnchorOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      return {
        vertical: getOffsetTop(elemRect, transformOrigin.vertical) + contentAnchorOffset,
        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
      };
    }, [transformOrigin.horizontal, transformOrigin.vertical]);
    var getPositioningStyle = React37.useCallback(function(element) {
      var contentAnchorOffset = getContentAnchorOffset(element);
      var elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      var elemTransformOrigin = getTransformOrigin(elemRect, contentAnchorOffset);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      var anchorOffset = getAnchorOffset(contentAnchorOffset);
      var top = anchorOffset.top - elemTransformOrigin.vertical;
      var left = anchorOffset.left - elemTransformOrigin.horizontal;
      var bottom = top + elemRect.height;
      var right = left + elemRect.width;
      var containerWindow = ownerWindow(getAnchorEl(anchorEl));
      var heightThreshold = containerWindow.innerHeight - marginThreshold;
      var widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (top < marginThreshold) {
        var diff = top - marginThreshold;
        top -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (bottom > heightThreshold) {
        var _diff = bottom - heightThreshold;
        top -= _diff;
        elemTransformOrigin.vertical += _diff;
      }
      if (true) {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["Material-UI: The popover component is too tall.", "Some part of it can not be seen on the screen (".concat(elemRect.height - heightThreshold, "px)."), "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (left < marginThreshold) {
        var _diff2 = left - marginThreshold;
        left -= _diff2;
        elemTransformOrigin.horizontal += _diff2;
      } else if (right > widthThreshold) {
        var _diff3 = right - widthThreshold;
        left -= _diff3;
        elemTransformOrigin.horizontal += _diff3;
      }
      return {
        top: "".concat(Math.round(top), "px"),
        left: "".concat(Math.round(left), "px"),
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getContentAnchorOffset, getTransformOrigin, marginThreshold]);
    var setPositioningStyles = React37.useCallback(function() {
      var element = paperRef.current;
      if (!element) {
        return;
      }
      var positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
    }, [getPositioningStyle]);
    var handleEntering = function handleEntering2(element, isAppearing) {
      if (onEntering) {
        onEntering(element, isAppearing);
      }
      setPositioningStyles();
    };
    var handlePaperRef = React37.useCallback(function(instance) {
      paperRef.current = ReactDOM6.findDOMNode(instance);
    }, []);
    React37.useEffect(function() {
      if (open) {
        setPositioningStyles();
      }
    });
    React37.useImperativeHandle(action, function() {
      return open ? {
        updatePosition: function updatePosition() {
          setPositioningStyles();
        }
      } : null;
    }, [open, setPositioningStyles]);
    React37.useEffect(function() {
      if (!open) {
        return void 0;
      }
      var handleResize = debounce(function() {
        setPositioningStyles();
      });
      window.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        window.removeEventListener("resize", handleResize);
      };
    }, [open, setPositioningStyles]);
    var transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    var container = containerProp || (anchorEl ? ownerDocument(getAnchorEl(anchorEl)).body : void 0);
    return /* @__PURE__ */ React37.createElement(Modal_default, _extends({
      container,
      open,
      ref,
      BackdropProps: {
        invisible: true
      },
      className: (0, import_clsx20.default)(classes.root, className)
    }, other), /* @__PURE__ */ React37.createElement(TransitionComponent, _extends({
      appear: true,
      in: open,
      onEnter,
      onEntered,
      onExit,
      onExited,
      onExiting,
      timeout: transitionDuration
    }, TransitionProps, {
      onEntering: createChainedFunction(handleEntering, TransitionProps.onEntering)
    }), /* @__PURE__ */ React37.createElement(Paper_default, _extends({
      elevation,
      ref: handlePaperRef
    }, PaperProps, {
      className: (0, import_clsx20.default)(classes.paper, PaperProps.className)
    }), children)));
  });
  true ? Popover.propTypes = {
    action: import_utils18.refType,
    anchorEl: (0, import_utils18.chainPropTypes)(import_prop_types27.default.oneOfType([import_utils18.HTMLElementType, import_prop_types27.default.func]), function(props) {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        var resolvedAnchorEl = getAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          var box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["Material-UI: The `anchorEl` prop provided to the component is invalid.", "It should be an Element instance but it's `".concat(resolvedAnchorEl, "` instead.")].join("\n"));
        }
      }
      return null;
    }),
    anchorOrigin: import_prop_types27.default.shape({
      horizontal: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["center", "left", "right"]), import_prop_types27.default.number]).isRequired,
      vertical: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["bottom", "center", "top"]), import_prop_types27.default.number]).isRequired
    }),
    anchorPosition: import_prop_types27.default.shape({
      left: import_prop_types27.default.number.isRequired,
      top: import_prop_types27.default.number.isRequired
    }),
    anchorReference: import_prop_types27.default.oneOf(["anchorEl", "anchorPosition", "none"]),
    children: import_prop_types27.default.node,
    classes: import_prop_types27.default.object,
    className: import_prop_types27.default.string,
    container: import_prop_types27.default.oneOfType([import_utils18.HTMLElementType, import_prop_types27.default.instanceOf(React37.Component), import_prop_types27.default.func]),
    elevation: import_prop_types27.default.number,
    getContentAnchorEl: import_prop_types27.default.func,
    marginThreshold: import_prop_types27.default.number,
    onClose: import_prop_types27.default.func,
    onEnter: deprecatedPropType(import_prop_types27.default.func, "Use the `TransitionProps` prop instead."),
    onEntered: deprecatedPropType(import_prop_types27.default.func, "Use the `TransitionProps` prop instead."),
    onEntering: deprecatedPropType(import_prop_types27.default.func, "Use the `TransitionProps` prop instead."),
    onExit: deprecatedPropType(import_prop_types27.default.func, "Use the `TransitionProps` prop instead."),
    onExited: deprecatedPropType(import_prop_types27.default.func, "Use the `TransitionProps` prop instead."),
    onExiting: deprecatedPropType(import_prop_types27.default.func, "Use the `TransitionProps` prop instead."),
    open: import_prop_types27.default.bool.isRequired,
    PaperProps: import_prop_types27.default.shape({
      component: import_utils18.elementTypeAcceptingRef
    }),
    transformOrigin: import_prop_types27.default.shape({
      horizontal: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["center", "left", "right"]), import_prop_types27.default.number]).isRequired,
      vertical: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["bottom", "center", "top"]), import_prop_types27.default.number]).isRequired
    }),
    TransitionComponent: import_prop_types27.default.elementType,
    transitionDuration: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["auto"]), import_prop_types27.default.number, import_prop_types27.default.shape({
      appear: import_prop_types27.default.number,
      enter: import_prop_types27.default.number,
      exit: import_prop_types27.default.number
    })]),
    TransitionProps: import_prop_types27.default.object
  } : void 0;
  var Popover_default = withStyles_default(styles40, {
    name: "MuiPopover"
  })(Popover);

  // node_modules/@material-ui/core/esm/MenuList/MenuList.js
  var React40 = __toESM(require_react());
  var import_react_is2 = __toESM(require_react_is2());
  var import_prop_types29 = __toESM(require_prop_types());
  var ReactDOM7 = __toESM(require_react_dom());

  // node_modules/@material-ui/core/esm/List/List.js
  var React39 = __toESM(require_react());
  var import_prop_types28 = __toESM(require_prop_types());
  var import_clsx21 = __toESM(require_clsx());

  // node_modules/@material-ui/core/esm/List/ListContext.js
  var React38 = __toESM(require_react());
  var ListContext = React38.createContext({});
  if (true) {
    ListContext.displayName = "ListContext";
  }
  var ListContext_default = ListContext;

  // node_modules/@material-ui/core/esm/List/List.js
  var styles41 = {
    root: {
      listStyle: "none",
      margin: 0,
      padding: 0,
      position: "relative"
    },
    padding: {
      paddingTop: 8,
      paddingBottom: 8
    },
    dense: {},
    subheader: {
      paddingTop: 0
    }
  };
  var List = /* @__PURE__ */ React39.forwardRef(function List2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component4 = _props$component === void 0 ? "ul" : _props$component, _props$dense = props.dense, dense = _props$dense === void 0 ? false : _props$dense, _props$disablePadding = props.disablePadding, disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding, subheader = props.subheader, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "dense", "disablePadding", "subheader"]);
    var context = React39.useMemo(function() {
      return {
        dense
      };
    }, [dense]);
    return /* @__PURE__ */ React39.createElement(ListContext_default.Provider, {
      value: context
    }, /* @__PURE__ */ React39.createElement(Component4, _extends({
      className: (0, import_clsx21.default)(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),
      ref
    }, other), subheader, children));
  });
  true ? List.propTypes = {
    children: import_prop_types28.default.node,
    classes: import_prop_types28.default.object.isRequired,
    className: import_prop_types28.default.string,
    component: import_prop_types28.default.elementType,
    dense: import_prop_types28.default.bool,
    disablePadding: import_prop_types28.default.bool,
    subheader: import_prop_types28.default.node
  } : void 0;
  var List_default = withStyles_default(styles41, {
    name: "MuiList"
  })(List);

  // node_modules/@material-ui/core/esm/MenuList/MenuList.js
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    var text = nextFocus.innerText;
    if (text === void 0) {
      text = nextFocus.textContent;
    }
    text = text.trim().toLowerCase();
    if (text.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }
    return text.indexOf(textCriteria.keys.join("")) === 0;
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    var wrappedOnce = false;
    var nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return;
        }
        wrappedOnce = true;
      }
      var nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return;
      }
    }
  }
  var useEnhancedEffect6 = typeof window === "undefined" ? React40.useEffect : React40.useLayoutEffect;
  var MenuList = /* @__PURE__ */ React40.forwardRef(function MenuList2(props, ref) {
    var actions = props.actions, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, _props$autoFocusItem = props.autoFocusItem, autoFocusItem = _props$autoFocusItem === void 0 ? false : _props$autoFocusItem, children = props.children, className = props.className, _props$disabledItemsF = props.disabledItemsFocusable, disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF, _props$disableListWra = props.disableListWrap, disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra, onKeyDown = props.onKeyDown, _props$variant = props.variant, variant = _props$variant === void 0 ? "selectedMenu" : _props$variant, other = _objectWithoutProperties(props, ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"]);
    var listRef = React40.useRef(null);
    var textCriteriaRef = React40.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect6(function() {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React40.useImperativeHandle(actions, function() {
      return {
        adjustStyleForScrollbar: function adjustStyleForScrollbar(containerElement, theme2) {
          var noExplicitWidth = !listRef.current.style.width;
          if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
            var scrollbarSize = "".concat(getScrollbarSize(true), "px");
            listRef.current.style[theme2.direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
            listRef.current.style.width = "calc(100% + ".concat(scrollbarSize, ")");
          }
          return listRef.current;
        }
      };
    }, []);
    var handleKeyDown2 = function handleKeyDown3(event2) {
      var list = listRef.current;
      var key = event2.key;
      var currentFocus = ownerDocument(list).activeElement;
      if (key === "ArrowDown") {
        event2.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "ArrowUp") {
        event2.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === "Home") {
        event2.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "End") {
        event2.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        var criteria = textCriteriaRef.current;
        var lowerKey = key.toLowerCase();
        var currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        var keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event2.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event2);
      }
    };
    var handleOwnRef = React40.useCallback(function(instance) {
      listRef.current = ReactDOM7.findDOMNode(instance);
    }, []);
    var handleRef = useForkRef(handleOwnRef, ref);
    var activeItemIndex = -1;
    React40.Children.forEach(children, function(child, index) {
      if (!/* @__PURE__ */ React40.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is2.isFragment)(child)) {
          console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    var items = React40.Children.map(children, function(child, index) {
      if (index === activeItemIndex) {
        var newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return /* @__PURE__ */ React40.cloneElement(child, newChildProps);
      }
      return child;
    });
    return /* @__PURE__ */ React40.createElement(List_default, _extends({
      role: "menu",
      ref: handleRef,
      className,
      onKeyDown: handleKeyDown2,
      tabIndex: autoFocus ? 0 : -1
    }, other), items);
  });
  true ? MenuList.propTypes = {
    autoFocus: import_prop_types29.default.bool,
    autoFocusItem: import_prop_types29.default.bool,
    children: import_prop_types29.default.node,
    className: import_prop_types29.default.string,
    disabledItemsFocusable: import_prop_types29.default.bool,
    disableListWrap: import_prop_types29.default.bool,
    onKeyDown: import_prop_types29.default.func,
    variant: import_prop_types29.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var MenuList_default = MenuList;

  // node_modules/@material-ui/core/esm/Menu/Menu.js
  var ReactDOM8 = __toESM(require_react_dom());
  var RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  var LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  var styles42 = {
    paper: {
      maxHeight: "calc(100% - 96px)",
      WebkitOverflowScrolling: "touch"
    },
    list: {
      outline: 0
    }
  };
  var Menu = /* @__PURE__ */ React41.forwardRef(function Menu2(props, ref) {
    var _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus, children = props.children, classes = props.classes, _props$disableAutoFoc = props.disableAutoFocusItem, disableAutoFocusItem = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$MenuListProps = props.MenuListProps, MenuListProps = _props$MenuListProps === void 0 ? {} : _props$MenuListProps, onClose = props.onClose, onEnteringProp = props.onEntering, open = props.open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, PopoverClasses = props.PopoverClasses, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? "auto" : _props$transitionDura, _props$TransitionProp = props.TransitionProps;
    _props$TransitionProp = _props$TransitionProp === void 0 ? {} : _props$TransitionProp;
    var onEntering = _props$TransitionProp.onEntering, TransitionProps = _objectWithoutProperties(_props$TransitionProp, ["onEntering"]), _props$variant = props.variant, variant = _props$variant === void 0 ? "selectedMenu" : _props$variant, other = _objectWithoutProperties(props, ["autoFocus", "children", "classes", "disableAutoFocusItem", "MenuListProps", "onClose", "onEntering", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"]);
    var theme2 = useTheme();
    var autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    var menuListActionsRef = React41.useRef(null);
    var contentAnchorRef = React41.useRef(null);
    var getContentAnchorEl = function getContentAnchorEl2() {
      return contentAnchorRef.current;
    };
    var handleEntering = function handleEntering2(element, isAppearing) {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, theme2);
      }
      if (onEnteringProp) {
        onEnteringProp(element, isAppearing);
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    var handleListKeyDown = function handleListKeyDown2(event2) {
      if (event2.key === "Tab") {
        event2.preventDefault();
        if (onClose) {
          onClose(event2, "tabKeyDown");
        }
      }
    };
    var activeItemIndex = -1;
    React41.Children.map(children, function(child, index) {
      if (!/* @__PURE__ */ React41.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is3.isFragment)(child)) {
          console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant !== "menu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    var items = React41.Children.map(children, function(child, index) {
      if (index === activeItemIndex) {
        return /* @__PURE__ */ React41.cloneElement(child, {
          ref: function ref2(instance) {
            contentAnchorRef.current = ReactDOM8.findDOMNode(instance);
            setRef(child.ref, instance);
          }
        });
      }
      return child;
    });
    return /* @__PURE__ */ React41.createElement(Popover_default, _extends({
      getContentAnchorEl,
      classes: PopoverClasses,
      onClose,
      TransitionProps: _extends({
        onEntering: handleEntering
      }, TransitionProps),
      anchorOrigin: theme2.direction === "rtl" ? RTL_ORIGIN : LTR_ORIGIN,
      transformOrigin: theme2.direction === "rtl" ? RTL_ORIGIN : LTR_ORIGIN,
      PaperProps: _extends({}, PaperProps, {
        classes: _extends({}, PaperProps.classes, {
          root: classes.paper
        })
      }),
      open,
      ref,
      transitionDuration
    }, other), /* @__PURE__ */ React41.createElement(MenuList_default, _extends({
      onKeyDown: handleListKeyDown,
      actions: menuListActionsRef,
      autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
      autoFocusItem,
      variant
    }, MenuListProps, {
      className: (0, import_clsx22.default)(classes.list, MenuListProps.className)
    }), items));
  });
  true ? Menu.propTypes = {
    anchorEl: import_prop_types30.default.oneOfType([import_utils19.HTMLElementType, import_prop_types30.default.func]),
    autoFocus: import_prop_types30.default.bool,
    children: import_prop_types30.default.node,
    classes: import_prop_types30.default.object,
    disableAutoFocusItem: import_prop_types30.default.bool,
    MenuListProps: import_prop_types30.default.object,
    onClose: import_prop_types30.default.func,
    onEnter: deprecatedPropType(import_prop_types30.default.func, "Use the `TransitionProps` prop instead."),
    onEntered: deprecatedPropType(import_prop_types30.default.func, "Use the `TransitionProps` prop instead."),
    onEntering: deprecatedPropType(import_prop_types30.default.func, "Use the `TransitionProps` prop instead."),
    onExit: deprecatedPropType(import_prop_types30.default.func, "Use the `TransitionProps` prop instead."),
    onExited: deprecatedPropType(import_prop_types30.default.func, "Use the `TransitionProps` prop instead."),
    onExiting: deprecatedPropType(import_prop_types30.default.func, "Use the `TransitionProps` prop instead."),
    open: import_prop_types30.default.bool.isRequired,
    PaperProps: import_prop_types30.default.object,
    PopoverClasses: import_prop_types30.default.object,
    transitionDuration: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["auto"]), import_prop_types30.default.number, import_prop_types30.default.shape({
      appear: import_prop_types30.default.number,
      enter: import_prop_types30.default.number,
      exit: import_prop_types30.default.number
    })]),
    TransitionProps: import_prop_types30.default.object,
    variant: import_prop_types30.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var Menu_default = withStyles_default(styles42, {
    name: "MuiMenu"
  })(Menu);

  // node_modules/@material-ui/core/esm/utils/useControlled.js
  var React42 = __toESM(require_react());
  function useControlled(_ref4) {
    var controlled = _ref4.controlled, defaultProp = _ref4.default, name = _ref4.name, _ref$state = _ref4.state, state = _ref$state === void 0 ? "value" : _ref$state;
    var _React$useRef = React42.useRef(controlled !== void 0), isControlled = _React$useRef.current;
    var _React$useState = React42.useState(defaultProp), valueState = _React$useState[0], setValue = _React$useState[1];
    var value = isControlled ? controlled : valueState;
    if (true) {
      React42.useEffect(function() {
        if (isControlled !== (controlled !== void 0)) {
          console.error(["Material-UI: A component is changing the ".concat(isControlled ? "" : "un", "controlled ").concat(state, " state of ").concat(name, " to be ").concat(isControlled ? "un" : "", "controlled."), "Elements should not switch from uncontrolled to controlled (or vice versa).", "Decide between using a controlled or uncontrolled ".concat(name, " ") + "element for the lifetime of the component.", "The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [controlled]);
      var _React$useRef2 = React42.useRef(defaultProp), defaultValue = _React$useRef2.current;
      React42.useEffect(function() {
        if (!isControlled && defaultValue !== defaultProp) {
          console.error(["Material-UI: A component is changing the default ".concat(state, " state of an uncontrolled ").concat(name, " after being initialized. ") + "To suppress this warning opt to use a controlled ".concat(name, ".")].join("\n"));
        }
      }, [JSON.stringify(defaultProp)]);
    }
    var setValueIfUncontrolled = React42.useCallback(function(newValue) {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }

  // node_modules/@material-ui/core/esm/Select/SelectInput.js
  function areEqualValues(a, b) {
    if (_typeof(b) === "object" && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  function isEmpty(display2) {
    return display2 == null || typeof display2 === "string" && !display2.trim();
  }
  var SelectInput = /* @__PURE__ */ React43.forwardRef(function SelectInput2(props, ref) {
    var ariaLabel = props["aria-label"], autoFocus = props.autoFocus, autoWidth = props.autoWidth, children = props.children, classes = props.classes, className = props.className, defaultValue = props.defaultValue, disabled = props.disabled, displayEmpty = props.displayEmpty, IconComponent = props.IconComponent, inputRefProp = props.inputRef, labelId = props.labelId, _props$MenuProps = props.MenuProps, MenuProps = _props$MenuProps === void 0 ? {} : _props$MenuProps, multiple = props.multiple, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onClose = props.onClose, onFocus = props.onFocus, onOpen = props.onOpen, openProp = props.open, readOnly = props.readOnly, renderValue = props.renderValue, _props$SelectDisplayP = props.SelectDisplayProps, SelectDisplayProps = _props$SelectDisplayP === void 0 ? {} : _props$SelectDisplayP, tabIndexProp = props.tabIndex, type = props.type, valueProp = props.value, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["aria-label", "autoFocus", "autoWidth", "children", "classes", "className", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"]);
    var _useControlled = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    }), _useControlled2 = _slicedToArray(_useControlled, 2), value = _useControlled2[0], setValue = _useControlled2[1];
    var inputRef = React43.useRef(null);
    var _React$useState = React43.useState(null), displayNode = _React$useState[0], setDisplayNode = _React$useState[1];
    var _React$useRef = React43.useRef(openProp != null), isOpenControlled = _React$useRef.current;
    var _React$useState2 = React43.useState(), menuMinWidthState = _React$useState2[0], setMenuMinWidthState = _React$useState2[1];
    var _React$useState3 = React43.useState(false), openState = _React$useState3[0], setOpenState = _React$useState3[1];
    var handleRef = useForkRef(ref, inputRefProp);
    React43.useImperativeHandle(handleRef, function() {
      return {
        focus: function focus() {
          displayNode.focus();
        },
        node: inputRef.current,
        value
      };
    }, [displayNode, value]);
    React43.useEffect(function() {
      if (autoFocus && displayNode) {
        displayNode.focus();
      }
    }, [autoFocus, displayNode]);
    React43.useEffect(function() {
      if (displayNode) {
        var label = ownerDocument(displayNode).getElementById(labelId);
        if (label) {
          var handler = function handler2() {
            if (getSelection().isCollapsed) {
              displayNode.focus();
            }
          };
          label.addEventListener("click", handler);
          return function() {
            label.removeEventListener("click", handler);
          };
        }
      }
      return void 0;
    }, [labelId, displayNode]);
    var update = function update2(open2, event2) {
      if (open2) {
        if (onOpen) {
          onOpen(event2);
        }
      } else if (onClose) {
        onClose(event2);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
        setOpenState(open2);
      }
    };
    var handleMouseDown = function handleMouseDown2(event2) {
      if (event2.button !== 0) {
        return;
      }
      event2.preventDefault();
      displayNode.focus();
      update(true, event2);
    };
    var handleClose = function handleClose2(event2) {
      update(false, event2);
    };
    var childrenArray = React43.Children.toArray(children);
    var handleChange = function handleChange2(event2) {
      var index = childrenArray.map(function(child2) {
        return child2.props.value;
      }).indexOf(event2.target.value);
      if (index === -1) {
        return;
      }
      var child = childrenArray[index];
      setValue(child.props.value);
      if (onChange) {
        onChange(event2, child);
      }
    };
    var handleItemClick = function handleItemClick2(child) {
      return function(event2) {
        if (!multiple) {
          update(false, event2);
        }
        var newValue;
        if (multiple) {
          newValue = Array.isArray(value) ? value.slice() : [];
          var itemIndex = value.indexOf(child.props.value);
          if (itemIndex === -1) {
            newValue.push(child.props.value);
          } else {
            newValue.splice(itemIndex, 1);
          }
        } else {
          newValue = child.props.value;
        }
        if (child.props.onClick) {
          child.props.onClick(event2);
        }
        if (value === newValue) {
          return;
        }
        setValue(newValue);
        if (onChange) {
          event2.persist();
          Object.defineProperty(event2, "target", {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(event2, child);
        }
      };
    };
    var handleKeyDown2 = function handleKeyDown3(event2) {
      if (!readOnly) {
        var validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          "Enter"
        ];
        if (validKeys.indexOf(event2.key) !== -1) {
          event2.preventDefault();
          update(true, event2);
        }
      }
    };
    var open = displayNode !== null && (isOpenControlled ? openProp : openState);
    var handleBlur = function handleBlur2(event2) {
      if (!open && onBlur) {
        event2.persist();
        Object.defineProperty(event2, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event2);
      }
    };
    delete other["aria-invalid"];
    var display2;
    var displaySingle;
    var displayMultiple = [];
    var computeDisplay = false;
    var foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display2 = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    var items = childrenArray.map(function(child) {
      if (!/* @__PURE__ */ React43.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is4.isFragment)(child)) {
          console.error(["Material-UI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      var selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(true ? "Material-UI: The `value` prop must be an array when using the `Select` component with `multiple`." : (0, import_utils.formatMuiErrorMessage)(2));
        }
        selected = value.some(function(v) {
          return areEqualValues(v, child.props.value);
        });
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      return /* @__PURE__ */ React43.cloneElement(child, {
        "aria-selected": selected ? "true" : void 0,
        onClick: handleItemClick(child),
        onKeyUp: function onKeyUp(event2) {
          if (event2.key === " ") {
            event2.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event2);
          }
        },
        role: "option",
        selected,
        value: void 0,
        "data-value": child.props.value
      });
    });
    if (true) {
      React43.useEffect(function() {
        if (!foundMatch && !multiple && value !== "") {
          var values = childrenArray.map(function(child) {
            return child.props.value;
          });
          console.warn(["Material-UI: You have provided an out-of-range value `".concat(value, "` for the select ").concat(name ? '(name="'.concat(name, '") ') : "", "component."), "Consider providing a value that matches one of the available options or ''.", "The available values are ".concat(values.filter(function(x) {
            return x != null;
          }).map(function(x) {
            return "`".concat(x, "`");
          }).join(", ") || '""', ".")].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }
    if (computeDisplay) {
      display2 = multiple ? displayMultiple.join(", ") : displaySingle;
    }
    var menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = displayNode.clientWidth;
    }
    var tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    var buttonId = SelectDisplayProps.id || (name ? "mui-component-select-".concat(name) : void 0);
    return /* @__PURE__ */ React43.createElement(React43.Fragment, null, /* @__PURE__ */ React43.createElement("div", _extends({
      className: (0, import_clsx23.default)(
        classes.root,
        classes.select,
        classes.selectMenu,
        classes[variant],
        className,
        disabled && classes.disabled
      ),
      ref: setDisplayNode,
      tabIndex,
      role: "button",
      "aria-disabled": disabled ? "true" : void 0,
      "aria-expanded": open ? "true" : void 0,
      "aria-haspopup": "listbox",
      "aria-label": ariaLabel,
      "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
      onKeyDown: handleKeyDown2,
      onMouseDown: disabled || readOnly ? null : handleMouseDown,
      onBlur: handleBlur,
      onFocus
    }, SelectDisplayProps, {
      id: buttonId
    }), isEmpty(display2) ? /* @__PURE__ */ React43.createElement("span", {
      dangerouslySetInnerHTML: {
        __html: "&#8203;"
      }
    }) : display2), /* @__PURE__ */ React43.createElement("input", _extends({
      value: Array.isArray(value) ? value.join(",") : value,
      name,
      ref: inputRef,
      "aria-hidden": true,
      onChange: handleChange,
      tabIndex: -1,
      className: classes.nativeInput,
      autoFocus
    }, other)), /* @__PURE__ */ React43.createElement(IconComponent, {
      className: (0, import_clsx23.default)(classes.icon, classes["icon".concat(capitalize(variant))], open && classes.iconOpen, disabled && classes.disabled)
    }), /* @__PURE__ */ React43.createElement(Menu_default, _extends({
      id: "menu-".concat(name || ""),
      anchorEl: displayNode,
      open,
      onClose: handleClose
    }, MenuProps, {
      MenuListProps: _extends({
        "aria-labelledby": labelId,
        role: "listbox",
        disableListWrap: true
      }, MenuProps.MenuListProps),
      PaperProps: _extends({}, MenuProps.PaperProps, {
        style: _extends({
          minWidth: menuMinWidth
        }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
      })
    }), items));
  });
  true ? SelectInput.propTypes = {
    "aria-label": import_prop_types31.default.string,
    autoFocus: import_prop_types31.default.bool,
    autoWidth: import_prop_types31.default.bool,
    children: import_prop_types31.default.node,
    classes: import_prop_types31.default.object.isRequired,
    className: import_prop_types31.default.string,
    defaultValue: import_prop_types31.default.any,
    disabled: import_prop_types31.default.bool,
    displayEmpty: import_prop_types31.default.bool,
    IconComponent: import_prop_types31.default.elementType.isRequired,
    inputRef: import_utils20.refType,
    labelId: import_prop_types31.default.string,
    MenuProps: import_prop_types31.default.object,
    multiple: import_prop_types31.default.bool,
    name: import_prop_types31.default.string,
    onBlur: import_prop_types31.default.func,
    onChange: import_prop_types31.default.func,
    onClose: import_prop_types31.default.func,
    onFocus: import_prop_types31.default.func,
    onOpen: import_prop_types31.default.func,
    open: import_prop_types31.default.bool,
    readOnly: import_prop_types31.default.bool,
    renderValue: import_prop_types31.default.func,
    SelectDisplayProps: import_prop_types31.default.object,
    tabIndex: import_prop_types31.default.oneOfType([import_prop_types31.default.number, import_prop_types31.default.string]),
    type: import_prop_types31.default.any,
    value: import_prop_types31.default.any,
    variant: import_prop_types31.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var SelectInput_default = SelectInput;

  // node_modules/@material-ui/core/esm/internal/svg-icons/ArrowDropDown.js
  var React44 = __toESM(require_react());
  var ArrowDropDown_default = createSvgIcon(/* @__PURE__ */ React44.createElement("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");

  // node_modules/@material-ui/core/esm/NativeSelect/NativeSelect.js
  var React46 = __toESM(require_react());
  var import_prop_types33 = __toESM(require_prop_types());

  // node_modules/@material-ui/core/esm/NativeSelect/NativeSelectInput.js
  var React45 = __toESM(require_react());
  var import_prop_types32 = __toESM(require_prop_types());
  var import_clsx24 = __toESM(require_clsx());
  var import_utils22 = __toESM(require_utils());
  var NativeSelectInput = /* @__PURE__ */ React45.forwardRef(function NativeSelectInput2(props, ref) {
    var classes = props.classes, className = props.className, disabled = props.disabled, IconComponent = props.IconComponent, inputRef = props.inputRef, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "disabled", "IconComponent", "inputRef", "variant"]);
    return /* @__PURE__ */ React45.createElement(React45.Fragment, null, /* @__PURE__ */ React45.createElement("select", _extends({
      className: (0, import_clsx24.default)(
        classes.root,
        classes.select,
        classes[variant],
        className,
        disabled && classes.disabled
      ),
      disabled,
      ref: inputRef || ref
    }, other)), props.multiple ? null : /* @__PURE__ */ React45.createElement(IconComponent, {
      className: (0, import_clsx24.default)(classes.icon, classes["icon".concat(capitalize(variant))], disabled && classes.disabled)
    }));
  });
  true ? NativeSelectInput.propTypes = {
    children: import_prop_types32.default.node,
    classes: import_prop_types32.default.object.isRequired,
    className: import_prop_types32.default.string,
    disabled: import_prop_types32.default.bool,
    IconComponent: import_prop_types32.default.elementType.isRequired,
    inputRef: import_utils22.refType,
    multiple: import_prop_types32.default.bool,
    name: import_prop_types32.default.string,
    onChange: import_prop_types32.default.func,
    value: import_prop_types32.default.any,
    variant: import_prop_types32.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var NativeSelectInput_default = NativeSelectInput;

  // node_modules/@material-ui/core/esm/NativeSelect/NativeSelect.js
  var styles43 = function styles44(theme2) {
    return {
      root: {},
      select: {
        "-moz-appearance": "none",
        "-webkit-appearance": "none",
        userSelect: "none",
        borderRadius: 0,
        minWidth: 16,
        cursor: "pointer",
        "&:focus": {
          backgroundColor: theme2.palette.type === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)",
          borderRadius: 0
        },
        "&::-ms-expand": {
          display: "none"
        },
        "&$disabled": {
          cursor: "default"
        },
        "&[multiple]": {
          height: "auto"
        },
        "&:not([multiple]) option, &:not([multiple]) optgroup": {
          backgroundColor: theme2.palette.background.paper
        },
        "&&": {
          paddingRight: 24
        }
      },
      filled: {
        "&&": {
          paddingRight: 32
        }
      },
      outlined: {
        borderRadius: theme2.shape.borderRadius,
        "&&": {
          paddingRight: 32
        }
      },
      selectMenu: {
        height: "auto",
        minHeight: "1.1876em",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        overflow: "hidden"
      },
      disabled: {},
      icon: {
        position: "absolute",
        right: 0,
        top: "calc(50% - 12px)",
        pointerEvents: "none",
        color: theme2.palette.action.active,
        "&$disabled": {
          color: theme2.palette.action.disabled
        }
      },
      iconOpen: {
        transform: "rotate(180deg)"
      },
      iconFilled: {
        right: 7
      },
      iconOutlined: {
        right: 7
      },
      nativeInput: {
        bottom: 0,
        left: 0,
        position: "absolute",
        opacity: 0,
        pointerEvents: "none",
        width: "100%"
      }
    };
  };
  var defaultInput = /* @__PURE__ */ React46.createElement(Input_default, null);
  var NativeSelect = /* @__PURE__ */ React46.forwardRef(function NativeSelect2(props, ref) {
    var children = props.children, classes = props.classes, _props$IconComponent = props.IconComponent, IconComponent = _props$IconComponent === void 0 ? ArrowDropDown_default : _props$IconComponent, _props$input = props.input, input = _props$input === void 0 ? defaultInput : _props$input, inputProps = props.inputProps, variant = props.variant, other = _objectWithoutProperties(props, ["children", "classes", "IconComponent", "input", "inputProps", "variant"]);
    var muiFormControl = useFormControl2();
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant"]
    });
    return /* @__PURE__ */ React46.cloneElement(input, _extends({
      inputComponent: NativeSelectInput_default,
      inputProps: _extends({
        children,
        classes,
        IconComponent,
        variant: fcs.variant,
        type: void 0
      }, inputProps, input ? input.props.inputProps : {}),
      ref
    }, other));
  });
  true ? NativeSelect.propTypes = {
    children: import_prop_types33.default.node,
    classes: import_prop_types33.default.object,
    IconComponent: import_prop_types33.default.elementType,
    input: import_prop_types33.default.element,
    inputProps: import_prop_types33.default.object,
    onChange: import_prop_types33.default.func,
    value: import_prop_types33.default.any,
    variant: import_prop_types33.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  NativeSelect.muiName = "Select";
  var NativeSelect_default = withStyles_default(styles43, {
    name: "MuiNativeSelect"
  })(NativeSelect);

  // node_modules/@material-ui/core/esm/Select/Select.js
  var styles45 = styles43;
  var _ref3 = /* @__PURE__ */ React47.createElement(Input_default, null);
  var _ref22 = /* @__PURE__ */ React47.createElement(FilledInput_default, null);
  var Select = /* @__PURE__ */ React47.forwardRef(function Select2(props, ref) {
    var _props$autoWidth = props.autoWidth, autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth, children = props.children, classes = props.classes, _props$displayEmpty = props.displayEmpty, displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty, _props$IconComponent = props.IconComponent, IconComponent = _props$IconComponent === void 0 ? ArrowDropDown_default : _props$IconComponent, id = props.id, input = props.input, inputProps = props.inputProps, label = props.label, labelId = props.labelId, _props$labelWidth = props.labelWidth, labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth, MenuProps = props.MenuProps, _props$multiple = props.multiple, multiple = _props$multiple === void 0 ? false : _props$multiple, _props$native = props.native, native = _props$native === void 0 ? false : _props$native, onClose = props.onClose, onOpen = props.onOpen, open = props.open, renderValue = props.renderValue, SelectDisplayProps = props.SelectDisplayProps, _props$variant = props.variant, variantProps = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["autoWidth", "children", "classes", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "labelWidth", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"]);
    var inputComponent = native ? NativeSelectInput_default : SelectInput_default;
    var muiFormControl = useFormControl2();
    var fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant"]
    });
    var variant = fcs.variant || variantProps;
    var InputComponent = input || {
      standard: _ref3,
      outlined: /* @__PURE__ */ React47.createElement(OutlinedInput_default, {
        label,
        labelWidth
      }),
      filled: _ref22
    }[variant];
    return /* @__PURE__ */ React47.cloneElement(InputComponent, _extends({
      inputComponent,
      inputProps: _extends({
        children,
        IconComponent,
        variant,
        type: void 0,
        multiple
      }, native ? {
        id
      } : {
        autoWidth,
        displayEmpty,
        labelId,
        MenuProps,
        onClose,
        onOpen,
        open,
        renderValue,
        SelectDisplayProps: _extends({
          id
        }, SelectDisplayProps)
      }, inputProps, {
        classes: inputProps ? (0, import_styles5.mergeClasses)({
          baseClasses: classes,
          newClasses: inputProps.classes,
          Component: Select2
        }) : classes
      }, input ? input.props.inputProps : {}),
      ref
    }, other));
  });
  true ? Select.propTypes = {
    autoWidth: import_prop_types34.default.bool,
    children: import_prop_types34.default.node,
    classes: import_prop_types34.default.object,
    defaultValue: import_prop_types34.default.any,
    displayEmpty: import_prop_types34.default.bool,
    IconComponent: import_prop_types34.default.elementType,
    id: import_prop_types34.default.string,
    input: import_prop_types34.default.element,
    inputProps: import_prop_types34.default.object,
    label: import_prop_types34.default.node,
    labelId: import_prop_types34.default.string,
    labelWidth: import_prop_types34.default.number,
    MenuProps: import_prop_types34.default.object,
    multiple: import_prop_types34.default.bool,
    native: import_prop_types34.default.bool,
    onChange: import_prop_types34.default.func,
    onClose: import_prop_types34.default.func,
    onOpen: import_prop_types34.default.func,
    open: import_prop_types34.default.bool,
    renderValue: import_prop_types34.default.func,
    SelectDisplayProps: import_prop_types34.default.object,
    value: import_prop_types34.default.any,
    variant: import_prop_types34.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  Select.muiName = "Select";
  var Select_default = withStyles_default(styles45, {
    name: "MuiSelect"
  })(Select);

  // node_modules/@material-ui/core/esm/TextField/TextField.js
  var variantComponent = {
    standard: Input_default,
    filled: FilledInput_default,
    outlined: OutlinedInput_default
  };
  var styles46 = {
    root: {}
  };
  var TextField = /* @__PURE__ */ React48.forwardRef(function TextField2(props, ref) {
    var autoComplete = props.autoComplete, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "primary" : _props$color, defaultValue = props.defaultValue, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$error = props.error, error = _props$error === void 0 ? false : _props$error, FormHelperTextProps = props.FormHelperTextProps, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, helperText = props.helperText, hiddenLabel = props.hiddenLabel, id = props.id, InputLabelProps = props.InputLabelProps, inputProps = props.inputProps, InputProps = props.InputProps, inputRef = props.inputRef, label = props.label, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, placeholder = props.placeholder, _props$required = props.required, required = _props$required === void 0 ? false : _props$required, rows = props.rows, rowsMax = props.rowsMax, maxRows = props.maxRows, minRows = props.minRows, _props$select = props.select, select = _props$select === void 0 ? false : _props$select, SelectProps = props.SelectProps, type = props.type, value = props.value, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["autoComplete", "autoFocus", "children", "classes", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "hiddenLabel", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "rowsMax", "maxRows", "minRows", "select", "SelectProps", "type", "value", "variant"]);
    if (true) {
      if (select && !children) {
        console.error("Material-UI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    var InputMore = {};
    if (variant === "outlined") {
      if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
        InputMore.notched = InputLabelProps.shrink;
      }
      if (label) {
        var _InputLabelProps$requ;
        var displayRequired = (_InputLabelProps$requ = InputLabelProps === null || InputLabelProps === void 0 ? void 0 : InputLabelProps.required) !== null && _InputLabelProps$requ !== void 0 ? _InputLabelProps$requ : required;
        InputMore.label = /* @__PURE__ */ React48.createElement(React48.Fragment, null, label, displayRequired && "\xA0*");
      }
    }
    if (select) {
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = void 0;
      }
      InputMore["aria-describedby"] = void 0;
    }
    var helperTextId = helperText && id ? "".concat(id, "-helper-text") : void 0;
    var inputLabelId = label && id ? "".concat(id, "-label") : void 0;
    var InputComponent = variantComponent[variant];
    var InputElement = /* @__PURE__ */ React48.createElement(InputComponent, _extends({
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name,
      rows,
      rowsMax,
      maxRows,
      minRows,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      inputProps
    }, InputMore, InputProps));
    return /* @__PURE__ */ React48.createElement(FormControl_default, _extends({
      className: (0, import_clsx25.default)(classes.root, className),
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      ref,
      required,
      color,
      variant
    }, other), label && /* @__PURE__ */ React48.createElement(InputLabel_default, _extends({
      htmlFor: id,
      id: inputLabelId
    }, InputLabelProps), label), select ? /* @__PURE__ */ React48.createElement(Select_default, _extends({
      "aria-describedby": helperTextId,
      id,
      labelId: inputLabelId,
      value,
      input: InputElement
    }, SelectProps), children) : InputElement, helperText && /* @__PURE__ */ React48.createElement(FormHelperText_default, _extends({
      id: helperTextId
    }, FormHelperTextProps), helperText));
  });
  true ? TextField.propTypes = {
    autoComplete: import_prop_types35.default.string,
    autoFocus: import_prop_types35.default.bool,
    children: import_prop_types35.default.node,
    classes: import_prop_types35.default.object,
    className: import_prop_types35.default.string,
    color: import_prop_types35.default.oneOf(["primary", "secondary"]),
    defaultValue: import_prop_types35.default.any,
    disabled: import_prop_types35.default.bool,
    error: import_prop_types35.default.bool,
    FormHelperTextProps: import_prop_types35.default.object,
    fullWidth: import_prop_types35.default.bool,
    helperText: import_prop_types35.default.node,
    hiddenLabel: import_prop_types35.default.bool,
    id: import_prop_types35.default.string,
    InputLabelProps: import_prop_types35.default.object,
    inputProps: import_prop_types35.default.object,
    InputProps: import_prop_types35.default.object,
    inputRef: import_utils23.refType,
    label: import_prop_types35.default.node,
    margin: import_prop_types35.default.oneOf(["dense", "none", "normal"]),
    maxRows: import_prop_types35.default.oneOfType([import_prop_types35.default.number, import_prop_types35.default.string]),
    minRows: import_prop_types35.default.oneOfType([import_prop_types35.default.number, import_prop_types35.default.string]),
    multiline: import_prop_types35.default.bool,
    name: import_prop_types35.default.string,
    onBlur: import_prop_types35.default.func,
    onChange: import_prop_types35.default.func,
    onFocus: import_prop_types35.default.func,
    placeholder: import_prop_types35.default.string,
    required: import_prop_types35.default.bool,
    rows: deprecatedPropType(import_prop_types35.default.oneOfType([import_prop_types35.default.number, import_prop_types35.default.string]), "Use `minRows` instead"),
    rowsMax: deprecatedPropType(import_prop_types35.default.oneOfType([import_prop_types35.default.number, import_prop_types35.default.string]), "Use `maxRows` instead"),
    select: import_prop_types35.default.bool,
    SelectProps: import_prop_types35.default.object,
    size: import_prop_types35.default.oneOf(["medium", "small"]),
    type: import_prop_types35.default.string,
    value: import_prop_types35.default.any,
    variant: import_prop_types35.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var TextField_default = withStyles_default(styles46, {
    name: "MuiTextField"
  })(TextField);

  // admin/src/components/ezo-general.tsx
  var import_react11 = __toESM(require_react());

  // admin/src/components/dropdown.tsx
  var import_i18n = __toESM(require_i18n());

  // node_modules/@material-ui/core/esm/MenuItem/MenuItem.js
  var React50 = __toESM(require_react());
  var import_prop_types37 = __toESM(require_prop_types());
  var import_clsx27 = __toESM(require_clsx());

  // node_modules/@material-ui/core/esm/ListItem/ListItem.js
  var React49 = __toESM(require_react());
  var import_prop_types36 = __toESM(require_prop_types());
  var import_clsx26 = __toESM(require_clsx());
  var import_utils24 = __toESM(require_utils());
  var ReactDOM9 = __toESM(require_react_dom());
  var styles47 = function styles48(theme2) {
    return {
      root: {
        display: "flex",
        justifyContent: "flex-start",
        alignItems: "center",
        position: "relative",
        textDecoration: "none",
        width: "100%",
        boxSizing: "border-box",
        textAlign: "left",
        paddingTop: 8,
        paddingBottom: 8,
        "&$focusVisible": {
          backgroundColor: theme2.palette.action.selected
        },
        "&$selected, &$selected:hover": {
          backgroundColor: theme2.palette.action.selected
        },
        "&$disabled": {
          opacity: 0.5
        }
      },
      container: {
        position: "relative"
      },
      focusVisible: {},
      dense: {
        paddingTop: 4,
        paddingBottom: 4
      },
      alignItemsFlexStart: {
        alignItems: "flex-start"
      },
      disabled: {},
      divider: {
        borderBottom: "1px solid ".concat(theme2.palette.divider),
        backgroundClip: "padding-box"
      },
      gutters: {
        paddingLeft: 16,
        paddingRight: 16
      },
      button: {
        transition: theme2.transitions.create("background-color", {
          duration: theme2.transitions.duration.shortest
        }),
        "&:hover": {
          textDecoration: "none",
          backgroundColor: theme2.palette.action.hover,
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      secondaryAction: {
        paddingRight: 48
      },
      selected: {}
    };
  };
  var useEnhancedEffect7 = typeof window === "undefined" ? React49.useEffect : React49.useLayoutEffect;
  var ListItem = /* @__PURE__ */ React49.forwardRef(function ListItem2(props, ref) {
    var _props$alignItems = props.alignItems, alignItems = _props$alignItems === void 0 ? "center" : _props$alignItems, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, _props$button = props.button, button = _props$button === void 0 ? false : _props$button, childrenProp = props.children, classes = props.classes, className = props.className, componentProp = props.component, _props$ContainerCompo = props.ContainerComponent, ContainerComponent = _props$ContainerCompo === void 0 ? "li" : _props$ContainerCompo, _props$ContainerProps = props.ContainerProps;
    _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;
    var ContainerClassName = _props$ContainerProps.className, ContainerProps = _objectWithoutProperties(_props$ContainerProps, ["className"]), _props$dense = props.dense, dense = _props$dense === void 0 ? false : _props$dense, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$divider = props.divider, divider = _props$divider === void 0 ? false : _props$divider, focusVisibleClassName = props.focusVisibleClassName, _props$selected = props.selected, selected = _props$selected === void 0 ? false : _props$selected, other = _objectWithoutProperties(props, ["alignItems", "autoFocus", "button", "children", "classes", "className", "component", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "divider", "focusVisibleClassName", "selected"]);
    var context = React49.useContext(ListContext_default);
    var childContext = {
      dense: dense || context.dense || false,
      alignItems
    };
    var listItemRef = React49.useRef(null);
    useEnhancedEffect7(function() {
      if (autoFocus) {
        if (listItemRef.current) {
          listItemRef.current.focus();
        } else if (true) {
          console.error("Material-UI: Unable to set focus to a ListItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    var children = React49.Children.toArray(childrenProp);
    var hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ["ListItemSecondaryAction"]);
    var handleOwnRef = React49.useCallback(function(instance) {
      listItemRef.current = ReactDOM9.findDOMNode(instance);
    }, []);
    var handleRef = useForkRef(handleOwnRef, ref);
    var componentProps = _extends({
      className: (0, import_clsx26.default)(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems !== "center" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),
      disabled
    }, other);
    var Component4 = componentProp || "li";
    if (button) {
      componentProps.component = componentProp || "div";
      componentProps.focusVisibleClassName = (0, import_clsx26.default)(classes.focusVisible, focusVisibleClassName);
      Component4 = ButtonBase_default;
    }
    if (hasSecondaryAction) {
      Component4 = !componentProps.component && !componentProp ? "div" : Component4;
      if (ContainerComponent === "li") {
        if (Component4 === "li") {
          Component4 = "div";
        } else if (componentProps.component === "li") {
          componentProps.component = "div";
        }
      }
      return /* @__PURE__ */ React49.createElement(ListContext_default.Provider, {
        value: childContext
      }, /* @__PURE__ */ React49.createElement(ContainerComponent, _extends({
        className: (0, import_clsx26.default)(classes.container, ContainerClassName),
        ref: handleRef
      }, ContainerProps), /* @__PURE__ */ React49.createElement(Component4, componentProps, children), children.pop()));
    }
    return /* @__PURE__ */ React49.createElement(ListContext_default.Provider, {
      value: childContext
    }, /* @__PURE__ */ React49.createElement(Component4, _extends({
      ref: handleRef
    }, componentProps), children));
  });
  true ? ListItem.propTypes = {
    alignItems: import_prop_types36.default.oneOf(["flex-start", "center"]),
    autoFocus: import_prop_types36.default.bool,
    button: import_prop_types36.default.bool,
    children: (0, import_utils24.chainPropTypes)(import_prop_types36.default.node, function(props) {
      var children = React49.Children.toArray(props.children);
      var secondaryActionIndex = -1;
      for (var i = children.length - 1; i >= 0; i -= 1) {
        var child = children[i];
        if (isMuiElement(child, ["ListItemSecondaryAction"])) {
          secondaryActionIndex = i;
          break;
        }
      }
      if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
        return new Error("Material-UI: You used an element after ListItemSecondaryAction. For ListItem to detect that it has a secondary action you must pass it as the last child to ListItem.");
      }
      return null;
    }),
    classes: import_prop_types36.default.object.isRequired,
    className: import_prop_types36.default.string,
    component: import_prop_types36.default.elementType,
    ContainerComponent: import_prop_types36.default.elementType,
    ContainerProps: import_prop_types36.default.object,
    dense: import_prop_types36.default.bool,
    disabled: import_prop_types36.default.bool,
    disableGutters: import_prop_types36.default.bool,
    divider: import_prop_types36.default.bool,
    focusVisibleClassName: import_prop_types36.default.string,
    selected: import_prop_types36.default.bool
  } : void 0;
  var ListItem_default = withStyles_default(styles47, {
    name: "MuiListItem"
  })(ListItem);

  // node_modules/@material-ui/core/esm/MenuItem/MenuItem.js
  var styles49 = function styles50(theme2) {
    return {
      root: _extends({}, theme2.typography.body1, _defineProperty({
        minHeight: 48,
        paddingTop: 6,
        paddingBottom: 6,
        boxSizing: "border-box",
        width: "auto",
        overflow: "hidden",
        whiteSpace: "nowrap"
      }, theme2.breakpoints.up("sm"), {
        minHeight: "auto"
      })),
      gutters: {},
      selected: {},
      dense: _extends({}, theme2.typography.body2, {
        minHeight: "auto"
      })
    };
  };
  var MenuItem = /* @__PURE__ */ React50.forwardRef(function MenuItem2(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, component = _props$component === void 0 ? "li" : _props$component, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, ListItemClasses = props.ListItemClasses, _props$role = props.role, role = _props$role === void 0 ? "menuitem" : _props$role, selected = props.selected, tabIndexProp = props.tabIndex, other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "ListItemClasses", "role", "selected", "tabIndex"]);
    var tabIndex;
    if (!props.disabled) {
      tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
    }
    return /* @__PURE__ */ React50.createElement(ListItem_default, _extends({
      button: true,
      role,
      tabIndex,
      component,
      selected,
      disableGutters,
      classes: _extends({
        dense: classes.dense
      }, ListItemClasses),
      className: (0, import_clsx27.default)(classes.root, className, selected && classes.selected, !disableGutters && classes.gutters),
      ref
    }, other));
  });
  true ? MenuItem.propTypes = {
    children: import_prop_types37.default.node,
    classes: import_prop_types37.default.object.isRequired,
    className: import_prop_types37.default.string,
    component: import_prop_types37.default.elementType,
    dense: import_prop_types37.default.bool,
    disabled: import_prop_types37.default.bool,
    disableGutters: import_prop_types37.default.bool,
    ListItemClasses: import_prop_types37.default.object,
    role: import_prop_types37.default.string,
    selected: import_prop_types37.default.bool,
    tabIndex: import_prop_types37.default.number
  } : void 0;
  var MenuItem_default = withStyles_default(styles49, {
    name: "MuiMenuItem"
  })(MenuItem);

  // admin/src/components/dropdown.tsx
  var import_react3 = __toESM(require_react());
  var Dropdown = class extends import_react3.default.Component {
    render() {
      const { title, attr, options, value, disabled } = this.props;
      return /* @__PURE__ */ import_react3.default.createElement(FormControl_default, { style: { marginTop: -5, ...this.props.style }, disabled, fullWidth: true }, title && /* @__PURE__ */ import_react3.default.createElement(FormHelperText_default, null, import_i18n.default.t(title)), /* @__PURE__ */ import_react3.default.createElement(
        Select_default,
        {
          value: value || "_",
          onChange: (e) => this.props.onChange(e.target.value === "_" ? "" : e.target.value),
          input: /* @__PURE__ */ import_react3.default.createElement(Input_default, { name: attr, id: attr + "-helper" }),
          fullWidth: true,
          style: { marginTop: -1 }
        },
        options.map((item) => /* @__PURE__ */ import_react3.default.createElement(MenuItem_default, { key: "key-" + item.value, value: item.value || "_", disabled: item.disabled }, item.title))
      ));
    }
  };

  // admin/src/devices/do.tsx
  var import_i18n2 = __toESM(require_i18n());
  var import_Button = __toESM(require_Button2());

  // node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js
  var React53 = __toESM(require_react());
  var import_prop_types39 = __toESM(require_prop_types());
  var import_clsx29 = __toESM(require_clsx());

  // node_modules/@material-ui/core/esm/Typography/Typography.js
  var React52 = __toESM(require_react());
  var import_prop_types38 = __toESM(require_prop_types());
  var import_clsx28 = __toESM(require_clsx());
  var styles51 = function styles52(theme2) {
    return {
      root: {
        margin: 0
      },
      body2: theme2.typography.body2,
      body1: theme2.typography.body1,
      caption: theme2.typography.caption,
      button: theme2.typography.button,
      h1: theme2.typography.h1,
      h2: theme2.typography.h2,
      h3: theme2.typography.h3,
      h4: theme2.typography.h4,
      h5: theme2.typography.h5,
      h6: theme2.typography.h6,
      subtitle1: theme2.typography.subtitle1,
      subtitle2: theme2.typography.subtitle2,
      overline: theme2.typography.overline,
      srOnly: {
        position: "absolute",
        height: 1,
        width: 1,
        overflow: "hidden"
      },
      alignLeft: {
        textAlign: "left"
      },
      alignCenter: {
        textAlign: "center"
      },
      alignRight: {
        textAlign: "right"
      },
      alignJustify: {
        textAlign: "justify"
      },
      noWrap: {
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      },
      gutterBottom: {
        marginBottom: "0.35em"
      },
      paragraph: {
        marginBottom: 16
      },
      colorInherit: {
        color: "inherit"
      },
      colorPrimary: {
        color: theme2.palette.primary.main
      },
      colorSecondary: {
        color: theme2.palette.secondary.main
      },
      colorTextPrimary: {
        color: theme2.palette.text.primary
      },
      colorTextSecondary: {
        color: theme2.palette.text.secondary
      },
      colorError: {
        color: theme2.palette.error.main
      },
      displayInline: {
        display: "inline"
      },
      displayBlock: {
        display: "block"
      }
    };
  };
  var defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p"
  };
  var Typography = /* @__PURE__ */ React52.forwardRef(function Typography2(props, ref) {
    var _props$align = props.align, align = _props$align === void 0 ? "inherit" : _props$align, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "initial" : _props$color, component = props.component, _props$display = props.display, display2 = _props$display === void 0 ? "initial" : _props$display, _props$gutterBottom = props.gutterBottom, gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom, _props$noWrap = props.noWrap, noWrap = _props$noWrap === void 0 ? false : _props$noWrap, _props$paragraph = props.paragraph, paragraph = _props$paragraph === void 0 ? false : _props$paragraph, _props$variant = props.variant, variant = _props$variant === void 0 ? "body1" : _props$variant, _props$variantMapping = props.variantMapping, variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping, other = _objectWithoutProperties(props, ["align", "classes", "className", "color", "component", "display", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"]);
    var Component4 = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    return /* @__PURE__ */ React52.createElement(Component4, _extends({
      className: (0, import_clsx28.default)(classes.root, className, variant !== "inherit" && classes[variant], color !== "initial" && classes["color".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== "inherit" && classes["align".concat(capitalize(align))], display2 !== "initial" && classes["display".concat(capitalize(display2))]),
      ref
    }, other));
  });
  true ? Typography.propTypes = {
    align: import_prop_types38.default.oneOf(["inherit", "left", "center", "right", "justify"]),
    children: import_prop_types38.default.node,
    classes: import_prop_types38.default.object.isRequired,
    className: import_prop_types38.default.string,
    color: import_prop_types38.default.oneOf(["initial", "inherit", "primary", "secondary", "textPrimary", "textSecondary", "error"]),
    component: import_prop_types38.default.elementType,
    display: import_prop_types38.default.oneOf(["initial", "block", "inline"]),
    gutterBottom: import_prop_types38.default.bool,
    noWrap: import_prop_types38.default.bool,
    paragraph: import_prop_types38.default.bool,
    variant: import_prop_types38.default.oneOf(["h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "caption", "button", "overline", "srOnly", "inherit"]),
    variantMapping: import_prop_types38.default.object
  } : void 0;
  var Typography_default = withStyles_default(styles51, {
    name: "MuiTypography"
  })(Typography);

  // node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js
  var styles53 = {
    root: {
      display: "flex",
      height: "0.01em",
      maxHeight: "2em",
      alignItems: "center",
      whiteSpace: "nowrap"
    },
    filled: {
      "&$positionStart:not($hiddenLabel)": {
        marginTop: 16
      }
    },
    positionStart: {
      marginRight: 8
    },
    positionEnd: {
      marginLeft: 8
    },
    disablePointerEvents: {
      pointerEvents: "none"
    },
    hiddenLabel: {},
    marginDense: {}
  };
  var InputAdornment = /* @__PURE__ */ React53.forwardRef(function InputAdornment2(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component4 = _props$component === void 0 ? "div" : _props$component, _props$disablePointer = props.disablePointerEvents, disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, position = props.position, variantProp = props.variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"]);
    var muiFormControl = useFormControl() || {};
    var variant = variantProp;
    if (variantProp && muiFormControl.variant) {
      if (true) {
        if (variantProp === muiFormControl.variant) {
          console.error("Material-UI: The `InputAdornment` variant infers the variant prop you do not have to provide one.");
        }
      }
    }
    if (muiFormControl && !variant) {
      variant = muiFormControl.variant;
    }
    return /* @__PURE__ */ React53.createElement(FormControlContext_default.Provider, {
      value: null
    }, /* @__PURE__ */ React53.createElement(Component4, _extends({
      className: (0, import_clsx29.default)(classes.root, className, position === "end" ? classes.positionEnd : classes.positionStart, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === "filled" && classes.filled, muiFormControl.margin === "dense" && classes.marginDense),
      ref
    }, other), typeof children === "string" && !disableTypography ? /* @__PURE__ */ React53.createElement(Typography_default, {
      color: "textSecondary"
    }, children) : children));
  });
  true ? InputAdornment.propTypes = {
    children: import_prop_types39.default.node.isRequired,
    classes: import_prop_types39.default.object.isRequired,
    className: import_prop_types39.default.string,
    component: import_prop_types39.default.elementType,
    disablePointerEvents: import_prop_types39.default.bool,
    disableTypography: import_prop_types39.default.bool,
    muiFormControl: import_prop_types39.default.object,
    position: import_prop_types39.default.oneOf(["start", "end"]).isRequired,
    variant: import_prop_types39.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var InputAdornment_default = withStyles_default(styles53, {
    name: "MuiInputAdornment"
  })(InputAdornment);

  // admin/src/devices/do.tsx
  var import_react5 = __toESM(require_react());

  // admin/src/devices/ezo-base.ts
  var import_react4 = __toESM(require_react());
  var EzoBase = class extends import_react4.default.Component {
    get address() {
      return this.props.baseConfig.address;
    }
    get newAddressString() {
      return this.newAddressStr;
    }
    set newAddressString(value) {
      this.newAddressStr = value;
    }
    static getAllAddresses(baseAddress, range) {
      const addresses = [];
      for (let i = 0; i < range; i++) {
        addresses.push(baseAddress + i);
      }
      return addresses;
    }
    setExtraState(value, callback) {
      this.setState({ extra: { ...this.state.extra, ...value } }, callback);
    }
    parseChangedSetting(target, checked) {
      return target.type === "checkbox" ? !!checked : target.type === "number" ? parseFloat(target.value) : target.value;
    }
    async sendCommand(command, data) {
      const { socket, instanceId } = this.props.context;
      try {
        console.log("Sending command request async to Instance: " + instanceId.toString());
        const result = await socket.sendTo(instanceId, command, data);
        if (typeof result === "string") {
          return result;
        } else {
          return "No result received";
        }
      } finally {
      }
    }
    handleChange(event2, checked) {
      const target = event2.target;
      const value = this.parseChangedSetting(target, checked);
      const id = target.id || target.name;
      const key = id.replace(/^\d+-/, "");
      return this.doHandleChange(key, value);
    }
    onAddressChange(_event) {
      let minVal = 97;
      let maxVal = 127;
      const target = event.target;
      const value = this.parseChangedSetting(target);
      if (value) {
        if (value < 97) {
          this.newAddressString = minVal.toString();
        } else if (value > 127) {
          this.newAddressString = maxVal.toString();
        } else {
          this.newAddressString = value.toString();
        }
        console.log("newAddressString: " + this.newAddressString);
      }
      return false;
    }
    doHandleChange(key, value, callback) {
      this.setState({ config: { ...this.state.config, [key]: value } }, () => {
        this.props.onChange({ ...this.props.config, ...this.state.config });
        if (callback) {
          callback();
        }
      });
      return false;
    }
    findEzoBoard(_event) {
      console.log("Find Ezo Board Button pressed");
      this.handleFindEzoBoard();
      return false;
    }
    handleFindEzoBoard() {
      try {
        let txPayload = {
          "address": this.address.toString()
        };
        this.sendCommand("FindEzoBoard", txPayload);
        console.log("FindEzoBoard was sent");
        return true;
      } catch (e) {
        console.log('Error on "FindEzoBoard"');
        return false;
      }
    }
    setFactoryReset(_event) {
      console.log("Factory Reset Button pressed");
      this.handleSetFactoryReset();
      return false;
    }
    handleSetFactoryReset() {
      try {
        let txPayload = {
          "address": this.address.toString()
        };
        this.sendCommand("FactoryReset", txPayload);
        console.log("FactoryReset was sent");
        return true;
      } catch (e) {
        console.log('Error on "FactoryReset"');
        return false;
      }
    }
    setI2CAddress(_event) {
      console.log("Change I2C Address Button pressed");
      if (this.newAddressString != "") {
        this.handleSetI2CAddress();
        console.log("New Address:" + this.newAddressString);
      }
      return false;
    }
    async handleSetI2CAddress() {
      try {
        let txPayload = {
          "address": this.address.toString(),
          "newI2CAddress": this.newAddressString
        };
        console.log("New Addresssssss:" + this.newAddressString);
        let res = await this.sendCommand("SetI2CAddress", txPayload);
        console.log("Set new I2C Address was sent. Result: " + res);
        if (res.includes("successfully")) {
          this.props.baseConfig.address = parseInt(this.newAddressString);
          this.doHandleChange(this.state.config["address"], parseInt(this.newAddressString));
        }
        return true;
      } catch (e) {
        console.log('Error on "SetI2CAddress"');
        return false;
      }
    }
  };
  __decorateClass([
    boundMethod
  ], EzoBase.prototype, "sendCommand", 1);
  __decorateClass([
    boundMethod
  ], EzoBase.prototype, "handleChange", 1);
  __decorateClass([
    boundMethod
  ], EzoBase.prototype, "onAddressChange", 1);
  __decorateClass([
    boundMethod
  ], EzoBase.prototype, "findEzoBoard", 1);
  __decorateClass([
    boundMethod
  ], EzoBase.prototype, "setFactoryReset", 1);
  __decorateClass([
    boundMethod
  ], EzoBase.prototype, "setI2CAddress", 1);

  // node_modules/@material-ui/core/esm/IconButton/IconButton.js
  var React55 = __toESM(require_react());
  var import_prop_types40 = __toESM(require_prop_types());
  var import_clsx30 = __toESM(require_clsx());
  var import_utils25 = __toESM(require_utils());
  var styles54 = function styles55(theme2) {
    return {
      root: {
        textAlign: "center",
        flex: "0 0 auto",
        fontSize: theme2.typography.pxToRem(24),
        padding: 12,
        borderRadius: "50%",
        overflow: "visible",
        color: theme2.palette.action.active,
        transition: theme2.transitions.create("background-color", {
          duration: theme2.transitions.duration.shortest
        }),
        "&:hover": {
          backgroundColor: alpha(theme2.palette.action.active, theme2.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        "&$disabled": {
          backgroundColor: "transparent",
          color: theme2.palette.action.disabled
        }
      },
      edgeStart: {
        marginLeft: -12,
        "$sizeSmall&": {
          marginLeft: -3
        }
      },
      edgeEnd: {
        marginRight: -12,
        "$sizeSmall&": {
          marginRight: -3
        }
      },
      colorInherit: {
        color: "inherit"
      },
      colorPrimary: {
        color: theme2.palette.primary.main,
        "&:hover": {
          backgroundColor: alpha(theme2.palette.primary.main, theme2.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      colorSecondary: {
        color: theme2.palette.secondary.main,
        "&:hover": {
          backgroundColor: alpha(theme2.palette.secondary.main, theme2.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      disabled: {},
      sizeSmall: {
        padding: 3,
        fontSize: theme2.typography.pxToRem(18)
      },
      label: {
        width: "100%",
        display: "flex",
        alignItems: "inherit",
        justifyContent: "inherit"
      }
    };
  };
  var IconButton = /* @__PURE__ */ React55.forwardRef(function IconButton2(props, ref) {
    var _props$edge = props.edge, edge = _props$edge === void 0 ? false : _props$edge, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = _objectWithoutProperties(props, ["edge", "children", "classes", "className", "color", "disabled", "disableFocusRipple", "size"]);
    return /* @__PURE__ */ React55.createElement(ButtonBase_default, _extends({
      className: (0, import_clsx30.default)(classes.root, className, color !== "default" && classes["color".concat(capitalize(color))], disabled && classes.disabled, size === "small" && classes["size".concat(capitalize(size))], {
        "start": classes.edgeStart,
        "end": classes.edgeEnd
      }[edge]),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      ref
    }, other), /* @__PURE__ */ React55.createElement("span", {
      className: classes.label
    }, children));
  });
  true ? IconButton.propTypes = {
    children: (0, import_utils25.chainPropTypes)(import_prop_types40.default.node, function(props) {
      var found = React55.Children.toArray(props.children).some(function(child) {
        return /* @__PURE__ */ React55.isValidElement(child) && child.props.onClick;
      });
      if (found) {
        return new Error(["Material-UI: You are providing an onClick event listener to a child of a button element.", "Firefox will never trigger the event.", "You should move the onClick listener to the parent button element.", "https://github.com/mui-org/material-ui/issues/13957"].join("\n"));
      }
      return null;
    }),
    classes: import_prop_types40.default.object.isRequired,
    className: import_prop_types40.default.string,
    color: import_prop_types40.default.oneOf(["default", "inherit", "primary", "secondary"]),
    disabled: import_prop_types40.default.bool,
    disableFocusRipple: import_prop_types40.default.bool,
    disableRipple: import_prop_types40.default.bool,
    edge: import_prop_types40.default.oneOf(["start", "end", false]),
    size: import_prop_types40.default.oneOf(["small", "medium"])
  } : void 0;
  var IconButton_default = withStyles_default(styles54, {
    name: "MuiIconButton"
  })(IconButton);

  // node_modules/@material-ui/core/esm/internal/SwitchBase.js
  var React56 = __toESM(require_react());
  var import_prop_types41 = __toESM(require_prop_types());
  var import_clsx31 = __toESM(require_clsx());
  var import_utils26 = __toESM(require_utils());
  var styles56 = {
    root: {
      padding: 9
    },
    checked: {},
    disabled: {},
    input: {
      cursor: "inherit",
      position: "absolute",
      opacity: 0,
      width: "100%",
      height: "100%",
      top: 0,
      left: 0,
      margin: 0,
      padding: 0,
      zIndex: 1
    }
  };
  var SwitchBase = /* @__PURE__ */ React56.forwardRef(function SwitchBase2(props, ref) {
    var autoFocus = props.autoFocus, checkedProp = props.checked, checkedIcon = props.checkedIcon, classes = props.classes, className = props.className, defaultChecked = props.defaultChecked, disabledProp = props.disabled, icon = props.icon, id = props.id, inputProps = props.inputProps, inputRef = props.inputRef, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, readOnly = props.readOnly, required = props.required, tabIndex = props.tabIndex, type = props.type, value = props.value, other = _objectWithoutProperties(props, ["autoFocus", "checked", "checkedIcon", "classes", "className", "defaultChecked", "disabled", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"]);
    var _useControlled = useControlled({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "SwitchBase",
      state: "checked"
    }), _useControlled2 = _slicedToArray(_useControlled, 2), checked = _useControlled2[0], setCheckedState = _useControlled2[1];
    var muiFormControl = useFormControl2();
    var handleFocus = function handleFocus2(event2) {
      if (onFocus) {
        onFocus(event2);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event2);
      }
    };
    var handleBlur = function handleBlur2(event2) {
      if (onBlur) {
        onBlur(event2);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event2);
      }
    };
    var handleInputChange = function handleInputChange2(event2) {
      var newChecked = event2.target.checked;
      setCheckedState(newChecked);
      if (onChange) {
        onChange(event2, newChecked);
      }
    };
    var disabled = disabledProp;
    if (muiFormControl) {
      if (typeof disabled === "undefined") {
        disabled = muiFormControl.disabled;
      }
    }
    var hasLabelFor = type === "checkbox" || type === "radio";
    return /* @__PURE__ */ React56.createElement(IconButton_default, _extends({
      component: "span",
      className: (0, import_clsx31.default)(classes.root, className, checked && classes.checked, disabled && classes.disabled),
      disabled,
      tabIndex: null,
      role: void 0,
      onFocus: handleFocus,
      onBlur: handleBlur,
      ref
    }, other), /* @__PURE__ */ React56.createElement("input", _extends({
      autoFocus,
      checked: checkedProp,
      defaultChecked,
      className: classes.input,
      disabled,
      id: hasLabelFor && id,
      name,
      onChange: handleInputChange,
      readOnly,
      ref: inputRef,
      required,
      tabIndex,
      type,
      value
    }, inputProps)), checked ? checkedIcon : icon);
  });
  true ? SwitchBase.propTypes = {
    autoFocus: import_prop_types41.default.bool,
    checked: import_prop_types41.default.bool,
    checkedIcon: import_prop_types41.default.node.isRequired,
    classes: import_prop_types41.default.object.isRequired,
    className: import_prop_types41.default.string,
    defaultChecked: import_prop_types41.default.bool,
    disabled: import_prop_types41.default.bool,
    icon: import_prop_types41.default.node.isRequired,
    id: import_prop_types41.default.string,
    inputProps: import_prop_types41.default.object,
    inputRef: import_utils26.refType,
    name: import_prop_types41.default.string,
    onBlur: import_prop_types41.default.func,
    onChange: import_prop_types41.default.func,
    onFocus: import_prop_types41.default.func,
    readOnly: import_prop_types41.default.bool,
    required: import_prop_types41.default.bool,
    tabIndex: import_prop_types41.default.oneOfType([import_prop_types41.default.number, import_prop_types41.default.string]),
    type: import_prop_types41.default.string.isRequired,
    value: import_prop_types41.default.any
  } : void 0;
  var SwitchBase_default = withStyles_default(styles56, {
    name: "PrivateSwitchBase"
  })(SwitchBase);

  // node_modules/@material-ui/core/esm/Switch/Switch.js
  var React57 = __toESM(require_react());
  var import_prop_types42 = __toESM(require_prop_types());
  var import_clsx32 = __toESM(require_clsx());
  var import_utils27 = __toESM(require_utils());
  var styles57 = function styles58(theme2) {
    return {
      root: {
        display: "inline-flex",
        width: 34 + 12 * 2,
        height: 14 + 12 * 2,
        overflow: "hidden",
        padding: 12,
        boxSizing: "border-box",
        position: "relative",
        flexShrink: 0,
        zIndex: 0,
        verticalAlign: "middle",
        "@media print": {
          colorAdjust: "exact"
        }
      },
      edgeStart: {
        marginLeft: -8
      },
      edgeEnd: {
        marginRight: -8
      },
      switchBase: {
        position: "absolute",
        top: 0,
        left: 0,
        zIndex: 1,
        color: theme2.palette.type === "light" ? theme2.palette.grey[50] : theme2.palette.grey[400],
        transition: theme2.transitions.create(["left", "transform"], {
          duration: theme2.transitions.duration.shortest
        }),
        "&$checked": {
          transform: "translateX(20px)"
        },
        "&$disabled": {
          color: theme2.palette.type === "light" ? theme2.palette.grey[400] : theme2.palette.grey[800]
        },
        "&$checked + $track": {
          opacity: 0.5
        },
        "&$disabled + $track": {
          opacity: theme2.palette.type === "light" ? 0.12 : 0.1
        }
      },
      colorPrimary: {
        "&$checked": {
          color: theme2.palette.primary.main,
          "&:hover": {
            backgroundColor: alpha(theme2.palette.primary.main, theme2.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        },
        "&$disabled": {
          color: theme2.palette.type === "light" ? theme2.palette.grey[400] : theme2.palette.grey[800]
        },
        "&$checked + $track": {
          backgroundColor: theme2.palette.primary.main
        },
        "&$disabled + $track": {
          backgroundColor: theme2.palette.type === "light" ? theme2.palette.common.black : theme2.palette.common.white
        }
      },
      colorSecondary: {
        "&$checked": {
          color: theme2.palette.secondary.main,
          "&:hover": {
            backgroundColor: alpha(theme2.palette.secondary.main, theme2.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        },
        "&$disabled": {
          color: theme2.palette.type === "light" ? theme2.palette.grey[400] : theme2.palette.grey[800]
        },
        "&$checked + $track": {
          backgroundColor: theme2.palette.secondary.main
        },
        "&$disabled + $track": {
          backgroundColor: theme2.palette.type === "light" ? theme2.palette.common.black : theme2.palette.common.white
        }
      },
      sizeSmall: {
        width: 40,
        height: 24,
        padding: 7,
        "& $thumb": {
          width: 16,
          height: 16
        },
        "& $switchBase": {
          padding: 4,
          "&$checked": {
            transform: "translateX(16px)"
          }
        }
      },
      checked: {},
      disabled: {},
      input: {
        left: "-100%",
        width: "300%"
      },
      thumb: {
        boxShadow: theme2.shadows[1],
        backgroundColor: "currentColor",
        width: 20,
        height: 20,
        borderRadius: "50%"
      },
      track: {
        height: "100%",
        width: "100%",
        borderRadius: 14 / 2,
        zIndex: -1,
        transition: theme2.transitions.create(["opacity", "background-color"], {
          duration: theme2.transitions.duration.shortest
        }),
        backgroundColor: theme2.palette.type === "light" ? theme2.palette.common.black : theme2.palette.common.white,
        opacity: theme2.palette.type === "light" ? 0.38 : 0.3
      }
    };
  };
  var Switch = /* @__PURE__ */ React57.forwardRef(function Switch2(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "secondary" : _props$color, _props$edge = props.edge, edge = _props$edge === void 0 ? false : _props$edge, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = _objectWithoutProperties(props, ["classes", "className", "color", "edge", "size"]);
    var icon = /* @__PURE__ */ React57.createElement("span", {
      className: classes.thumb
    });
    return /* @__PURE__ */ React57.createElement("span", {
      className: (0, import_clsx32.default)(classes.root, className, {
        "start": classes.edgeStart,
        "end": classes.edgeEnd
      }[edge], size === "small" && classes["size".concat(capitalize(size))])
    }, /* @__PURE__ */ React57.createElement(SwitchBase_default, _extends({
      type: "checkbox",
      icon,
      checkedIcon: icon,
      classes: {
        root: (0, import_clsx32.default)(classes.switchBase, classes["color".concat(capitalize(color))]),
        input: classes.input,
        checked: classes.checked,
        disabled: classes.disabled
      },
      ref
    }, other)), /* @__PURE__ */ React57.createElement("span", {
      className: classes.track
    }));
  });
  true ? Switch.propTypes = {
    checked: import_prop_types42.default.bool,
    checkedIcon: import_prop_types42.default.node,
    classes: import_prop_types42.default.object,
    className: import_prop_types42.default.string,
    color: import_prop_types42.default.oneOf(["default", "primary", "secondary"]),
    defaultChecked: import_prop_types42.default.bool,
    disabled: import_prop_types42.default.bool,
    disableRipple: import_prop_types42.default.bool,
    edge: import_prop_types42.default.oneOf(["end", "start", false]),
    icon: import_prop_types42.default.node,
    id: import_prop_types42.default.string,
    inputProps: import_prop_types42.default.object,
    inputRef: import_utils27.refType,
    onChange: import_prop_types42.default.func,
    required: import_prop_types42.default.bool,
    size: import_prop_types42.default.oneOf(["medium", "small"]),
    value: import_prop_types42.default.any
  } : void 0;
  var Switch_default = withStyles_default(styles57, {
    name: "MuiSwitch"
  })(Switch);

  // admin/src/devices/do.tsx
  var DO = class extends EzoBase {
    constructor(props) {
      super(props);
      let config;
      if (!props.config) {
        config = {
          pollingInterval: 5e3,
          mgParamActive: true,
          isPpt: false,
          isActive: true,
          isLedOn: true
        };
        props.onChange(config);
      } else {
        config = { ...props.config };
      }
      console.log("new EzoDOConfig()", props, config);
      this.state = {
        config
      };
    }
    doClearCalibration(_event) {
      console.log("Clear Calibration Button pressed");
      this.handleCalibration("Clear");
      return false;
    }
    doAtmosphericCalibration(_event) {
      console.log("Atmosheric Calibration Button pressed");
      this.handleCalibration("Atmospheric");
      return false;
    }
    do0DOCalibration(_event) {
      console.log("0DO Calibration Button pressed");
      this.handleCalibration("0DO");
      return false;
    }
    handleCalibration(calibrationtype) {
      try {
        let txPayload = {
          "address": this.address.toString(),
          "calibrationtype": calibrationtype
        };
        this.sendCommand("DOCalibration", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "FindEzoBoard"');
        return false;
      }
    }
    get tempCompensationValue() {
      return this.tempCompensationVal;
    }
    set tempCompensationValue(value) {
      this.tempCompensationVal = value;
    }
    onTempCompensationValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.tempCompensationValue = value;
      console.log("tempCompensationValue: " + this.tempCompensationValue);
      return false;
    }
    setTempCompensationValue(_event) {
      console.log("Set Temp. compensation value Button pressed");
      this.handleTempCompensation(this.tempCompensationValue);
      return false;
    }
    handleTempCompensation(tcValue) {
      try {
        let txPayload = {
          "address": this.address.toString(),
          "deviceType": "DO",
          "tcValue": tcValue.toString()
        };
        this.sendCommand("TemperatureCompensation", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "Setting Temperature Compensation"');
        return false;
      }
    }
    get pressureCompensationValue() {
      return this.pressureCompensationVal;
    }
    set pressureCompensationValue(value) {
      this.pressureCompensationVal = value;
    }
    onPressureCompensationValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.pressureCompensationValue = value.toString();
      console.log("pressureCompensationValue: " + this.pressureCompensationValue);
      return false;
    }
    setPressureCompensationValue(_event) {
      console.log("Set Pressure compensation value Button pressed");
      this.handlePressureCompensation(this.pressureCompensationValue);
      return false;
    }
    handlePressureCompensation(pcValue) {
      try {
        let txPayload = {
          "address": this.address.toString(),
          "pcValue": pcValue.toString()
        };
        this.sendCommand("DOPressureCompensation", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "Setting DO Pressure Compensation"');
        return false;
      }
    }
    get salinityCompensationValue() {
      return this.salinityCompensationVal;
    }
    set salinityCompensationValue(value) {
      this.salinityCompensationVal = value;
    }
    onSalinityCompensationValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.salinityCompensationValue = value;
      console.log("salinityCompensationValue: " + this.salinityCompensationValue);
      return false;
    }
    setSalinityCompensationValue(_event) {
      console.log("Set Salinity compensation value Button pressed");
      this.handleSalinityCompensation(this.salinityCompensationValue);
      return false;
    }
    handleSalinityCompensation(scValue) {
      try {
        let isPpt = false;
        if (this.state.config.isPpt) {
          isPpt = true;
        }
        let txPayload = {
          "address": this.address.toString(),
          "scValue": scValue.toString(),
          "isPpt": isPpt.toString()
        };
        console.log("handleSalinityCompensation");
        this.sendCommand("DOSalinityCompensation", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "Setting DO Salinity Compensation"');
        return false;
      }
    }
    render() {
      return /* @__PURE__ */ import_react5.default.createElement(import_react5.default.Fragment, null, /* @__PURE__ */ import_react5.default.createElement(Grid_default, { container: true, spacing: 3 }, /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react5.default.createElement(
        TextField_default,
        {
          name: "name",
          label: import_i18n2.default.t("Name"),
          value: this.state.config.name || "",
          type: "text",
          fullWidth: true,
          onChange: this.handleChange
        }
      )), /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react5.default.createElement(
        TextField_default,
        {
          name: "pollingInterval",
          label: import_i18n2.default.t("Polling Interval"),
          value: this.state.config.pollingInterval,
          type: "number",
          InputProps: {
            inputProps: { min: 1e4, max: 36e5 },
            endAdornment: /* @__PURE__ */ import_react5.default.createElement(InputAdornment_default, { position: "end" }, "ms")
          },
          fullWidth: true,
          onChange: this.handleChange
        }
      )), /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react5.default.createElement("label", null, /* @__PURE__ */ import_react5.default.createElement(
        Switch_default,
        {
          checked: this.state.config.isActive,
          onChange: this.handleChange,
          name: "isActive"
        }
      ), import_i18n2.default.t("Active")), /* @__PURE__ */ import_react5.default.createElement("label", null, /* @__PURE__ */ import_react5.default.createElement(
        Switch_default,
        {
          checked: this.state.config.isLedOn,
          onChange: this.handleChange,
          name: "isLedOn"
        }
      ), import_i18n2.default.t("IsLedActive"))), /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react5.default.createElement("label", null, import_i18n2.default.t("Functionalities")))), /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react5.default.createElement(
        import_Button.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.findEzoBoard,
          fullWidth: true
        },
        import_i18n2.default.t("Find EZO Board")
      )), /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react5.default.createElement(
        import_Button.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.setFactoryReset,
          fullWidth: true
        },
        import_i18n2.default.t("Factory Reset")
      )), /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react5.default.createElement(Grid_default, null, /* @__PURE__ */ import_react5.default.createElement(
        import_Button.default,
        {
          variant: "contained",
          onClick: this.setI2CAddress,
          fullWidth: true
        },
        import_i18n2.default.t("Change I2C Address")
      )), /* @__PURE__ */ import_react5.default.createElement(Grid_default, null, /* @__PURE__ */ import_react5.default.createElement(
        TextField_default,
        {
          name: "newAddress",
          label: import_i18n2.default.t("New Address"),
          value: this.newAddressString,
          type: "number",
          onChange: this.onAddressChange,
          InputProps: { inputProps: { min: 97, max: 127 } },
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react5.default.createElement("label", null, import_i18n2.default.t("DO Parameters Configuration"))), /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react5.default.createElement("label", null, /* @__PURE__ */ import_react5.default.createElement(
        Switch_default,
        {
          checked: this.state.config.mgParamActive,
          onChange: this.handleChange,
          name: "mgParamActive"
        }
      ), "mg/L"), /* @__PURE__ */ import_react5.default.createElement("label", null, /* @__PURE__ */ import_react5.default.createElement(
        Switch_default,
        {
          checked: this.state.config.percentParamActive,
          onChange: this.handleChange,
          name: "percentParamActive"
        }
      ), "%")), /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react5.default.createElement("label", null, import_i18n2.default.t("DO Sensor Calibration"))), /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 12, sm: 5, md: 3 }, /* @__PURE__ */ import_react5.default.createElement(Grid_default, null, /* @__PURE__ */ import_react5.default.createElement(
        import_Button.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.doClearCalibration,
          fullWidth: true
        },
        import_i18n2.default.t("Clear Calibration")
      )), /* @__PURE__ */ import_react5.default.createElement(Grid_default, null, /* @__PURE__ */ import_react5.default.createElement(
        import_Button.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.doAtmosphericCalibration,
          fullWidth: true
        },
        import_i18n2.default.t("Atmospheric Calibration")
      )), /* @__PURE__ */ import_react5.default.createElement(Grid_default, null, /* @__PURE__ */ import_react5.default.createElement(
        import_Button.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.do0DOCalibration,
          fullWidth: true
        },
        import_i18n2.default.t("0 DO Calibration")
      ))), /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react5.default.createElement(Grid_default, null, /* @__PURE__ */ import_react5.default.createElement(
        import_Button.default,
        {
          variant: "contained",
          onClick: this.setTempCompensationValue,
          fullWidth: true
        },
        import_i18n2.default.t("Set TC Value")
      )), /* @__PURE__ */ import_react5.default.createElement(Grid_default, null, /* @__PURE__ */ import_react5.default.createElement(
        TextField_default,
        {
          name: "tempCompensationVal",
          label: import_i18n2.default.t("Temp. compensation value"),
          value: this.tempCompensationValue,
          type: "number",
          onChange: this.onTempCompensationValueChange,
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react5.default.createElement(Grid_default, null, /* @__PURE__ */ import_react5.default.createElement(
        import_Button.default,
        {
          variant: "contained",
          onClick: this.setPressureCompensationValue,
          fullWidth: true
        },
        import_i18n2.default.t("Set PC Value")
      )), /* @__PURE__ */ import_react5.default.createElement(Grid_default, null, /* @__PURE__ */ import_react5.default.createElement(
        TextField_default,
        {
          name: "pressureCompensationVal",
          label: import_i18n2.default.t("Pressure compensation value"),
          value: this.pressureCompensationValue,
          type: "number",
          onChange: this.onPressureCompensationValueChange,
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react5.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react5.default.createElement(Grid_default, null, /* @__PURE__ */ import_react5.default.createElement(
        import_Button.default,
        {
          variant: "contained",
          onClick: this.setSalinityCompensationValue,
          fullWidth: true
        },
        import_i18n2.default.t("Set SC Value")
      )), /* @__PURE__ */ import_react5.default.createElement(Grid_default, null, /* @__PURE__ */ import_react5.default.createElement(
        TextField_default,
        {
          name: "salinityCompensationVal",
          label: import_i18n2.default.t("Salinity compensation value"),
          value: this.salinityCompensationValue,
          type: "number",
          onChange: this.onSalinityCompensationValueChange,
          disabled: false,
          fullWidth: true
        }
      )), /* @__PURE__ */ import_react5.default.createElement(Grid_default, null, /* @__PURE__ */ import_react5.default.createElement("label", null, /* @__PURE__ */ import_react5.default.createElement(
        Switch_default,
        {
          checked: this.state.config.isPpt,
          onChange: this.handleChange,
          name: "isPpt"
        }
      ), import_i18n2.default.t("IsPpt"))))));
    }
  };
  __decorateClass([
    boundMethod
  ], DO.prototype, "doClearCalibration", 1);
  __decorateClass([
    boundMethod
  ], DO.prototype, "doAtmosphericCalibration", 1);
  __decorateClass([
    boundMethod
  ], DO.prototype, "do0DOCalibration", 1);
  __decorateClass([
    boundMethod
  ], DO.prototype, "onTempCompensationValueChange", 1);
  __decorateClass([
    boundMethod
  ], DO.prototype, "setTempCompensationValue", 1);
  __decorateClass([
    boundMethod
  ], DO.prototype, "onPressureCompensationValueChange", 1);
  __decorateClass([
    boundMethod
  ], DO.prototype, "setPressureCompensationValue", 1);
  __decorateClass([
    boundMethod
  ], DO.prototype, "onSalinityCompensationValueChange", 1);
  __decorateClass([
    boundMethod
  ], DO.prototype, "setSalinityCompensationValue", 1);
  var Infos = [
    {
      name: "Atlas EZO D.O",
      addresses: EzoBase.getAllAddresses(97, 30),
      type: "DO",
      react: DO
    }
  ];

  // admin/src/devices/ph.tsx
  var import_i18n3 = __toESM(require_i18n());
  var import_Button2 = __toESM(require_Button2());
  var import_react6 = __toESM(require_react());
  var PH = class extends EzoBase {
    constructor(props) {
      super(props);
      let config;
      if (!props.config) {
        config = {
          pollingInterval: 5e3,
          mgParamActive: true,
          isActive: true
        };
        props.onChange(config);
      } else {
        config = { ...props.config };
      }
      console.log("new EzoPHConfig()", props, config);
      this.state = {
        config
      };
    }
    get calibrateValue() {
      return this.calibrateVal;
    }
    set calibrateValue(value) {
      this.calibrateVal = value;
    }
    get tempCompensationValue() {
      return this.tempCompensationVal;
    }
    set tempCompensationValue(value) {
      this.tempCompensationVal = value;
    }
    onCalibrateValueChange(_event) {
      let minVal = 0;
      let maxVal = 10;
      const target = event.target;
      const value = this.parseChangedSetting(target);
      if (value < minVal) {
        this.calibrateValue = minVal;
      } else if (value > maxVal) {
        this.calibrateValue = maxVal;
      } else {
        this.calibrateValue = value.toString();
      }
      console.log("newCalibrateValue: " + this.calibrateValue);
      return false;
    }
    doClearCalibration(_event) {
      console.log("Clear Calibration Button pressed");
      this.handleCalibration("Clear", 0);
      return false;
    }
    doLowCalibration(_event) {
      console.log("Low Calibration Button pressed");
      this.handleCalibration("Low", this.calibrateValue);
      return false;
    }
    doMidCalibration(_event) {
      console.log("Mid Calibration Button pressed");
      this.handleCalibration("Mid", this.calibrateValue);
      return false;
    }
    doHighCalibration(_event) {
      console.log("High Calibration Button pressed");
      this.handleCalibration("High", this.calibrateValue);
      return false;
    }
    handleCalibration(calibrationtype, pHValue) {
      try {
        let txPayload = {
          "address": this.address.toString(),
          "calibrationtype": calibrationtype,
          "phValue": pHValue.toString()
        };
        this.sendCommand("PHCalibration", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "PH Calibration"');
        return false;
      }
    }
    onTempCompensationValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.tempCompensationValue = value;
      console.log("tempCompensationValue: " + this.tempCompensationValue);
      return false;
    }
    setTempCompensationValue(_event) {
      console.log("Set Temp. compensation value Button pressed");
      this.handleTempCompensation(this.tempCompensationValue);
      return false;
    }
    handleTempCompensation(tcValue) {
      try {
        let txPayload = {
          "address": this.address.toString(),
          "deviceType": "PH",
          "tcValue": tcValue.toString()
        };
        this.sendCommand("TemperatureCompensation", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "Setting Temperature Compensation"');
        return false;
      }
    }
    render() {
      return /* @__PURE__ */ import_react6.default.createElement(import_react6.default.Fragment, null, /* @__PURE__ */ import_react6.default.createElement(Grid_default, { container: true, spacing: 3 }, /* @__PURE__ */ import_react6.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react6.default.createElement(
        TextField_default,
        {
          name: "name",
          label: import_i18n3.default.t("Name"),
          value: this.state.config.name || "",
          type: "text",
          fullWidth: true,
          onChange: this.handleChange
        }
      )), /* @__PURE__ */ import_react6.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react6.default.createElement(
        TextField_default,
        {
          name: "pollingInterval",
          label: import_i18n3.default.t("Polling Interval"),
          value: this.state.config.pollingInterval,
          type: "number",
          InputProps: {
            inputProps: { min: 1e4, max: 36e5 },
            endAdornment: /* @__PURE__ */ import_react6.default.createElement(InputAdornment_default, { position: "end" }, "ms")
          },
          fullWidth: true,
          onChange: this.handleChange
        }
      )), /* @__PURE__ */ import_react6.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react6.default.createElement("label", null, /* @__PURE__ */ import_react6.default.createElement(
        Switch_default,
        {
          checked: this.state.config.isActive,
          onChange: this.handleChange,
          name: "isActive"
        }
      ), import_i18n3.default.t("Active")), /* @__PURE__ */ import_react6.default.createElement("label", null, /* @__PURE__ */ import_react6.default.createElement(
        Switch_default,
        {
          checked: this.state.config.isLedOn,
          onChange: this.handleChange,
          name: "isLedOn"
        }
      ), import_i18n3.default.t("IsLedActive"))), /* @__PURE__ */ import_react6.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react6.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react6.default.createElement("label", null, import_i18n3.default.t("Functionalities")))), /* @__PURE__ */ import_react6.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react6.default.createElement(
        import_Button2.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.findEzoBoard,
          fullWidth: true
        },
        import_i18n3.default.t("Find EZO Board")
      )), /* @__PURE__ */ import_react6.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react6.default.createElement(
        import_Button2.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.setFactoryReset,
          fullWidth: true
        },
        import_i18n3.default.t("Factory Reset")
      )), /* @__PURE__ */ import_react6.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react6.default.createElement(Grid_default, null, /* @__PURE__ */ import_react6.default.createElement(
        import_Button2.default,
        {
          variant: "contained",
          onClick: this.setI2CAddress,
          fullWidth: true
        },
        import_i18n3.default.t("Change I2C Address")
      )), /* @__PURE__ */ import_react6.default.createElement(Grid_default, null, /* @__PURE__ */ import_react6.default.createElement(
        TextField_default,
        {
          name: "newAddress",
          label: import_i18n3.default.t("New Address"),
          value: this.newAddressString,
          type: "number",
          onChange: this.onAddressChange,
          InputProps: { inputProps: { min: 97, max: 127 } },
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react6.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react6.default.createElement("label", null, import_i18n3.default.t("PH Sensor Calibration"))), /* @__PURE__ */ import_react6.default.createElement(Grid_default, { item: true, xs: 12, sm: 5, md: 2 }, /* @__PURE__ */ import_react6.default.createElement(
        import_Button2.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.doClearCalibration,
          fullWidth: true
        },
        import_i18n3.default.t("Clear Calibration")
      )), /* @__PURE__ */ import_react6.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react6.default.createElement(Grid_default, null, /* @__PURE__ */ import_react6.default.createElement(
        import_Button2.default,
        {
          variant: "contained",
          onClick: this.doLowCalibration,
          fullWidth: true
        },
        import_i18n3.default.t("Calibrate Low")
      )), /* @__PURE__ */ import_react6.default.createElement(Grid_default, null, /* @__PURE__ */ import_react6.default.createElement(
        import_Button2.default,
        {
          variant: "contained",
          onClick: this.doMidCalibration,
          fullWidth: true
        },
        import_i18n3.default.t("Calibrate Mid")
      )), /* @__PURE__ */ import_react6.default.createElement(Grid_default, null, /* @__PURE__ */ import_react6.default.createElement(
        import_Button2.default,
        {
          variant: "contained",
          onClick: this.doHighCalibration,
          fullWidth: true
        },
        import_i18n3.default.t("Calibrate High")
      )), /* @__PURE__ */ import_react6.default.createElement(Grid_default, null, /* @__PURE__ */ import_react6.default.createElement(
        TextField_default,
        {
          name: "newCalLowValue",
          label: import_i18n3.default.t("PH value"),
          value: this.calibrateValue,
          type: "number",
          onChange: this.onCalibrateValueChange,
          InputProps: { inputProps: { min: 0, max: 10 } },
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react6.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react6.default.createElement(Grid_default, null, /* @__PURE__ */ import_react6.default.createElement(
        import_Button2.default,
        {
          variant: "contained",
          onClick: this.setTempCompensationValue,
          fullWidth: true
        },
        import_i18n3.default.t("Set TC Value")
      )), /* @__PURE__ */ import_react6.default.createElement(Grid_default, null, /* @__PURE__ */ import_react6.default.createElement(
        TextField_default,
        {
          name: "tempCompensationVal",
          label: import_i18n3.default.t("Temp. compensation value"),
          value: this.tempCompensationValue,
          type: "number",
          onChange: this.onTempCompensationValueChange,
          disabled: false,
          fullWidth: true
        }
      )))));
    }
  };
  __decorateClass([
    boundMethod
  ], PH.prototype, "onCalibrateValueChange", 1);
  __decorateClass([
    boundMethod
  ], PH.prototype, "doClearCalibration", 1);
  __decorateClass([
    boundMethod
  ], PH.prototype, "doLowCalibration", 1);
  __decorateClass([
    boundMethod
  ], PH.prototype, "doMidCalibration", 1);
  __decorateClass([
    boundMethod
  ], PH.prototype, "doHighCalibration", 1);
  __decorateClass([
    boundMethod
  ], PH.prototype, "onTempCompensationValueChange", 1);
  __decorateClass([
    boundMethod
  ], PH.prototype, "setTempCompensationValue", 1);
  var Infos2 = [
    {
      name: "Atlas EZO PH",
      addresses: EzoBase.getAllAddresses(97, 30),
      type: "PH",
      react: PH
    }
  ];

  // admin/src/devices/orp.tsx
  var import_i18n4 = __toESM(require_i18n());
  var import_Button3 = __toESM(require_Button2());
  var import_react7 = __toESM(require_react());
  var ORP = class extends EzoBase {
    constructor(props) {
      super(props);
      let config;
      if (!props.config) {
        config = {
          pollingInterval: 5e3,
          isActive: true
        };
        props.onChange(config);
      } else {
        config = { ...props.config };
      }
      console.log("new EzoORPConfig()", props, config);
      this.state = {
        config
      };
    }
    get calibrateValue() {
      return this.calibrateVal;
    }
    set calibrateValue(value) {
      this.calibrateVal = value;
    }
    onCalibrateValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.calibrateValue = value.toString();
      console.log("newCalibrateValue: " + this.calibrateValue);
      return false;
    }
    doClearCalibration(_event) {
      console.log("Clear Calibration Button pressed");
      this.handleCalibration("Clear", 0);
      return false;
    }
    doCalibration(_event) {
      console.log("Calibration Button pressed");
      this.handleCalibration("Standard", this.calibrateValue);
      return false;
    }
    handleCalibration(calibrationtype, orpValue) {
      try {
        let txPayload = {
          "address": this.address.toString(),
          "calibrationtype": calibrationtype,
          "orpValue": orpValue.toString()
        };
        this.sendCommand("ORPCalibration", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "ORP Calibration"');
        return false;
      }
    }
    render() {
      return /* @__PURE__ */ import_react7.default.createElement(import_react7.default.Fragment, null, /* @__PURE__ */ import_react7.default.createElement(Grid_default, { container: true, spacing: 3 }, /* @__PURE__ */ import_react7.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react7.default.createElement(
        TextField_default,
        {
          name: "name",
          label: import_i18n4.default.t("Name"),
          value: this.state.config.name || "",
          type: "text",
          fullWidth: true,
          onChange: this.handleChange
        }
      )), /* @__PURE__ */ import_react7.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react7.default.createElement(
        TextField_default,
        {
          name: "pollingInterval",
          label: import_i18n4.default.t("Polling Interval"),
          value: this.state.config.pollingInterval,
          type: "number",
          InputProps: {
            inputProps: { min: 1e4, max: 36e5 },
            endAdornment: /* @__PURE__ */ import_react7.default.createElement(InputAdornment_default, { position: "end" }, "ms")
          },
          fullWidth: true,
          onChange: this.handleChange
        }
      )), /* @__PURE__ */ import_react7.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react7.default.createElement("label", null, /* @__PURE__ */ import_react7.default.createElement(
        Switch_default,
        {
          checked: this.state.config.isActive,
          onChange: this.handleChange,
          name: "isActive"
        }
      ), import_i18n4.default.t("Active")), /* @__PURE__ */ import_react7.default.createElement("label", null, /* @__PURE__ */ import_react7.default.createElement(
        Switch_default,
        {
          checked: this.state.config.isLedOn,
          onChange: this.handleChange,
          name: "isLedOn"
        }
      ), import_i18n4.default.t("IsLedActive"))), /* @__PURE__ */ import_react7.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react7.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react7.default.createElement("label", null, import_i18n4.default.t("Functionalities")))), /* @__PURE__ */ import_react7.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react7.default.createElement(
        import_Button3.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.findEzoBoard,
          fullWidth: true
        },
        import_i18n4.default.t("Find EZO Board")
      )), /* @__PURE__ */ import_react7.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react7.default.createElement(
        import_Button3.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.setFactoryReset,
          fullWidth: true
        },
        import_i18n4.default.t("Factory Reset")
      )), /* @__PURE__ */ import_react7.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react7.default.createElement(Grid_default, null, /* @__PURE__ */ import_react7.default.createElement(
        import_Button3.default,
        {
          variant: "contained",
          onClick: this.setI2CAddress,
          fullWidth: true
        },
        import_i18n4.default.t("Change I2C Address")
      )), /* @__PURE__ */ import_react7.default.createElement(Grid_default, null, /* @__PURE__ */ import_react7.default.createElement(
        TextField_default,
        {
          name: "newAddress",
          label: import_i18n4.default.t("New Address"),
          value: this.newAddressString,
          type: "number",
          onChange: this.onAddressChange,
          InputProps: { inputProps: { min: 97, max: 127 } },
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react7.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react7.default.createElement("label", null, import_i18n4.default.t("ORP Sensor Calibration"))), /* @__PURE__ */ import_react7.default.createElement(Grid_default, { item: true, xs: 12, sm: 5, md: 2 }, /* @__PURE__ */ import_react7.default.createElement(
        import_Button3.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.doClearCalibration,
          fullWidth: true
        },
        import_i18n4.default.t("Clear Calibration")
      )), /* @__PURE__ */ import_react7.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react7.default.createElement(Grid_default, null, /* @__PURE__ */ import_react7.default.createElement(
        import_Button3.default,
        {
          variant: "contained",
          onClick: this.doCalibration,
          fullWidth: true
        },
        import_i18n4.default.t("Calibrate")
      )), /* @__PURE__ */ import_react7.default.createElement(Grid_default, null, /* @__PURE__ */ import_react7.default.createElement(
        TextField_default,
        {
          name: "calibrateValue",
          label: import_i18n4.default.t("ORP value"),
          value: this.calibrateValue,
          type: "number",
          onChange: this.onCalibrateValueChange,
          disabled: false,
          fullWidth: true
        }
      )))));
    }
  };
  __decorateClass([
    boundMethod
  ], ORP.prototype, "onCalibrateValueChange", 1);
  __decorateClass([
    boundMethod
  ], ORP.prototype, "doClearCalibration", 1);
  __decorateClass([
    boundMethod
  ], ORP.prototype, "doCalibration", 1);
  var Infos3 = [
    {
      name: "Atlas EZO ORP",
      addresses: EzoBase.getAllAddresses(97, 30),
      type: "ORP",
      react: ORP
    }
  ];

  // admin/src/devices/rtd.tsx
  var import_i18n5 = __toESM(require_i18n());
  var import_Button4 = __toESM(require_Button2());
  var import_react8 = __toESM(require_react());
  var RTD = class extends EzoBase {
    constructor(props) {
      super(props);
      let config;
      if (!props.config) {
        config = {
          pollingInterval: 5e3,
          isActive: true
        };
        props.onChange(config);
      } else {
        config = { ...props.config };
      }
      console.log("new EzoRTDConfig()", props, config);
      this.state = {
        config
      };
    }
    get calibrateValue() {
      return this.calibrateVal;
    }
    set calibrateValue(value) {
      this.calibrateVal = value;
    }
    onCalibrateValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.calibrateValue = value.toString();
      console.log("newCalibrateValue: " + this.calibrateValue);
      return false;
    }
    doClearCalibration(_event) {
      console.log("Clear Calibration Button pressed");
      this.handleCalibration("Clear", 0);
      return false;
    }
    doCalibration(_event) {
      console.log("Calibration Button pressed");
      this.handleCalibration("Standard", this.calibrateValue);
      return false;
    }
    handleCalibration(calibrationtype, tempValue) {
      try {
        let txPayload = {
          "address": this.address.toString(),
          "calibrationtype": calibrationtype,
          "tempValue": tempValue.toString()
        };
        this.sendCommand("RTDCalibration", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "RTD Calibration"');
        return false;
      }
    }
    render() {
      return /* @__PURE__ */ import_react8.default.createElement(import_react8.default.Fragment, null, /* @__PURE__ */ import_react8.default.createElement(Grid_default, { container: true, spacing: 3 }, /* @__PURE__ */ import_react8.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react8.default.createElement(
        TextField_default,
        {
          name: "name",
          label: import_i18n5.default.t("Name"),
          value: this.state.config.name || "",
          type: "text",
          fullWidth: true,
          onChange: this.handleChange
        }
      )), /* @__PURE__ */ import_react8.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react8.default.createElement(
        TextField_default,
        {
          name: "pollingInterval",
          label: import_i18n5.default.t("Polling Interval"),
          value: this.state.config.pollingInterval,
          type: "number",
          InputProps: {
            inputProps: { min: 1e4, max: 36e5 },
            endAdornment: /* @__PURE__ */ import_react8.default.createElement(InputAdornment_default, { position: "end" }, "ms")
          },
          fullWidth: true,
          onChange: this.handleChange
        }
      )), /* @__PURE__ */ import_react8.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react8.default.createElement("label", null, /* @__PURE__ */ import_react8.default.createElement(
        Switch_default,
        {
          checked: this.state.config.isActive,
          onChange: this.handleChange,
          name: "isActive"
        }
      ), import_i18n5.default.t("Active")), /* @__PURE__ */ import_react8.default.createElement("label", null, /* @__PURE__ */ import_react8.default.createElement(
        Switch_default,
        {
          checked: this.state.config.isLedOn,
          onChange: this.handleChange,
          name: "isLedOn"
        }
      ), import_i18n5.default.t("IsLedActive"))), /* @__PURE__ */ import_react8.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react8.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react8.default.createElement("label", null, import_i18n5.default.t("Functionalities")))), /* @__PURE__ */ import_react8.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react8.default.createElement(
        import_Button4.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.findEzoBoard,
          fullWidth: true
        },
        import_i18n5.default.t("Find EZO Board")
      )), /* @__PURE__ */ import_react8.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react8.default.createElement(
        import_Button4.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.setFactoryReset,
          fullWidth: true
        },
        import_i18n5.default.t("Factory Reset")
      )), /* @__PURE__ */ import_react8.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react8.default.createElement(Grid_default, null, /* @__PURE__ */ import_react8.default.createElement(
        import_Button4.default,
        {
          variant: "contained",
          onClick: this.setI2CAddress,
          fullWidth: true
        },
        import_i18n5.default.t("Change I2C Address")
      )), /* @__PURE__ */ import_react8.default.createElement(Grid_default, null, /* @__PURE__ */ import_react8.default.createElement(
        TextField_default,
        {
          name: "newAddress",
          label: import_i18n5.default.t("New Address"),
          value: this.newAddressString,
          type: "number",
          onChange: this.onAddressChange,
          InputProps: { inputProps: { min: 97, max: 127 } },
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react8.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react8.default.createElement("label", null, import_i18n5.default.t("RTD Sensor Calibration"))), /* @__PURE__ */ import_react8.default.createElement(Grid_default, { item: true, xs: 12, sm: 5, md: 2 }, /* @__PURE__ */ import_react8.default.createElement(
        import_Button4.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.doClearCalibration,
          fullWidth: true
        },
        import_i18n5.default.t("Clear Calibration")
      )), /* @__PURE__ */ import_react8.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react8.default.createElement(Grid_default, null, /* @__PURE__ */ import_react8.default.createElement(
        import_Button4.default,
        {
          variant: "contained",
          onClick: this.doCalibration,
          fullWidth: true
        },
        import_i18n5.default.t("Calibrate")
      )), /* @__PURE__ */ import_react8.default.createElement(Grid_default, null, /* @__PURE__ */ import_react8.default.createElement(
        TextField_default,
        {
          name: "calibrateValue",
          label: import_i18n5.default.t("RTD value"),
          value: this.calibrateValue,
          type: "number",
          onChange: this.onCalibrateValueChange,
          disabled: false,
          fullWidth: true
        }
      )))));
    }
  };
  __decorateClass([
    boundMethod
  ], RTD.prototype, "onCalibrateValueChange", 1);
  __decorateClass([
    boundMethod
  ], RTD.prototype, "doClearCalibration", 1);
  __decorateClass([
    boundMethod
  ], RTD.prototype, "doCalibration", 1);
  var Infos4 = [
    {
      name: "Atlas EZO RTD",
      addresses: EzoBase.getAllAddresses(97, 30),
      type: "RTD",
      react: RTD
    }
  ];

  // admin/src/devices/pmp.tsx
  var import_i18n6 = __toESM(require_i18n());
  var import_Button5 = __toESM(require_Button2());
  var import_react9 = __toESM(require_react());
  var Pump = class extends EzoBase {
    constructor(props) {
      super(props);
      let config;
      if (!props.config) {
        config = {
          pollingInterval: 5e3,
          isActive: true,
          V_ParamActive: true,
          TV_ParamActive: true,
          ATV_ParamActive: true,
          reverse: false
        };
        props.onChange(config);
      } else {
        config = { ...props.config };
      }
      console.log("new PeristalticPumpConfig()", props, config);
      this.state = {
        config
      };
    }
    get calibrateValue() {
      return this.calibrateVal;
    }
    set calibrateValue(value) {
      this.calibrateVal = value;
    }
    get doseOverTimeValue() {
      return this.doseOverTimeVal;
    }
    set doseOverTimeValue(value) {
      this.doseOverTimeVal = value;
    }
    get dispenseValue() {
      return this.dispenseVal;
    }
    set dispenseValue(value) {
      this.dispenseVal = value;
    }
    get constantFlowRateValue() {
      return this.constantFlowRateVal;
    }
    set constantFlowRateValue(value) {
      this.constantFlowRateVal = value;
    }
    onCalibrateValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.calibrateValue = value.toString();
      console.log("newCalibrateValue: " + this.calibrateValue);
      return false;
    }
    doClearCalibration(_event) {
      console.log("Clear Calibration Button pressed");
      this.handleCalibration("Clear", 0);
      return false;
    }
    doClearDispensedVolume(_event) {
      console.log("Clear dispensed volume Button pressed");
      this.handleClearDispensedVolume();
      return false;
    }
    doCalibration(_event) {
      console.log("Calibration Button pressed");
      this.handleCalibration("Standard", this.calibrateValue);
      return false;
    }
    handleCalibration(calibrationtype, Volume) {
      try {
        const txPayload = {
          "address": this.address.toString(),
          "calibrationtype": calibrationtype,
          "VolumeValue": Volume.toString()
        };
        this.sendCommand("PumpCalibration", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "Pump Calibration"');
        return false;
      }
    }
    handleClearDispensedVolume() {
      try {
        const txPayload = {
          "address": this.address.toString()
        };
        this.sendCommand("PumpClearDispensedVolume", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "Clear dispensed Volume"');
        return false;
      }
    }
    doHandleContinousDispense(_event) {
      console.log("Continous Dispense Button pressed");
      this.handleContinousDispense();
      return false;
    }
    handleContinousDispense() {
      var _a;
      try {
        const txPayload = {
          "address": this.address.toString(),
          "reverse": (_a = this.state.config.reverse) == null ? void 0 : _a.toString()
        };
        this.sendCommand("PumpSetContinousDispense", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "setting continous Dispense Mode"');
        return false;
      }
    }
    doHandleStop(_event) {
      console.log("Stop Dispense Button pressed");
      this.handleStop();
      return false;
    }
    handleStop() {
      try {
        const txPayload = {
          "address": this.address.toString()
        };
        this.sendCommand("PumpStopDispense", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "stopping dispense"');
        return false;
      }
    }
    doHandlePause(_event) {
      console.log("Pause Pump Button pressed");
      this.handlePause();
      return false;
    }
    handlePause() {
      try {
        const txPayload = {
          "address": this.address.toString()
        };
        this.sendCommand("PumpPause", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "pausing Pump"');
        return false;
      }
    }
    onDoseOverTimeValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.doseOverTimeValue = value.toString();
      console.log("new Dose over Time Value: " + this.doseOverTimeValue);
      return false;
    }
    setDoseOverTime(_event) {
      console.log("Set Dose over Time Button pressed");
      this.handleDoseOverTime(this.doseOverTimeValue);
      return false;
    }
    handleDoseOverTime(dotValue) {
      try {
        const txPayload = {
          "address": this.address.toString(),
          "doseOverTimeValue": dotValue
        };
        this.sendCommand("PumpSetDoseOverTime", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "Setting dose over time"');
        return false;
      }
    }
    onDispenseValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.dispenseValue = value.toString();
      console.log("new Dispense Value: " + this.dispenseValue);
      return false;
    }
    setDispenseVolume(_event) {
      console.log("Dispense Volume Button pressed");
      this.handleDispenseVolume(this.dispenseValue);
      return false;
    }
    handleDispenseVolume(dispValue) {
      try {
        const txPayload = {
          "address": this.address.toString(),
          "dispenseValue": dispValue
        };
        this.sendCommand("PumpSetDispenseVolume", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "Setting dispense Volume"');
        return false;
      }
    }
    onConstantFlowRateValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.constantFlowRateValue = value.toString();
      console.log("new constant Flow Rate Value: " + this.constantFlowRateValue);
      return false;
    }
    setConstantFlowRate(_event) {
      console.log("Set constant flow rate Button pressed");
      this.handleConstantFlowRate(this.constantFlowRateValue);
      return false;
    }
    handleConstantFlowRate(cfrValue) {
      try {
        const txPayload = {
          "address": this.address.toString(),
          "constantFlowRateValue": cfrValue
        };
        this.sendCommand("PumpSetConstantFlowRate", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "Setting Constant Flow Rate"');
        return false;
      }
    }
    render() {
      return /* @__PURE__ */ import_react9.default.createElement(import_react9.default.Fragment, null, /* @__PURE__ */ import_react9.default.createElement(Grid_default, { container: true, spacing: 3 }, /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react9.default.createElement(
        TextField_default,
        {
          name: "name",
          label: import_i18n6.default.t("Name"),
          value: this.state.config.name || "",
          type: "text",
          fullWidth: true,
          onChange: this.handleChange
        }
      )), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react9.default.createElement(
        TextField_default,
        {
          name: "pollingInterval",
          label: import_i18n6.default.t("Polling Interval"),
          value: this.state.config.pollingInterval,
          type: "number",
          InputProps: {
            inputProps: { min: 1e4, max: 36e5 },
            endAdornment: /* @__PURE__ */ import_react9.default.createElement(InputAdornment_default, { position: "end" }, "ms")
          },
          fullWidth: true,
          onChange: this.handleChange
        }
      )), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react9.default.createElement("label", null, /* @__PURE__ */ import_react9.default.createElement(
        Switch_default,
        {
          checked: this.state.config.isActive,
          onChange: this.handleChange,
          name: "isActive"
        }
      ), import_i18n6.default.t("Active")), /* @__PURE__ */ import_react9.default.createElement("label", null, /* @__PURE__ */ import_react9.default.createElement(
        Switch_default,
        {
          checked: this.state.config.isLedOn,
          onChange: this.handleChange,
          name: "isLedOn"
        }
      ), import_i18n6.default.t("IsLedActive"))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react9.default.createElement("label", null, import_i18n6.default.t("Functionalities")))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react9.default.createElement(
        import_Button5.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.findEzoBoard,
          fullWidth: true
        },
        import_i18n6.default.t("Find Pump")
      )), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react9.default.createElement(
        import_Button5.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.setFactoryReset,
          fullWidth: true
        },
        import_i18n6.default.t("Factory Reset")
      )), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react9.default.createElement(Grid_default, null, /* @__PURE__ */ import_react9.default.createElement(
        import_Button5.default,
        {
          variant: "contained",
          onClick: this.setI2CAddress,
          fullWidth: true
        },
        import_i18n6.default.t("Change I2C Address")
      )), /* @__PURE__ */ import_react9.default.createElement(Grid_default, null, /* @__PURE__ */ import_react9.default.createElement(
        TextField_default,
        {
          name: "newAddress",
          label: import_i18n6.default.t("New Address"),
          value: this.newAddressString,
          type: "number",
          onChange: this.onAddressChange,
          InputProps: { inputProps: { min: 97, max: 127 } },
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react9.default.createElement("label", null, import_i18n6.default.t("Pump Parameters Configuration"))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 10, sm: 7, md: 7 }, /* @__PURE__ */ import_react9.default.createElement("label", null, /* @__PURE__ */ import_react9.default.createElement(
        Switch_default,
        {
          checked: this.state.config.V_ParamActive,
          onChange: this.handleChange,
          name: "V_ParamActive"
        }
      ), import_i18n6.default.t("Dispensed Volume")), /* @__PURE__ */ import_react9.default.createElement("label", null, /* @__PURE__ */ import_react9.default.createElement(
        Switch_default,
        {
          checked: this.state.config.TV_ParamActive,
          onChange: this.handleChange,
          name: "TV_ParamActive"
        }
      ), import_i18n6.default.t("Total Dispensed Volume")), /* @__PURE__ */ import_react9.default.createElement("label", null, /* @__PURE__ */ import_react9.default.createElement(
        Switch_default,
        {
          checked: this.state.config.ATV_ParamActive,
          onChange: this.handleChange,
          name: "ATV_ParamActive"
        }
      ), import_i18n6.default.t("Absolute Dispensed Volume"))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react9.default.createElement("label", null, import_i18n6.default.t("Pump Calibration"))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 12, sm: 5, md: 2 }, /* @__PURE__ */ import_react9.default.createElement(
        import_Button5.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.doClearCalibration,
          fullWidth: true
        },
        import_i18n6.default.t("Clear Calibration")
      )), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react9.default.createElement(Grid_default, null, /* @__PURE__ */ import_react9.default.createElement(
        import_Button5.default,
        {
          variant: "contained",
          onClick: this.doCalibration,
          fullWidth: true
        },
        import_i18n6.default.t("Calibrate")
      )), /* @__PURE__ */ import_react9.default.createElement(Grid_default, null, /* @__PURE__ */ import_react9.default.createElement(
        TextField_default,
        {
          name: "newCalValue",
          label: import_i18n6.default.t("Calibration Volume"),
          value: this.calibrateValue,
          type: "number",
          onChange: this.onCalibrateValueChange,
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react9.default.createElement("label", null, import_i18n6.default.t("Pump Control"))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 5, sm: 3, md: 1 }, /* @__PURE__ */ import_react9.default.createElement("label", null, /* @__PURE__ */ import_react9.default.createElement(
        Switch_default,
        {
          checked: this.state.config.reverse,
          onChange: this.handleChange,
          name: "reverse"
        }
      ), import_i18n6.default.t("pump reverse"))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 12, sm: 5, md: 2 }, /* @__PURE__ */ import_react9.default.createElement(
        import_Button5.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.doClearDispensedVolume,
          fullWidth: true
        },
        import_i18n6.default.t("ClearDispensedVolume")
      )), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react9.default.createElement(Grid_default, null, /* @__PURE__ */ import_react9.default.createElement(
        import_Button5.default,
        {
          variant: "contained",
          onClick: this.doHandleContinousDispense,
          fullWidth: true
        },
        import_i18n6.default.t("Continous Dispense")
      ))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react9.default.createElement(Grid_default, null, /* @__PURE__ */ import_react9.default.createElement(
        import_Button5.default,
        {
          variant: "contained",
          onClick: this.doHandleStop,
          fullWidth: true
        },
        import_i18n6.default.t("Stop Dispense")
      ))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react9.default.createElement(Grid_default, null, /* @__PURE__ */ import_react9.default.createElement(
        import_Button5.default,
        {
          variant: "contained",
          onClick: this.doHandlePause,
          fullWidth: true
        },
        import_i18n6.default.t("Pause Pump")
      ))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react9.default.createElement(Grid_default, null, /* @__PURE__ */ import_react9.default.createElement(
        import_Button5.default,
        {
          variant: "contained",
          onClick: this.setDoseOverTime,
          fullWidth: true
        },
        import_i18n6.default.t("Set Dose over Time")
      )), /* @__PURE__ */ import_react9.default.createElement(Grid_default, null, /* @__PURE__ */ import_react9.default.createElement(
        TextField_default,
        {
          name: "doseOverTimeVal",
          label: import_i18n6.default.t("Dose over time value"),
          value: this.doseOverTimeValue,
          type: "string",
          onChange: this.onDoseOverTimeValueChange,
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react9.default.createElement(Grid_default, null, /* @__PURE__ */ import_react9.default.createElement(
        import_Button5.default,
        {
          variant: "contained",
          onClick: this.setDispenseVolume,
          fullWidth: true
        },
        import_i18n6.default.t("Dispense Volume")
      )), /* @__PURE__ */ import_react9.default.createElement(Grid_default, null, /* @__PURE__ */ import_react9.default.createElement(
        TextField_default,
        {
          name: "dispenseVolumeVal",
          label: import_i18n6.default.t("Dispense volume value"),
          value: this.dispenseValue,
          type: "string",
          onChange: this.onDispenseValueChange,
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react9.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react9.default.createElement(Grid_default, null, /* @__PURE__ */ import_react9.default.createElement(
        import_Button5.default,
        {
          variant: "contained",
          onClick: this.setConstantFlowRate,
          fullWidth: true
        },
        import_i18n6.default.t("Set constant flow rate")
      )), /* @__PURE__ */ import_react9.default.createElement(Grid_default, null, /* @__PURE__ */ import_react9.default.createElement(
        TextField_default,
        {
          name: "constantFlowRateVal",
          label: import_i18n6.default.t("Constant flow rate value"),
          value: this.constantFlowRateValue,
          type: "string",
          onChange: this.onConstantFlowRateValueChange,
          disabled: false,
          fullWidth: true
        }
      )))));
    }
  };
  __decorateClass([
    boundMethod
  ], Pump.prototype, "onCalibrateValueChange", 1);
  __decorateClass([
    boundMethod
  ], Pump.prototype, "doClearCalibration", 1);
  __decorateClass([
    boundMethod
  ], Pump.prototype, "doClearDispensedVolume", 1);
  __decorateClass([
    boundMethod
  ], Pump.prototype, "doCalibration", 1);
  __decorateClass([
    boundMethod
  ], Pump.prototype, "doHandleContinousDispense", 1);
  __decorateClass([
    boundMethod
  ], Pump.prototype, "doHandleStop", 1);
  __decorateClass([
    boundMethod
  ], Pump.prototype, "doHandlePause", 1);
  __decorateClass([
    boundMethod
  ], Pump.prototype, "onDoseOverTimeValueChange", 1);
  __decorateClass([
    boundMethod
  ], Pump.prototype, "setDoseOverTime", 1);
  __decorateClass([
    boundMethod
  ], Pump.prototype, "onDispenseValueChange", 1);
  __decorateClass([
    boundMethod
  ], Pump.prototype, "setDispenseVolume", 1);
  __decorateClass([
    boundMethod
  ], Pump.prototype, "onConstantFlowRateValueChange", 1);
  __decorateClass([
    boundMethod
  ], Pump.prototype, "setConstantFlowRate", 1);
  var Infos5 = [
    {
      name: "Atlas EZO Pump",
      addresses: EzoBase.getAllAddresses(97, 30),
      type: "Pump",
      react: Pump
    }
  ];

  // admin/src/devices/ec.tsx
  var import_i18n7 = __toESM(require_i18n());
  var import_Button6 = __toESM(require_Button2());
  var import_react10 = __toESM(require_react());
  var EC = class extends EzoBase {
    constructor(props) {
      super(props);
      let config;
      if (!props.config) {
        config = {
          pollingInterval: 5e3,
          uSParamActive: true,
          ppmParamActive: true,
          pptParamActive: true,
          sgParamActive: true,
          isActive: true,
          isLedOn: true
        };
        props.onChange(config);
      } else {
        config = { ...props.config };
      }
      console.log("new EzoECConfig()", props, config);
      this.state = {
        config
      };
    }
    get calibrateValue() {
      return this.calibrateVal;
    }
    set calibrateValue(value) {
      this.calibrateVal = value;
    }
    get tempCompensationValue() {
      return this.tempCompensationVal;
    }
    set tempCompensationValue(value) {
      this.tempCompensationVal = value;
    }
    get tdsConversionValue() {
      return this.tdsConversionVal;
    }
    set tdsConversionValue(value) {
      this.tdsConversionVal = value;
    }
    get probeTypeValue() {
      return this.probeTypeVal;
    }
    set probeTypeValue(value) {
      this.probeTypeVal = value;
    }
    onCalibrateValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.calibrateValue = value.toString();
      console.log("newCalibrateValue: " + this.calibrateValue);
      return false;
    }
    doClearCalibration(_event) {
      console.log("Clear Calibration Button pressed");
      this.handleCalibration("Clear", 0);
      return false;
    }
    doDryCalibration(_event) {
      console.log("Dry Calibration Button pressed");
      this.handleCalibration("Dry", 0);
      return false;
    }
    doSinglepointCalibration(_event) {
      console.log("Singlepoint Calibration Button pressed");
      this.handleCalibration("Singlepoint", this.calibrateValue);
      return false;
    }
    doLowCalibration(_event) {
      console.log("Low Calibration Button pressed");
      this.handleCalibration("Low", this.calibrateValue);
      return false;
    }
    doHighCalibration(_event) {
      console.log("High Calibration Button pressed");
      this.handleCalibration("High", this.calibrateValue);
      return false;
    }
    handleCalibration(calibrationtype, Value) {
      try {
        let txPayload = {
          "address": this.address.toString(),
          "calibrationtype": calibrationtype,
          "ecValue": Value.toString()
        };
        this.sendCommand("ECCalibration", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "EC Calibration"');
        return false;
      }
    }
    onTempCompensationValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.tempCompensationValue = value;
      console.log("tempCompensationValue: " + this.tempCompensationValue);
      return false;
    }
    setTempCompensationValue(_event) {
      console.log("Set Temp. compensation value Button pressed");
      this.handleTempCompensation(this.tempCompensationValue);
      return false;
    }
    handleTempCompensation(tcValue) {
      try {
        let txPayload = {
          "address": this.address.toString(),
          "deviceType": "EC",
          "tcValue": tcValue.toString()
        };
        this.sendCommand("TemperatureCompensation", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "Setting Temperature Compensation"');
        return false;
      }
    }
    onTDSConversionValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.tdsConversionValue = value;
      console.log("TDS conversion value: " + this.tdsConversionValue);
      return false;
    }
    setTDSConversionValue(_event) {
      console.log("Set TDS conversion value Button pressed");
      this.handleTDSConversionChange(this.tdsConversionValue);
      return false;
    }
    handleTDSConversionChange(tdsValue) {
      try {
        let txPayload = {
          "address": this.address.toString(),
          "deviceType": "EC",
          "tdsValue": tdsValue.toString()
        };
        this.sendCommand("EcTDSConversion", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "Setting TDS conversion value');
        return false;
      }
    }
    onProbeTypeValueChange(_event) {
      const target = event.target;
      const value = this.parseChangedSetting(target);
      this.probeTypeValue = value;
      console.log("probeTypeValue: " + this.probeTypeValue);
      return false;
    }
    setProbeTypeValue(_event) {
      console.log("Set Probe Type Button pressed");
      this.handleProbeTypeChange(this.probeTypeValue);
      return false;
    }
    handleProbeTypeChange(ptValue) {
      try {
        let txPayload = {
          "address": this.address.toString(),
          "probeTypeValue": ptValue.toString()
        };
        this.sendCommand("EcProbeType", txPayload);
        return true;
      } catch (e) {
        console.log('Error on "Setting Probe Type"');
        return false;
      }
    }
    render() {
      return /* @__PURE__ */ import_react10.default.createElement(import_react10.default.Fragment, null, /* @__PURE__ */ import_react10.default.createElement(Grid_default, { container: true, spacing: 3 }, /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react10.default.createElement(
        TextField_default,
        {
          name: "name",
          label: import_i18n7.default.t("Name"),
          value: this.state.config.name || "",
          type: "text",
          fullWidth: true,
          onChange: this.handleChange
        }
      )), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react10.default.createElement(
        TextField_default,
        {
          name: "pollingInterval",
          label: import_i18n7.default.t("Polling Interval"),
          value: this.state.config.pollingInterval,
          type: "number",
          InputProps: {
            inputProps: { min: 1e4, max: 36e5 },
            endAdornment: /* @__PURE__ */ import_react10.default.createElement(InputAdornment_default, { position: "end" }, "ms")
          },
          fullWidth: true,
          onChange: this.handleChange
        }
      )), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react10.default.createElement("label", null, /* @__PURE__ */ import_react10.default.createElement(
        Switch_default,
        {
          checked: this.state.config.isActive,
          onChange: this.handleChange,
          name: "isActive"
        }
      ), import_i18n7.default.t("Active")), /* @__PURE__ */ import_react10.default.createElement("label", null, /* @__PURE__ */ import_react10.default.createElement(
        Switch_default,
        {
          checked: this.state.config.isLedOn,
          onChange: this.handleChange,
          name: "isLedOn"
        }
      ), import_i18n7.default.t("IsLedActive"))), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react10.default.createElement("label", null, import_i18n7.default.t("Functionalities")))), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react10.default.createElement(
        import_Button6.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.findEzoBoard,
          fullWidth: true
        },
        import_i18n7.default.t("Find EZO Board")
      )), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react10.default.createElement(
        import_Button6.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.setFactoryReset,
          fullWidth: true
        },
        import_i18n7.default.t("Factory Reset")
      )), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react10.default.createElement(Grid_default, null, /* @__PURE__ */ import_react10.default.createElement(
        import_Button6.default,
        {
          variant: "contained",
          onClick: this.setI2CAddress,
          fullWidth: true
        },
        import_i18n7.default.t("Change I2C Address")
      )), /* @__PURE__ */ import_react10.default.createElement(Grid_default, null, /* @__PURE__ */ import_react10.default.createElement(
        TextField_default,
        {
          name: "newAddress",
          label: import_i18n7.default.t("New Address"),
          value: this.newAddressString,
          type: "number",
          onChange: this.onAddressChange,
          InputProps: { inputProps: { min: 97, max: 127 } },
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react10.default.createElement("label", null, import_i18n7.default.t("EC Parameters Configuration"))), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react10.default.createElement("label", null, /* @__PURE__ */ import_react10.default.createElement(
        Switch_default,
        {
          checked: this.state.config.uSParamActive,
          onChange: this.handleChange,
          name: "uSParamActive"
        }
      ), import_i18n7.default.t("EC(uS)")), /* @__PURE__ */ import_react10.default.createElement("label", null, /* @__PURE__ */ import_react10.default.createElement(
        Switch_default,
        {
          checked: this.state.config.ppmParamActive,
          onChange: this.handleChange,
          name: "ppmParamActive"
        }
      ), import_i18n7.default.t("TDS(ppm)")), /* @__PURE__ */ import_react10.default.createElement("label", null, /* @__PURE__ */ import_react10.default.createElement(
        Switch_default,
        {
          checked: this.state.config.pptParamActive,
          onChange: this.handleChange,
          name: "pptParamActive"
        }
      ), import_i18n7.default.t("S(ppt)")), /* @__PURE__ */ import_react10.default.createElement("label", null, /* @__PURE__ */ import_react10.default.createElement(
        Switch_default,
        {
          checked: this.state.config.sgParamActive,
          onChange: this.handleChange,
          name: "sgParamActive"
        }
      ), import_i18n7.default.t("SG"))), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react10.default.createElement("label", null, import_i18n7.default.t("EC Sensor Calibration"))), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 12, sm: 5, md: 2 }, /* @__PURE__ */ import_react10.default.createElement(
        import_Button6.default,
        {
          variant: "contained",
          disabled: false,
          onClick: this.doClearCalibration,
          fullWidth: true
        },
        import_i18n7.default.t("Clear Calibration")
      )), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react10.default.createElement(Grid_default, null, /* @__PURE__ */ import_react10.default.createElement(
        import_Button6.default,
        {
          variant: "contained",
          onClick: this.doDryCalibration,
          fullWidth: true
        },
        import_i18n7.default.t("Calibrate Dry")
      )), /* @__PURE__ */ import_react10.default.createElement(Grid_default, null, /* @__PURE__ */ import_react10.default.createElement(
        import_Button6.default,
        {
          variant: "contained",
          onClick: this.doLowCalibration,
          fullWidth: true
        },
        import_i18n7.default.t("Calibrate Low")
      )), /* @__PURE__ */ import_react10.default.createElement(Grid_default, null, /* @__PURE__ */ import_react10.default.createElement(
        import_Button6.default,
        {
          variant: "contained",
          onClick: this.doHighCalibration,
          fullWidth: true
        },
        import_i18n7.default.t("Calibrate High")
      )), /* @__PURE__ */ import_react10.default.createElement(Grid_default, null, /* @__PURE__ */ import_react10.default.createElement(
        import_Button6.default,
        {
          variant: "contained",
          onClick: this.doSinglepointCalibration,
          fullWidth: true
        },
        import_i18n7.default.t("Calibrate Singlepoint")
      )), /* @__PURE__ */ import_react10.default.createElement(Grid_default, null, /* @__PURE__ */ import_react10.default.createElement(
        TextField_default,
        {
          name: "newCalLowValue",
          label: import_i18n7.default.t("EC value"),
          value: this.calibrateValue,
          type: "number",
          onChange: this.onCalibrateValueChange,
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react10.default.createElement(Grid_default, null, /* @__PURE__ */ import_react10.default.createElement(
        import_Button6.default,
        {
          variant: "contained",
          onClick: this.setTempCompensationValue,
          fullWidth: true
        },
        import_i18n7.default.t("Set TC Value")
      )), /* @__PURE__ */ import_react10.default.createElement(Grid_default, null, /* @__PURE__ */ import_react10.default.createElement(
        TextField_default,
        {
          name: "tempCompensationVal",
          label: import_i18n7.default.t("Temp. compensation value"),
          value: this.tempCompensationValue,
          type: "number",
          onChange: this.onTempCompensationValueChange,
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react10.default.createElement(Grid_default, null, /* @__PURE__ */ import_react10.default.createElement(
        import_Button6.default,
        {
          variant: "contained",
          onClick: this.setTDSConversionValue,
          fullWidth: true
        },
        import_i18n7.default.t("Set TDS Conversion")
      )), /* @__PURE__ */ import_react10.default.createElement(Grid_default, null, /* @__PURE__ */ import_react10.default.createElement(
        TextField_default,
        {
          name: "tdsConversionVal",
          label: import_i18n7.default.t("TDS conversion value"),
          value: this.tdsConversionValue,
          type: "number",
          onChange: this.onTDSConversionValueChange,
          disabled: false,
          fullWidth: true
        }
      ))), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react10.default.createElement("label", null, import_i18n7.default.t("EC Probe Type Setting"))), /* @__PURE__ */ import_react10.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 2 }, /* @__PURE__ */ import_react10.default.createElement(Grid_default, null, /* @__PURE__ */ import_react10.default.createElement(
        import_Button6.default,
        {
          variant: "contained",
          onClick: this.setProbeTypeValue,
          fullWidth: true
        },
        import_i18n7.default.t("Set Probe Type")
      )), /* @__PURE__ */ import_react10.default.createElement(Grid_default, null, /* @__PURE__ */ import_react10.default.createElement(
        TextField_default,
        {
          name: "probeTypeVal",
          label: import_i18n7.default.t("Probe Type"),
          value: this.probeTypeValue,
          type: "string",
          onChange: this.onProbeTypeValueChange,
          disabled: false,
          fullWidth: true
        }
      )))));
    }
  };
  __decorateClass([
    boundMethod
  ], EC.prototype, "onCalibrateValueChange", 1);
  __decorateClass([
    boundMethod
  ], EC.prototype, "doClearCalibration", 1);
  __decorateClass([
    boundMethod
  ], EC.prototype, "doDryCalibration", 1);
  __decorateClass([
    boundMethod
  ], EC.prototype, "doSinglepointCalibration", 1);
  __decorateClass([
    boundMethod
  ], EC.prototype, "doLowCalibration", 1);
  __decorateClass([
    boundMethod
  ], EC.prototype, "doHighCalibration", 1);
  __decorateClass([
    boundMethod
  ], EC.prototype, "onTempCompensationValueChange", 1);
  __decorateClass([
    boundMethod
  ], EC.prototype, "setTempCompensationValue", 1);
  __decorateClass([
    boundMethod
  ], EC.prototype, "onTDSConversionValueChange", 1);
  __decorateClass([
    boundMethod
  ], EC.prototype, "setTDSConversionValue", 1);
  __decorateClass([
    boundMethod
  ], EC.prototype, "onProbeTypeValueChange", 1);
  __decorateClass([
    boundMethod
  ], EC.prototype, "setProbeTypeValue", 1);
  var Infos6 = [
    {
      name: "Atlas EZO EC",
      addresses: EzoBase.getAllAddresses(1, 127),
      type: "EC",
      react: EC
    }
  ];

  // admin/src/devices/ezo-factory.ts
  var _EzoFactory = class {
    static getSupportedDevices(address) {
      return this.supportedDevices.filter((info) => !!info.addresses.find((a) => a === address)).sort(_EzoFactory.compareDevice);
    }
    static createComponent(config) {
      console.log("createComponent", config);
      if (!config.type) {
        return void 0;
      }
      const device = this.supportedDevices.find((info) => info.type === config.type && info.name === config.name);
      if (!device) {
        return void 0;
      }
      return device.react;
    }
    static compareDevice(a, b) {
      const nameA = a.name == "Generic" ? "zzzz" : a.name;
      const nameB = b.name == "Generic" ? "zzzz" : b.name;
      return nameA.localeCompare(nameB);
    }
  };
  var EzoFactory = _EzoFactory;
  EzoFactory.supportedDevices = [
    ...Infos,
    ...Infos2,
    ...Infos3,
    ...Infos4,
    ...Infos5,
    ...Infos6
  ];

  // admin/src/components/ezo-general.tsx
  var EzoGeneral = class extends import_react11.default.Component {
    constructor(props) {
      super(props);
      this.state = {
        config: props.config
      };
    }
    get address() {
      return this.props.config.address;
    }
    get deviceOptions() {
      const options = [{ title: import_i18n8.default.t("Unused"), value: "" }];
      const supportedDevices = EzoFactory.getSupportedDevices(this.address);
      supportedDevices.forEach((device) => {
        options.push({ title: device.name, value: JSON.stringify(device) });
      });
      return options;
    }
    get selectedDeviceOption() {
      const supportedDevices = EzoFactory.getSupportedDevices(this.state.config.address);
      const device = supportedDevices.find(
        (device2) => device2.type === this.state.config.type && device2.name === this.state.config.name
      );
      return device ? JSON.stringify(device) : void 0;
    }
    renderDeviceComponent() {
      var _a;
      if (this.oldConfig && this.oldConfig.name === this.state.config.name && this.oldConfig.type === this.state.config.type) {
        return this.oldComponent;
      }
      this.oldConfig = { ...this.state.config };
      const DeviceComponent = EzoFactory.createComponent(this.state.config);
      if (!DeviceComponent) {
        this.oldComponent = void 0;
      } else {
        const implConfig = this.state.config[(_a = this.state.config.type) != null ? _a : ""];
        const hadOldComponent = !!this.oldComponent;
        this.oldComponent = /* @__PURE__ */ import_react11.default.createElement(
          DeviceComponent,
          {
            onChange: this.onDeviceConfigChanged,
            context: this.props.context,
            config: implConfig,
            baseConfig: this.state.config
          }
        );
        if (hadOldComponent) {
          return void 0;
        }
      }
      return this.oldComponent;
    }
    onDeviceTypeSelected(value) {
      const newConfig = { ...this.state.config };
      if (value) {
        const device = JSON.parse(value);
        newConfig.type = device.type;
        newConfig.name = device.name;
      } else {
        delete newConfig.type;
        delete newConfig.name;
      }
      this.setState({ config: newConfig }, () => this.props.onChange(this.state.config));
    }
    onDeviceConfigChanged(newConfig) {
      console.log("onDeviceConfigChanged", newConfig);
      const baseConfig = { ...this.state.config };
      baseConfig[this.state.config.type || ""] = newConfig;
      this.setState({ config: baseConfig }, () => this.props.onChange(this.state.config));
    }
    render() {
      return /* @__PURE__ */ import_react11.default.createElement(import_react11.default.Fragment, null, /* @__PURE__ */ import_react11.default.createElement(Grid_default, { container: true, spacing: 3 }, /* @__PURE__ */ import_react11.default.createElement(Grid_default, { item: true, xs: 12, sm: 12, md: 12 }, /* @__PURE__ */ import_react11.default.createElement("label", null, import_i18n8.default.t("General Configuration"))), /* @__PURE__ */ import_react11.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react11.default.createElement(
        TextField_default,
        {
          name: "address",
          label: import_i18n8.default.t("Address"),
          value: this.state.config.address + "(" + toHexString(this.state.config.address) + ")",
          type: "text",
          fullWidth: true,
          disabled: true
        }
      )), /* @__PURE__ */ import_react11.default.createElement(Grid_default, { item: true, xs: 7, sm: 5, md: 3 }, /* @__PURE__ */ import_react11.default.createElement(
        Dropdown,
        {
          title: "Device Type",
          attr: "type",
          options: this.deviceOptions,
          value: this.selectedDeviceOption,
          onChange: this.onDeviceTypeSelected
        }
      ))), this.renderDeviceComponent());
    }
  };
  __decorateClass([
    boundMethod
  ], EzoGeneral.prototype, "onDeviceTypeSelected", 1);
  __decorateClass([
    boundMethod
  ], EzoGeneral.prototype, "onDeviceConfigChanged", 1);

  // admin/src/pages/general.tsx
  var import_i18n9 = __toESM(require_i18n());
  var import_Button7 = __toESM(require_Button2());
  var import_react12 = __toESM(require_react());
  var General = class extends import_react12.default.Component {
    constructor(props) {
      super(props);
      this.active = false;
      this.state = {
        ...props.settings,
        alive: false,
        busy: false
      };
    }
    handleChange(event2) {
      const target = event2.target;
      const newState = {};
      let value;
      if (target.type === "number") {
        value = parseInt(target.value);
      } else {
        value = target.value;
      }
      newState[target.name] = value;
      this.setState(newState, () => this.props.onChange(target.name, value));
      return false;
    }
    searchDevices(_event) {
      console.log("Sending search request");
      this.sendSearch(this.state.busNumber).catch((error) => console.log(error));
      return false;
    }
    async sendSearch(busNumber) {
      const { socket, instanceId } = this.props.context;
      this.setState({ busy: true });
      try {
        console.log("Sending search request async to Instance: " + instanceId.toString());
        const result = await socket.sendTo(instanceId, "search", busNumber.toString());
        if (typeof result === "string") {
          const addresses = JSON.parse(result);
          const devices = [...this.props.settings.devices];
          addresses.forEach((address) => {
            if (!devices.find((d) => d.address === address)) {
              devices.push({ address });
              devices.sort((a, b) => a.address - b.address);
            }
          });
          console.log(this.props.settings.devices.length + " - " + devices.length);
          if (this.props.settings.devices.length != devices.length) {
            this.props.onChange("devices", devices);
          }
        }
      } finally {
        this.setState({ busy: false });
      }
    }
    handleAliveChange(id, obj) {
      this.setState({ alive: !!(obj && obj.val) });
    }
    componentDidMount() {
      const { socket, instanceId } = this.props.context;
      socket.subscribeState(instanceId + ".alive", false, this.handleAliveChange);
    }
    componentWillUnmount() {
      const { socket, instanceId } = this.props.context;
      socket.unsubscribeState(instanceId + ".alive", this.handleAliveChange);
    }
    render() {
      return /* @__PURE__ */ import_react12.default.createElement(import_react12.default.Fragment, null, /* @__PURE__ */ import_react12.default.createElement(Grid_default, { container: true, spacing: 3 }, /* @__PURE__ */ import_react12.default.createElement(Grid_default, { item: true, xs: 6, sm: 4, md: 2 }, /* @__PURE__ */ import_react12.default.createElement(
        TextField_default,
        {
          name: "busNumber",
          label: import_i18n9.default.t("Bus number"),
          value: this.state.busNumber,
          type: "number",
          fullWidth: true,
          onChange: this.handleChange
        }
      ))), /* @__PURE__ */ import_react12.default.createElement(Grid_default, { container: true, spacing: 3 }, /* @__PURE__ */ import_react12.default.createElement(Grid_default, { item: true, xs: true }, /* @__PURE__ */ import_react12.default.createElement(
        import_Button7.default,
        {
          variant: "contained",
          disabled: !this.state.alive || this.state.busy,
          onClick: this.searchDevices
        },
        import_i18n9.default.t("Search Devices")
      ))));
    }
  };
  __decorateClass([
    boundMethod
  ], General.prototype, "handleChange", 1);
  __decorateClass([
    boundMethod
  ], General.prototype, "searchDevices", 1);
  __decorateClass([
    boundMethod
  ], General.prototype, "handleAliveChange", 1);

  // admin/src/components/settings.tsx
  var styles59 = (theme2) => ({
    root: {
      flexGrow: 1,
      backgroundColor: theme2.palette.background.paper,
      display: "flex",
      height: "calc(100% - 102px)"
    },
    tabs: {
      borderRight: `1px solid ${theme2.palette.divider}`
    },
    tabpanel: {
      width: "100%",
      overflowY: "scroll"
    }
  });
  function TabPanel(props) {
    const { children, value, index, ...other } = props;
    return /* @__PURE__ */ import_react13.default.createElement(
      "div",
      {
        role: "tabpanel",
        hidden: value !== index,
        id: `vertical-tabpanel-${index}`,
        "aria-labelledby": `vertical-tab-${index}`,
        ...other
      },
      value === index && /* @__PURE__ */ import_react13.default.createElement(Box_default, { p: 3 }, children)
    );
  }
  var Settings = class extends import_react13.default.Component {
    constructor(props) {
      super(props);
      this.state = { tabIndex: 0, devices: this.props.native.devices };
    }
    onGeneralChange(attr, value) {
      this.props.onChange(attr, value);
      if (attr === "devices") {
        this.setState({ devices: value });
      }
    }
    onDeviceChange(config) {
      console.log("onDeviceChange()", config);
      const index = this.state.devices.findIndex((device) => device.address === config.address);
      if (index >= 0) {
        const devices = [...this.state.devices];
        devices[index] = config;
        this.onGeneralChange("devices", devices);
      }
    }
    handleTabChange(_event, newValue) {
      this.setState({ tabIndex: newValue });
    }
    get labels() {
      const all = [import_i18n10.default.t("General")];
      this.state.devices.forEach((device) => {
        all.push(toHexString(device.address).replace("x", "\u{1D5D1}"));
      });
      return all;
    }
    render() {
      const { classes, native, context } = this.props;
      return /* @__PURE__ */ import_react13.default.createElement("div", { className: classes.root }, /* @__PURE__ */ import_react13.default.createElement(
        Tabs_default,
        {
          orientation: "vertical",
          variant: "scrollable",
          value: this.state.tabIndex,
          onChange: this.handleTabChange,
          className: classes.tabs
        },
        this.labels.map((k, i) => /* @__PURE__ */ import_react13.default.createElement(Tab_default, { key: `tab-${i}`, label: k, id: `tab-${i}` }))
      ), /* @__PURE__ */ import_react13.default.createElement(TabPanel, { value: this.state.tabIndex, index: 0, className: classes.tabpanel }, /* @__PURE__ */ import_react13.default.createElement(General, { settings: native, context, onChange: this.onGeneralChange })), this.state.devices.map((device, i) => /* @__PURE__ */ import_react13.default.createElement(
        TabPanel,
        {
          key: `tabpanel-${i + 1}`,
          value: this.state.tabIndex,
          index: i + 1,
          className: classes.tabpanel
        },
        /* @__PURE__ */ import_react13.default.createElement(
          EzoGeneral,
          {
            key: device.address,
            context,
            config: device,
            onChange: this.onDeviceChange
          }
        )
      )));
    }
  };
  __decorateClass([
    boundMethod
  ], Settings.prototype, "onGeneralChange", 1);
  __decorateClass([
    boundMethod
  ], Settings.prototype, "onDeviceChange", 1);
  __decorateClass([
    boundMethod
  ], Settings.prototype, "handleTabChange", 1);
  var settings_default = (0, import_styles6.withStyles)(styles59)(Settings);

  // admin/src/app.tsx
  var styles60 = (_theme) => ({
    root: {}
  });
  var App = class extends import_GenericApp.default {
    constructor(props) {
      const extendedProps = { ...props };
      extendedProps.encryptedFields = [];
      extendedProps.translations = {
        en: require_en2(),
        de: require_de2(),
        ru: require_ru2(),
        pt: require_pt2(),
        nl: require_nl2(),
        fr: require_fr2(),
        it: require_it2(),
        es: require_es2(),
        pl: require_pl2(),
        "zh-cn": require_zh_cn2()
      };
      super(props, extendedProps);
    }
    onConnectionReady() {
    }
    onPrepareSave(settings) {
      super.onPrepareSave(settings);
      const devices = settings.devices;
      settings.devices = devices.filter((d) => d.type && d.name);
    }
    render() {
      if (!this.state.loaded) {
        return super.render();
      }
      const { theme: theme2 } = this.state;
      const context = {
        socket: this.socket,
        instanceId: this.instanceId
      };
      return /* @__PURE__ */ import_react14.default.createElement(
        "div",
        {
          className: "App",
          style: { background: theme2.palette.background.default, color: theme2.palette.text.primary }
        },
        /* @__PURE__ */ import_react14.default.createElement(
          settings_default,
          {
            native: this.state.native,
            context,
            onChange: (attr, value) => this.updateNativeValue(attr, value)
          }
        ),
        this.renderError(),
        this.renderToast(),
        this.renderSaveCloseButtons()
      );
    }
  };
  var app_default = (0, import_styles7.withStyles)(styles60)(App);

  // admin/src/index.tsx
  var themeName = import_Utils.default.getThemeName();
  function build() {
    import_react_dom.default.render(
      /* @__PURE__ */ import_react15.default.createElement(import_styles8.MuiThemeProvider, { theme: (0, import_Theme.default)(themeName) }, /* @__PURE__ */ import_react15.default.createElement(
        app_default,
        {
          adapterName: "atlas-scientific-ezo-i2c",
          onThemeChange: (_theme) => {
            themeName = _theme;
            build();
          }
        }
      )),
      document.getElementById("root")
    );
  }
  build();
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
    localForage -- Offline Storage, Improved
    Version 1.10.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license Material-UI v4.11.3
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license Material-UI v4.11.5
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license Material-UI v4.12.2
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license Material-UI v4.12.4
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=index.js.map
