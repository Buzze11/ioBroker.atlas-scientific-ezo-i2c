{
  "version": 3,
  "sources": ["../../src/atlas-scientific-i2c/ph_meter.ts"],
  "sourcesContent": ["import { AtlasScientificEzoI2cAdapter } from \"../main\";\r\nimport { EZODevice } from \"./ezo_device\";\r\n/**\r\n * Wrapper class for pH EZO circuit\r\n */\r\nexport class pH extends EZODevice{ \r\n    \r\n    constructor(i2c_bus,address,info, protected readonly adapter: AtlasScientificEzoI2cAdapter){\r\n        super(i2c_bus,address,info, adapter);\r\n    }\r\n    \r\n    /**\r\n     * Gets a single pH reading\r\n     */\r\n    async Read(): Promise<number>{\r\n        this.waitTime = 900;\r\n        const resp=await this.SendCommand('R');\r\n        return Number.parseFloat(resp.toString('ascii',1).replace(/\\0/g, ''));\r\n    }\r\n\r\n    /**\r\n     * Resets all calibration points to ideal.\r\n     */\r\n    async ClearCalibration(): Promise<void>{\r\n        this.waitTime = 300;\r\n        await this.SendCommand(\"Cal,clear\");\r\n    }\r\n\r\n    /**\r\n     * Returns numbers of Calibration points (0-3)\r\n     */\r\n    async IsCalibrated():Promise<string>{\r\n        this.waitTime = 300;\r\n        const cmd='Cal,?';\r\n        return (await this.SendCommand(cmd)).toString('ascii',cmd.length+1).replace(/\\0/g, '');\r\n    } \r\n\r\n    /**\r\n     * Performs single point calibration at the mid point.\r\n     * WARNING: This will clear any previous calibration!\r\n     * ph defaults to 7.00\r\n     */\r\n    async CalibrateMid(ph?: number){\r\n        if(!ph)\r\n            ph = 7.00;\r\n        this.waitTime=900;\r\n        await this.SendCommand('Cal,mid,'+ ph.toString());\r\n        this.waitTime=300;\r\n    }\r\n\r\n    /**\r\n     * Performs two point calibration at low point.\r\n     * ph defaults to 4.00\r\n     */\r\n    async CalibrateLow(ph?: number){\r\n        if(!ph)\r\n            ph = 4.00;\r\n        this.waitTime=900;\r\n        await this.SendCommand('Cal,low,'+ph.toString());\r\n    }\r\n\r\n    /**\r\n     * Performs three point calibration at high point\r\n     * ph defaults to 10.0\r\n     */    \r\n    async CalibrateHigh(ph?: number){\r\n        if(!ph)\r\n            ph = 10.00;\r\n        this.waitTime=900;\r\n        await this.SendCommand('Cal,high,'+ph.toString());\r\n    }\r\n\r\n    /**\r\n     * Takes a single pH reading\r\n     */\r\n    async GetReading():Promise<string>{\r\n        this.waitTime=900;\r\n        const r= (await this.SendCommand('R')).toString('ascii',1).replace(/\\0/g, '');\r\n        return r;\r\n    }    \r\n\r\n    /**\r\n     * Gets the current Temperature Compensation in degrees Celsius. \r\n     * returns Celsius\r\n     */\r\n    async GetTemperatureCompensation(): Promise<string>{\r\n        this.waitTime = 300;\r\n        const cmd='T,?';\r\n        return (await this.SendCommand(cmd)).toString('ascii',cmd.length+1).replace(/\\0/g, '');\r\n    }\r\n\r\n    /**\r\n     * Sets the Temperature Compensation value.  This is lost when power is cut.\r\n     * takeReading defaults false. If true, will return a pH reading immediately.\r\n     * returns Nothing unless takeReading=true\r\n     */\r\n    async SetTemperatureCompensation(value: number, takeReading = false): Promise<string | void>{\r\n        if(takeReading){\r\n            this.waitTime=900;\r\n            const r= (await this.SendCommand('RT,'+value)).toString('ascii',1).replace(/\\0/g, '');\r\n            return r;\r\n        }else{\r\n            this.waitTime = 900;\r\n            await this.SendCommand('T,'+value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * After calibrating, shows how closely (in percentage) the calibrated pH probe is working compared to the \u201Cideal\u201D pH probe. \r\n     * 'acid' and 'base' are percentages where 100% matches the ideal probe.  'zeroPoint' is the millivolt offset from true zero.\r\n     */\r\n    async GetSlope(): Promise<string[]>{\r\n        const cmd = 'Slope,?';\r\n        this.waitTime=300;\r\n        return (await this.SendCommand(cmd)).toString('ascii', cmd.length+1).replace(/\\0/g, '').split(',');\r\n    }\r\n}\r\n\r\nexport { pH as default };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAA0B;AAInB,MAAM,WAAW,4BAAS;AAAA,EAE7B,YAAY,SAAQ,SAAQ,MAAyB,SAAsC;AACvF,UAAM,SAAQ,SAAQ,MAAM,OAAO;AADc;AAAA,EAErD;AAAA,EAKA,MAAM,OAAuB;AACzB,SAAK,WAAW;AAChB,UAAM,OAAK,MAAM,KAAK,YAAY,GAAG;AACrC,WAAO,OAAO,WAAW,KAAK,SAAS,SAAQ,CAAC,EAAE,QAAQ,OAAO,EAAE,CAAC;AAAA,EACxE;AAAA,EAKA,MAAM,mBAAiC;AACnC,SAAK,WAAW;AAChB,UAAM,KAAK,YAAY,WAAW;AAAA,EACtC;AAAA,EAKA,MAAM,eAA8B;AAChC,SAAK,WAAW;AAChB,UAAM,MAAI;AACV,YAAQ,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC,EAAE,QAAQ,OAAO,EAAE;AAAA,EACzF;AAAA,EAOA,MAAM,aAAa,IAAY;AAC3B,QAAG,CAAC;AACA,WAAK;AACT,SAAK,WAAS;AACd,UAAM,KAAK,YAAY,aAAY,GAAG,SAAS,CAAC;AAChD,SAAK,WAAS;AAAA,EAClB;AAAA,EAMA,MAAM,aAAa,IAAY;AAC3B,QAAG,CAAC;AACA,WAAK;AACT,SAAK,WAAS;AACd,UAAM,KAAK,YAAY,aAAW,GAAG,SAAS,CAAC;AAAA,EACnD;AAAA,EAMA,MAAM,cAAc,IAAY;AAC5B,QAAG,CAAC;AACA,WAAK;AACT,SAAK,WAAS;AACd,UAAM,KAAK,YAAY,cAAY,GAAG,SAAS,CAAC;AAAA,EACpD;AAAA,EAKA,MAAM,aAA4B;AAC9B,SAAK,WAAS;AACd,UAAM,KAAI,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,CAAC,EAAE,QAAQ,OAAO,EAAE;AAC5E,WAAO;AAAA,EACX;AAAA,EAMA,MAAM,6BAA6C;AAC/C,SAAK,WAAW;AAChB,UAAM,MAAI;AACV,YAAQ,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC,EAAE,QAAQ,OAAO,EAAE;AAAA,EACzF;AAAA,EAOA,MAAM,2BAA2B,OAAe,cAAc,OAA8B;AACxF,QAAG,aAAY;AACX,WAAK,WAAS;AACd,YAAM,KAAI,MAAM,KAAK,YAAY,QAAM,KAAK,GAAG,SAAS,SAAQ,CAAC,EAAE,QAAQ,OAAO,EAAE;AACpF,aAAO;AAAA,IACX,OAAK;AACD,WAAK,WAAW;AAChB,YAAM,KAAK,YAAY,OAAK,KAAK;AAAA,IACrC;AAAA,EACJ;AAAA,EAMA,MAAM,WAA6B;AAC/B,UAAM,MAAM;AACZ,SAAK,WAAS;AACd,YAAQ,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAS,IAAI,SAAO,CAAC,EAAE,QAAQ,OAAO,EAAE,EAAE,MAAM,GAAG;AAAA,EACrG;AACJ;",
  "names": []
}
