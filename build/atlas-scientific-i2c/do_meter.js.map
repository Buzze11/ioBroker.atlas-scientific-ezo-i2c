{
  "version": 3,
  "sources": ["../../src/atlas-scientific-i2c/do_meter.ts"],
  "sourcesContent": ["import { AtlasScientificEzoI2cAdapter } from \"../main\";\r\nimport { EZODevice } from \"./ezo_device\";\r\n\r\n/**\r\n * Wrapper class for DO EZO circuit\r\n */\r\nexport class DO extends EZODevice{\r\n\r\n\r\n    constructor(i2c_bus,address,info, protected readonly adapter: AtlasScientificEzoI2cAdapter){\r\n        super(i2c_bus,address,info, adapter);\r\n    }\r\n\r\n    /**\r\n     * Resets calibration settings\r\n     */\r\n    async ClearCalibration(){\r\n        this.waitTime = 300;\r\n        await this.SendCommand('Cal,clear');\r\n    }\r\n\r\n    /**\r\n     * Single Point Calibration for Atmospheric Oxygen\r\n     */\r\n    async CalibrateAtmosphericOxygen(){\r\n        this.waitTime=1300;\r\n        await this.SendCommand('Cal');\r\n    }\r\n\r\n    /**\r\n     * Two Point Calibration for 0 Dissolved Oxygen\r\n     */\r\n    async Calibrate0DissolvedOxygen(){\r\n        this.waitTime=1300;\r\n        await this.SendCommand('Cal,0');\r\n    }\r\n\r\n    /**\r\n     * Returns a status code on the calibtration state\r\n     * 0 - uncalibrated\r\n     * 1 - single point calibrated\r\n     * 2 - two point calibrated\r\n     */\r\n    async IsCalibrated():Promise<string>{\r\n        const cmd='Cal,?';\r\n        this.waitTime = 300;\r\n        return (await this.SendCommand(cmd)).toString('ascii',cmd.length+1).replace(/\\0/g, '');\r\n    }\r\n\r\n    /**\r\n     * Sets the Temperature Compensation value. Optionally takes and returns an immediate reading. \r\n     * takeReading Defaults to false. \r\n     * If takeReading is true, it returns the Dissolved Oxygen reading. Otherwise, returns nothing.\r\n     */\r\n    async SetTemperatureCompensation(value:number, takeReading=false):Promise<string>{\r\n        let cmd = 'T,';\r\n        if(takeReading){\r\n            this.waitTime=900;\r\n            cmd='RT,';\r\n            const r = (await this.SendCommand(cmd+value)).toString('ascii',cmd.length+1).replace(/\\0/g, '');\r\n            this.waitTime=300;\r\n            return r;\r\n        }else{\r\n            await this.SendCommand(cmd+value);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current compensated temperature value\r\n     */\r\n    async GetTemperatureCompensation():Promise<string>{\r\n        const cmd='T,?';\r\n        this.waitTime = 300;\r\n        return (await this.SendCommand(cmd)).toString('ascii',cmd.length+1).replace(/\\0/g, '');\r\n    }\r\n\r\n    /**\r\n     * Sets the SalinityCompensation. \r\n     * \r\n     * If the conductivity of your water is less than 2,500\u03BCS this command is irrelevant\r\n     * value Assumed \u03BCS unless isPpt=true.\r\n     * isPpt Defaults to false. \r\n     */\r\n    async SetSalinityCompensation(value:number, isPpt=false):Promise<void>{\r\n        this.waitTime = 300;\r\n        await this.SendCommand('S,'+value+(isPpt?',ppt':''));\r\n    }\r\n\r\n    /**\r\n     * Gets the current SalinityCompensation value and whether it is in \u03BCS or ppt\r\n     * returns 'value' and 'isPpt'\r\n     */\r\n    async GetSalinityCompensation():Promise<string[]>{\r\n        const cmd = 'S,?';\r\n        this.waitTime = 300;\r\n        const resp=(await this.SendCommand(cmd)).toString('ascii',cmd.length+1).replace(/\\0/g, '').split(',');\r\n        return resp;\r\n    }\r\n\r\n    /**\r\n     * Sets the PressureCompensation value in kPa.\r\n     * \r\n     * This parameter can be omitted if the water is less than 10 meters deep\r\n     */\r\n    async SetPressureCompensation(value:string):Promise<void>{\r\n        this.waitTime = 300;\r\n        await this.SendCommand('P,'+value);\r\n    }\r\n\r\n    /**\r\n     * Returns the current compensated pressure value in kPa.\r\n     */\r\n    async GetPressureCompensation():Promise<string>{\r\n        const cmd='P,?';\r\n        this.waitTime = 300;\r\n        return (await this.SendCommand(cmd)).toString('ascii',cmd.length+1).replace(/\\0/g, '');\r\n    }\r\n\r\n    /**\r\n     * Sets the values to be returned when a reading is taken.\r\n     * 'mg' - mg/L : enabled by default\r\n     * '%' - percent saturation : disabled by default\r\n     */\r\n    async SetParameter(parameter:string,isEnabled:boolean):Promise<void>{\r\n        this.waitTime = 300;\r\n        await this.SendCommand('O,'+parameter+','+(isEnabled?'1':'0'));\r\n    }\r\n\r\n    /**\r\n     * Gets a comma seperated string of the currently enabled parameters\r\n     */\r\n    async GetParametersEnabled():Promise<string>{\r\n        const cmd='O,?';\r\n        this.waitTime = 300;\r\n        return (await this.SendCommand(cmd)).toString('ascii',cmd.length+1).replace(/\\0/g, '');\r\n    }\r\n\r\n    /**\r\n     * Takes a sensor reading. Defaults to mg/L. Use SetParameter() to change return type\r\n     * a CSV string if both mg/L and % sat are enabled\r\n     */\r\n    async GetReading():Promise<string>{\r\n        this.waitTime=600;\r\n        const r =(await this.SendCommand('R')).toString('ascii',1).replace(/\\0/g, '');\r\n        return r;\r\n    }\r\n}\r\n\r\nexport { DO as default };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAA0B;AAKnB,MAAM,WAAW,4BAAS;AAAA,EAG7B,YAAY,SAAQ,SAAQ,MAAyB,SAAsC;AACvF,UAAM,SAAQ,SAAQ,MAAM,OAAO;AADc;AAAA,EAErD;AAAA,EAKA,MAAM,mBAAkB;AACpB,SAAK,WAAW;AAChB,UAAM,KAAK,YAAY,WAAW;AAAA,EACtC;AAAA,EAKA,MAAM,6BAA4B;AAC9B,SAAK,WAAS;AACd,UAAM,KAAK,YAAY,KAAK;AAAA,EAChC;AAAA,EAKA,MAAM,4BAA2B;AAC7B,SAAK,WAAS;AACd,UAAM,KAAK,YAAY,OAAO;AAAA,EAClC;AAAA,EAQA,MAAM,eAA8B;AAChC,UAAM,MAAI;AACV,SAAK,WAAW;AAChB,YAAQ,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC,EAAE,QAAQ,OAAO,EAAE;AAAA,EACzF;AAAA,EAOA,MAAM,2BAA2B,OAAc,cAAY,OAAsB;AAC7E,QAAI,MAAM;AACV,QAAG,aAAY;AACX,WAAK,WAAS;AACd,YAAI;AACJ,YAAM,KAAK,MAAM,KAAK,YAAY,MAAI,KAAK,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC,EAAE,QAAQ,OAAO,EAAE;AAC9F,WAAK,WAAS;AACd,aAAO;AAAA,IACX,OAAK;AACD,YAAM,KAAK,YAAY,MAAI,KAAK;AAChC,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAKA,MAAM,6BAA4C;AAC9C,UAAM,MAAI;AACV,SAAK,WAAW;AAChB,YAAQ,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC,EAAE,QAAQ,OAAO,EAAE;AAAA,EACzF;AAAA,EASA,MAAM,wBAAwB,OAAc,QAAM,OAAoB;AAClE,SAAK,WAAW;AAChB,UAAM,KAAK,YAAY,OAAK,SAAO,QAAM,SAAO,GAAG;AAAA,EACvD;AAAA,EAMA,MAAM,0BAA2C;AAC7C,UAAM,MAAM;AACZ,SAAK,WAAW;AAChB,UAAM,QAAM,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC,EAAE,QAAQ,OAAO,EAAE,EAAE,MAAM,GAAG;AACpG,WAAO;AAAA,EACX;AAAA,EAOA,MAAM,wBAAwB,OAA2B;AACrD,SAAK,WAAW;AAChB,UAAM,KAAK,YAAY,OAAK,KAAK;AAAA,EACrC;AAAA,EAKA,MAAM,0BAAyC;AAC3C,UAAM,MAAI;AACV,SAAK,WAAW;AAChB,YAAQ,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC,EAAE,QAAQ,OAAO,EAAE;AAAA,EACzF;AAAA,EAOA,MAAM,aAAa,WAAiB,WAAgC;AAChE,SAAK,WAAW;AAChB,UAAM,KAAK,YAAY,OAAK,YAAU,OAAK,YAAU,MAAI,IAAI;AAAA,EACjE;AAAA,EAKA,MAAM,uBAAsC;AACxC,UAAM,MAAI;AACV,SAAK,WAAW;AAChB,YAAQ,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC,EAAE,QAAQ,OAAO,EAAE;AAAA,EACzF;AAAA,EAMA,MAAM,aAA4B;AAC9B,SAAK,WAAS;AACd,UAAM,KAAI,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,CAAC,EAAE,QAAQ,OAAO,EAAE;AAC5E,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
