{
  "version": 3,
  "sources": ["../../src/atlas-scientific-i2c/ec_meter.ts"],
  "sourcesContent": ["import { AtlasScientificEzoI2cAdapter } from \"../main\";\r\nimport { EZODevice } from \"./ezo_device\";\r\n/**\r\n * Wrapper class for EC EZO circuit\r\n */\r\nexport class EC extends EZODevice{\r\n    \r\n    constructor(i2c_bus,address,info, protected readonly adapter: AtlasScientificEzoI2cAdapter){\r\n        super(i2c_bus,address,info,adapter);\r\n        this.readBufferSize=40;\r\n    }\r\n\r\n    /**\r\n     * Sets the probe type. '1.0' is the defaule value\r\n     * \r\n     * Current known probe types:  '0.1','1.0', and '10' \r\n     * value floating point in ASCII \r\n     */\r\n    async SetProbeType(value: string): Promise<string>{\r\n        if(!value)\r\n            return \"failed\";\r\n        await this.SendCommand('K,'+value);\r\n        this.waitTime=300;\r\n        return \"success\";\r\n    }\r\n\r\n    async GetProbeType(): Promise<string>{\r\n        const cmd='K,?';\r\n        this.waitTime=300;\r\n        //returns K,n\r\n        //strange:  normally these commands have a '?' prefixed to their return message\r\n        const k = (await this.SendCommand(cmd)).toString('ascii',cmd.length);\r\n        this.waitTime=600;\r\n        return k;\r\n    }\r\n\r\n    /**\r\n     * Sets Temperature Compensation value. Default is 25C.\r\n     * \r\n     * This is not maintained if power is cut.\r\n     * value Celsius\r\n     * takeReading Defaults to false. If true, immediately returns a new reading after setting the value. \r\n     * returns Nothing unless takeReading=true\r\n     */\r\n    async SetTemperatureCompensation(value: number,takeReading=false): Promise<any>{\r\n        if(takeReading){\r\n            this.waitTime=900;\r\n            const r = (await this.SendCommand('RT,'+value)).toString('ascii',1);\r\n            this.waitTime=300;\r\n            return r;\r\n        }else{\r\n            await this.SendCommand('T,'+value);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current compensated temperature value.\r\n     * returns floating point number in ASCII\r\n     */\r\n    async GetTemperatureCompensation(): Promise<string>{\r\n        const cmd='T,?';\r\n        return (await this.SendCommand(cmd)).toString('ascii',cmd.length+1);\r\n    }\r\n\r\n    /**\r\n     * Enables/disables parameters from the output string.\r\n     * \r\n     * 'EC' - conductivity\r\n     * \r\n     * 'TDS' - total dissolved solids\r\n     * \r\n     * 'S' - salintiy\r\n     * \r\n     * 'SG' - specific gravity\r\n     */\r\n    async SetParameter(parameter: string, isEnabled: boolean): Promise<void>{\r\n        await this.SendCommand('O,'+parameter+','+(isEnabled?'1':'0'));\r\n        this.waitTime=300;\r\n    }\r\n\r\n    /**\r\n     * Gets a CSV string of the enabled output parameters\r\n     * \r\n     * Example: 'EC,TDS,S,SG' if all are enabled\r\n     * returns CSV string.\r\n     */\r\n    async GetParametersEnabled(): Promise<string>{\r\n        const cmd = 'O,?';\r\n        this.waitTime=300;\r\n        return (await this.SendCommand(cmd)).toString('ascii',cmd.length+1);\r\n    }\r\n\r\n    /**\r\n     * Sets a custom TDS conversion factor. Default is 0.54.\r\n     * \r\n     * Common conversion factors:\r\n     * \r\n     * NaCl : 0.47-0.50\r\n     * \r\n     * KCL : 0.50-0.57\r\n     * \r\n     * \"442\" : 0.65-0.85\r\n     * value Value will be clamped to 0.01 - 1.00 range\r\n     */\r\n    async SetTDSConversionFactor(value: number): Promise<void>{\r\n        value = Math.min(1.00,Math.max(value,0.01));\r\n        await this.SendCommand('TDS,'+value);\r\n    }\r\n\r\n    /**\r\n     * Gets the conversion factor being used.\r\n     * returns string of floating point number\r\n     */\r\n    async GetTDSConversionFactor(): Promise<string>{\r\n        const cmd='TDS,?';\r\n        return (await this.SendCommand(cmd)).toString('ascii',cmd.length+1);\r\n    }\r\n\r\n    /**\r\n     * Gets 1 reading.\r\n     * returns CSV string of readings corresponding to enabled parameters\r\n     */\r\n    async GetReading(): Promise<string>{\r\n        this.waitTime=600;\r\n        const r= (await this.SendCommand('R')).toString('ascii',1);\r\n        this.waitTime=300;\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * Resets all calibration points to ideal.\r\n     */\r\n    async ClearCalibration(): Promise<void>{\r\n        this.waitTime = 300;\r\n        await this.SendCommand(\"Cal,clear\");\r\n    }\r\n\r\n    /**\r\n     * Returns numbers of Calibration points (0-2)\r\n     * 0 = uncalibrated\r\n     * 1 = One Point \r\n     * 2 = Two Point\r\n     */\r\n    async IsCalibrated():Promise<string>{\r\n        this.waitTime = 300;\r\n        const cmd='Cal,?';\r\n        return (await this.SendCommand(cmd)).toString('ascii',cmd.length+1).replace(/\\0/g, '');\r\n    } \r\n\r\n    /**\r\n     * Performs dry calibration.\r\n     * WARNING: This will clear any previous calibration!\r\n     */\r\n    async CalibrateDry(){\r\n        this.waitTime=900;\r\n        await this.SendCommand(\"Cal,dry,\");\r\n        this.waitTime=600;\r\n    }\r\n\r\n    /**\r\n     * Performs single point calibration.\r\n     * val: any value\r\n     */\r\n    async CalibrateSinglepoint(val?: number){\r\n        if(!val)\r\n            return;\r\n        this.waitTime=900;\r\n        await this.SendCommand('Cal,' + val.toString());\r\n        this.waitTime=600;\r\n    }\r\n\r\n    /**\r\n     * Performs low end calibration.\r\n     * val: any value\r\n     */\r\n    async CalibrateLow(val?: number){\r\n        if(!val)\r\n            return;\r\n        this.waitTime=900;\r\n        await this.SendCommand('Cal,low,' + val.toString());\r\n        this.waitTime=600;\r\n    }\r\n\r\n    /**\r\n     * Performs high end calibration\r\n     * val: any value\r\n     */    \r\n    async CalibrateHigh(val?: number){\r\n        if(!val)\r\n            return;\r\n        this.waitTime=900;\r\n        await this.SendCommand('Cal,high,' + val.toString());\r\n        this.waitTime=600;\r\n    }\r\n}\r\n\r\nexport { EC as default };\r\n"],
  "mappings": "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",
  "names": []
}
