{
  "version": 3,
  "sources": ["../../src/atlas-scientific-i2c/prs.ts"],
  "sourcesContent": ["import { AtlasScientificEzoI2cAdapter } from \"../main\";\r\nimport { EZODevice } from \"./ezo_device\";\r\n/**\r\n * Wrapper class for PRS EZO embedded Pressure Sensor\r\n */\r\nexport class PRS extends EZODevice{\r\n    \r\n    constructor(i2c_bus,address,info, protected readonly adapter: AtlasScientificEzoI2cAdapter){\r\n        super(i2c_bus,address,info,adapter);\r\n        this.readBufferSize=40;\r\n    }\r\n\r\n    /**\r\n     * Sets the probe type. '1.0' is the defaule value\r\n     * \r\n     * Current known probe types:  '0.1','1.0', and '10' \r\n     * value floating point in ASCII \r\n     */\r\n    // async SetProbeType(value: string): Promise<void>{\r\n    //     if(!value)\r\n    //         return;\r\n    //     await this.SendCommand('K,'+value);\r\n    //     this.waitTime=300;\r\n    // }\r\n\r\n    // async GetProbeType(): Promise<string>{\r\n    //     const cmd='K,?';\r\n    //     this.waitTime=300;\r\n    //     //returns K,n\r\n    //     //strange:  normally these commands have a '?' prefixed to their return message\r\n    //     const k = (await this.SendCommand(cmd)).toString('ascii',cmd.length);\r\n    //     this.waitTime=600;\r\n    //     return k;\r\n    // }\r\n\r\n    /**\r\n     * Sets Temperature Compensation value. Default is 25C.\r\n     * \r\n     * This is not maintained if power is cut.\r\n     * value Celsius\r\n     * takeReading Defaults to false. If true, immediately returns a new reading after setting the value. \r\n     * returns Nothing unless takeReading=true\r\n     */\r\n    // async SetTemperatureCompensation(value: number,takeReading=false): Promise<any>{\r\n    //     if(takeReading){\r\n    //         this.waitTime=900;\r\n    //         const r = (await this.SendCommand('RT,'+value)).toString('ascii',1);\r\n    //         this.waitTime=300;\r\n    //         return r;\r\n    //     }else{\r\n    //         await this.SendCommand('T,'+value);\r\n    //         this.waitTime=300;\r\n    //         return null;\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * Gets the current compensated temperature value.\r\n     * returns floating point number in ASCII\r\n     */\r\n    // async GetTemperatureCompensation(): Promise<string>{\r\n    //     const cmd='T,?';\r\n    //     const res = (await this.SendCommand(cmd)).toString('ascii',cmd.length+1);\r\n    //     this.waitTime=300;\r\n    //     return res;\r\n    // }\r\n\r\n    /**\r\n     * Will set the desired pressure Unit\r\n     * \r\n     * param: unit\r\n     *  'psi ' - output will be in psi\r\n     *  'atm' - output will be in atm\r\n     *  'bar' - output will be in bar\r\n     *  'kPa' - output will be in kPa\r\n     *  'inh2o' - output will be in  inches of water\r\n     *  'cmh2o' - output will be in cm of water\r\n     * param: addRemove\r\n     *  true to add parameter\r\n     *  false to remove parameter\r\n     */\r\n    async SetPressureUnit(unit: string, isEnabled: boolean): Promise<void>{\r\n        await this.SendCommand('U,'+unit);\r\n        this.waitTime = 300;\r\n        await this.SendCommand('U,'+(isEnabled?'1':'0'));\r\n        this.waitTime = 300;\r\n    }\r\n\r\n    /**\r\n     * Gets a CSV string of the current output pressure units\r\n     *\r\n     * Example: 'bar,psi,' if Bar and PSI are enabled\r\n     * returns CSV string.\r\n     */\r\n    async ReadPressureUnits(): Promise<string>{\r\n        const cmd = 'U,?';\r\n        const res = (await this.SendCommand(cmd)).toString('ascii',cmd.length+1);\r\n        this.waitTime=300;\r\n        return res;\r\n    }\r\n\r\n    // /**\r\n    //  * Sets a custom TDS conversion factor. Default is 0.54.\r\n    //  * \r\n    //  * Common conversion factors:\r\n    //  * \r\n    //  * NaCl : 0.47-0.50\r\n    //  * \r\n    //  * KCL : 0.50-0.57\r\n    //  * \r\n    //  * \"442\" : 0.65-0.85\r\n    //  * value Value will be clamped to 0.01 - 1.00 range\r\n    //  */\r\n    // async SetTDSConversionFactor(value: number): Promise<void>{\r\n    //     value = Math.min(1.00,Math.max(value,0.01));\r\n    //     await this.SendCommand('TDS,'+value);\r\n    //     this.waitTime=300;\r\n    // }\r\n\r\n    // /**\r\n    //  * Gets the conversion factor being used.\r\n    //  * returns string of floating point number\r\n    //  */\r\n    // async GetTDSConversionFactor(): Promise<string>{\r\n    //     const cmd='TDS,?';\r\n    //     const res = (await this.SendCommand(cmd)).toString('ascii',cmd.length+1);\r\n    //     this.waitTime=300;\r\n    //     return res;\r\n    // }\r\n\r\n    /**\r\n     * Gets 1 reading.\r\n     * returns CSV string of readings corresponding to enabled parameters\r\n     */\r\n    async GetReading(): Promise<string>{\r\n        const res = (await this.SendCommand('R')).toString('ascii',1);\r\n        this.waitTime=900;\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Resets all calibration points to ideal.\r\n     */\r\n    async ClearCalibration(): Promise<void>{\r\n        await this.SendCommand(\"Cal,clear\");\r\n        this.waitTime = 300;\r\n    }\r\n\r\n    /**\r\n     * Returns numbers of Calibration points (0-2)\r\n     * 0 = uncalibrated\r\n     * 1 = only zero point calibrated\r\n     * 2 = only high point calibrated\r\n     * 3 = zero and high point calibrated\r\n     */\r\n    async IsCalibrated():Promise<string>{\r\n        const cmd='Cal,?';\r\n        const res = (await this.SendCommand(cmd)).toString('ascii',cmd.length+1).replace(/\\0/g, '');\r\n        this.waitTime=300;\r\n        return res;\r\n    } \r\n\r\n    /**\r\n     * Performs zero point calibration.\r\n     */\r\n    async CalibrateZeroPoint(){\r\n        await this.SendCommand('Cal,0');\r\n        this.waitTime=900;\r\n    }\r\n\r\n    /**\r\n     * Performs high point calibration. Calibration should be done using the pressure scale you have set\r\n     * the sensor to.\r\n     * valInCurrentScale: the desired value representing 50 psi but converted to the selected scale\r\n     * Example: Readings are set to bar.\r\n     *          High point calibration = 3.44\r\n     *          (3.44 bar = 50 psi)\r\n     */\r\n    async CalibrateHigh(valInCurrentScale?: number){\r\n        if(!valInCurrentScale)\r\n            return;\r\n        this.waitTime = 900;\r\n            await this.SendCommand('Cal,' + valInCurrentScale.toString());\r\n    }\r\n\r\n}\r\n\r\nexport { PRS as default };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAA0B;AAInB,MAAM,YAAY,4BAAS;AAAA,EAE9B,YAAY,SAAQ,SAAQ,MAAyB,SAAsC;AACvF,UAAM,SAAQ,SAAQ,MAAK,OAAO;AADe;AAEjD,SAAK,iBAAe;AAAA,EACxB;AAAA,EAuEA,MAAM,gBAAgB,MAAc,WAAkC;AAClE,UAAM,KAAK,YAAY,OAAK,IAAI;AAChC,SAAK,WAAW;AAChB,UAAM,KAAK,YAAY,QAAM,YAAU,MAAI,IAAI;AAC/C,SAAK,WAAW;AAAA,EACpB;AAAA,EAQA,MAAM,oBAAoC;AACtC,UAAM,MAAM;AACZ,UAAM,OAAO,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC;AACvE,SAAK,WAAS;AACd,WAAO;AAAA,EACX;AAAA,EAmCA,MAAM,aAA6B;AAC/B,UAAM,OAAO,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,CAAC;AAC5D,SAAK,WAAS;AACd,WAAO;AAAA,EACX;AAAA,EAKA,MAAM,mBAAiC;AACnC,UAAM,KAAK,YAAY,WAAW;AAClC,SAAK,WAAW;AAAA,EACpB;AAAA,EASA,MAAM,eAA8B;AAChC,UAAM,MAAI;AACV,UAAM,OAAO,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC,EAAE,QAAQ,OAAO,EAAE;AAC1F,SAAK,WAAS;AACd,WAAO;AAAA,EACX;AAAA,EAKA,MAAM,qBAAoB;AACtB,UAAM,KAAK,YAAY,OAAO;AAC9B,SAAK,WAAS;AAAA,EAClB;AAAA,EAUA,MAAM,cAAc,mBAA2B;AAC3C,QAAG,CAAC;AACA;AACJ,SAAK,WAAW;AACZ,UAAM,KAAK,YAAY,SAAS,kBAAkB,SAAS,CAAC;AAAA,EACpE;AAEJ;",
  "names": []
}
