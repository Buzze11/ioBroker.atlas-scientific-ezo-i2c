{
  "version": 3,
  "sources": ["../../src/atlas-scientific-i2c/pump.ts"],
  "sourcesContent": ["import { AtlasScientificEzoI2cAdapter } from \"../main\";\r\nimport { EZODevice } from \"./ezo_device\";\r\n/**\r\n * Wrapper class for Peristaltic Pump\r\n */\r\nexport class Pump extends EZODevice {\r\n    \r\n    constructor(i2c_bus,address,info, protected readonly adapter: AtlasScientificEzoI2cAdapter){\r\n        super(i2c_bus,address,info, adapter);\r\n        this.readBufferSize=16;\r\n    }\r\n    \r\n    /**\r\n     * This will begin continuously dispensing liquid until Pause or Stop is given.\r\n     */\r\n\tasync StartDispensing(reverse: boolean):Promise<void>{\r\n\t\tif(reverse){\r\n\t\t\tawait this.SendCommand(\"D,-*\");\r\n\t\t}else{\r\n\t\t\tawait this.SendCommand(\"D,*\");\r\n\t\t}\r\n\t}\r\n\r\n    /**\r\n     * Stops dispensing. Returns the volume of liquid that has been dispensed.\r\n     */\r\n\tasync StopDispensing():Promise<string>{\r\n\t\t//_*DONE,v\r\n\t\treturn (await this.SendCommand(\"X\")).toString().split(',')[1];\r\n\t}\r\n\r\n    /**\r\n     * Dispenses the given amount. Negative amounts will run the pump in reverse\r\n     */\r\n\tasync Dispense(ml: string):Promise<void>{\r\n\t\tawait this.SendCommand(\"D,\" + ml);\t\r\n\t}\r\n\r\n    /**\r\n     * Dispenses the given volume  over the given minutes.\r\n     * ml Amount\r\n     * min Minutes\r\n     */\r\n\tasync Dose(ml:number ,min:number):Promise<void>{\r\n\t\tawait this.SendCommand(`D,${ml},${min}`);\r\n\t}\r\n\r\n    /**\r\n     * Maintain a constant flow rate.\r\n     * rate (ml/min) \r\n     * min Minutes to maintain this rate. Use '*' for indefinite time.\r\n     */\r\n\tasync DispenseConstantRate(rate:number, min:string):Promise<void>{\r\n\t\tawait this.SendCommand(`DC,${rate},${min}`);\r\n\t}\r\n\t\r\n\t/**\r\n     * Pauses Dispensing.\r\n     */\r\n\tasync PauseDispensing():Promise<void>{\r\n\t\tawait this.SendCommand('P');\r\n\t}\r\n\r\n    /**\r\n     * Checks if the unit is currently paused\r\n     */\r\n    async IsPaused():Promise<boolean>{\r\n        const cmd = 'P,?';\r\n        //returns _?P,n\r\n        return ((await this.SendCommand(cmd))[cmd.length+1]==1);\r\n    }\r\n\t\r\n    /**\r\n     * Gets the current voltage across the Pump's terminals.\r\n     */\r\n\tasync GetPumpVoltage():Promise<string>{\r\n        const cmd='PV,?';\r\n\t\treturn (await this.SendCommand(cmd)).toString('ascii',cmd.length+1);\r\n\t}\r\n\t\r\n    /**\r\n     * Gets a single value showing dispensed volume.\r\n     */\r\n    async GetReading():Promise<number>{\r\n       return Number.parseFloat((await this.SendCommand('R')).toString('ascii',1));\r\n    }\r\n\r\n    /**\r\n     * Shows the total volume (ml) dispensed by the pump. \r\n     * \r\n     * This data is erased if the pump loses power.\r\n     * absolute Get the absolute total volume instead.\r\n     * returns  ml\r\n     */\r\n\tasync GetTotalDispensedVolume(absolute: boolean):Promise<string>{\r\n        let cmd='TV,?';\r\n\t\tif(absolute){\r\n            cmd = 'ATV,?';\r\n        }\r\n        return (await this.SendCommand(cmd)).toString('ascii',cmd.length+1);\r\n\t}\r\n\r\n    /**\r\n     * Clears the total dispensed volume. \r\n     */\r\n\tasync ClearTotalDispensedVolume():Promise<void>{\r\n\t\tawait this.SendCommand('clear');\r\n\t}\r\n\r\n    /**\r\n     * Returns a single number indicating calibration status.\r\n     * \r\n     * 0 - uncalibrated\r\n     * 1 - fixed volume\r\n     * 2 - volume over time\r\n     * 3 - both\r\n     */\r\n\tasync isCalibrated():Promise<string>{\r\n\t\t//returns _?Cal,n\r\n        const cmd ='Cal,?';\r\n\t\treturn (await this.SendCommand(cmd))[cmd.length+1].toString();\r\n\t}\r\n\r\n\tasync Calibrate(volume:string):Promise<void>{\r\n\t\tawait this.SendCommand('Cal,'+volume);\r\n\t}\r\n\r\n\tasync ClearCalibration():Promise<void>{\r\n\t\tawait this.SendCommand('Cal,clear');\r\n\t}\r\n\r\n    /**\r\n     * Enables/Disables the specified parameter. \r\n     * \r\n     * 'V' - volume being pumped. \r\n     * 'TV' - total volume being pumped. \r\n     * 'ATV' - absolute total volume being pumped\r\n     */\r\n    async SetParameters(parameter:string, isEnabled:boolean):Promise<void>{\r\n        await this.SendCommand(`O,${parameter},${(isEnabled?1:0)}`);\r\n    }\r\n\r\n    /**\r\n     * Returns a comma seperated string of the currently enabled parameters\r\n     */\r\n    async GetParametersEnabled():Promise<string>{\r\n        const cmd = 'O,?';\r\n        return (await this.SendCommand(cmd)).toString('ascii',cmd.length+1);\r\n    }\r\n\r\n    /**\r\n     * This is not supported on the Atlas Scientific Peristaltic Pumps\r\n     * @param name \r\n     */\r\n    SetPumpName(name){\r\n       //Pumps do not support\r\n    }\r\n\r\n    /**\r\n     * This is not supported on the Atlas Scientific Peristaltic Pumps\r\n     * @returns {null}\r\n     */\r\n    GetPumpName(){\r\n        return 0;\r\n    }\r\n\r\n}\r\n\r\nexport { Pump as default };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAA0B;AAInB,MAAM,aAAa,4BAAU;AAAA,EAEhC,YAAY,SAAQ,SAAQ,MAAyB,SAAsC;AACvF,UAAM,SAAQ,SAAQ,MAAM,OAAO;AADc;AAEjD,SAAK,iBAAe;AAAA,EACxB;AAAA,EAKH,MAAM,gBAAgB,SAA+B;AACpD,QAAG,SAAQ;AACV,YAAM,KAAK,YAAY,MAAM;AAAA,IAC9B,OAAK;AACJ,YAAM,KAAK,YAAY,KAAK;AAAA,IAC7B;AAAA,EACD;AAAA,EAKA,MAAM,iBAAgC;AAErC,YAAQ,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,EAAE,MAAM,GAAG,EAAE;AAAA,EAC5D;AAAA,EAKA,MAAM,SAAS,IAAyB;AACvC,UAAM,KAAK,YAAY,OAAO,EAAE;AAAA,EACjC;AAAA,EAOA,MAAM,KAAK,IAAW,KAAyB;AAC9C,UAAM,KAAK,YAAY,KAAK,MAAM,KAAK;AAAA,EACxC;AAAA,EAOA,MAAM,qBAAqB,MAAa,KAAyB;AAChE,UAAM,KAAK,YAAY,MAAM,QAAQ,KAAK;AAAA,EAC3C;AAAA,EAKA,MAAM,kBAA+B;AACpC,UAAM,KAAK,YAAY,GAAG;AAAA,EAC3B;AAAA,EAKG,MAAM,WAA2B;AAC7B,UAAM,MAAM;AAEZ,YAAS,MAAM,KAAK,YAAY,GAAG,GAAG,IAAI,SAAO,MAAI;AAAA,EACzD;AAAA,EAKH,MAAM,iBAAgC;AAC/B,UAAM,MAAI;AAChB,YAAQ,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC;AAAA,EACnE;AAAA,EAKG,MAAM,aAA4B;AAC/B,WAAO,OAAO,YAAY,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,CAAC,CAAC;AAAA,EAC7E;AAAA,EASH,MAAM,wBAAwB,UAAkC;AACzD,QAAI,MAAI;AACd,QAAG,UAAS;AACF,YAAM;AAAA,IACV;AACA,YAAQ,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC;AAAA,EACzE;AAAA,EAKA,MAAM,4BAAyC;AAC9C,UAAM,KAAK,YAAY,OAAO;AAAA,EAC/B;AAAA,EAUA,MAAM,eAA8B;AAE7B,UAAM,MAAK;AACjB,YAAQ,MAAM,KAAK,YAAY,GAAG,GAAG,IAAI,SAAO,GAAG,SAAS;AAAA,EAC7D;AAAA,EAEA,MAAM,UAAU,QAA4B;AAC3C,UAAM,KAAK,YAAY,SAAO,MAAM;AAAA,EACrC;AAAA,EAEA,MAAM,mBAAgC;AACrC,UAAM,KAAK,YAAY,WAAW;AAAA,EACnC;AAAA,EASG,MAAM,cAAc,WAAkB,WAAgC;AAClE,UAAM,KAAK,YAAY,KAAK,aAAc,YAAU,IAAE,GAAI;AAAA,EAC9D;AAAA,EAKA,MAAM,uBAAsC;AACxC,UAAM,MAAM;AACZ,YAAQ,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC;AAAA,EACtE;AAAA,EAMA,YAAY,MAAK;AAAA,EAEjB;AAAA,EAMA,cAAa;AACT,WAAO;AAAA,EACX;AAEJ;",
  "names": []
}
