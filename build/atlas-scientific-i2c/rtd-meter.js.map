{
  "version": 3,
  "sources": ["../../src/atlas-scientific-i2c/rtd-meter.ts"],
  "sourcesContent": ["import { AtlasScientificEzoI2cAdapter } from \"../main\";\r\nimport { EZODevice } from \"./ezo_device\";\r\n\r\n/**\r\n * Wrapper class for RTD EZO circuit\r\n */\r\nexport class RTD extends EZODevice{\r\n\r\n\r\n    constructor(i2c_bus,address,info, protected readonly adapter: AtlasScientificEzoI2cAdapter){\r\n        super(i2c_bus,address,info, adapter);\r\n    }\r\n\r\n    /**\r\n     * Resets calibration settings\r\n     */\r\n    async ClearCalibration(){\r\n        this.waitTime=300;\r\n        await this.SendCommand('Cal,clear');\r\n    }\r\n\r\n    /**\r\n     * Calibration for Temperature\r\n     */\r\n    async CalibrateTemperature(value:number):Promise<void>{\r\n        this.waitTime=600;\r\n        await this.SendCommand('Cal,' + value);\r\n    }\r\n\r\n    /**\r\n     * Returns a status code on the calibtration state\r\n     * 0 - uncalibrated\r\n     * 1 - calibrated\r\n     */\r\n    async IsCalibrated():Promise<string>{\r\n        const cmd='Cal,?';\r\n        this.waitTime = 300;\r\n        return (await this.SendCommand(cmd)).toString('ascii',cmd.length+1).replace(/\\0/g, '');\r\n    }\r\n    /**\r\n     * Sets the Temperature Scale value. (\u00B0C, \u00B0K, \u00B0F)\r\n     * param value either 'c', 'k' or 'f'\r\n    */\r\n    async SetTemperatureScale(value:string):Promise<void>{\r\n        if(value === 'c' || value === 'k' || value === 'f'){\r\n            const cmd = 'S,';\r\n            this.waitTime=300;\r\n            await this.SendCommand(cmd+value);\r\n        }\r\n    }\r\n\r\n     /**\r\n     * Returns the currently used temperature scale\r\n     * c - celsius\r\n     * k - kelvin\r\n     * f - fahrenheit\r\n     */\r\n    async GetTemperatureScale():Promise<string>{\r\n        const cmd='S,?';\r\n        this.waitTime=300;\r\n        const res = (await this.SendCommand(cmd)).toString('ascii',cmd.length+1).replace(/\\0/g, '');\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Takes a sensor reading. Defaults to celsius. Use SetTemperatureScale() to change return type\r\n     * a string if the desired scale format\r\n     */\r\n    async GetReading():Promise<string>{\r\n        const cmd='R';\r\n        this.waitTime=600;\r\n        const res = (await this.SendCommand(cmd)).toString('ascii',1).replace(/\\0/g, '');\r\n        return res;\r\n    }\r\n}\r\n\r\nexport { RTD as default };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAA0B;AAKnB,MAAM,YAAY,4BAAS;AAAA,EAG9B,YAAY,SAAQ,SAAQ,MAAyB,SAAsC;AACvF,UAAM,SAAQ,SAAQ,MAAM,OAAO;AADc;AAAA,EAErD;AAAA,EAKA,MAAM,mBAAkB;AACpB,SAAK,WAAS;AACd,UAAM,KAAK,YAAY,WAAW;AAAA,EACtC;AAAA,EAKA,MAAM,qBAAqB,OAA2B;AAClD,SAAK,WAAS;AACd,UAAM,KAAK,YAAY,SAAS,KAAK;AAAA,EACzC;AAAA,EAOA,MAAM,eAA8B;AAChC,UAAM,MAAI;AACV,SAAK,WAAW;AAChB,YAAQ,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC,EAAE,QAAQ,OAAO,EAAE;AAAA,EACzF;AAAA,EAKA,MAAM,oBAAoB,OAA2B;AACjD,QAAG,UAAU,OAAO,UAAU,OAAO,UAAU,KAAI;AAC/C,YAAM,MAAM;AACZ,WAAK,WAAS;AACd,YAAM,KAAK,YAAY,MAAI,KAAK;AAAA,IACpC;AAAA,EACJ;AAAA,EAQA,MAAM,sBAAqC;AACvC,UAAM,MAAI;AACV,SAAK,WAAS;AACd,UAAM,OAAO,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,IAAI,SAAO,CAAC,EAAE,QAAQ,OAAO,EAAE;AAC1F,WAAO;AAAA,EACX;AAAA,EAMA,MAAM,aAA4B;AAC9B,UAAM,MAAI;AACV,SAAK,WAAS;AACd,UAAM,OAAO,MAAM,KAAK,YAAY,GAAG,GAAG,SAAS,SAAQ,CAAC,EAAE,QAAQ,OAAO,EAAE;AAC/E,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
