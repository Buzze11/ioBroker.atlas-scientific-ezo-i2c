{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport * as i2c from 'i2c-bus';\nimport { StateChangeListener, ForeignStateChangeListener, StateValue } from './lib/state';\nimport { EzoHandlerBase } from './devices/ezo-handler-base';\nimport { toHexString } from './lib/shared';\nimport * as ezo from './atlas-scientific-i2c';\nimport DO from './devices/do';\nimport PH from './devices/ph';\nimport ORP from './devices/orp';\nimport RTD from './devices/rtd';\n\n\nexport class AtlasScientificEzoI2cAdapter extends utils.Adapter {\n    private bus!: i2c.PromisifiedBus;\n\n    private currentStateValues: Record<string, StateValue> = {};\n    private stateChangeListeners: Record<string, StateChangeListener<any>[]> = {};\n    private foreignStateChangeListeners: Record<string, ForeignStateChangeListener<any>[]> = {};\n    private readonly deviceHandlers: EzoHandlerBase<any>[] = [];\n\n    // used for message handling\n    private wait = false;\n    private result: string;\n    private dev: EzoHandlerBase<any>;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'atlas-scientific-ezo-i2c',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    public get i2cBus(): i2c.PromisifiedBus {\n        return this.bus;\n    }\n\n    public addStateChangeListener<T extends StateValue>(id: string, listener: StateChangeListener<T>): void {\n        const key = this.namespace + '.' + id;\n        if (!this.stateChangeListeners[key]) {\n            this.stateChangeListeners[key] = [];\n        }\n        this.stateChangeListeners[key].push(listener);\n        this.log.info('Added StateChangeListener: ' + key);\n    }\n\n    public addForeignStateChangeListener<T extends StateValue>(\n        id: string,\n        listener: ForeignStateChangeListener<T>,\n    ): void {\n        if (!this.foreignStateChangeListeners[id]) {\n            this.foreignStateChangeListeners[id] = [];\n            this.subscribeForeignStates(id);\n        }\n        this.foreignStateChangeListeners[id].push(listener);\n    }\n\n    public async setStateAckAsync<T extends StateValue>(id: string, value: T): Promise<void> {\n        this.currentStateValues[this.namespace + '.' + id] = value;\n        await this.setStateAsync(id, value, true);\n    }\n\n    public setStateAck<T extends StateValue>(id: string, value: T): void {\n        this.currentStateValues[this.namespace + '.' + id] = value;\n        this.setState(id, value, true);\n    }\n\n    public getStateValue<T extends StateValue>(id: string): T | undefined {\n        return this.currentStateValues[this.namespace + '.' + id] as T | undefined;\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Reset Adapter connection state until I2C Bus is successfully initialized\n        this.setState(\"info.connection\", false, true);\n        const allStates = await this.getStatesAsync('*');\n        for (const id in allStates) {\n            if (allStates[id] && allStates[id].ack) {\n                this.currentStateValues[id] = allStates[id].val as StateValue;\n            }\n        }\n\n        this.log.info('Using bus number: ' + this.config.busNumber);\n        this.bus = await this.openBusAsync(this.config.busNumber);\n\n        if(this.bus == null){\n            this.log.info('Error opening I2C Bus: ' + this.config.busNumber);\n            // Set connection state to false\n            this.setState(\"info.connection\", false, true);\n        }\n        else{\n            this.log.info('Opened I2C Bus: ' + this.config.busNumber);\n            // set connection state to true\n            this.setState(\"info.connection\", true, true);\n        }\n\n        if (!this.config.devices || this.config.devices.length === 0) {\n            // no devices configured, nothing to do in this adapter\n            return;\n        }\n\n        for (let i = 0; i < this.config.devices.length; i++) {\n            const deviceConfig = this.config.devices[i];\n            if (!deviceConfig.name || !deviceConfig.type) {\n                continue;\n            }\n\n            try {\n                const module = await import(__dirname + '/devices/' + deviceConfig.type.toLowerCase());\n                const handler: EzoHandlerBase<any> = new module.default(deviceConfig, this);\n                this.deviceHandlers.push(handler);\n            } catch (error) {\n                this.log.error(`Couldn't create ${deviceConfig.type} ${toHexString(deviceConfig.address)}: ${error}`);\n            }\n        }\n\n        await Promise.all(\n            this.deviceHandlers.map(async (h) => {\n                try {\n                    await h.startAsync();\n                } catch (error) {\n                    this.log.error(`Couldn't start ${h.type} ${h.hexAddress}: ${error}`);\n                }\n            }),\n        );\n\n        this.subscribeStates('*');\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            await Promise.all(this.deviceHandlers.map((h) => h.stopAsync()));\n\n            await this.bus.close();\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (!state) {\n            this.log.debug(`State ${id} deleted`);\n            return;\n        }\n\n        this.log.debug(`stateChange ${id} ${JSON.stringify(state)}`);\n\n        if (this.foreignStateChangeListeners[id]) {\n            const listeners = this.foreignStateChangeListeners[id];\n            await Promise.all(listeners.map((listener) => listener(state.val)));\n            return;\n        }\n\n        if (state.ack) {\n            return;\n        }\n\n        if (!this.stateChangeListeners[id]) {\n            this.log.error('Unsupported state change: ' + id);\n            return;\n        }\n\n        const listeners = this.stateChangeListeners[id];\n        const oldValue = this.currentStateValues[id];\n        await Promise.all(listeners.map((listener) => listener(oldValue, state.val)));\n    }\n\n    /**\n     * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n     * Using this method requires \"common.message\" property to be set to true in io-package.json\n     */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        this.log.info('onMessage: ' + JSON.stringify(obj));\n        try{\n            if (typeof obj === 'object' && obj.message) {\n                switch (obj.command) {\n                    case 'search':\n                        const res = await this.SearchEzoDevices(parseInt(obj.message as string));\n                        this.result = JSON.stringify(res || []);\n                        this.log.info('Search found: ' + this.result);\n                        this.wait = true;\n                        break;\n                    case 'FindEzoBoard':\n                        if((this.dev = await this.GetDeviceHandler(obj))){\n                            this.result = await this.dev.FindEzoBoard();\n                        }\n                        this.log.error('Error occured on finding EZO Board: ' + res);\n                        break;\n                    case 'FactoryReset':\n                        if((this.dev = await this.GetDeviceHandler(obj))){\n                            this.result = await this.dev.FactoryReset();\n                        }\n                        this.log.error('Error occured on finding EZO Board: ' + res);\n                        break;\n                    case 'SetI2CAddress':\n                        let newAddress = this.GetParameterStringFromMessage(obj, \"newI2CAddress\");\n                        if((this.dev = await this.GetDeviceHandler(obj))){\n                            this.result = await this.dev.ChangeI2CAddress(newAddress);\n                        }\n                        if (obj.callback) {\n                            this.sendTo(obj.from, obj.command, this.result, obj.callback);\n                            this.log.info('Answering with messageresult : ' + this.result);\n                        }\n                        this.log.error('Error occured on setting new I2C address: ' + res);\n                        break;                           \n                    case 'DOCalibration':\n                        if((this.dev = await this.GetDeviceHandler(obj))){\n                            this.result = await (this.dev as DO)?.DoCalibration(obj.message['calibrationtype']);\n                        }\n                        this.log.error('Error occured on DO Calibration: ' + res);\n                        break;\n                   case 'DOPressureCompensation':\n                        if((this.dev = await this.GetDeviceHandler(obj))){\n                            this.result = await (this.dev as DO)?.SetPressureCompensation(obj.message['pcValue']);\n                            break;                         \n                        }\n                        this.log.error('Error occured on setting pressure compensation: ' + res);\n                        break;\n                    case 'DOSalinityCompensation':\n                        if((this.dev = await this.GetDeviceHandler(obj))){\n                            this.result = await (this.dev as DO)?.SetSalinityCompensation(obj.message['scValue'],obj.message['isPpt']);\n                            break;                         \n                        }\n                        this.log.error('Error occured on setting salinity compensation: ' + res);\n                        break;  \n                    case 'PHCalibration':\n                        if((this.dev = await this.GetDeviceHandler(obj))){\n                            this.result = await (this.dev as PH)?.DoCalibration(obj.message['calibrationtype'], obj.message['phValue']);\n                        }\n                        this.log.error('Error occured on DO Calibration: ' + res);\n                        break;\n                    case 'TemperatureCompensation':\n                        if((this.dev = await this.GetDeviceHandler(obj))){\n                            const deviceType = obj.message['deviceType']\n                            switch(deviceType){\n                                case 'DO':\n                                    this.result = await (this.dev as DO)?.SetTemperatureCompensation(obj.message['tcValue']);\n                                    break;\n                                case 'PH':\n                                    this.result = await (this.dev as PH)?.SetTemperatureCompensation(obj.message['tcValue']);\n                                    break;\n                            }\n                        }\n                        this.log.error('Error occured on setting temperature compensation: ' + res);\n                        break;\n                    case 'ORPCalibration':\n                        if((this.dev = await this.GetDeviceHandler(obj))){\n                            this.result = await (this.dev as ORP)?.DoCalibration(obj.message['calibrationtype'], obj.message['orpValue']);\n                        }\n                        this.log.error('Error occured on ORP Calibration: ' + res);\n                        break;\n                    case 'RTDCalibration':\n                        if((this.dev = await this.GetDeviceHandler(obj))){\n                            this.result = await (this.dev as RTD)?.DoCalibration(obj.message['calibrationtype'], obj.message['tempValue']);\n                        }\n                        this.log.error('Error occured on RTD Calibration: ' + res);\n                        break;\n                    default:\n                        this.result =  'Unknown command';\n                        this.log.warn('Unknown command: ' + obj.command);\n                        break;\n                }\n            }\n            // Send back result     \n            if (obj.callback) {\n                this.sendTo(obj.from, obj.command, this.result, obj.callback);\n                this.log.info('Answering with messageresult : ' + this.result);\n            }\n        }\n        catch{}\n    }\n\n    private async SendBackResult(obj: ioBroker.Message):Promise<void>{\n        if (obj.callback) {\n            this.sendTo(obj.from, obj.command, this.result, obj.callback);\n        }\n        this.wait = true;\n    }\n\n    private async GetDeviceHandler(obj: ioBroker.Message):Promise<EzoHandlerBase<any>>{\n        try{\n            const addressString = await this.GetParameterStringFromMessage(obj, \"address\");\n            const addressStringHex = toHexString(parseInt(addressString));\n            if(addressStringHex){\n                const handler = await this.GetDeviceHandlerByAddress(addressStringHex);\n                return handler\n            }\n            else{\n                this.log.error('GetDeviceHandler(): Device with this address has not been found');\n            }\n        }\n        catch{\n            this.log.error('GetDeviceHandler(): Error on getting DeviceHandler');\n        }\n    }\n\n    private async GetDeviceHandlerByAddress(hexAddress: string):Promise<EzoHandlerBase<any>>{\n        const handler = this.deviceHandlers.find(h=>h.hexAddress == hexAddress);\n        return handler;\n    }\n\n    private GetParameterStringFromMessage(obj: ioBroker.Message, parameterName: string):string{\n        const parameter = obj.message[parameterName];\n        return parameter;\n    }\n\n    private async SearchEzoDevices(busNumber: number):Promise<number[]>{\n        if (busNumber === this.config.busNumber) {\n            this.log.debug('Searching on current bus ' + busNumber);\n\n        } else {\n            this.log.debug('Searching on new bus ' + busNumber);\n        }\n        const searchBus = await this.openBusAsync(busNumber);\n        const res = await ezo.FindAllDevices(searchBus, this);\n        const devices = [];\n\n        res.forEach(async item=>{\n            if(item instanceof ezo.EZODevice){\n                devices.push(item.address);\n            }else{\n                console.log('Found Device is not an Atlas EZO Device');\n            }\n        });\n        searchBus.close();\n        return devices;\n        \n    }\n\n    private async openBusAsync(busNumber: number): Promise<i2c.PromisifiedBus> {\n        return await i2c.openPromisified(busNumber);\n    }\n}\n\nif (module.parent) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new AtlasScientificEzoI2cAdapter(options);\n} else {\n    // otherwise start the instance directly\n    (() => new AtlasScientificEzoI2cAdapter())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,YAAuB;AACvB,UAAqB;AAGrB,oBAA4B;AAC5B,UAAqB;AAOd,MAAM,qCAAqC,MAAM,QAAQ;AAAA,EAarD,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AAdL,SAAQ,qBAAiD,CAAC;AAC1D,SAAQ,uBAAmE,CAAC;AAC5E,SAAQ,8BAAiF,CAAC;AAC1F,SAAiB,iBAAwC,CAAC;AAG1D,SAAQ,OAAO;AASX,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAEA,IAAW,SAA6B;AACpC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,uBAA6C,IAAY,UAAwC;AACpG,UAAM,MAAM,KAAK,YAAY,MAAM;AACnC,QAAI,CAAC,KAAK,qBAAqB,MAAM;AACjC,WAAK,qBAAqB,OAAO,CAAC;AAAA,IACtC;AACA,SAAK,qBAAqB,KAAK,KAAK,QAAQ;AAC5C,SAAK,IAAI,KAAK,gCAAgC,GAAG;AAAA,EACrD;AAAA,EAEO,8BACH,IACA,UACI;AACJ,QAAI,CAAC,KAAK,4BAA4B,KAAK;AACvC,WAAK,4BAA4B,MAAM,CAAC;AACxC,WAAK,uBAAuB,EAAE;AAAA,IAClC;AACA,SAAK,4BAA4B,IAAI,KAAK,QAAQ;AAAA,EACtD;AAAA,EAEA,MAAa,iBAAuC,IAAY,OAAyB;AACrF,SAAK,mBAAmB,KAAK,YAAY,MAAM,MAAM;AACrD,UAAM,KAAK,cAAc,IAAI,OAAO,IAAI;AAAA,EAC5C;AAAA,EAEO,YAAkC,IAAY,OAAgB;AACjE,SAAK,mBAAmB,KAAK,YAAY,MAAM,MAAM;AACrD,SAAK,SAAS,IAAI,OAAO,IAAI;AAAA,EACjC;AAAA,EAEO,cAAoC,IAA2B;AAClE,WAAO,KAAK,mBAAmB,KAAK,YAAY,MAAM;AAAA,EAC1D;AAAA,EAKA,MAAc,UAAyB;AAEnC,SAAK,SAAS,mBAAmB,OAAO,IAAI;AAC5C,UAAM,YAAY,MAAM,KAAK,eAAe,GAAG;AAC/C,eAAW,MAAM,WAAW;AACxB,UAAI,UAAU,OAAO,UAAU,IAAI,KAAK;AACpC,aAAK,mBAAmB,MAAM,UAAU,IAAI;AAAA,MAChD;AAAA,IACJ;AAEA,SAAK,IAAI,KAAK,uBAAuB,KAAK,OAAO,SAAS;AAC1D,SAAK,MAAM,MAAM,KAAK,aAAa,KAAK,OAAO,SAAS;AAExD,QAAG,KAAK,OAAO,MAAK;AAChB,WAAK,IAAI,KAAK,4BAA4B,KAAK,OAAO,SAAS;AAE/D,WAAK,SAAS,mBAAmB,OAAO,IAAI;AAAA,IAChD,OACI;AACA,WAAK,IAAI,KAAK,qBAAqB,KAAK,OAAO,SAAS;AAExD,WAAK,SAAS,mBAAmB,MAAM,IAAI;AAAA,IAC/C;AAEA,QAAI,CAAC,KAAK,OAAO,WAAW,KAAK,OAAO,QAAQ,WAAW,GAAG;AAE1D;AAAA,IACJ;AAEA,aAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,QAAQ,KAAK;AACjD,YAAM,eAAe,KAAK,OAAO,QAAQ;AACzC,UAAI,CAAC,aAAa,QAAQ,CAAC,aAAa,MAAM;AAC1C;AAAA,MACJ;AAEA,UAAI;AACA,cAAMA,UAAS,MAAM,6BAAO,QAAP,QAAO,YAAY,cAAc,aAAa,KAAK,YAAY;AACpF,cAAM,UAA+B,IAAIA,QAAO,QAAQ,cAAc,IAAI;AAC1E,aAAK,eAAe,KAAK,OAAO;AAAA,MACpC,SAAS,OAAP;AACE,aAAK,IAAI,MAAM,mBAAmB,aAAa,YAAQ,2BAAY,aAAa,OAAO,MAAM,OAAO;AAAA,MACxG;AAAA,IACJ;AAEA,UAAM,QAAQ;AAAA,MACV,KAAK,eAAe,IAAI,OAAO,MAAM;AACjC,YAAI;AACA,gBAAM,EAAE,WAAW;AAAA,QACvB,SAAS,OAAP;AACE,eAAK,IAAI,MAAM,kBAAkB,EAAE,QAAQ,EAAE,eAAe,OAAO;AAAA,QACvE;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,SAAK,gBAAgB,GAAG;AAAA,EAC5B;AAAA,EAKA,MAAc,SAAS,UAAqC;AACxD,QAAI;AACA,YAAM,QAAQ,IAAI,KAAK,eAAe,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAE/D,YAAM,KAAK,IAAI,MAAM;AAErB,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAKA,MAAc,cAAc,IAAY,OAAyD;AAC7F,QAAI,CAAC,OAAO;AACR,WAAK,IAAI,MAAM,SAAS,YAAY;AACpC;AAAA,IACJ;AAEA,SAAK,IAAI,MAAM,eAAe,MAAM,KAAK,UAAU,KAAK,GAAG;AAE3D,QAAI,KAAK,4BAA4B,KAAK;AACtC,YAAMC,aAAY,KAAK,4BAA4B;AACnD,YAAM,QAAQ,IAAIA,WAAU,IAAI,CAAC,aAAa,SAAS,MAAM,GAAG,CAAC,CAAC;AAClE;AAAA,IACJ;AAEA,QAAI,MAAM,KAAK;AACX;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,qBAAqB,KAAK;AAChC,WAAK,IAAI,MAAM,+BAA+B,EAAE;AAChD;AAAA,IACJ;AAEA,UAAM,YAAY,KAAK,qBAAqB;AAC5C,UAAM,WAAW,KAAK,mBAAmB;AACzC,UAAM,QAAQ,IAAI,UAAU,IAAI,CAAC,aAAa,SAAS,UAAU,MAAM,GAAG,CAAC,CAAC;AAAA,EAChF;AAAA,EAMA,MAAc,UAAU,KAAsC;AA9LlE;AA+LQ,SAAK,IAAI,KAAK,gBAAgB,KAAK,UAAU,GAAG,CAAC;AACjD,QAAG;AACC,UAAI,OAAO,QAAQ,YAAY,IAAI,SAAS;AACxC,gBAAQ,IAAI,SAAS;AAAA,UACjB,KAAK;AACD,kBAAM,MAAM,MAAM,KAAK,iBAAiB,SAAS,IAAI,OAAiB,CAAC;AACvE,iBAAK,SAAS,KAAK,UAAU,OAAO,CAAC,CAAC;AACtC,iBAAK,IAAI,KAAK,mBAAmB,KAAK,MAAM;AAC5C,iBAAK,OAAO;AACZ;AAAA,UACJ,KAAK;AACD,gBAAI,KAAK,MAAM,MAAM,KAAK,iBAAiB,GAAG,GAAG;AAC7C,mBAAK,SAAS,MAAM,KAAK,IAAI,aAAa;AAAA,YAC9C;AACA,iBAAK,IAAI,MAAM,yCAAyC,GAAG;AAC3D;AAAA,UACJ,KAAK;AACD,gBAAI,KAAK,MAAM,MAAM,KAAK,iBAAiB,GAAG,GAAG;AAC7C,mBAAK,SAAS,MAAM,KAAK,IAAI,aAAa;AAAA,YAC9C;AACA,iBAAK,IAAI,MAAM,yCAAyC,GAAG;AAC3D;AAAA,UACJ,KAAK;AACD,gBAAI,aAAa,KAAK,8BAA8B,KAAK,eAAe;AACxE,gBAAI,KAAK,MAAM,MAAM,KAAK,iBAAiB,GAAG,GAAG;AAC7C,mBAAK,SAAS,MAAM,KAAK,IAAI,iBAAiB,UAAU;AAAA,YAC5D;AACA,gBAAI,IAAI,UAAU;AACd,mBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,KAAK,QAAQ,IAAI,QAAQ;AAC5D,mBAAK,IAAI,KAAK,oCAAoC,KAAK,MAAM;AAAA,YACjE;AACA,iBAAK,IAAI,MAAM,+CAA+C,GAAG;AACjE;AAAA,UACJ,KAAK;AACD,gBAAI,KAAK,MAAM,MAAM,KAAK,iBAAiB,GAAG,GAAG;AAC7C,mBAAK,SAAS,QAAO,UAAK,QAAL,mBAAiB,cAAc,IAAI,QAAQ;AAAA,YACpE;AACA,iBAAK,IAAI,MAAM,sCAAsC,GAAG;AACxD;AAAA,UACL,KAAK;AACA,gBAAI,KAAK,MAAM,MAAM,KAAK,iBAAiB,GAAG,GAAG;AAC7C,mBAAK,SAAS,QAAO,UAAK,QAAL,mBAAiB,wBAAwB,IAAI,QAAQ;AAC1E;AAAA,YACJ;AACA,iBAAK,IAAI,MAAM,qDAAqD,GAAG;AACvE;AAAA,UACJ,KAAK;AACD,gBAAI,KAAK,MAAM,MAAM,KAAK,iBAAiB,GAAG,GAAG;AAC7C,mBAAK,SAAS,QAAO,UAAK,QAAL,mBAAiB,wBAAwB,IAAI,QAAQ,YAAW,IAAI,QAAQ;AACjG;AAAA,YACJ;AACA,iBAAK,IAAI,MAAM,qDAAqD,GAAG;AACvE;AAAA,UACJ,KAAK;AACD,gBAAI,KAAK,MAAM,MAAM,KAAK,iBAAiB,GAAG,GAAG;AAC7C,mBAAK,SAAS,QAAO,UAAK,QAAL,mBAAiB,cAAc,IAAI,QAAQ,oBAAoB,IAAI,QAAQ;AAAA,YACpG;AACA,iBAAK,IAAI,MAAM,sCAAsC,GAAG;AACxD;AAAA,UACJ,KAAK;AACD,gBAAI,KAAK,MAAM,MAAM,KAAK,iBAAiB,GAAG,GAAG;AAC7C,oBAAM,aAAa,IAAI,QAAQ;AAC/B,sBAAO,YAAW;AAAA,gBACd,KAAK;AACD,uBAAK,SAAS,QAAO,UAAK,QAAL,mBAAiB,2BAA2B,IAAI,QAAQ;AAC7E;AAAA,gBACJ,KAAK;AACD,uBAAK,SAAS,QAAO,UAAK,QAAL,mBAAiB,2BAA2B,IAAI,QAAQ;AAC7E;AAAA,cACR;AAAA,YACJ;AACA,iBAAK,IAAI,MAAM,wDAAwD,GAAG;AAC1E;AAAA,UACJ,KAAK;AACD,gBAAI,KAAK,MAAM,MAAM,KAAK,iBAAiB,GAAG,GAAG;AAC7C,mBAAK,SAAS,QAAO,UAAK,QAAL,mBAAkB,cAAc,IAAI,QAAQ,oBAAoB,IAAI,QAAQ;AAAA,YACrG;AACA,iBAAK,IAAI,MAAM,uCAAuC,GAAG;AACzD;AAAA,UACJ,KAAK;AACD,gBAAI,KAAK,MAAM,MAAM,KAAK,iBAAiB,GAAG,GAAG;AAC7C,mBAAK,SAAS,QAAO,UAAK,QAAL,mBAAkB,cAAc,IAAI,QAAQ,oBAAoB,IAAI,QAAQ;AAAA,YACrG;AACA,iBAAK,IAAI,MAAM,uCAAuC,GAAG;AACzD;AAAA,UACJ;AACI,iBAAK,SAAU;AACf,iBAAK,IAAI,KAAK,sBAAsB,IAAI,OAAO;AAC/C;AAAA,QACR;AAAA,MACJ;AAEA,UAAI,IAAI,UAAU;AACd,aAAK,OAAO,IAAI,MAAM,IAAI,SAAS,KAAK,QAAQ,IAAI,QAAQ;AAC5D,aAAK,IAAI,KAAK,oCAAoC,KAAK,MAAM;AAAA,MACjE;AAAA,IACJ,QACA;AAAA,IAAM;AAAA,EACV;AAAA,EAEA,MAAc,eAAe,KAAoC;AAC7D,QAAI,IAAI,UAAU;AACd,WAAK,OAAO,IAAI,MAAM,IAAI,SAAS,KAAK,QAAQ,IAAI,QAAQ;AAAA,IAChE;AACA,SAAK,OAAO;AAAA,EAChB;AAAA,EAEA,MAAc,iBAAiB,KAAmD;AAC9E,QAAG;AACC,YAAM,gBAAgB,MAAM,KAAK,8BAA8B,KAAK,SAAS;AAC7E,YAAM,uBAAmB,2BAAY,SAAS,aAAa,CAAC;AAC5D,UAAG,kBAAiB;AAChB,cAAM,UAAU,MAAM,KAAK,0BAA0B,gBAAgB;AACrE,eAAO;AAAA,MACX,OACI;AACA,aAAK,IAAI,MAAM,iEAAiE;AAAA,MACpF;AAAA,IACJ,QACA;AACI,WAAK,IAAI,MAAM,oDAAoD;AAAA,IACvE;AAAA,EACJ;AAAA,EAEA,MAAc,0BAA0B,YAAgD;AACpF,UAAM,UAAU,KAAK,eAAe,KAAK,OAAG,EAAE,cAAc,UAAU;AACtE,WAAO;AAAA,EACX;AAAA,EAEQ,8BAA8B,KAAuB,eAA6B;AACtF,UAAM,YAAY,IAAI,QAAQ;AAC9B,WAAO;AAAA,EACX;AAAA,EAEA,MAAc,iBAAiB,WAAoC;AAC/D,QAAI,cAAc,KAAK,OAAO,WAAW;AACrC,WAAK,IAAI,MAAM,8BAA8B,SAAS;AAAA,IAE1D,OAAO;AACH,WAAK,IAAI,MAAM,0BAA0B,SAAS;AAAA,IACtD;AACA,UAAM,YAAY,MAAM,KAAK,aAAa,SAAS;AACnD,UAAM,MAAM,MAAM,IAAI,eAAe,WAAW,IAAI;AACpD,UAAM,UAAU,CAAC;AAEjB,QAAI,QAAQ,OAAM,SAAM;AACpB,UAAG,gBAAgB,IAAI,WAAU;AAC7B,gBAAQ,KAAK,KAAK,OAAO;AAAA,MAC7B,OAAK;AACD,gBAAQ,IAAI,yCAAyC;AAAA,MACzD;AAAA,IACJ,CAAC;AACD,cAAU,MAAM;AAChB,WAAO;AAAA,EAEX;AAAA,EAEA,MAAc,aAAa,WAAgD;AACvE,WAAO,MAAM,IAAI,gBAAgB,SAAS;AAAA,EAC9C;AACJ;AAEA,IAAI,OAAO,QAAQ;AAEf,SAAO,UAAU,CAAC,YAAuD,IAAI,6BAA6B,OAAO;AACrH,OAAO;AAEH,GAAC,MAAM,IAAI,6BAA6B,GAAG;AAC/C;",
  "names": ["module", "listeners"]
}
