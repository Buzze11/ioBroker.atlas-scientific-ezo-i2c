{
  "version": 3,
  "sources": ["../../src/devices/ezo-handler-base.ts"],
  "sourcesContent": ["import * as i2c from 'i2c-bus';\r\nimport { EzoDeviceConfig, ImplementationConfigBase } from '../lib/adapter-config';\r\nimport { Polling, PollingCallback } from '../lib/async';\r\nimport { toHexString } from '../lib/shared';\r\nimport { AtlasScientificEzoI2cAdapter} from '../main';\r\nimport { StateValue } from '../lib/state';\r\nimport { EZODevice } from '../atlas-scientific-i2c';\r\n\r\nexport abstract class EzoHandlerBase<T extends EzoDeviceConfig> {\r\n    public readonly type: string;\r\n    public readonly name: string;\r\n    public readonly hexAddress: string;\r\n    public sensor; \r\n\r\n    protected readonly config: T;\r\n    \r\n    private polling?: Polling;\r\n    \r\n    \r\n\r\n    constructor(private readonly deviceConfig: EzoDeviceConfig, protected readonly adapter: AtlasScientificEzoI2cAdapter) {\r\n        if (!deviceConfig.type || !deviceConfig.name) {\r\n            throw new Error('Type and name of device must be specified');\r\n        }\r\n        this.type = deviceConfig.type;\r\n        this.name = deviceConfig.name;\r\n        this.config = deviceConfig[deviceConfig.type] as T;\r\n        this.hexAddress = toHexString(deviceConfig.address);\r\n    }\r\n\r\n    // methods to override\r\n    abstract startAsync(): Promise<void>;\r\n    abstract stopAsync(): Promise<void>;\r\n\r\n    // polling related methods\r\n    protected startPolling(callback: PollingCallback, interval: number, minInterval?: number): void {\r\n        this.stopPolling();\r\n        this.polling = new Polling(callback, this.adapter);\r\n        this.polling.runAsync(interval, minInterval).catch((error) => this.error('Polling error: ' + error));\r\n    }\r\n\r\n    protected stopPolling(): void {\r\n        this.polling?.stop();\r\n    }\r\n\r\n    // adapter methods\r\n    protected async setStateAckAsync<T extends StateValue>(state: string | number | boolean , value: T): Promise<void> {\r\n        await this.adapter.setStateAckAsync(this.hexAddress + '.' + state, value);\r\n    }\r\n\r\n    protected setStateAck<T extends StateValue>(state: string | number, value: T): void {\r\n        this.adapter.setStateAck(this.hexAddress + '.' + state, value);\r\n    }\r\n\r\n    protected getStateValue<T extends StateValue>(state: string | number): T | undefined {\r\n        return this.adapter.getStateValue<T>(this.hexAddress + '.' + state);\r\n    }\r\n\r\n    // logging methods\r\n    protected silly(message: string): void {\r\n        this.adapter.log.silly(`${this.type} ${this.hexAddress}: ${message}`);\r\n    }\r\n\r\n    protected debug(message: string): void {\r\n        this.adapter.log.debug(`${this.type} ${this.hexAddress}: ${message}`);\r\n    }\r\n\r\n    protected info(message: string): void {\r\n        this.adapter.log.info(`${this.type} ${this.hexAddress}: ${message}`);\r\n    }\r\n\r\n    protected warn(message: string): void {\r\n        this.adapter.log.warn(`${this.type} ${this.hexAddress}: ${message}`);\r\n    }\r\n\r\n    protected error(message: string): void {\r\n        this.adapter.log.error(`${this.type} ${this.hexAddress}: ${message}`);\r\n    }\r\n\r\n    // EZO Base functionality\r\n\r\n    public async FindEzoBoard(): Promise<string>{\r\n        try{\r\n            if(this.sensor){\r\n                await (this.sensor as unknown as EZODevice).Find();\r\n                return 'Find Sensor was initiated successfully. Please check for blinking LED';\r\n            }\r\n        }\r\n        catch{\r\n            return 'FindEzoBoard(): Error initiating Find().';\r\n        }\r\n    }\r\n\r\n    public async FactoryReset(): Promise<string>{\r\n        try{\r\n            if(this.sensor){\r\n                await (this.sensor as unknown as EZODevice).Factory();\r\n                return 'Factory Reset was initiated successfully.';\r\n            }\r\n        }\r\n        catch{\r\n            return 'FactoryReset(): Error initiating Factory Reset.';\r\n        }\r\n    }\r\n\r\n    public async ChangeI2CAddress(newAddress: string): Promise<string>{\r\n        try{\r\n            if(this.sensor){\r\n                await (this.sensor as unknown as EZODevice).ChangeI2CAddress(parseInt(newAddress));\r\n                return 'New I2C adress: ' + newAddress + ' was set successfully.';\r\n            }\r\n        }\r\n        catch{\r\n            return 'ChangeI2CAddress(): Error setting new I2C address.';\r\n        }\r\n    }\r\n\r\n    public async SetLed(ledOn: boolean):Promise<string>{\r\n        try{\r\n            this.info('Led Usage: ' + ledOn.toString())\r\n            await (this.sensor as unknown as EZODevice).SetLED(ledOn);\r\n        }\r\n        catch{\r\n            return 'Error occured on setting led usage';\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAAyC;AACzC,oBAA4B;AAKrB,MAAe,eAA0C;AAAA,EAY5D,YAA6B,cAAkD,SAAuC;AAAzF;AAAkD;AAC3E,QAAI,CAAC,aAAa,QAAQ,CAAC,aAAa,MAAM;AAC1C,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,SAAK,OAAO,aAAa;AACzB,SAAK,OAAO,aAAa;AACzB,SAAK,SAAS,aAAa,aAAa;AACxC,SAAK,iBAAa,2BAAY,aAAa,OAAO;AAAA,EACtD;AAAA,EAOU,aAAa,UAA2B,UAAkB,aAA4B;AAC5F,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,qBAAQ,UAAU,KAAK,OAAO;AACjD,SAAK,QAAQ,SAAS,UAAU,WAAW,EAAE,MAAM,CAAC,UAAU,KAAK,MAAM,oBAAoB,KAAK,CAAC;AAAA,EACvG;AAAA,EAEU,cAAoB;AAzClC;AA0CQ,eAAK,YAAL,mBAAc;AAAA,EAClB;AAAA,EAGA,MAAgB,iBAAuC,OAAmC,OAAyB;AAC/G,UAAM,KAAK,QAAQ,iBAAiB,KAAK,aAAa,MAAM,OAAO,KAAK;AAAA,EAC5E;AAAA,EAEU,YAAkC,OAAwB,OAAgB;AAChF,SAAK,QAAQ,YAAY,KAAK,aAAa,MAAM,OAAO,KAAK;AAAA,EACjE;AAAA,EAEU,cAAoC,OAAuC;AACjF,WAAO,KAAK,QAAQ,cAAiB,KAAK,aAAa,MAAM,KAAK;AAAA,EACtE;AAAA,EAGU,MAAM,SAAuB;AACnC,SAAK,QAAQ,IAAI,MAAM,GAAG,KAAK,QAAQ,KAAK,eAAe,SAAS;AAAA,EACxE;AAAA,EAEU,MAAM,SAAuB;AACnC,SAAK,QAAQ,IAAI,MAAM,GAAG,KAAK,QAAQ,KAAK,eAAe,SAAS;AAAA,EACxE;AAAA,EAEU,KAAK,SAAuB;AAClC,SAAK,QAAQ,IAAI,KAAK,GAAG,KAAK,QAAQ,KAAK,eAAe,SAAS;AAAA,EACvE;AAAA,EAEU,KAAK,SAAuB;AAClC,SAAK,QAAQ,IAAI,KAAK,GAAG,KAAK,QAAQ,KAAK,eAAe,SAAS;AAAA,EACvE;AAAA,EAEU,MAAM,SAAuB;AACnC,SAAK,QAAQ,IAAI,MAAM,GAAG,KAAK,QAAQ,KAAK,eAAe,SAAS;AAAA,EACxE;AAAA,EAIA,MAAa,eAA+B;AACxC,QAAG;AACC,UAAG,KAAK,QAAO;AACX,cAAO,KAAK,OAAgC,KAAK;AACjD,eAAO;AAAA,MACX;AAAA,IACJ,QACA;AACI,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAa,eAA+B;AACxC,QAAG;AACC,UAAG,KAAK,QAAO;AACX,cAAO,KAAK,OAAgC,QAAQ;AACpD,eAAO;AAAA,MACX;AAAA,IACJ,QACA;AACI,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAa,iBAAiB,YAAoC;AAC9D,QAAG;AACC,UAAG,KAAK,QAAO;AACX,cAAO,KAAK,OAAgC,iBAAiB,SAAS,UAAU,CAAC;AACjF,eAAO,qBAAqB,aAAa;AAAA,MAC7C;AAAA,IACJ,QACA;AACI,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAa,OAAO,OAA+B;AAC/C,QAAG;AACC,WAAK,KAAK,gBAAgB,MAAM,SAAS,CAAC;AAC1C,YAAO,KAAK,OAAgC,OAAO,KAAK;AAAA,IAC5D,QACA;AACI,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;",
  "names": []
}
