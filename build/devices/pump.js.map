{
  "version": 3,
  "sources": ["../../src/devices/pump.ts"],
  "sourcesContent": ["import { EzoDeviceConfig, ImplementationConfigBase } from '../lib/adapter-config';\r\nimport { Polling } from '../lib/async';\r\nimport { EzoHandlerBase } from './ezo-handler-base';\r\nimport * as ezo from '../atlas-scientific-i2c';\r\n\r\nexport interface PeristalticPumpConfig extends EzoDeviceConfig {\r\n    V_ParamActive?: boolean;\r\n    TV_ParamActive?: boolean;\r\n    ATV_ParamActive?: boolean;\r\n}\r\n\r\nexport default class PeristalticPump extends EzoHandlerBase<PeristalticPumpConfig> {\r\n    sensor = new ezo.Pump(this.adapter.i2cBus, parseInt(this.hexAddress), '', this.adapter);\r\n\r\n    async startAsync(): Promise<void> {\r\n        // Don`t start when Sensor is inactive\r\n        if(!this.config.isActive)\r\n            return;\r\n            \r\n        this.debug('Starting');\r\n        const name = this.config.name || this.name;\r\n        await this.adapter.extendObjectAsync(this.hexAddress, {\r\n            type: 'device',\r\n            common: {\r\n                name: this.hexAddress + ' (' + name + ')',\r\n                role: 'sensor',\r\n            },\r\n            native: this.config as any,\r\n        });\r\n\r\n        await this.CreateObjects();\r\n\r\n        // Read current setup from sensor\r\n         const deviceName: string = await this.sensor.GetName();\r\n         const deviceParameters = await this.sensor.GetParametersEnabled();\r\n        \r\n        // Set Name if not set already\r\n        if(!this.config.name){\r\n            this.info('Devicename is not clear. Clearing Devicename');\r\n            await this.sensor.SetName('');\r\n        }\r\n        else if(this.config.name !== deviceName){\r\n            this.info('Devicenamehas changed. Setting Devicename to: ' + this.config.name)\r\n            await this.sensor.SetName(this.config.name);\r\n        }\r\n        \r\n        // Set reading parameters for DO Reading format related to configuration\r\n        if(this.config.V_ParamActive && !deviceParameters.includes('V')){\r\n            await this.sensor.SetParameters('V', true);\r\n        }\r\n        else if (!this.config.V_ParamActive && deviceParameters.includes('V')){\r\n            await this.sensor.SetParameters('V', false);\r\n        }\r\n        if(this.config.TV_ParamActive && !deviceParameters.includes('TV')){\r\n            await this.sensor.SetParameters('TV', true);\r\n        }\r\n        else if (!this.config.TV_ParamActive && deviceParameters.includes('TV')){\r\n            await this.sensor.SetParameters('TV', false);\r\n        }\r\n        if(this.config.ATV_ParamActive && !deviceParameters.includes('ATV')){\r\n            await this.sensor.SetParameters('ATV', true);\r\n        }\r\n        else if (!this.config.ATV_ParamActive && deviceParameters.includes('ATV')){\r\n            await this.sensor.SetParameters('ATV', false);\r\n        }\r\n\r\n        // Set all State change listeners\r\n        await this.CreateStateChangeListeners();\r\n\r\n        // Set Led usage\r\n        await this.SetLed(this.config.isLedOn);\r\n\r\n        // If a polling interval was set, initialize polling\r\n        if (!!this.config.pollingInterval && this.config.pollingInterval > 0) {\r\n            this.startPolling(async () => await this.GetAllReadings(), this.config.pollingInterval, 5000);\r\n        }\r\n    }\r\n    \r\n    async CreateStateChangeListeners(): Promise<void>{\r\n\r\n        // this.adapter.addStateChangeListener(this.hexAddress + '.Temperature_compensation', async (_oldValue, _newValue) => {\r\n        //     this.SetTemperatureCompensation(_newValue.toString());\r\n        // });\r\n    }\r\n\r\n    async CreateObjects(): Promise<void>{\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Devicestatus', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'Pump'),\r\n                type: 'string',\r\n                role: 'info.status',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Pump_Voltage', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'Pump'),\r\n                type: 'string',\r\n                role: 'value',\r\n                unit: 'V',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Dispensed_Volume', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'Pump'),\r\n                type: 'string',\r\n                role: 'value',\r\n                unit: 'ml',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Total_Dispensed_Volume', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'Pump'),\r\n                type: 'string',\r\n                role: 'value',\r\n                unit: 'ml',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'abs_Total_Dispensed_Volume', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'Pump'),\r\n                type: 'string',\r\n                role: 'value',\r\n                unit: 'ml',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Info', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'Pump'),\r\n                type: 'string',\r\n                role: 'info.sensor',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Led_on', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'Pump'),\r\n                type: 'boolean',\r\n                role: 'value',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Devicename', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'Pump'),\r\n                type: 'string',\r\n                role: 'info.name',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'IsCalibrated', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'Pump'),\r\n                type: 'string',\r\n                role: 'value',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Parameters_enabled', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'Pump'),\r\n                type: 'string',\r\n                role: 'value',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Pump_Paused', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'Pump'),\r\n                type: 'boolean',\r\n                role: 'value',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n    }\r\n\r\n    async stopAsync(): Promise<void> {\r\n        this.debug('Stopping');\r\n        this.stopPolling();\r\n    }\r\n\r\n    async GetAllReadings(): Promise<void>{\r\n        try{\r\n            if(this.sensor != null){\r\n                const ds = await this.sensor.GetDeviceStatus();\r\n                await this.setStateAckAsync('Devicestatus', ds);\r\n\r\n                const dv = await this.sensor.GetReading();\r\n                await this.setStateAckAsync('Dispensed_Volume', dv);\r\n\r\n                const info = await this.sensor.GetInfo();\r\n                await this.setStateAckAsync('Info', info);\r\n\r\n                const useLed = await this.sensor.GetLED();\r\n                await this.setStateAckAsync('Led_on', useLed);\r\n\r\n                const name = await this.sensor.GetName();\r\n                await this.setStateAckAsync('Devicename', name);\r\n\r\n                const ic = await this.sensor.isCalibrated();\r\n                await this.setStateAckAsync('IsCalibrated', ic);\r\n\r\n                const tdv = await this.sensor.GetTotalDispensedVolume(false);\r\n                await this.setStateAckAsync('Total_Dispensed_Volume', tdv);\r\n\r\n                const abs_tdv = await this.sensor.GetTotalDispensedVolume(true);\r\n                await this.setStateAckAsync('abs_Total_Dispensed_Volume', abs_tdv);\r\n\r\n                const pe = await this.sensor.GetParametersEnabled();\r\n                await this.setStateAckAsync('Parameters_enabled', pe);\r\n\r\n                const pv = await this.sensor.GetPumpVoltage();\r\n                await this.setStateAckAsync('Pump_Voltage', pv);\r\n                \r\n                const ip = await this.sensor.IsPaused();\r\n                await this.setStateAckAsync('Pump_Paused', ip);\r\n\r\n            }\r\n        }\r\n        catch{}\r\n    }\r\n\r\n    public async DoCalibration(calibrationtype:string, Volume:string):Promise<string>{\r\n        try{\r\n            this.info('Calibrationtype: ' + calibrationtype);\r\n            switch(calibrationtype){\r\n                case 'Clear':\r\n                    await this.sensor.ClearCalibration();\r\n                    return 'Pump Calibration was cleared successfully';\r\n                    break;\r\n                case 'Standard':\r\n                    await this.sensor.Calibrate(Volume);\r\n                    return 'Pump Calibration was done successfully';\r\n                    break;\r\n            }\r\n           \r\n        }\r\n        catch{\r\n            return 'Error occured on Pump Calibration. Calibration Task failed';\r\n        }\r\n    }\r\n\r\n    // public async SetTemperatureCompensation(compensationValue:string):Promise<string>{\r\n    //     try{\r\n    //         this.info('Temperaturecompensation: ' + compensationValue);\r\n    //         await this.sensor.SetTemperatureCompensation(parseFloat(compensationValue));\r\n    //     }\r\n    //     catch{\r\n    //         return 'Error occured on setting temperature compensation';\r\n    //     }\r\n    // }\r\n\r\n    \r\n}\r\n"],
  "mappings": "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",
  "names": []
}
