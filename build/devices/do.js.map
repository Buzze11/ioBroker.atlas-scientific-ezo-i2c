{
  "version": 3,
  "sources": ["../../src/devices/do.ts"],
  "sourcesContent": ["import { EZODevice } from '../atlas-scientific-i2c';\r\nimport { EzoDeviceConfig, ImplementationConfigBase } from '../lib/adapter-config';\r\nimport { Polling } from '../lib/async';\r\nimport { EzoHandlerBase } from './ezo-handler-base';\r\nimport * as ezo from '../atlas-scientific-i2c';\r\nimport { StateValue } from '../lib/state';\r\n\r\nexport interface DOConfig extends EzoDeviceConfig {\r\n    mgParamActive?: boolean;\r\n    percentParamActive?: boolean;\r\n    isPpt?: boolean;\r\n}\r\n\r\nexport default class DO extends EzoHandlerBase<DOConfig> {\r\n    sensor = new ezo.DO(this.adapter.i2cBus, parseInt(this.hexAddress), '');\r\n\r\n    async startAsync(): Promise<void> {\r\n        // Don`t start when Sensor is inactive\r\n        if(!this.config.isActive)\r\n            return;\r\n\r\n        this.debug('Starting');\r\n        const name = this.config.name || this.name;\r\n        await this.adapter.extendObjectAsync(this.hexAddress, {\r\n            type: 'device',\r\n            common: {\r\n                name: this.hexAddress + ' (' + name + ')',\r\n                role: 'sensor',\r\n            },\r\n            native: this.config as any,\r\n        });\r\n\r\n        await this.CreateObjects();\r\n        \r\n        // Read current setup from sensor\r\n        const deviceParameters = await this.sensor.GetParametersEnabled();\r\n        const deviceName: string = await this.sensor.GetName();\r\n        \r\n        // Set Name if not set already\r\n        if(!this.config.name){\r\n            this.info('Devicename is not clear. Clearing Devicename');\r\n            await this.sensor.SetName('');\r\n        }\r\n        else if(this.config.name !== deviceName){\r\n            this.info('Devicenamehas changed. Setting Devicename to: ' + this.config.name)\r\n            await this.sensor.SetName(this.config.name);\r\n        }     \r\n\r\n        // Set reading parameters for DO Reading format related to configuration\r\n        if(this.config.mgParamActive && !deviceParameters.includes('MG')){\r\n            await this.sensor.SetParameter('MG', true);\r\n        }\r\n        else if (!this.config.mgParamActive && deviceParameters.includes('MG')){\r\n            await this.sensor.SetParameter('MG', false);\r\n        }\r\n        if(this.config.percentParamActive && !deviceParameters.includes('%')){\r\n            await this.sensor.SetParameter('%', true);\r\n        }\r\n        else if (!this.config.percentParamActive && deviceParameters.includes('%')){\r\n            await this.sensor.SetParameter('%', false);\r\n        }\r\n\r\n        // Set Led usage\r\n        await this.SetLed(this.config.isLedOn);\r\n        \r\n\r\n        // Set all State change listeners\r\n        await this.CreateStateChangeListeners();\r\n\r\n        // If active and polling interval was set, initialize polling\r\n        if (this.config.isActive && !!this.config.pollingInterval && this.config.pollingInterval > 0) {\r\n            this.startPolling(async () => await this.GetAllReadings(), this.config.pollingInterval, 5000);\r\n        }\r\n        \r\n    }\r\n    \r\n\r\n    async CreateStateChangeListeners(): Promise<void>{\r\n\r\n        this.adapter.addStateChangeListener(this.hexAddress + '.Temperature_compensation(Celsius)', async (_oldValue, _newValue) => {\r\n            this.SetTemperatureCompensation(_newValue.toString());\r\n        });\r\n\r\n        this.adapter.addStateChangeListener(this.hexAddress + '.Salinity_compensation', async (_oldValue, _newValue) => {\r\n            const sc = await this.sensor.GetSalinityCompensation();\r\n            if(sc[1]== 'ppt'){\r\n                this.SetSalinityCompensation(_newValue.toString(), 'true');\r\n            }\r\n            else{\r\n                this.SetSalinityCompensation(_newValue.toString(), 'false');\r\n            }\r\n        });\r\n\r\n        this.adapter.addStateChangeListener(this.hexAddress + '.Pressure_compensation(kPa)', async (_oldValue, _newValue) => {\r\n            this.SetPressureCompensation(_newValue.toString());\r\n        });\r\n\r\n    }\r\n\r\n\r\n    async CreateObjects(): Promise<void>{\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Device_Status', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'DO'),\r\n                type: 'string',\r\n                role: 'value',\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Dissolved_Oxygen(related_parameters_enabled)', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'DO'),\r\n                type: 'string',\r\n                role: 'value',\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Temperature_compensation(Celsius)', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'DO'),\r\n                type: 'number',\r\n                role: 'value',\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Salinity_compensation', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'DO'),\r\n                type: 'number',\r\n                role: 'value',\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Salinity_compensation_ispPt', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name),\r\n                type: 'boolean',\r\n                role: 'value',\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Pressure_compensation(kPa)', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'DO'),\r\n                type: 'number',\r\n                role: 'value',\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Parameters_enabled', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'DO'),\r\n                type: 'string',\r\n                role: 'value',\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Info', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'DO'),\r\n                type: 'string',\r\n                role: 'value',\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Led_on', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'DO'),\r\n                type: 'boolean',\r\n                role: 'value',\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Devicename', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'DO'),\r\n                type: 'string',\r\n                role: 'value',\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'IsCalibrated', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'DO'),\r\n                type: 'string',\r\n                role: 'value',\r\n            },\r\n            //native: any\r\n        });\r\n        \r\n    }\r\n\r\n    async stopAsync(): Promise<void> {\r\n        this.debug('Stopping');\r\n        this.stopPolling();\r\n    }\r\n\r\n    async GetAllReadings(): Promise<void>{\r\n        try{\r\n            if(this.sensor != null){\r\n                const ds = await this.sensor.GetDeviceStatus();\r\n                await this.setStateAckAsync('Device_Status', ds);\r\n\r\n                const ox = await this.sensor.GetReading();\r\n                await this.setStateAckAsync('Dissolved_Oxygen(related_parameters_enabled)', ox);\r\n\r\n                const tc = await this.sensor.GetTemperatureCompensation();\r\n                await this.setStateAckAsync('Temperature_compensation(Celsius)', parseFloat(tc));\r\n\r\n                const sc = await this.sensor.GetSalinityCompensation();\r\n                await this.setStateAckAsync('Salinity_compensation', parseFloat(sc[0]));\r\n                await this.setStateAckAsync('Salinity_compensation_ispPt', sc[1] == 'ppt');\r\n                \r\n                const pc = await this.sensor.GetPressureCompensation();\r\n                await this.setStateAckAsync('Pressure_compensation(kPa)', parseFloat(pc));\r\n\r\n                const pe = await this.sensor.GetParametersEnabled();\r\n                await this.setStateAckAsync('Parameters_enabled', pe);\r\n\r\n                const info = await this.sensor.GetInfo();\r\n                await this.setStateAckAsync('Info', info);\r\n\r\n                const useLed = await this.sensor.GetLED();\r\n                await this.setStateAckAsync('Led_on', useLed);\r\n\r\n                const name = await this.sensor.GetName();\r\n                await this.setStateAckAsync('Devicename', name);\r\n\r\n                const ic = await this.sensor.IsCalibrated();\r\n                await this.setStateAckAsync('IsCalibrated', ic);\r\n            }\r\n        }\r\n        catch{\r\n        }\r\n    }\r\n\r\n    public async DoCalibration(calibrationtype:string):Promise<string>{\r\n        try{\r\n            this.info('Calibrationtype: ' + calibrationtype);\r\n            switch(calibrationtype){\r\n                case 'Clear':\r\n                    await this.sensor.ClearCalibration();\r\n                    return 'DO Calibration was cleared successfully';\r\n                    break;\r\n                case 'Atmospheric':\r\n                    await this.sensor.CalibrateAtmosphericOxygen();\r\n                    return 'Atmospheric DO Calibration was done successfully';\r\n                    break;\r\n                case '0DO':\r\n                    await this.sensor.Calibrate0DissolvedOxygen();\r\n                    return '0DO Calibration was done successfully';\r\n                    break;\r\n            }\r\n        }\r\n        catch{\r\n            return 'Error occured on DO Calibration. Calibration Task failed';\r\n        }\r\n    }\r\n\r\n    public async SetTemperatureCompensation(compensationValue:string):Promise<string>{\r\n        try{\r\n            this.info('Temperaturecompensation: ' + compensationValue);\r\n            await this.sensor.SetTemperatureCompensation(parseFloat(compensationValue));\r\n        }\r\n        catch{\r\n            return 'Error occured on setting temperature compensation';\r\n        }\r\n    }\r\n\r\n    public async SetPressureCompensation(compensationValue:string):Promise<string>{\r\n        try{\r\n            this.info('Pressurecompensation: ' + compensationValue);\r\n            await this.sensor.SetPressureCompensation(compensationValue);\r\n        }\r\n        catch{\r\n            return 'Error occured on setting pressure compensation';\r\n        }\r\n    }\r\n\r\n    public async SetSalinityCompensation(compensationValue:string, isPpt: string):Promise<string>{\r\n        try{\r\n            this.info('Salinitycompensation: ' + compensationValue + ' isPpt: ' + isPpt)\r\n            if(isPpt.includes('true')){\r\n                await this.sensor.SetSalinityCompensation(parseFloat(compensationValue), true);\r\n            }\r\n            else{\r\n                await this.sensor.SetSalinityCompensation(parseFloat(compensationValue), false);\r\n            }\r\n        }\r\n        catch{\r\n            return 'Error occured on setting Salinity_compensation';\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"],
  "mappings": "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",
  "names": []
}
