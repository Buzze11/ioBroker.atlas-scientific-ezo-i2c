{
  "version": 3,
  "sources": ["../../src/devices/prs.ts"],
  "sourcesContent": ["import { EzoDeviceConfig, ImplementationConfigBase } from '../lib/adapter-config';\r\nimport { EzoHandlerBase } from './ezo-handler-base';\r\nimport * as ezo from '../atlas-scientific-i2c';\r\n\r\nexport interface PRSConfig extends EzoDeviceConfig {\r\n    psiParamActive?: boolean;\r\n    atmParamActive?: boolean;\r\n    barParamActive?: boolean;\r\n    kPaParamActive?: boolean;\r\n    inh2oParamActive?: boolean;\r\n    cmh2oParamActive?: boolean;\r\n    alarmThreshold: number,\r\n    alarmTolerance: number,\r\n    alarmActive: boolean,\r\n}\r\n\r\nexport default class PRS extends EzoHandlerBase<PRSConfig> {\r\n    sensor = new ezo.PRS(this.adapter.i2cBus, parseInt(this.hexAddress), '', this.adapter);\r\n\r\n    async startAsync(): Promise<void> {\r\n        // Don`t start when Sensor is inactive\r\n        if(!this.config.isActive)\r\n            return;\r\n            \r\n        this.debug('Starting');\r\n        const name = this.config.name || this.name;\r\n        await this.adapter.extendObjectAsync(this.hexAddress, {\r\n            type: 'device',\r\n            common: {\r\n                name: this.hexAddress + ' (' + name + ')',\r\n                role: 'sensor',\r\n            },\r\n            native: this.config as any,\r\n        });\r\n\r\n        await this.CreateObjects();\r\n\r\n        // Read current unit setup from sensor\r\n        const deviceParameters = await this.sensor.ReadPressureUnits();\r\n        await this.SetUnits(deviceParameters);\r\n\r\n        const deviceName: string = await this.sensor.GetName();\r\n        \r\n        // Set Name if not set already\r\n        if(!this.config.name){\r\n            this.info('Devicename is not clear. Clearing Devicename');\r\n            await this.sensor.SetName('');\r\n        }\r\n        else if(this.config.name != deviceName){\r\n            this.info('Devicename has changed. Setting Devicename to: ' + this.config.name)\r\n            await this.sensor.SetName(this.config.name);\r\n        }\r\n\r\n        // Init state objects which are not read from sensor (config objects)\r\n        await this.InitNonReadStateValues();\r\n\r\n        // Set Alarm Config\r\n        await this.SetAlarmConfig(this.config.alarmActive, this.config.alarmThreshold, this.config.alarmTolerance);\r\n       \r\n        // Set all State change listeners\r\n        await this.CreateStateChangeListeners();\r\n\r\n        // Set Led usage\r\n        await this.SetLed(this.config.isLedOn);\r\n\r\n        // If a polling interval was set, initialize polling\r\n        if (!!this.config.pollingInterval && this.config.pollingInterval > 0) {\r\n            this.startPolling(async () => await this.GetAllReadings(), this.config.pollingInterval, 5000);\r\n        }\r\n    }\r\n    \r\n    async CreateStateChangeListeners(): Promise<void>{\r\n\r\n        this.adapter.addStateChangeListener(this.hexAddress + '.IsPaused', async (_oldValue, _newValue) => {\r\n            this.SetPausedFlag(_newValue.toString());\r\n        });\r\n        this.adapter.addStateChangeListener(this.hexAddress + '.Calibrate_Clear', async (_oldValue, _newValue) => {\r\n            if(_newValue === true){\r\n                this.DoCalibration('Clear', '');\r\n            }\r\n        });\r\n        this.adapter.addStateChangeListener(this.hexAddress + '.Calibrate_Zeropoint', async (_oldValue, _newValue) => {\r\n            if(_newValue.toString() != '')\r\n                this.DoCalibration('Zeropoint','');\r\n        });\r\n        this.adapter.addStateChangeListener(this.hexAddress + '.Calibrate_High', async (_oldValue, _newValue) => {\r\n            if(_newValue.toString() != '')\r\n                this.DoCalibration('High',_newValue.toString());\r\n        });\r\n        this.adapter.addStateChangeListener(this.hexAddress + '.Alarm_enabled', async (_oldValue, _newValue) => {\r\n            if(_newValue != _oldValue){\r\n                this.config.alarmActive = _newValue?true:false;\r\n                await this.SetAlarmConfig(this.config.alarmActive, this.config.alarmThreshold, this.config.alarmTolerance);\r\n            }    \r\n        });\r\n        this.adapter.addStateChangeListener(this.hexAddress + '.Alarm_Threshold', async (_oldValue, _newValue) => {\r\n            if(_newValue != _oldValue){\r\n                this.config.alarmThreshold = parseFloat(_newValue.toString());\r\n                await this.SetAlarmConfig(this.config.alarmActive, this.config.alarmThreshold, this.config.alarmTolerance);\r\n            }\r\n        });\r\n        this.adapter.addStateChangeListener(this.hexAddress + '.Alarm_Tolerance', async (_oldValue, _newValue) => {\r\n            if(_newValue != _oldValue){\r\n                this.config.alarmTolerance = parseFloat(_newValue.toString());\r\n                await this.SetAlarmConfig(this.config.alarmActive, this.config.alarmThreshold, this.config.alarmTolerance);\r\n            }\r\n        });\r\n    }\r\n\r\n    async CreateObjects(): Promise<void>{\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Devicestatus', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'string',\r\n                role: 'info.status',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'IsPaused', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'boolean',\r\n                role: 'switch',\r\n                write: true,\r\n                states: {   true: \"paused\", \r\n                            false: \"unpaused\", \r\n                },\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Pressure_Value', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'string',\r\n                role: 'value',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Info', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'string',\r\n                role: 'info.sensor',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Led_on', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'boolean',\r\n                role: 'value',\r\n                write: false,\r\n                states: {   true: \"on\", \r\n                            false: \"off\", \r\n                },\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Devicename', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'string',\r\n                role: 'info.name',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'IsCalibrated', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'string',\r\n                role: 'value',\r\n                write: false,\r\n                states: {   \"0\": \"uncalibrated\", \r\n                            \"1\": \"only zero point\", \r\n                            \"2\": \"only high point\",\r\n                            \"3\": \"zero point and high point\", \r\n                        },\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Calibrate_Clear', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'boolean',\r\n                role: 'switch',\r\n                write: true,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Calibrate_Zeropoint', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'boolean',\r\n                role: 'switch',\r\n                write: true,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Calibrate_High', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'string',\r\n                role: 'value',\r\n                write: true,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Units_enabled', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'string',\r\n                role: 'value',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Alarm_enabled', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'boolean',\r\n                role: 'switch',\r\n                write: true,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Alarm_Threshold', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'string',\r\n                role: 'value',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Alarm_Tolerance', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'PRS'),\r\n                type: 'string',\r\n                role: 'value',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n    }\r\n\r\n    async InitNonReadStateValues():Promise<string>{\r\n        try{\r\n            await this.setStateAckAsync('IsPaused', this.pausedState);\r\n            await this.setStateAckAsync('Calibrate_Clear', false);\r\n            await this.setStateAckAsync('Calibrate_Zeropoint', false);\r\n            await this.setStateAckAsync('Calibrate_High', '');\r\n            return \"State objects initialized successfully\";\r\n        }\r\n        catch{\r\n            this.error('Error occured on initializing state objects');\r\n        }\r\n    }\r\n\r\n\r\n    async stopAsync(): Promise<void> {\r\n        this.debug('Stopping');\r\n        this.readingActive = false;\r\n        this.stopPolling();\r\n    }\r\n\r\n    async GetAllReadings(): Promise<void>{\r\n        try{\r\n            if(this.sensor != null && this.pausedState === false){\r\n\r\n                this.readingActive = true;\r\n\r\n                const ds = await this.sensor.GetDeviceStatus();\r\n                await this.setStateAckAsync('Devicestatus', ds);\r\n\r\n                const pv = await this.sensor.GetReading();\r\n                await this.setStateAckAsync('Pressure_Value', pv);\r\n\r\n                const info = await this.sensor.GetInfo();\r\n                await this.setStateAckAsync('Info', info);\r\n\r\n                const useLed = await this.sensor.GetLED();\r\n                await this.setStateAckAsync('Led_on', useLed);\r\n\r\n                const name = await this.sensor.GetName();\r\n                await this.setStateAckAsync('Devicename', name);\r\n\r\n                const ic = await this.sensor.IsCalibrated();\r\n                await this.setStateAckAsync('IsCalibrated', ic);\r\n\r\n                const ue = await this.sensor.ReadPressureUnits();\r\n                await this.setStateAckAsync('Units_enabled', ue);\r\n\r\n                const ac = await this.sensor.GetAlarmSetupParameters;\r\n                if(ac?.length === 3){\r\n                    if(ac[0]==='1')\r\n                        await this.setStateAckAsync('Alarm_enabled', true);\r\n                    else if(ac[0]==='0')\r\n                        await this.setStateAckAsync('Alarm_enabled', false);\r\n                    await this.setStateAckAsync('Alarm_Threshold', parseFloat(ac[1]));\r\n                    await this.setStateAckAsync('Alarm_Tolerance', parseFloat(ac[2]));\r\n                }\r\n                \r\n                this.readingActive = false;\r\n            }\r\n        }\r\n        catch{\r\n            this.error('Error occured on getting Device readings');\r\n            this.readingActive = false;\r\n        }\r\n    }\r\n\r\n    public async DoCalibration(calibrationtype:string, Value:string):Promise<string>{\r\n        try{\r\n            this.info('Calibrationtype: ' + calibrationtype);\r\n            \r\n            await this.WaitForFinishedReading();\r\n            \r\n            switch(calibrationtype){\r\n                case 'Clear':\r\n                    await this.sensor.ClearCalibration();\r\n                    await this.setStateAckAsync('Calibrate_Clear', false);\r\n                    return 'PRS Calibration was cleared successfully';\r\n                case 'Zeropoint':\r\n                    await this.sensor.CalibrateZeroPoint();\r\n                    await this.setStateAckAsync('Calibrate_Zeropoint', false);\r\n                    return 'Zeropoint calibration was done successfully';\r\n                case 'High':\r\n                    await this.sensor.CalibrateHigh(parseFloat(Value));\r\n                    await this.setStateAckAsync('Calibrate_High', '');\r\n                    return 'High Calibration was done successfully';\r\n            }\r\n           \r\n        }\r\n        catch{\r\n            return 'Error occured on PRS Calibration. Calibration Task failed';\r\n        }\r\n    }\r\n\r\n    public async SetUnits(activatedUnits: string): Promise<string> {\r\n        // Set reading parameters for DO Reading format related to configuration\r\n\r\n        try{\r\n            const params: string[] = activatedUnits.split(\",\");\r\n\r\n            if(this.config.psiParamActive && !params.includes('psi')){\r\n                await this.sensor.SetPressureUnit('psi', true);\r\n            }\r\n            else if (!this.config.psiParamActive && params.includes('psi')){\r\n                await this.sensor.SetPressureUnit('psi', false);\r\n            }\r\n\r\n            if(this.config.atmParamActive && !params.includes('atm')){\r\n                await this.sensor.SetPressureUnit('atm', true);\r\n            }\r\n            else if (!this.config.atmParamActive && params.includes('atm')){\r\n                await this.sensor.SetPressureUnit('atm', false);\r\n            }\r\n\r\n            if(this.config.barParamActive && !params.includes('bar')){\r\n                await this.sensor.SetPressureUnit('bar', true);\r\n            }\r\n            else if (!this.config.barParamActive && params.includes('bar')){\r\n                await this.sensor.SetPressureUnit('bar', false);\r\n            }\r\n\r\n            if(this.config.kPaParamActive && !params.includes('kPa')){\r\n                await this.sensor.SetPressureUnit('kPa', true);\r\n            }\r\n            else if (!this.config.kPaParamActive && params.includes('kPa')){\r\n                await this.sensor.SetPressureUnit('kPa', false);\r\n            }\r\n            \r\n            if(this.config.inh2oParamActive && !params.includes('inh2o')){\r\n                await this.sensor.SetPressureUnit('inh2o', true);\r\n            }\r\n            else if (!this.config.inh2oParamActive && params.includes('inh2o')){\r\n                await this.sensor.SetPressureUnit('inh2o', false);\r\n            }\r\n                        \r\n            if(this.config.cmh2oParamActive && !params.includes('cmh2o')){\r\n                await this.sensor.SetPressureUnit('cmh2o', true);\r\n            }\r\n            else if (!this.config.cmh2oParamActive && params.includes('cmh2o')){\r\n                await this.sensor.SetPressureUnit('cmh2o', false);\r\n            }\r\n            return 'Successfully configured PRS parameters';\r\n        }\r\n        catch{\r\n            return 'Error occured on setting PRS parameters';\r\n        }\r\n    }\r\n\r\n    public async SetAlarmConfig(enabled: boolean, threshold:number, tolerance:number): Promise<string> {\r\n        // Set alarm configuration from configuration\r\n\r\n        try{\r\n            await this.sensor.SetAlarm(enabled, threshold, tolerance)\r\n            \r\n            return 'Successfully configured PRS alarm';\r\n        }\r\n        catch{\r\n            return 'Error occured on configuring PRS alarm';\r\n        }\r\n    }\r\n\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,8BAA+B;AAC/B,UAAqB;AAcrB,MAAO,YAA0B,uCAA0B;AAAA,EAA3D;AAAA;AACI,kBAAS,IAAI,IAAI,IAAI,KAAK,QAAQ,QAAQ,SAAS,KAAK,UAAU,GAAG,IAAI,KAAK,OAAO;AAAA;AAAA,EAErF,MAAM,aAA4B;AAE9B,QAAG,CAAC,KAAK,OAAO;AACZ;AAEJ,SAAK,MAAM,UAAU;AACrB,UAAM,OAAO,KAAK,OAAO,QAAQ,KAAK;AACtC,UAAM,KAAK,QAAQ,kBAAkB,KAAK,YAAY;AAAA,MAClD,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,OAAO;AAAA,QACtC,MAAM;AAAA,MACV;AAAA,MACA,QAAQ,KAAK;AAAA,IACjB,CAAC;AAED,UAAM,KAAK,cAAc;AAGzB,UAAM,mBAAmB,MAAM,KAAK,OAAO,kBAAkB;AAC7D,UAAM,KAAK,SAAS,gBAAgB;AAEpC,UAAM,aAAqB,MAAM,KAAK,OAAO,QAAQ;AAGrD,QAAG,CAAC,KAAK,OAAO,MAAK;AACjB,WAAK,KAAK,8CAA8C;AACxD,YAAM,KAAK,OAAO,QAAQ,EAAE;AAAA,IAChC,WACQ,KAAK,OAAO,QAAQ,YAAW;AACnC,WAAK,KAAK,oDAAoD,KAAK,OAAO,IAAI;AAC9E,YAAM,KAAK,OAAO,QAAQ,KAAK,OAAO,IAAI;AAAA,IAC9C;AAGA,UAAM,KAAK,uBAAuB;AAGlC,UAAM,KAAK,eAAe,KAAK,OAAO,aAAa,KAAK,OAAO,gBAAgB,KAAK,OAAO,cAAc;AAGzG,UAAM,KAAK,2BAA2B;AAGtC,UAAM,KAAK,OAAO,KAAK,OAAO,OAAO;AAGrC,QAAI,CAAC,CAAC,KAAK,OAAO,mBAAmB,KAAK,OAAO,kBAAkB,GAAG;AAClE,WAAK,aAAa,YAAY,MAAM,KAAK,eAAe,GAAG,KAAK,OAAO,iBAAiB,GAAI;AAAA,IAChG;AAAA,EACJ;AAAA,EAEA,MAAM,6BAA2C;AAE7C,SAAK,QAAQ,uBAAuB,KAAK,aAAa,aAAa,OAAO,WAAW,cAAc;AAC/F,WAAK,cAAc,UAAU,SAAS,CAAC;AAAA,IAC3C,CAAC;AACD,SAAK,QAAQ,uBAAuB,KAAK,aAAa,oBAAoB,OAAO,WAAW,cAAc;AACtG,UAAG,cAAc,MAAK;AAClB,aAAK,cAAc,SAAS,EAAE;AAAA,MAClC;AAAA,IACJ,CAAC;AACD,SAAK,QAAQ,uBAAuB,KAAK,aAAa,wBAAwB,OAAO,WAAW,cAAc;AAC1G,UAAG,UAAU,SAAS,KAAK;AACvB,aAAK,cAAc,aAAY,EAAE;AAAA,IACzC,CAAC;AACD,SAAK,QAAQ,uBAAuB,KAAK,aAAa,mBAAmB,OAAO,WAAW,cAAc;AACrG,UAAG,UAAU,SAAS,KAAK;AACvB,aAAK,cAAc,QAAO,UAAU,SAAS,CAAC;AAAA,IACtD,CAAC;AACD,SAAK,QAAQ,uBAAuB,KAAK,aAAa,kBAAkB,OAAO,WAAW,cAAc;AACpG,UAAG,aAAa,WAAU;AACtB,aAAK,OAAO,cAAc,YAAU,OAAK;AACzC,cAAM,KAAK,eAAe,KAAK,OAAO,aAAa,KAAK,OAAO,gBAAgB,KAAK,OAAO,cAAc;AAAA,MAC7G;AAAA,IACJ,CAAC;AACD,SAAK,QAAQ,uBAAuB,KAAK,aAAa,oBAAoB,OAAO,WAAW,cAAc;AACtG,UAAG,aAAa,WAAU;AACtB,aAAK,OAAO,iBAAiB,WAAW,UAAU,SAAS,CAAC;AAC5D,cAAM,KAAK,eAAe,KAAK,OAAO,aAAa,KAAK,OAAO,gBAAgB,KAAK,OAAO,cAAc;AAAA,MAC7G;AAAA,IACJ,CAAC;AACD,SAAK,QAAQ,uBAAuB,KAAK,aAAa,oBAAoB,OAAO,WAAW,cAAc;AACtG,UAAG,aAAa,WAAU;AACtB,aAAK,OAAO,iBAAiB,WAAW,UAAU,SAAS,CAAC;AAC5D,cAAM,KAAK,eAAe,KAAK,OAAO,aAAa,KAAK,OAAO,gBAAgB,KAAK,OAAO,cAAc;AAAA,MAC7G;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,gBAA8B;AAChC,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,iBAAsB;AAAA,MACzE,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IAEJ,CAAC;AACD,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,aAAkB;AAAA,MACrE,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,UAAI,MAAM;AAAA,UACN,OAAO;AAAA,QACnB;AAAA,MACJ;AAAA,IAEJ,CAAC;AACD,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,mBAAwB;AAAA,MAC3E,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IAEJ,CAAC;AACD,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,SAAc;AAAA,MACjE,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IAEJ,CAAC;AACD,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,WAAgB;AAAA,MACnE,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,UAAI,MAAM;AAAA,UACN,OAAO;AAAA,QACnB;AAAA,MACJ;AAAA,IAEJ,CAAC;AACD,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,eAAoB;AAAA,MACvE,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IAEJ,CAAC;AACD,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,iBAAsB;AAAA,MACzE,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,UAAI,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,QACT;AAAA,MACZ;AAAA,IAEJ,CAAC;AACD,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,oBAAyB;AAAA,MAC5E,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IAEJ,CAAC;AACD,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,wBAA6B;AAAA,MAChF,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IAEJ,CAAC;AACD,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,mBAAwB;AAAA,MAC3E,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IAEJ,CAAC;AACD,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,kBAAuB;AAAA,MAC1E,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IAEJ,CAAC;AACD,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,kBAAuB;AAAA,MAC1E,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IAEJ,CAAC;AACD,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,oBAAyB;AAAA,MAC5E,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IAEJ,CAAC;AACD,UAAM,KAAK,QAAQ,kBAAkB,KAAK,aAAa,oBAAyB;AAAA,MAC5E,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,KAAK,aAAa,OAAO,KAAK,OAAO,QAAQ;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IAEJ,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,yBAAwC;AAC1C,QAAG;AACC,YAAM,KAAK,iBAAiB,YAAY,KAAK,WAAW;AACxD,YAAM,KAAK,iBAAiB,mBAAmB,KAAK;AACpD,YAAM,KAAK,iBAAiB,uBAAuB,KAAK;AACxD,YAAM,KAAK,iBAAiB,kBAAkB,EAAE;AAChD,aAAO;AAAA,IACX,QACA;AACI,WAAK,MAAM,6CAA6C;AAAA,IAC5D;AAAA,EACJ;AAAA,EAGA,MAAM,YAA2B;AAC7B,SAAK,MAAM,UAAU;AACrB,SAAK,gBAAgB;AACrB,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,MAAM,iBAA+B;AACjC,QAAG;AACC,UAAG,KAAK,UAAU,QAAQ,KAAK,gBAAgB,OAAM;AAEjD,aAAK,gBAAgB;AAErB,cAAM,KAAK,MAAM,KAAK,OAAO,gBAAgB;AAC7C,cAAM,KAAK,iBAAiB,gBAAgB,EAAE;AAE9C,cAAM,KAAK,MAAM,KAAK,OAAO,WAAW;AACxC,cAAM,KAAK,iBAAiB,kBAAkB,EAAE;AAEhD,cAAM,OAAO,MAAM,KAAK,OAAO,QAAQ;AACvC,cAAM,KAAK,iBAAiB,QAAQ,IAAI;AAExC,cAAM,SAAS,MAAM,KAAK,OAAO,OAAO;AACxC,cAAM,KAAK,iBAAiB,UAAU,MAAM;AAE5C,cAAM,OAAO,MAAM,KAAK,OAAO,QAAQ;AACvC,cAAM,KAAK,iBAAiB,cAAc,IAAI;AAE9C,cAAM,KAAK,MAAM,KAAK,OAAO,aAAa;AAC1C,cAAM,KAAK,iBAAiB,gBAAgB,EAAE;AAE9C,cAAM,KAAK,MAAM,KAAK,OAAO,kBAAkB;AAC/C,cAAM,KAAK,iBAAiB,iBAAiB,EAAE;AAE/C,cAAM,KAAK,MAAM,KAAK,OAAO;AAC7B,aAAG,yBAAI,YAAW,GAAE;AAChB,cAAG,GAAG,OAAK;AACP,kBAAM,KAAK,iBAAiB,iBAAiB,IAAI;AAAA,mBAC7C,GAAG,OAAK;AACZ,kBAAM,KAAK,iBAAiB,iBAAiB,KAAK;AACtD,gBAAM,KAAK,iBAAiB,mBAAmB,WAAW,GAAG,EAAE,CAAC;AAChE,gBAAM,KAAK,iBAAiB,mBAAmB,WAAW,GAAG,EAAE,CAAC;AAAA,QACpE;AAEA,aAAK,gBAAgB;AAAA,MACzB;AAAA,IACJ,QACA;AACI,WAAK,MAAM,0CAA0C;AACrD,WAAK,gBAAgB;AAAA,IACzB;AAAA,EACJ;AAAA,EAEA,MAAa,cAAc,iBAAwB,OAA6B;AAC5E,QAAG;AACC,WAAK,KAAK,sBAAsB,eAAe;AAE/C,YAAM,KAAK,uBAAuB;AAElC,cAAO,iBAAgB;AAAA,QACnB,KAAK;AACD,gBAAM,KAAK,OAAO,iBAAiB;AACnC,gBAAM,KAAK,iBAAiB,mBAAmB,KAAK;AACpD,iBAAO;AAAA,QACX,KAAK;AACD,gBAAM,KAAK,OAAO,mBAAmB;AACrC,gBAAM,KAAK,iBAAiB,uBAAuB,KAAK;AACxD,iBAAO;AAAA,QACX,KAAK;AACD,gBAAM,KAAK,OAAO,cAAc,WAAW,KAAK,CAAC;AACjD,gBAAM,KAAK,iBAAiB,kBAAkB,EAAE;AAChD,iBAAO;AAAA,MACf;AAAA,IAEJ,QACA;AACI,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAa,SAAS,gBAAyC;AAG3D,QAAG;AACC,YAAM,SAAmB,eAAe,MAAM,GAAG;AAEjD,UAAG,KAAK,OAAO,kBAAkB,CAAC,OAAO,SAAS,KAAK,GAAE;AACrD,cAAM,KAAK,OAAO,gBAAgB,OAAO,IAAI;AAAA,MACjD,WACS,CAAC,KAAK,OAAO,kBAAkB,OAAO,SAAS,KAAK,GAAE;AAC3D,cAAM,KAAK,OAAO,gBAAgB,OAAO,KAAK;AAAA,MAClD;AAEA,UAAG,KAAK,OAAO,kBAAkB,CAAC,OAAO,SAAS,KAAK,GAAE;AACrD,cAAM,KAAK,OAAO,gBAAgB,OAAO,IAAI;AAAA,MACjD,WACS,CAAC,KAAK,OAAO,kBAAkB,OAAO,SAAS,KAAK,GAAE;AAC3D,cAAM,KAAK,OAAO,gBAAgB,OAAO,KAAK;AAAA,MAClD;AAEA,UAAG,KAAK,OAAO,kBAAkB,CAAC,OAAO,SAAS,KAAK,GAAE;AACrD,cAAM,KAAK,OAAO,gBAAgB,OAAO,IAAI;AAAA,MACjD,WACS,CAAC,KAAK,OAAO,kBAAkB,OAAO,SAAS,KAAK,GAAE;AAC3D,cAAM,KAAK,OAAO,gBAAgB,OAAO,KAAK;AAAA,MAClD;AAEA,UAAG,KAAK,OAAO,kBAAkB,CAAC,OAAO,SAAS,KAAK,GAAE;AACrD,cAAM,KAAK,OAAO,gBAAgB,OAAO,IAAI;AAAA,MACjD,WACS,CAAC,KAAK,OAAO,kBAAkB,OAAO,SAAS,KAAK,GAAE;AAC3D,cAAM,KAAK,OAAO,gBAAgB,OAAO,KAAK;AAAA,MAClD;AAEA,UAAG,KAAK,OAAO,oBAAoB,CAAC,OAAO,SAAS,OAAO,GAAE;AACzD,cAAM,KAAK,OAAO,gBAAgB,SAAS,IAAI;AAAA,MACnD,WACS,CAAC,KAAK,OAAO,oBAAoB,OAAO,SAAS,OAAO,GAAE;AAC/D,cAAM,KAAK,OAAO,gBAAgB,SAAS,KAAK;AAAA,MACpD;AAEA,UAAG,KAAK,OAAO,oBAAoB,CAAC,OAAO,SAAS,OAAO,GAAE;AACzD,cAAM,KAAK,OAAO,gBAAgB,SAAS,IAAI;AAAA,MACnD,WACS,CAAC,KAAK,OAAO,oBAAoB,OAAO,SAAS,OAAO,GAAE;AAC/D,cAAM,KAAK,OAAO,gBAAgB,SAAS,KAAK;AAAA,MACpD;AACA,aAAO;AAAA,IACX,QACA;AACI,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAa,eAAe,SAAkB,WAAkB,WAAmC;AAG/F,QAAG;AACC,YAAM,KAAK,OAAO,SAAS,SAAS,WAAW,SAAS;AAExD,aAAO;AAAA,IACX,QACA;AACI,aAAO;AAAA,IACX;AAAA,EACJ;AAEJ;",
  "names": []
}
