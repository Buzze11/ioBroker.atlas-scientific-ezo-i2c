{
  "version": 3,
  "sources": ["../../src/devices/rtd.ts"],
  "sourcesContent": ["import { EzoDeviceConfig } from '../lib/adapter-config';\r\nimport { EzoHandlerBase } from './ezo-handler-base';\r\nimport * as ezo from '../atlas-scientific-i2c';\r\n\r\nexport interface RTDConfig extends EzoDeviceConfig {\r\n}\r\n\r\nexport default class RTD extends EzoHandlerBase<RTDConfig> {\r\n    sensor = new ezo.RTD(this.adapter.i2cBus, parseInt(this.hexAddress), '', this.adapter);\r\n\r\n    async startAsync(): Promise<void> {\r\n        // Don`t start when Sensor is inactive\r\n        if(!this.config.isActive)\r\n            return;\r\n            \r\n        this.debug('Starting');\r\n        const name = this.config.name || this.name;\r\n        await this.adapter.extendObjectAsync(this.hexAddress, {\r\n            type: 'device',\r\n            common: {\r\n                name: this.hexAddress + ' (' + name + ')',\r\n                role: 'sensor',\r\n            },\r\n            native: this.config as any,\r\n        });\r\n\r\n        await this.CreateObjects();\r\n\r\n        // Read current setup from sensor\r\n        const deviceName: string = await this.sensor.GetName();\r\n        \r\n        // Set Name if not set already\r\n        if(!this.config.name){\r\n            this.info('Devicename is not clear. Clearing Devicename');\r\n            await this.sensor.SetName('');\r\n        }\r\n        else if(this.config.name !== deviceName){\r\n            this.info('Devicenamehas changed. Setting Devicename to: ' + this.config.name)\r\n            await this.sensor.SetName(this.config.name);\r\n        }\r\n\r\n        // Set all State change listeners\r\n        await this.CreateStateChangeListeners();\r\n\r\n        // Init state objects which are not read from sensor (config objects)\r\n        await this.InitNonReadStateValues();\r\n\r\n        // Set Led usage\r\n        await this.SetLed(this.config.isLedOn);\r\n\r\n        // If a polling interval was set, initialize polling\r\n        if (!!this.config.pollingInterval && this.config.pollingInterval > 0) {\r\n            this.startPolling(async () => await this.GetAllReadings(), this.config.pollingInterval, 5000);\r\n        }\r\n    }\r\n    \r\n    async CreateObjects(): Promise<void>{\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Devicestatus', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'RTD'),\r\n                type: 'string',\r\n                role: 'info.status',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'IsPaused', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'RTD'),\r\n                type: 'boolean',\r\n                role: 'switch',\r\n                write: true,\r\n                states: {   true: \"paused\", \r\n                            false: \"unpaused\", \r\n                },\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Temperature', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'RTD'),\r\n                type: 'string',\r\n                role: 'value.temperature',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Scale', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'RTD'),\r\n                type: 'string',\r\n                role: 'value',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Info', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'RTD'),\r\n                type: 'string',\r\n                role: 'info.sensor',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Led_on', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'RTD'),\r\n                type: 'boolean',\r\n                role: 'value',\r\n                write: false,\r\n                states: {   true: \"on\", \r\n                            false: \"off\", \r\n                },\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Devicename', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'RTD'),\r\n                type: 'string',\r\n                role: 'info.name',\r\n                write: false,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'IsCalibrated', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'RTD'),\r\n                type: 'string',\r\n                role: 'value',\r\n                write: false,\r\n                states: {   \"0\": \"uncalibrated\", \r\n                            \"1\": \"calibrated\", \r\n                },\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Calibrate_Clear', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'RTD'),\r\n                type: 'boolean',\r\n                role: 'switch',\r\n                write: true,\r\n            },\r\n            //native: any\r\n        });\r\n        await this.adapter.extendObjectAsync(this.hexAddress + '.' + 'Calibrate', {\r\n            type: 'state',\r\n            common: {\r\n                name: this.hexAddress + ' ' + (this.config.name || 'RTD'),\r\n                type: 'string',\r\n                role: 'value',\r\n                write: true,\r\n            },\r\n            //native: any\r\n        });\r\n        \r\n    }\r\n\r\n    async CreateStateChangeListeners(): Promise<void>{\r\n        this.adapter.addStateChangeListener(this.hexAddress + '.IsPaused', async (_oldValue, _newValue) => {\r\n            this.SetPausedFlag(_newValue.toString());\r\n        });\r\n        this.adapter.addStateChangeListener(this.hexAddress + '.Calibrate_Clear', async (_oldValue, _newValue) => {\r\n            if(_newValue === true){\r\n                this.DoCalibration('Clear', '0');\r\n            }\r\n        });\r\n        this.adapter.addStateChangeListener(this.hexAddress + '.Calibrate', async (_oldValue, _newValue) => {\r\n            if(_newValue.toString() != '')\r\n                this.DoCalibration('Standard',_newValue.toString());\r\n        });\r\n    }\r\n\r\n    async InitNonReadStateValues():Promise<string>{\r\n        try{\r\n            await this.setStateAckAsync('IsPaused', this.pausedState);\r\n            await this.setStateAckAsync('Calibrate_Clear', false);\r\n            await this.setStateAckAsync('Calibrate', '');\r\n            return \"State objects initialized successfully\";\r\n        }\r\n        catch{\r\n            this.error('Error occured on initializing state objects');\r\n        }\r\n    }\r\n\r\n    async stopAsync(): Promise<void> {\r\n        this.debug('Stopping');\r\n        this.readingActive = false;\r\n        this.stopPolling();\r\n    }\r\n\r\n    async GetAllReadings(): Promise<void>{\r\n        try{\r\n            if(this.sensor != null && this.pausedState === false){\r\n\r\n                this.readingActive = true;\r\n\r\n                const ds = await this.sensor.GetDeviceStatus();\r\n                await this.setStateAckAsync('Devicestatus', ds);\r\n\r\n                const ox = await this.sensor.GetReading();\r\n                await this.setStateAckAsync('Temperature', ox);\r\n\r\n                const info = await this.sensor.GetInfo();\r\n                await this.setStateAckAsync('Info', info);\r\n\r\n                const useLed = await this.sensor.GetLED();\r\n                await this.setStateAckAsync('Led_on', useLed);\r\n\r\n                const name = await this.sensor.GetName();\r\n                await this.setStateAckAsync('Devicename', name);\r\n\r\n                const ic = await this.sensor.IsCalibrated();\r\n                await this.setStateAckAsync('IsCalibrated', ic);\r\n\r\n                const sc = await this.sensor.GetTemperatureScale();\r\n                await this.setStateAckAsync('Scale', sc);\r\n\r\n                this.readingActive = false;\r\n\r\n            }\r\n        }\r\n        catch{\r\n            this.error('Error occured on getting Device readings');\r\n            this.readingActive = false;\r\n        }\r\n    }\r\n\r\n    public async DoCalibration(calibrationtype:string, tempValue:string):Promise<string>{\r\n        try{\r\n            \r\n            await this.WaitForFinishedReading();\r\n\r\n            this.info('Calibrationtype: ' + calibrationtype);\r\n            switch(calibrationtype){\r\n                case 'Clear':\r\n                    await this.sensor.ClearCalibration();\r\n                    await this.setStateAckAsync('Calibrate_Clear', false);\r\n                    return 'Temperature Calibration was cleared successfully';\r\n                    break;\r\n                case 'Standard':\r\n                    await this.sensor.CalibrateTemperature(parseFloat(tempValue));\r\n                    await this.setStateAckAsync('Calibrate', '');\r\n                    return 'Temperature Calibration was done successfully';\r\n                    break;\r\n            }\r\n        }\r\n        catch{\r\n            return 'Error occured on Temperature Calibration. Calibration Task failed';\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
